{
    "items": [
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 76947953,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1692647902,
            "creation_date": 1692643259,
            "body": "Starting with Java 9, the regex engine began supporting variable-length lookbehind. I guess that&#39;s great and all if you want it, but that&#39;s a really good way to make a regex that is vulnerable to ReDOS attacks, or just being accidentally ReDOSsed by ordinary user input.\nFor reasons that are beyond the scope of this question, I am unable to police the regexes that my application is using to the extent that I&#39;d like. We&#39;ve had problems with regexes that wouldn&#39;t even have compiled in ancient versions of Java, but instead are causing application hangs (when a clean failure would have been much preferred).\nI&#39;m guessing the answer is &quot;no&quot;, but is there any way to get like legacy behavior on the Java regex engine, or to otherwise enable stricter checking, so that pathological regexes like this won&#39;t even be compiled by the engine? It would be much better to just fail these regexes, than for it to work most of the time but then if you give it just the right input it hangs.\nEdit to add: So there&#39;s stuff like this open source project that would maybe be something to look at if I decide I need to analyze any new regexes to make sure they aren&#39;t Evil. It would be nice if there was just a &quot;strict&quot; setting on the regex engine or something tho...\n",
            "excerpt": "I guess that&#39;s great <span class=\"highlight\">and</span> all if you want it, but that&#39;s a really good way to make a <span class=\"highlight\">regex</span> that is vulnerable to ReDOS attacks, or just being accidentally ReDOSsed by ordinary user input. &hellip; Edit to add: So there&#39;s stuff like this open source project that would maybe be something to look at if I decide I need to analyze any new regexes to make sure they aren&#39;t <span class=\"highlight\">Evil</span>. &hellip; ",
            "title": "Can Java&#39;s regex engine be made to forbid variable length lookbehind?"
        },
        {
            "tags": [
                "perl",
                "for-loop",
                "numbers",
                "primes"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 33919970,
            "is_answered": false,
            "question_id": 27134252,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1691198495,
            "creation_date": 1448464224,
            "body": "One of Abigail&#39;s .sigs has a regex (!) that determines whether a number is prime:\n\nThat takes about 15 seconds on my system. Of course, as evil-otto points out, there are faster solutions.\nThere is a very good explanation of how the regex works on Neil Kandalgaonkar&#39;s excellent blog1. The workings of Abigail&#39;s marvelous brain are left unexplained.\n\n1). See: Abigail&#39;s regex to test for prime numbers.\nLink uses WayBack which is required. Original reference:\nhttp://neilk.net/blog/2000/06/01/abigails-regex-to-test-for-prime-numbers/\n",
            "excerpt": "Of course, as <span class=\"highlight\">evil</span>-otto points out, there are faster solutions.\nThere is a very good explanation of how the <span class=\"highlight\">regex</span> works on Neil Kandalgaonkar&#39;s excellent blog1. &hellip; See: Abigail&#39;s <span class=\"highlight\">regex</span> to test for prime numbers.\nLink uses WayBack which is required. Original reference:\nhttp://neilk.net/blog/2000/06/01/abigails-<span class=\"highlight\">regex</span>-to-test-for-prime-numbers/ &hellip; ",
            "title": "Prime numbers in perl"
        },
        {
            "tags": [
                "linux",
                "bash",
                "posix"
            ],
            "question_score": 840,
            "is_accepted": false,
            "answer_id": 30515012,
            "is_answered": false,
            "question_id": 8987037,
            "item_type": "answer",
            "score": 262,
            "last_activity_date": 1684502850,
            "creation_date": 1432839590,
            "body": "Kill all processes matching the string &quot;myProcessName&quot;:\n\nSource: http://www.commandlinefu.com/commands/view/1138/ps-ef-grep-process-grep-v-grep-awk-print-2-xargs-kill-9\nWhy &quot;ps pipe kill&quot; from terminal is evil:\nThe Piping of integers you scraped from  to  is bad, and you should feel bad, doubly so if you&#39;re root or a user with elevated privileges, because it doesn&#39;t give your process a chance to cleanly shut down socket connections, clean up temp files, inform its children that it is going away or reset its terminal characteristics.\nInstead send 15, and wait a second or two, and if that doesn&#39;t\nwork, send 2, and if that doesn&#39;t work, send 1.  If that doesn&#39;t,\nREMOVE THE BINARY because the program is badly behaved.\nAs a general principle we don&#39;t use Unix Railgun to trim the hedges.  https://porkmail.org/era/unix/award.html#kill\nExplanation of above command:\n produces a list of process id&#39;s on the computer visible to this user.  The pipe grep filters that down for rows containing that string.  The  says don&#39;t match on the process itself doing the grepping.  The pipe awk print says split the rows on default delimiter whitespace and filter to the second column which is our process id.  The pipe xargs spins up a new process to send all those pid&#39;s to , ending them all.\nWhy  is bad, dangerous, ugly and hackish:\n\nThere&#39;s a small possibility that you will accidentally end the operating system or cause undefined behavior in an unrelated process, leading to whole system instability because  lists thousands of processes, and you can&#39;t be sure some 3rd party process shares your process name, or that in the time between read and execute kill -9, the processid had changed to something else, and now you&#39;ve ended some random necessary process unrelated to yours.\n\nIf the code being force-ended is doing any database ops or secure transactions with low probability race conditions, some fraction of a percent of the time, atomicity of that transaction will be wrecked, producing undefined behavior.  kill -9 takes no prisoners.  If your code is sensitive to this, try replacing the  part with a transmitted flag that requests a graceful shutdown, and only if that request is denied, last-resort to \n\n\nBut, if you understand all the risks and control for them with unique names, and you&#39;re ok with a few dropped transactions or occasional corruption, then 99.9% of the time yer gonna be fine. If there&#39;s a problem, reboot the computer, make sure there aren&#39;t any process collisions.  It&#39;s because of code like this that makes the tech support script: &quot;Have you tried restarting your computer&quot; a level 5 meme.  &quot;A Rogue Robot scraped  to find integers and sent those to , so reboot the computer to clear the problem.\nWhy not just use  which is easier?\nThe above gives me manual control because , , ,  and  are multi-platform standard.  It gives full control to which regex engine to use, which part of the process name to match, handling case sensitivity and exception management.\n\nDoes the same thing for me, but see  has different behaviors, flags and regex engines between variants of Linux, Mac, Zune-Bash and my opensource router.  So yes, put your 35000 Watt Unix-Railgun into the capable hands of pkill to trim the hedges.  See what happens.\nGrepping once\nYou can substitute the  with square brackets around the first letter of the command to kill, which does the same thing and prevents grep from grepping itself, for example:\n\nWhy that works:\nhttps://askubuntu.com/questions/153419/how-does-this-tricky-bracket-expression-in-grep-work\n",
            "excerpt": "It gives full control to which <span class=\"highlight\">regex</span> engine to use, which part of the process name to match, handling case sensitivity <span class=\"highlight\">and</span> exception management.\npkill -f -e -c myProcessName\n\nDoes the same thing for me &hellip; , but see man pkill has different behaviors, flags <span class=\"highlight\">and</span> <span class=\"highlight\">regex</span> engines between variants of Linux, Mac, Zune-Bash <span class=\"highlight\">and</span> my opensource router. &hellip; ",
            "title": "How to kill all processes with a given partial name?"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 16,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 288800,
            "item_type": "question",
            "score": 16,
            "last_activity_date": 1682102164,
            "creation_date": 1226620185,
            "body": "I have this naive regex &quot;&lt;([\\s]|[^&lt;])+?&gt;&quot; (excluding the quotation marks). It seems so\nstraightforward but it is indeed evil when it works against the below HTML text. It sends the Java regular expression engine to an infinite loop.\nI have another regex (&quot;&lt;.+?&gt;&quot;), which does somewhat the same thing, but it doesn&#39;t kill anything. Do you know why this happens?\n\nit even keeps looping with an online Java regex tool (such as www.fileformat.info/tool/regex.htm) or a utility like RegexBuddy.\n",
            "excerpt": "I have this naive <span class=\"highlight\">regex</span> &quot;&lt;([\\s]|[^&lt;])+?&gt;&quot; (excluding the quotation marks). It seems so\nstraightforward but it is indeed <span class=\"highlight\">evil</span> when it works against the below HTML text. &hellip; I have another <span class=\"highlight\">regex</span> (&quot;&lt;.+?&gt;&quot;), which does somewhat the same thing, but it doesn&#39;t kill anything. Do you know why this happens? &hellip; ",
            "title": "Why does this regular expression kill the Java regex engine?"
        },
        {
            "tags": [
                "html",
                "email",
                "jvm",
                "jsoup",
                "conditional-comments"
            ],
            "question_score": 4,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 54694473,
            "item_type": "question",
            "score": 4,
            "last_activity_date": 1679529462,
            "creation_date": 1550160068,
            "body": "I know how terribly wrong it is to (attempt to) parse HTML with Regex, which is why I&#39;m trying really, really hard to avoid it.\n\nI have an app that generates HTML emails. We&#39;re using a big fancy WYSIWYG drop in email editor that takes care of generating responsive emails and also generates the abysmal markup for clients like MS Outlook. It does that last bit using conditional comments, which look something like the following. Note that the  has an  attribute, and wraps the  tag that non-mso clients will see.\n\n\n\nOf course, this is just one of dozens (possibly hundreds?) of possible formattings that we need to work with.\n\nPrior to the introduction of this editor, we asked our customers to generate their own HTML emails with a more rudimentary WYSIWYG HMTL editor; but it was incumbent on them to make responsive templates and test their content in various clients. From their perspective, this new editor is a huge win.\n\nAs we&#39;re sending emails, it&#39;s important to track the link clicks via a tracking link that redirects through to the originally-intended link.\n\nTo date, we&#39;ve used jSoup to parse the email content, looking for any anchor tags and replace their href attribute contents. Because regex html parsing is evil, right?\n\nConditional comments have thrown a wrench in those gears.\n\nBecause they are comments, jSoup ignores them, and clicks from MS Outlook and other clients that handle the  markup haven&#39;t been transformed to go through our link tracker, so the clicks don&#39;t get tracked. This is a problem for us.\n\n\n\nFirst idea: replace the conditional comments with a custom tag\n\nAt first I was hopeful to pre-process the message body before letting jSoup have it. I would replace  with  and  with . This was simple enough to do, even for complex forms of the conditions inside the comments. I used a regex to make some simple replacements:\n\n\n became \n became  \netc\n\n\nNotice that I url-encoded the original comment in its entirety. url-encoding it made sure that I could easily use regex to find my marker comments and transform them back (so that I didn&#39;t have to worry about  inside the &quot;orig&quot; attribute content...\n\nThis started to break down when I realized there were multiple possible ways the comments could be closed. I spent a little bit of time working on a similar approach for the closing tags.\n\n\n became \nsame approach for  and \n\n\nI don&#39;t know if you can have attributes on a closing tag. I never tested it because I had another realization before I got to that point. The realization was that using  wasn&#39;t going to produce desirable output from jSoup because the resulting INPUT would often look like:\n\n\n\nThis is not tidy HTML and jSoup will try to correct it, changing the order of tags to make something that it thinks is more correct. When I realized that, I stopped what I was doing and started thinking about the problem again.\n\n\n\nSecond idea: the same thing, but with comments\n\nIf the (new) problem was that jSoup didn&#39;t like my tag nesting, what if I could expose the HTML from inside the conditional comments as if it weren&#39;t commented out, but keep some markers in as comments that I can later transform back into comments? The goal was to aim at making this:\n\n\n\nThis should parse as fairly tidy HTML, right? So I made the code modifications and gave it a shot.\n\nSadly, the documents that we&#39;re working with are far more complex than the simple example I started from above. Here&#39;s the first few lines of an actual sample document:\n\n\n\nAfter the comment conversion, we&#39;ve effectively dropped an  block into the  block, of which jSoup is decidedly not a fan. This is what I get back for the above input, after converting the conditional comments into my plain marked comments, parsing with jSoup, and then converting my markers back to their conditional comments:\n\n\n\nThere are some big problems here. The  block gets basically immediately closed. The  tag moves up to before the  block, and everything that came after it moved down into the body. This isn&#39;t going to work.\n\n\n\nNow what?\n\nI feel like we&#39;re basically out of options. \n\n\nDo nothing and just don&#39;t count the clicks from MS Outlook/etc clients. In some cases we might be able to detect a click anyway via a downstream conversion on that email. (Even if we don&#39;t have record of you clicking the link, if you made a payment then we know you got there...)\nWe could let our mail provider do the link tracking for us (experimentation required; not positive they would track the  links either). Historically we started this system with a provider that didn&#39;t offer link tracking so we had to roll our own. Current provider offers it, but we&#39;ve got years of existing code and processes that would have to be updated to support this change. We&#39;re keeping it in our back pocket if we can&#39;t figure something else out, but the prospect of changing ships mid-stream is ... not appealing.\nOr lastly... maybe... regex? (/me ducks) We could let jSoup do its thing for the normal HTML, and then use regex to replace any links that remain. This becomes a game of whack-a-mole with current and future markup. What might we run into aside from a  in the future? &#175;\\_(ツ)_/&#175; And we won&#39;t know what we&#39;re missing without regular manual reviews.\n\n\nUnless there&#39;s another option that we haven&#39;t explored yet. So... are we stuck with nothing/regex?\n\nWe&#39;re on the JVM so anything Java is within reach, I guess.\n",
            "excerpt": "To date, we&#39;ve used jSoup to parse the email content, looking for any anchor tags <span class=\"highlight\">and</span> replace their href attribute contents. Because <span class=\"highlight\">regex</span> html parsing is <span class=\"highlight\">evil</span>, right? &hellip; Or lastly... maybe... <span class=\"highlight\">regex</span>? (/me ducks) We could let jSoup do its thing for the normal HTML, <span class=\"highlight\">and</span> then use <span class=\"highlight\">regex</span> to replace any links that remain. &hellip; ",
            "title": "Parsing HTML Email content inside of conditional comments (trying to avoid regex!)"
        },
        {
            "tags": [
                "python",
                "regex",
                "replace"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 75746343,
            "is_answered": false,
            "question_id": 75746210,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1678891654,
            "creation_date": 1678891654,
            "body": "Disclaimer: It is generally evil and a menace to use regex to clean up XML content, which task should be delegated to a proper parser.  Given that you have no nested tags, you may try using the following replacement logic:\n\nThis prints:\n\nThe regex pattern used here matches:\n\n An XML tag\n OR\n any intermediate content, up to, but not including,\nthe next XML tag or the end of the string\n\nWe do a lambda replacement, which selectively strips spaces only from the intermediate content, but not from the tags themselves.\n",
            "excerpt": "Disclaimer: It is generally <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> a menace to use <span class=\"highlight\">regex</span> to clean up XML content, which task should be delegated to a proper parser. &hellip; &gt;|$)&#39;, lambda m: m.group().replace(&#39; &#39;, &#39;&#39;) if not m.group().startswith(&#39;&lt;&#39;) <span class=\"highlight\">and</span> not m.group().endswith(&#39;&gt;&#39;) else m.group(), inp)\nprint(output)\n\nThis prints:\n&lt;?xml version=&quot;1.0&quot;? &hellip; ",
            "title": "Python: Using sub() tu replace string matched by regex"
        },
        {
            "tags": [
                "perl"
            ],
            "question_score": 13,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 4,
            "is_answered": true,
            "question_id": 167238,
            "item_type": "question",
            "score": 13,
            "last_activity_date": 1677726740,
            "creation_date": 1223045253,
            "body": "The question is not how to tell in a oneliner. If you&#39;re writing the code in a one-liner, you know you are. But how does a module, included by  know that it all started from a oneliner. \n\nThis is mine. It&#39;s non-portable though and relies on UNIX standard commands (although, it can be made portable more or less.)\n\n\n\nAnd if you have a snazzier regex, feel free to improve upon mine. \n\n\n\nA couple of people have asked why I would want to do this. brian correctly guessed that I wanted to change export behavior based on whether it&#39;s a script, which we can assume has had some amount of design, or whether it&#39;s a oneliner where the user is trying to do as much as possible in a single command line. \n\nThis sounds bad, because there&#39;s this credo that exporters should respect other packages--sometimes known as &quot; is EVIL!&quot; But it seems to me that it&#39;s a foolish consistency when applied to oneliners. After all perl itself goes out of it&#39;s way to violate the structure of its language and give you easy loops if you ask for them on the command line, I simply want to extend that idea for my operational/business domain. I even want to apply source filters (gasp!) if it helps. \n\nBut this question also suggests that I might want to be a good citizen of Perl as well, because I only to break the community guidelines in certain cases. It is quite awesome to be able to create major business-level actions just by changing the command line in a batch scheduler rather than writing a whole new module. The test cycle is much compressed. \n",
            "excerpt": "\\s+-[^\\P{IsLower}e]*e[^\\P{IsLower}e]*\\s+/m\n    ;\n\n\n<span class=\"highlight\">And</span> if you have a snazzier <span class=\"highlight\">regex</span>, feel free to improve upon mine. &hellip; This sounds bad, because there&#39;s this credo that exporters should respect other packages--sometimes known as &quot;@EXPORT is <span class=\"highlight\">EVIL</span>!&quot; &hellip; ",
            "title": "What&#39;s the best way to tell if your perl&#39;s running on -e?"
        },
        {
            "tags": [
                "python",
                "web-scraping",
                "cloudflare"
            ],
            "question_score": 16,
            "is_accepted": false,
            "answer_id": 75312785,
            "is_answered": false,
            "question_id": 65604551,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1675266696,
            "creation_date": 1675266696,
            "body": "I can suggest such workflow to &quot;try&quot; to avoid Cloudflare WAF/bot mitigation:\n\ndon&#39;t cycle user agents, proxies or weird tunnels to surf\ndon&#39;t use fixed ip addresses, better leased lines like xDSL, home links and 4G/LTE\ntry to appear as mobile instead of a desktop/tablet\ntry to reproduce pointer movements like never before AKA record your mouse moves and migrate them 1:1 while scraping (yes u need JS enabled and some headless browser able to make up as &quot;common&quot; one)\ndon&#39;t cycle against different Cloudflare protected entities otherwise the attacker ip will be greylisted in a minute (AKA build your own targets blacklist, never touch such entities or you will go in the CF blacklist flawlessy)\ntry to reproduce a real life navigation in all aspects, including errors, waitings and more\ncheck your used ip after any scrape against popular blacklists otherwise bad errors will shortly appears (crowdsec is a good starting point)\nthe usual scrape is a googlebot scrape, a single regex WAF rule on CLoudflare will block 99,99% of the tries then.. avoid to fake as google and try to be LESS evil instead (ex: asking webmasters for APIs or data export if any).\n\nSource: I use Cloudflare with hundreds of domains and thousands of records (Enterprise) from the beginning of the company.\nThat way you will be closer to the point (and you will help them increasing  the overall security).\n",
            "excerpt": "more\ncheck your used ip after any scrape against popular blacklists otherwise bad errors will shortly appears (crowdsec is a good starting point)\nthe usual scrape is a googlebot scrape, a single <span class=\"highlight\">regex</span> &hellip; WAF rule on CLoudflare will block 99,99% of the tries then.. avoid to fake as google <span class=\"highlight\">and</span> try to be LESS <span class=\"highlight\">evil</span> instead (ex: asking webmasters for APIs or data export if any). &hellip; ",
            "title": "Can&#39;t bypass cloudflare with python cloudscraper"
        },
        {
            "tags": [
                "php",
                "xml"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 74974224,
            "is_answered": false,
            "question_id": 74971941,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1672583947,
            "creation_date": 1672570651,
            "body": " is a commonly cited expression - a  to parse XML is not, in my opinion, the  The task of presenting the contents of an XML file in table form can best be accomplished with XSL Transformations\nGiven the original XML, saved as  a simple XSL stylesheet can be used to generate the entire HTML Table with the content drawn directly from the XML.\ncatalog.xsl\n\nTo use the XSL within PHP:\n\nThis yields:\n\nTo display the  and the content - again using XSLT the  file needs to be modified slightly. Within the  loop you also want to add the tagName like this perhaps:\n\nThis modification yields:\n\n\nTo process the XML with DOMDocument only and store the tag&amp;value as a string and the value also as string you could do like this:\n\nWhich yields output like this:\n\n",
            "excerpt": "&quot;The Right tool for the right job&quot; is a commonly cited expression - a <span class=\"highlight\">Regex</span> to parse XML is not, in my opinion, the &quot;Right Tool!&quot; &hellip; &lt;/description&gt;\n            [11] =&gt; A former architect battles corporate zombies, \n      an <span class=\"highlight\">evil</span> sorceress, <span class=\"highlight\">and</span> her own childhood to become queen \n      of the world.\n        )\n\n    [bk103] =&gt; Array &hellip; ",
            "title": "How to take and display the content and tags of the xml file?"
        },
        {
            "tags": [
                "html",
                "nginx"
            ],
            "question_score": 44,
            "is_accepted": true,
            "answer_id": 38238001,
            "is_answered": false,
            "question_id": 38228393,
            "item_type": "answer",
            "score": 150,
            "last_activity_date": 1667677988,
            "creation_date": 1467868828,
            "body": "The &quot;Holy Grail&quot; Solution for Removing &quot;.html&quot; in NGINX:\nUPDATED ANSWER: This question piqued my curiosity, and I went on another, more in-depth search for a &quot;holy grail&quot; solution for  redirects in NGINX. Here is the link to the answer I found, since I didn&#39;t come up with it myself: https://stackoverflow.com/a/32966347/4175718\nHowever, I&#39;ll give an example and explain how it works. Here is the code:\n\nWhat&#39;s happening here is a pretty ingenious use of the  directive. NGINX runs a regex on the  portion of incoming requests. The regex checks if the URI has an .html extension and then stores the extension-less portion of the URI in the built-in variable .\nFrom the docs, since it took me a while to figure out where the  came from:\n\nRegular expressions can contain captures that are made available for later reuse in the $1..$9 variables.\n\nThe regex both checks for the existence of unwanted .html requests and effectively sanitizes the URI so that it does not include the extension. Then, using a simple  statement, the request is redirected to the sanitized URI that is now stored in .\nThe best part about this, as original author cnst explains, is that\n\nDue to the fact that $request_uri is always constant per request, and is not affected by other rewrites, it won&#39;t, in fact, form any infinite loops.\n\nUnlike the rewrites, which operate on any  request (including the invisible internal redirect to ), this solution only operates on external URIs that are visible to the user.\nWhat does &quot;try_files&quot; do?\nYou will still need the  directive, as otherwise NGINX will have no idea what to do with the newly sanitized extension-less URIs. The  directive shown above will first try the new URL by itself, then try it with the &quot;.html&quot; extension, then try it as a directory name.\nThe NGINX docs also explain how the default  directive works. The default  directive is ordered differently than the example above so the explanation below does not perfectly line up:\n\nNGINX will first append  to the end of the URI and try to serve it. If it finds an appropriate  file, it will return that file and will maintain the extension-less URI. If it cannot find an appropriate  file, it will try the URI without any extension, then the URI as a directory, and then finally return a 404 error.\n\nUPDATE: What does the regex do?\nThe above answer touches on the use of regular expressions, but here is a more specific explanation for those who are still curious. The following regular expression (regex) is used:\n\nThis breaks down as:\n: indicates beginning of line.\n: match the character &quot;/&quot; literally. Forward slashes do NOT need to be escaped in NGINX.\n: capturing group: match any character an unlimited number of times\n: match the character &quot;.&quot; literally. This must be escaped with a backslash.\n: match the string &quot;html&quot; literally.\n: match a literal &quot;?&quot; or the end of the string. This is done to avoid mishandling file names with something after &quot;.html&quot;.\nThe capturing group  is what contains the non-&quot;.html&quot; portion of the URL. This can later be referenced with the variable . NGINX is then configured to re-try the request () and the  directive internally re-appends the &quot;.html&quot; extension so the file can be located.\nUPDATE: Retaining the query string\nTo retain query strings and arguments passed to a  page, the  statement can be changed to:\n\nThis should allow requests such as  to redirect to  instead of just .\n\nNote that this is considered safe usage of the `if` directive.\nFrom the NGINX page If Is Evil:\n\nThe only 100% safe things which may be done inside if in a location context are:\nreturn ...;\nrewrite ... last;\n\n\nAlso, note that you may swap out the &#39;302&#39; redirect for a &#39;301&#39;.\nA  redirect is permanent, and is cached by web browsers and search engines. If your goal is to permanently remove the  extension from pages that are already indexed by a search engine, you will want to use a  redirect. However, if you are testing on a live site, it is best practice to start with a  and only move to a  when you are absolutely confident your configuration is working correctly.\n",
            "excerpt": "The <span class=\"highlight\">regex</span> checks if the URI has an .html extension <span class=\"highlight\">and</span> then stores the extension-less portion of the URI in the built-in variable $1. &hellip; The <span class=\"highlight\">regex</span> both checks for the existence of unwanted .html requests <span class=\"highlight\">and</span> effectively sanitizes the URI so that it does not include the extension. &hellip; ",
            "title": "NGINX remove .html extension"
        },
        {
            "tags": [
                "c++",
                "visual-studio",
                "cmake"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 73698691,
            "is_answered": false,
            "question_id": 69564143,
            "item_type": "answer",
            "score": -1,
            "last_activity_date": 1666511775,
            "creation_date": 1663052354,
            "body": "Your first solution can be simplified by using  option of  instead of  option.\nThis will also get rid of the evil  command.\n\nSee CMake Regex Specification.\n\nAs for the  option, your solution is pretty good.\nWith the following minor modification, I can get the filtering behaviour as you desire, where files are filtered according to their folder name, and the ones at the root folder has no filter instead of being listed under &quot;Source Files&quot;.\n\n\nNote that it is sometimes necessary to run CMake command in a clean build environment for VS filters to take effect.\nI suspect that was the reason you had to apply a workaround to the  solution.\n",
            "excerpt": "This will also get rid of the <span class=\"highlight\">evil</span> GLOB command.\nsource_group(&quot;benchmark&quot; REGULAR_EXPRESSION &quot;benchmark/.+\\.(h|cpp)&quot;)\nsource_group(&quot;builder&quot; REGULAR_EXPRESSION &quot;builder/.+\\.(h|cpp)&quot;)\n... &hellip; See CMake <span class=\"highlight\">Regex</span> Specification.\n\nAs for the TREE option, your solution is pretty good. &hellip; ",
            "title": "How can I cleanly place files in the &quot;root&quot; filter in Visual Studio using CMake?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "string"
            ],
            "question_score": -2,
            "is_accepted": true,
            "answer_id": 73871703,
            "is_answered": false,
            "question_id": 73871509,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1664300209,
            "creation_date": 1664300209,
            "body": "The regex is pretty simple and can be almost identical to your string. Where you want to pick out some words use the match syntax  - the period is &quot;any character&quot;, and the  is &quot;one or more&quot;.\nUse  on the string with the expression to return an array of matches which you can then destructure into a number of variables (I&#39;ve called them   and  here).\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "`[` <span class=\"highlight\">and</span> `]` around &quot;Alert&quot;\n// as they are part of <span class=\"highlight\">regex</span> syntax. `^` <span class=\"highlight\">and</span> `$`\n// signify the start <span class=\"highlight\">and</span> end of the string respectively\nconst re = /^\\[Alert\\] (.+) has thrown a (.+) in (.+)\\.$/;\nconst str &hellip; = &#39;[Alert] Trump has thrown a tantrum in his <span class=\"highlight\">Evil</span> Lair.&#39; &hellip; ",
            "title": "Take key values from a string in Javascript"
        },
        {
            "tags": [
                "java",
                "regex",
                "string"
            ],
            "question_score": -3,
            "is_accepted": false,
            "answer_id": 73704934,
            "is_answered": false,
            "question_id": 73688734,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1663080094,
            "creation_date": 1663080094,
            "body": "The OWASP page describes evil regexes as those that contain\n\n\nGrouping with repetition\nInside the repeated group:\n\nRepetition\nAlternation with overlapping\n\n\n\n\nwhich is not always right. Their examples are good, but the rules are too generic and even good and safe patterns can be trigger the vulnerability\nYou can actually remove the first  to stop the warning from showing:\n\nThis way, only one  is used.\n",
            "excerpt": "The OWASP page describes <span class=\"highlight\">evil</span> regexes as those that contain\n\n\nGrouping with repetition\nInside the repeated group:\n\nRepetition\nAlternation with overlapping\n\n\n\n\nwhich is not always right. &hellip; Their examples are good, but the rules are too generic <span class=\"highlight\">and</span> even good <span class=\"highlight\">and</span> safe patterns can be trigger the vulnerability\nYou can actually remove the first + to stop the warning from showing:\ninput.matches &hellip; ",
            "title": "Will these two regex give me the same desired output?"
        },
        {
            "tags": [
                "regex",
                "floating-point",
                "integer",
                "numbers"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 73137567,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1658925492,
            "creation_date": 1658923322,
            "body": "I have this regex to test if the user input is valid:\n\nThe main point is in the regex: . However sonarcloud is feeling it as a security hotspot saying:\nMake sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.\nI guess it&#39;s because of the double digit test, but I couldn&#39;t find a way to avoid it. Is it a security threat, or harmless?\n",
            "excerpt": "I have this <span class=\"highlight\">regex</span> to test if the user input is valid:\nvalue.length === 0 ||\nvalue === &#39;-&#39; ||\n(!isNaN(parseFloat(value)) &amp;&amp; /^-?\\d+\\.?\\d*$/.test(value))\n\nThe main point is in the <span class=\"highlight\">regex</span>: /^-?\\d+\\.? &hellip; However sonarcloud is feeling it as a security hotspot saying:\nMake sure the <span class=\"highlight\">regex</span> used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service. &hellip; ",
            "title": "Match negative/positive float/int regex - is it evil?"
        },
        {
            "tags": [
                "regex",
                "scala",
                "unapply"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 72964888,
            "is_answered": false,
            "question_id": 72961975,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1657708679,
            "creation_date": 1657708679,
            "body": "I am not sure why you would expect it to not compile.  is valid syntax, and matches the extractor definition.\nFor example, this returns true:\n\nI guess, what you are really asking is why extractor does not throw a run-time error if number of parameters does not match the number of capturing groups in the regex ...\nThe answer to that is &quot;that&#39;s just how it is implemented&quot;.\nIt is not really obvious at all that throwing in this case would be a better solution than simply failing the match. Runtime errors are generally considered evil in scala (and in functional programming in general), and are only used in cases, when there is no other viable alternative.\n",
            "excerpt": "I am not sure why you would expect it to not compile. <span class=\"highlight\">regex</span>(&lt;any number of strings&gt;) is valid syntax, <span class=\"highlight\">and</span> matches the extractor definition. &hellip; Runtime errors are generally considered <span class=\"highlight\">evil</span> in scala (<span class=\"highlight\">and</span> in functional programming in general), <span class=\"highlight\">and</span> are only used in cases, when there is no other viable alternative. &hellip; ",
            "title": "Why does this compile? (Scala Regex unapplySeq)"
        },
        {
            "tags": [
                "c#",
                "asp.net-core",
                "xss"
            ],
            "question_score": 19,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 5,
            "is_answered": true,
            "question_id": 52239262,
            "item_type": "question",
            "score": 19,
            "last_activity_date": 1656876401,
            "creation_date": 1536439438,
            "body": "In ASP.NET we had Request Validation but in ASP.NET Core there is no such thing.\nHow can we protect an ASP.NET Core app against XSS in the best way?\nRequest validation gone:\nhttps://nvisium.com/resources/blog/2017/08/08/dude-wheres-my-request-validation.html\n\nthis guy recommmends RegEx on  like:\n[RegularExpression(@&quot;^[a-zA-Z0-9 -&#39;]*$&quot;, ErrorMessage = &quot;Invalid characters detected&quot;)]\npublic string Name { get; set; }\n\n\n...but that does not work for globalization/internationalization, i.e. non-latin characters like &#230;, &#248; &#229; 汉字.\nX-XSS to do &gt;limited&lt; XSS-protection: https://dotnetcoretutorials.com/2017/01/10/set-x-xss-protection-asp-net-core/ Like this but there is only limited support afaik:\n\nThe documentation from Microsoft is two years old: https://learn.microsoft.com/en-us/aspnet/core/security/cross-site-scripting?view=aspnetcore-2.1 and does not really cover it.\nI am thinking to do something simple like:\n\n\non all data submission - but it seems kind of wonky.\n\nI have asked the same question for Microsoft but I am interested to hear how people are solving this problem in real-life applications.\nUpdate: what we are trying to accomplish:\nIn our application, we have webforms where people can input names, email, content and similar. The data is stored in a database and will be viewed on a frontend system and possibly other systems in the future (like RSS feeds, JSON, whatever). Some forms contain rich-text editors (TinyMCE) and allow users to markup their texts. Malicious users could enter  in the fields. What is the best way to strip the evil characters in ASP.NET Core before it reaches the database - I prefer evil scripts not to be stored in the database at all.\nI figured something like this could work:\n\n",
            "excerpt": "Some forms contain rich-text editors (TinyMCE) <span class=\"highlight\">and</span> allow users to markup their texts. Malicious users could enter &lt;script&gt;alert(&#39;<span class=\"highlight\">evil</span> stuff&#39;);&lt;/script&gt; in the fields. &hellip; What is the best way to strip the <span class=\"highlight\">evil</span> characters in ASP.NET Core before it reaches the database - I prefer <span class=\"highlight\">evil</span> scripts not to be stored in the database at all. &hellip; ",
            "title": "How to protect against XSS in ASP.NET Core?"
        },
        {
            "tags": [
                "awk",
                "text-processing",
                "unix-text-processing"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 72695200,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1655830113,
            "creation_date": 1655784098,
            "body": "Given the following example URLs:\nurls.txt\n\nI&#39;m using this command:\n\nTo produce this desired output:\n\nBut it yields this output:\n\nWhy is it printing a semblance of the original URL before the correct output?\n\nHere is the above code formatted legibly with :\n\n",
            "excerpt": "MiscHostsFiles/raw/master/MiscAdTrackingHostBlock.txt\nhttps://github.com/DK-255/Pi-hole-list-1/raw/main/Ads-Blocklist\nhttps://github.com/DRSDavidSoft/additional-hosts/raw/master/domains/blacklist/adservers-<span class=\"highlight\">and</span>-trackers.txt &hellip; /smartphone-<span class=\"highlight\">and</span>-general-ads-analytics-<span class=\"highlight\">regex</span>-blocklist-ftprivacy.txt\nhttps://github.com/hell-sh/<span class=\"highlight\">Evil</span>-Domains/raw/master/<span class=\"highlight\">evil</span>-domains.txt\nhttps://github.com/hosts-file/BulgarianHostsFile/raw/master/bhf.txt &hellip; ",
            "title": "Issue converting github.com/*/raw/* URLs to raw.githubusercontent.com URLS using AWK"
        },
        {
            "tags": [
                "awk",
                "text-processing",
                "unix-text-processing"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 72704220,
            "is_answered": false,
            "question_id": 72695200,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1655830113,
            "creation_date": 1655828910,
            "body": "Your only real problem is that awk fields, arrays, and strings all start at 1, not 0, so your loop should have started at 1, not 0. As written first time through your loop  is doing .\nHaving said that, I think what you want is the following with a couple of other things tidied up:\n\n\n\nThe only slightly tricky part in that is  which is how you remove a mid-record field in awk - first convert the field to a string that matches RS since that can&#39;t be present in the input (we can use RS directly when it&#39;s a string like  rather than a regexp) so we changed  to  in the 6th field which meant the record now contained  and then removed  thereby removing the 6th field and preceding .\n",
            "excerpt": "/smartphone-<span class=\"highlight\">and</span>-general-ads-analytics-<span class=\"highlight\">regex</span>-blocklist-ftprivacy.txt\nhttps://raw.githubusercontent.com/hell-sh/<span class=\"highlight\">Evil</span>-Domains/master/<span class=\"highlight\">evil</span>-domains.txt\nhttps://raw.githubusercontent.com/hosts-file/BulgarianHostsFile &hellip; then removed /\\n thereby removing the 6th field <span class=\"highlight\">and</span> preceding /. &hellip; ",
            "title": "Issue converting github.com/*/raw/* URLs to raw.githubusercontent.com URLS using AWK"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": -2,
            "is_accepted": false,
            "answer_id": 72498731,
            "is_answered": false,
            "question_id": 72498625,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1654336065,
            "creation_date": 1654336065,
            "body": "I hope this regex can help you :\n\nAlso be carefull about evil regex, each regex is potentially a open door for DDOS attack on you website.\nI tried your regex on :  https://regexr.com/\nIt&#39;s a good tools for testing your regex\n",
            "excerpt": "I hope this <span class=\"highlight\">regex</span> can help you :\n \\/([a-zA-Z]+)(.*)[\\/](more|next|[0-9]+) \n\n \\/([a-zA-Z]+)(.*)[\\/](more|next|[0-9]+){0,1}[\\/]{0,1}   \n\nAlso be carefull about <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>, each <span class=\"highlight\">regex</span> is potentially a open &hellip; I tried your <span class=\"highlight\">regex</span> on :  https://regexr.com/\nIt&#39;s a good tools for testing your <span class=\"highlight\">regex</span> &hellip; ",
            "title": "regex route filters some /string after slug url"
        },
        {
            "tags": [
                "nginx",
                "nginx-location"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 72173828,
            "is_answered": false,
            "question_id": 72056975,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1652107251,
            "creation_date": 1652107251,
            "body": "Nginx takes a  location modifier as an exact match (docs are here). If you want to make a location that will catch every URI containing  substring (obviously including ), you can use a regex one:\n\nThe  modifier makes the location block in @user973254 answer (original answer version, already fixed) a prefix one with the greater priority than any regex locations, so it will overtake only the URIs starting with  (obviously not including  from your example).\nHowever if your web backend requires an additional URI processing (which is a most common case nowadays), you&#39;ll need at least to replicate your main location behavior with this new location. Fortunately, there is a way to avoid such a problems, and can be easily applied to an arbitrary number of sites as you ask for in your original question. You can check required conditions to make a decision for blocking the request or not using the (very powerful)  block feature. And since we want to match address against a list of subnets, we will use a chain of  and  blocks. To use regexes (PRCE/PCRE2 syntax) for a  block match use a  string prefix ( for case-insensitive match), strings containing some special characters (e.g. curly braces) should be single- or double-qouted. Here is a generic example (you&#39;ll need only the first line of the following  block to fulfill your question requirements):\n\nYou can swap the logic to check the URI first (it can be some performance impact since the regex matching will be performed for every request including requests from the non-restricted networks, however if the majority of requests come from public addresses, there will be no significant difference). That way you can have a common non-restricted subnes list and per-site URI lists:\n\nOf course, you are not limited to use 403 return code using this solution (which is the case when you are using / directives). It also has nothing to do with the famous &quot;If is evil&quot; article since this  is used in  context.\n",
            "excerpt": "<span class=\"highlight\">And</span> since we want to match address against a list of subnets, we will use a chain of map <span class=\"highlight\">and</span> geo blocks. &hellip; It also has nothing to do with the famous &quot;If is <span class=\"highlight\">evil</span>&quot; article since this if is used in server context. &hellip; ",
            "title": "Nginx deny if location contains"
        },
        {
            "tags": [
                "redirect",
                "google-cloud-platform",
                "load-balancing"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 70526479,
            "is_answered": false,
            "question_id": 70525042,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1640825992,
            "creation_date": 1640825992,
            "body": "Url maps path matcher does not support conditions or regex.\nAs quoted from the documentation, Path matcher has some constraints:\n\nA path rule can only include a wildcard character (*) after a forward slash character (/). For example, /videos/* and /videos/hd/* are valid for path rules, but /videos* and /videos/hd* are not.\n\n\nPath rules do not use regular expression or substring matching. For example, path rules for either /videos/hd or /videos/hd/* do not apply to a URL with the path /video/hd-abcd. However, a path rule for /video/* does apply to that path.\n\n\nPath matchers (and URL maps in general) do not offer features that function like Apache LocationMatch directives. If you have an application that generates dynamic URL paths that have a common prefix, such as /videos/hd-abcd and /videos/hd-pqrs, and you need to send requests made to those paths to different backend services, you might not be able to do that with a URL map. For simple cases containing only a few possible dynamic URLs, you might be able to create a path matcher with a limited set of path rules. For more complex cases, you need to do path-based regular expression matching on your backends.\n\n\nWhat you are looking for can be achieved by setting up  or  webservers as the only backend for your  and configuring this backend to route requests with conditions and/or regex to your services.\nPS: If is Evil... when used in location context\n",
            "excerpt": "What you are looking for can be achieved by setting up Nginx or Apache webservers as the only backend for your LoadBalancer <span class=\"highlight\">and</span> configuring this backend to route requests with conditions <span class=\"highlight\">and</span>/or <span class=\"highlight\">regex</span> to &hellip; PS: If is <span class=\"highlight\">Evil</span>... when used in location context &hellip; ",
            "title": "Redirect request based on parameter on GCP"
        },
        {
            "tags": [
                "json",
                "bash",
                "large-files",
                "data-extraction"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 70449626,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1640252943,
            "creation_date": 1640178730,
            "body": "I have a fairly large JSON file (~8GB) that has the following format:\n\nI want to extract all the values of the  to a separate file and I want to do it automatically.\nI tried using this  command\n\nbut the process terminated due to large memory usage (it used more than 80% of my ram at some points and the GUI was unresponsive).\nThen I tried to first use the  command to separate the input into 2GB files\n\nand then use the same  command from above, and this time it finished fairly quickly for every chunk, in about 30 seconds.\nThis method where I have to split the input first would be fine for me but the the only problem is automatically checking if the  command splits the file properly, i.e. not in the middle of  key-pair, since that would result in losing some of the important data.\nI&#39;d like to know if there&#39;s a better/more elegant way to do this.\nWhat also interests me is why doesn&#39;t  work on 8GB file but works like a charm on 2GB files. The regex I use for matching doesn&#39;t seem to be evil.\nMy assumption is that it tries to load the whole line first (which uses half of my RAM) and then it uses more memory for it&#39;s internal calculations, which causes the system to start using SWAP memory which in turn causes really slow performance before terminating the program (10+ minutes).\nSome important info specific for this problem:\n\nThe format of objects inside  array will always be the same\nThe input json is minified, it contains no spaces or new lines\nThe input file is static\nI&#39;m obviously interested in extracting all of the important data\n\n",
            "excerpt": "<span class=\"highlight\">and</span> this time it finished fairly quickly for every chunk, in about 30 seconds. &hellip; The <span class=\"highlight\">regex</span> I use for matching doesn&#39;t seem to be <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Automating data extraction from large json file (~8GB)"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 70305380,
            "is_answered": false,
            "question_id": 70304831,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1639155444,
            "creation_date": 1639143518,
            "body": "Using  is very unsafe way to solve this problem:\nWhen is eval evil in php?\nOne solution is using  function and find your desired format with regex and replace it with custom function.\n function perform a regular expression search and replace using a callback.\nhttps://www.php.net/manual/en/function.preg-replace-callback.php\nJust need to replace line  with following line:\n\n",
            "excerpt": "Using eval is very unsafe way to solve this problem:\nWhen is eval <span class=\"highlight\">evil</span> in php? &hellip; One solution is using preg_replace_callback function <span class=\"highlight\">and</span> find your desired format with <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> replace it with custom function.\npreg_replace_callback function perform a regular expression search <span class=\"highlight\">and</span> &hellip; ",
            "title": "How to assign value of json object to variable in form of text values of textarea?"
        },
        {
            "tags": [
                "regex",
                "spring-boot",
                "sonarqube"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 70301405,
            "is_answered": false,
            "question_id": 70300327,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1639123445,
            "creation_date": 1639123445,
            "body": "You can mark it as reviewed and safe to use.\nThe  pattern is equal to .\nFor a regex to be an evil regex, there must be a considerable backtracking possibility that is only possible with , , ,  and  / ? like quantifiers in non-final position inside the pattern.\nYours is an example of a pattern where only the one or two digit pattern can get backtracked into, but there is just two possible ways to match the pattern, which is not problematic and does not present any threat.\n",
            "excerpt": "You can mark it as reviewed <span class=\"highlight\">and</span> safe to use.\nThe Test--[A-Z]{3}_[0-9]{1,2}[MYD]{1} pattern is equal to Test--[A-Z][A-Z][A-Z]_[0-9][0-9]?[MYD]. &hellip; For a <span class=\"highlight\">regex</span> to be an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>, there must be a considerable backtracking possibility that is only possible with *, *?, +, +? <span class=\"highlight\">and</span> {x,} / {x,}? &hellip; ",
            "title": "Regular Expressions are marked as Security Hotspot on SonarQube report"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 200,
            "is_accepted": true,
            "answer_id": 12643073,
            "is_answered": false,
            "question_id": 12643009,
            "item_type": "answer",
            "score": 439,
            "last_activity_date": 1635437431,
            "creation_date": 1348846620,
            "body": "TL;DR\nUse  instead of  and  instead of  to avoid escaping issues in some languages (like Java).\nThanks to the nameless one for originally recognizing this.\n\nOne relatively simple pattern for matching a floating point number in a larger string is:\n\nThis will match:\n\n\n\n\n\nSee a working example\nIf you also want to match  (a period with no decimal part), then you&#39;ll need a slightly longer expression:\n\nSee pkeller&#39;s answer for a fuller explanation of this pattern\nIf you want to include a wider spectrum of numbers, including scientific notation and non-decimal numbers such as hex and octal, see my answer to How do I identify if a string is a number?.\nIf you want to validate that an input is a number (rather than finding a number within the input), then you should surround the pattern with  and , like so:\n\nIrregular Regular Expressions\n&quot;Regular expressions&quot;, as implemented in most modern languages, APIs, frameworks, libraries, etc., are based on a concept developed in formal language theory. However, software engineers have added many extensions that take these implementations far beyond the formal definition. So, while most regular expression engines resemble one another, there is actually no standard. For this reason, a lot depends on what language, API, framework or library you are using.\n(Incidentally, to help reduce confusion, many have taken to using &quot;regex&quot; or &quot;regexp&quot; to describe these enhanced matching languages. See Is a Regex the Same as a Regular Expression? at RexEgg.com for more information.)\nThat said, most regex engines (actually, all of them, as far as I know) would accept . Most likely, there&#39;s an issue with escaping.\nThe Trouble with Escaping\nSome languages have built-in support for regexes, such as JavaScript. For those languages that don&#39;t, escaping can be a problem.\nThis is because you are basically coding in a language within a language. Java, for example, uses  as an escape character within it&#39;s strings, so if you want to place a literal backslash character within a string, you must escape it:\n\nHowever, regexes also use the  character for escaping, so if you want to match a literal  character, you must escape it for the regex engine, and then escape it again for Java:\n\nIn your case, you have probably not escaped the backslash character in the language you are programming in:\n\nAll this escaping can get very confusing. If the language you are working with supports raw strings, then you should use those to cut down on the number of backslashes, but not all languages do (most notably: Java). Fortunately, there&#39;s an alternative that will work some of the time:\n\nFor a regex engine,  and  mean exactly the same thing. Note that this doesn&#39;t work in every case, like newline (), open square bracket () and backslash ( or ).\nA Note about Matching Numbers\n(Hint: It&#39;s harder than you think)\nMatching a number is one of those things you&#39;d think is quite easy with regex, but it&#39;s actually pretty tricky. Let&#39;s take a look at your approach, piece by piece:\n\nMatch an optional  or \n\nMatch 0 or more sequential digits\n\nMatch an optional \n\nMatch 0 or more sequential digits\nFirst, we can clean up this expression a bit by using a character class shorthand for the digits (note that this is also susceptible to the escaping issue mentioned above):\n = \nI&#39;m going to use  below, but keep in mind that it means the same thing as . (Well, actually, in some engines  will match digits from all scripts, so it&#39;ll match more than  will, but that&#39;s probably not significant in your case.)\nNow, if you look at this carefully, you&#39;ll realize that every single part of your pattern is optional. This pattern can match a 0-length string; a string composed only of  or ; or, a string composed only of a . This is probably not what you&#39;ve intended.\nTo fix this, it&#39;s helpful to start by &quot;anchoring&quot; your regex with the bare-minimum required string, probably a single digit:\n\nNow we want to add the decimal part, but it doesn&#39;t go where you think it might:\n\nThis will still match values like . Worse, it&#39;s got a tinge of evil about it. The period is optional, meaning that you&#39;ve got two repeated classes side-by-side ( and ). This can actually be dangerous if used in just the wrong way, opening your system up to DoS attacks.\nTo fix this, rather than treating the period as optional, we need to treat it as required (to separate the repeated character classes) and instead make the entire decimal portion optional:\n\nThis is looking better now. We require a period between the first sequence of digits and the second, but there&#39;s a fatal flaw: we can&#39;t match  because a leading digit is now required.\nThis is actually pretty easy to fix. Instead of making the &quot;decimal&quot; portion of the number optional, we need to look at it as a sequence of characters: 1 or more numbers that may be prefixed by a  that may be prefixed by 0 or more numbers:\n\nNow we just add the sign:\n\nOf course, those slashes are pretty annoying in Java, so we can substitute in our long-form character classes:\n\nMatching versus Validating\nThis has come up in the comments a couple times, so I&#39;m adding an addendum on matching versus validating.\nThe goal of matching is to find some content within the input (the &quot;needle in a haystack&quot;). The goal of validating is to ensure that the input is in an expected format.\nRegexes, by their nature, only match text. Given some input, they will either find some matching text or they will not. However, by &quot;snapping&quot; an expression to the beginning and ending of the input with anchor tags ( and ), we can ensure that no match is found unless the entire input matches the expression, effectively using regexes to validate.\nThe regex described above () will match one or more numbers within a target string. So given the input:\n\nThe regex will match , , ,  and .\nTo validate that a given input is a number and nothing but a number, &quot;snap&quot; the expression to the start and end of the input by wrapping it in anchor tags:\n\nThis will only find a match if the entire input is a floating point number, and will not find a match if the input contains additional characters. So, given the input , a match will be found, but given  no matches will be found.\nNote that some regex engines have a ,  or similar function, which essentially does what I&#39;ve described automatically, returning  if a match is found and  if no match is found. Also keep in mind that some engines allow you to set flags which change the definition of  and , matching the beginning/end of a line rather than the beginning/end of the entire input. This is typically not the default, but be on the lookout for these flags.\n",
            "excerpt": "Worse, it&#39;s got a tinge of <span class=\"highlight\">evil</span> about it. The period is optional, meaning that you&#39;ve got two repeated classes side-by-side (\\d+ <span class=\"highlight\">and</span> \\d*). &hellip; So given the input:\napple 1.34 pear 7.98 version 1.2.3.4\n\nThe <span class=\"highlight\">regex</span> will match 1.34, 7.98, 1.2, .3 <span class=\"highlight\">and</span> .4. &hellip; ",
            "title": "Regular expression for floating point numbers"
        },
        {
            "tags": [
                "php",
                "xml"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 69686634,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1634987324,
            "creation_date": 1634979938,
            "body": "Please help\nI have been finding a code for this but failed\nsource: https://www.singtel.com/etc/singtel/public/tv/epg-parsed-data/23102021.json\nThis is a epg html site\nCould you suggest a way to convert this link contents to XML?\nbtw the link is based on the day\nhttps://www.singtel.com/etc/singtel/public/tv/epg-parsed-data/ddMMyyyy.json\nmaybe this will help\n\r\n\r\n\r\n\r\n\r\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": ",||}\nindex_description.scrub{<span class=\"highlight\">regex</span>||&quot;program&quot;:\\{&quot;description&quot;:&quot;(.*?)&quot; &hellip; Sandman join forces to protect children&#39;s imagination from the <span class=\"highlight\">evil</span> Pitch! &hellip; ",
            "title": "html epg to xml via php"
        },
        {
            "tags": [
                "c#",
                ".net",
                "mailkit"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 60832412,
            "is_answered": false,
            "question_id": 60825872,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1633166022,
            "creation_date": 1585057872,
            "body": "You can read this blog post that explains what most C# MIME parsers get wrong and why MimeKit can handle multiple charset encodings.\nhttps://jeffreystedfast.blogspot.com/2013/09/time-for-rant-on-mime-parsers.html\nhttps://jeffreystedfast.blogspot.com/2013/08/why-decoding-rfc2047-encoded-headers-is.html\nTime for a rant on mime parsers...\nWarning: Viewer discretion is advised.\nWhere should I begin?\nI guess I should start by saying that I am obsessed with MIME and, in particular, MIME parsers. No, really. I am obsessed. Don&#39;t believe me? I&#39;ve written and/or worked on several MIME parsers at this point. It started off in my college days working on Spruce which had a horrendously bad MIME parser, and so as you read farther along in my rant about shitty MIME parsers, keep in mind: I&#39;ve been there, I&#39;ve written a shitty MIME parser.\nAs a handful of people are aware, I&#39;ve recently started implementing a C# MIME parser called MimeKit. As I work on this, I&#39;ve been searching around on GitHub and Google to see what other MIME parsers exist out there to find out what sort of APIs they provide. I thought perhaps I&#39;ll find one that offers a well-designed API that will inspire me. Perhaps, by some miracle, I&#39;d find one that was actually pretty good that I could just contribute to instead of writing my own from scratch (yea, wishful thinking). Instead, all I have found are poorly designed and implemented MIME parsers, many probably belong on the front page of the Daily WTF.\nI guess I&#39;ll start with some softballs.\nFirst, there&#39;s the fact that every single one of them was written as  parsers. Don&#39;t be fooled by the ones claiming to be &quot;stream parsers&quot;, because all any of those did was to slap a  on top of the byte stream and start using . What&#39;s so bad about that, you ask? For those not familiar with MIME, I&#39;d like for you to take a look at the raw email sources in your inboxes particularly if you have correspondence with anyone outside of the US. Hopefully, most of your friends and colleagues are using more-or-less MIME compliant email clients, but I guarantee you&#39;ll find at least a few emails with raw 8bit text.\nNow, if the language they were using was C or C++, they might be able to get away with doing this because they&#39;d technically be operating on byte arrays, but with Java and C#, a &#39;string&#39; is a unicode string. Tell me: how does one get a unicode string from a raw byte array?\nBingo. You need to know the charset before you can convert those bytes into unicode characters.\nTo be fair, there&#39;s really no good way of handling raw 8bit text in message headers, but by using a  approach, you are really limiting the possibilities.\nNext up is the  approach. One of the 2 early parsers in GMime (pan-mime-parser.c back in the version 0.7 days) used a  approach, so I understand the thinking behind this. And really, there&#39;s nothing wrong with this approach as far as correctness goes, it&#39;s more of a &quot;this can never be fast&quot; complaint. Of the two early parsers in GMime, the pan-mime-parser.c backend was horribly slow compared to the in-memory parser. Of course, that&#39;s not very surprising. More surprising to me at the time was that when I wrote GMime&#39;s current generation of the parser (sometime between v0.7 and v1.0), it was just as fast as the in-memory parser ever was and only ever had up to 4k in a read buffer at any given time. My point is, there are far better approaches than  if you want your parser to be reasonably performant... and why wouldn&#39;t you want that? Your users definitely want that.\nOkay, now come the more serious problems that I encountered in nearly all of the mime parser libraries I found.\nI think that every single mime parser I&#39;ve found so far uses the &quot;String.Split()&quot; approach for parsing address headers and/or for parsing parameter lists on headers such as Content-Type and Content-Disposition.\nHere&#39;s an example from one C# MIME parser:\n\nHere&#39;s how this same parser decodes encoded-word tokens:\n\nWhat?! It completely throws away the charset in each of those encoded-word tokens. In the case of quoted-printable tokens, it assumes they are all ASCII (actually, latin1 may work as well?) and in the case of base64 encoded-word tokens, it assumes they are all in UTF-7!?!? Where in the world did he get that idea? I can&#39;t begin to imagine his code working on any base64 encoded-word tokens in the real world. &#129318;‍♂️\nI&#39;d just like to point out that this is what this project&#39;s description states:\nA small, efficient, and working mime parser library written in c#.\n...\nI&#39;ve used several open-source mime parsers before, but they all either\nfail on one kind of encoding or the other, or miss some crucial\ninformation. That&#39;s why I decided to finally have a go at the problem\nmyself.\nI&#39;ll grant you that his MIME parser is small, but I&#39;d have to take issue with the &quot;efficient&quot; and &quot;working&quot; adjectives. With the heavy use of string allocations and regex matching, it could hardly be considered &quot;efficient&quot;. And as the code pointed out above illustrates, &quot;working&quot; is a bit of an overstatement.\nFolks... this is what you get when you opt for a &quot;lightweight&quot; MIME parser because you think that parsers like GMime are &quot;bloated&quot;.\nOn to parser #2... I like to call this the &quot;Humpty Dumpty&quot; approach:\n\nI&#39;ll give this guy some credit, at least he saw that his  approach was flawed and so tried to compensate by piecing Humpty Dumpty back together again. Of course, with his String.Trim()ing, he just won&#39;t be able to put him back together again with any level of certainty. The white space in those quoted tokens may have significant meaning.\nMany of the C# MIME parsers out there like to use Regex all over the place. Here&#39;s a snippet from one parser that is entirely written in Regex (yea, have fun maintaining that...):\n\nLet&#39;s pretend that the regex pattern strings are correct in their definitions (because they are god-awful to read and I can&#39;t be bothered to double-check them), the replacing of &#39;_&#39; with a space is wrong (it should only be done in the &quot;q&quot; case) and the  is just evil. Not to mention that there could be multiple encoded words per field.Body which this code utterly fails to handle.\nGuys. I know you love regular expressions and that they are very very useful, but they are no substitute for writing a real tokenizer. This is especially true if you want to be lenient in what you accept (and in the case of MIME, you really need to be).\n",
            "excerpt": "With the heavy use of string allocations <span class=\"highlight\">and</span> <span class=\"highlight\">regex</span> matching, it could hardly be considered &quot;efficient&quot;. <span class=\"highlight\">And</span> as the code pointed out above illustrates, &quot;working&quot; is a bit of an overstatement. &hellip; the &quot;q&quot; case) <span class=\"highlight\">and</span> the Regex.Replace() is just <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Supporting multiple content encoding in .net Framework 4.6.1 using mailkit"
        },
        {
            "tags": [
                "sql",
                "oracle"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 69351237,
            "is_answered": false,
            "question_id": 69347664,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1632765334,
            "creation_date": 1632765334,
            "body": "If data really is that simple, regular expressions make code rather simple. Way simpler than  option. Why don&#39;t you want to use regex? Because it is evil, or ...?\n\nsample data in lines #1 - 4\n: take the 2nd numeric value from the column\n: take the last numeric value from the column\n\n\n\n\nAs of\n\nWhat is the best way to create a new column to show the version without duplicate the line?\n\nI have no idea what that means. &quot;Without duplicate the line&quot;? Which line? Which duplicate?\n",
            "excerpt": "Why don&#39;t you want to use <span class=\"highlight\">regex</span>? Because it is <span class=\"highlight\">evil</span>, or ...? &hellip; ",
            "title": "Oracle SQL - Reading delimiter"
        },
        {
            "tags": [
                "nginx",
                "configuration",
                "nginx-cache"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 69268906,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1632227338,
            "creation_date": 1632227338,
            "body": "I&#39;m looking to improve nginx caching by removing irrelevant query parameters (that could come from web crawlers or similar) from the request. I have come across an unwieldy solution on the internet:\n\nIt works, but it&#39;s not very concise, takes a lot of steps and from what I learned, if is evil.\nI know there are maps, which can do basic regex things but they don&#39;t work in this scenario (because there can be any number of parameters in any order that I need to remove).\nI also found this substitution module which can do regex replace but it&#39;s only made for specific operations and not for setting a variable.\nSo I have two questions:\n\nDoes anyone know whether there is some tooling to set a variable by doing a regex replace operation?\nIs using if in this case really that bad? It&#39;s not inside a location context and I don&#39;t know whether many consecutive regexes are actually worse than one large regex replace.\n\nI would be very thankful if someone with more nginx know-how could weigh in here and help me out. Thanks :)\n",
            "excerpt": "location / {\n  # set $c_uri as cache_key\n  proxy_cache_key $c_uri;\n  ...\n}\n    \n\nIt works, but it&#39;s not very concise, takes a lot of steps <span class=\"highlight\">and</span> from what I learned, if is <span class=\"highlight\">evil</span>. &hellip; It&#39;s not inside a location context <span class=\"highlight\">and</span> I don&#39;t know whether many consecutive regexes are actually worse than one large <span class=\"highlight\">regex</span> replace. &hellip; ",
            "title": "NGINX - Setting a variable with regex replace"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 116,
            "is_accepted": true,
            "answer_id": 12846121,
            "is_answered": false,
            "question_id": 12841970,
            "item_type": "answer",
            "score": 116,
            "last_activity_date": 1630933909,
            "creation_date": 1349979734,
            "body": "Why Are Evil Regexes A Problem?\nBecause computers do exactly what you tell them to do, even if it&#39;s not what you meant or is totally unreasonable. If you ask a regex engine to prove that, for some given input, there either is or is not a match for a given pattern, then the engine will attempt to do that no matter how many different combinations must be tested.\nHere is a simple pattern inspired by the first example in the OP&#39;s post:\n\nGiven the input:\n\nabababababababababababab\n\nThe regex engine tries something like  and a match is found on the first try.\nBut then we throw the monkey wrench in:\n\nabababababababababababab a\n\nThe engine will first try  but that fails because of that extra . This causes catastrophic backtracking, because our pattern , in a show of good faith, will release one of its captures (it will &quot;backtrack&quot;) and let the outer pattern try again. For our regex engine, that looks something like this:\n\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n\nThe number of possible combinations scales exponentially with the length of the input and, before you know it, the regex engine is eating up all your system resources trying to solve this thing until, having exhausted every possible combination of terms, it finally gives up and reports &quot;There is no match.&quot; Meanwhile your server has turned into a burning pile of molten metal.\nHow to Spot Evil Regexes\nIt&#39;s actually very tricky. Catastrophic backtracking in modern regex engines is similar in nature to the halting problem which Alan Turing proved was impossible to solve. I have written problematic regexes myself, even though I know what they are and generally how to avoid them. Wrapping everything you can in an atomic group can help to prevent the backtracking issue. It basically tells the regex engine not to revisit a given expression - &quot;lock whatever you matched on the first try&quot;. Note, however, that atomic expressions don&#39;t prevent backtracking within the expression, so  is still dangerous, but  is safe (it&#39;ll match  and then refuse to give up any of it&#39;s matched characters, thus preventing catastrophic backtracking).\nUnfortunately, once it&#39;s written, it&#39;s actually very hard to immediately or quickly find a problem regex. In the end, recognizing a bad regex is like recognizing any other bad code - it takes a lot of time and experience and/or a single catastrophic event.\n\nInterestingly, since this answer was first written, a team at the University of Texas at Austin published a paper describing the development of a tool capable of performing static analysis of regular expressions with the express purpose of finding these &quot;evil&quot; patterns. The tool was developed to analyse Java programs, but I suspect that in the coming years we&#39;ll see more tools developed around analysing and detecting problematic patterns in JavaScript and other languages, especially as the rate of ReDoS attacks continues to climb.\n\nStatic Detection of DoS Vulnerabilities in\nPrograms that use Regular Expressions\nValentin W&#252;stholz, Oswaldo Olivo, Marijn J. H. Heule, and Isil Dillig\nThe University of Texas at Austin\n\n",
            "excerpt": "How to Spot <span class=\"highlight\">Evil</span> Regexes\nIt&#39;s actually very tricky. Catastrophic backtracking in modern <span class=\"highlight\">regex</span> engines is similar in nature to the halting problem which Alan Turing proved was impossible to solve. &hellip; In the end, recognizing a bad <span class=\"highlight\">regex</span> is like recognizing any other bad code - it takes a lot of time <span class=\"highlight\">and</span> experience <span class=\"highlight\">and</span>/or a single catastrophic event. &hellip; ",
            "title": "How can I recognize an evil regex?"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 116,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 8,
            "is_answered": true,
            "question_id": 12841970,
            "item_type": "question",
            "score": 116,
            "last_activity_date": 1630933909,
            "creation_date": 1349965833,
            "body": "I recently became aware of Regular expression Denial of Service attacks, and decided to root out so-called &#39;evil&#39; regex patterns wherever I could find them in my codebase - or at least those that are used on user input. The examples given at the OWASP link above and wikipedia are helpful, but they don&#39;t do a great job of explaining the problem in simple terms.\n\nA description of evil regexes, from wikipedia:\n\n\nthe regular expression applies repetition (&quot;+&quot;, &quot;*&quot;) to a complex subexpression;\nfor the repeated subexpression, there exists a match which is also a suffix of another valid match.\n\n\nWith examples, again from wikipedia:\n\n\n\n\n\n\n for x &gt; 10\n\n\nIs this a problem that just doesn&#39;t have a simpler explanation? I&#39;m looking for something that would make it easier to avoid this problem while writing regexes, or to find them within an existing codebase.\n",
            "excerpt": "I recently became aware of Regular expression Denial of Service attacks, <span class=\"highlight\">and</span> decided to root out so-called &#39;<span class=\"highlight\">evil</span>&#39; <span class=\"highlight\">regex</span> patterns wherever I could find them in my codebase - or at least those that are used &hellip; The examples given at the OWASP link above <span class=\"highlight\">and</span> wikipedia are helpful, but they don&#39;t do a great job of explaining the problem in simple terms. &hellip; ",
            "title": "How can I recognize an evil regex?"
        },
        {
            "tags": [
                "regex",
                "emacs",
                "replace"
            ],
            "question_score": 60,
            "is_accepted": false,
            "answer_id": 69066512,
            "is_answered": false,
            "question_id": 677021,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1630869527,
            "creation_date": 1630869527,
            "body": "When using evil, you can simply do \n is responsible for lowercasing all following letters, this should also work for .\nI have not found documentation around Emacs for that, but it seems to match this list: https://www.boost.org/doc/libs/1_44_0/libs/regex/doc/html/boost_regex/format/perl_format.html\n",
            "excerpt": "When using <span class=\"highlight\">evil</span>, you can simply do :%s/&lt;\\([^&gt;]+\\)&gt;/&lt;\\L\\1&gt;\n\\L is responsible for lowercasing all following letters, this should also work for query-replace-regexp. &hellip; I have not found documentation around Emacs for that, but it seems to match this list: https://www.boost.org/doc/libs/1_44_0/libs/<span class=\"highlight\">regex</span>/doc/html/boost_regex/format/perl_format.html &hellip; ",
            "title": "Emacs: regular expression replacing to change case"
        },
        {
            "tags": [
                "javascript",
                "object",
                "properties",
                "evaluation",
                "template-literals"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 68726771,
            "is_answered": false,
            "question_id": 68725756,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1628670602,
            "creation_date": 1628598219,
            "body": "\nI did this. But is it a good approach ?\n\nI can not really tell, but ... Consider this ...\n\r\n\r\n\r\n\r\n\r\n\r\n\nRead on SO about why eval has limited use cases ... why is eval evil\nEdit\nFor a custom template-string evaluation / interpolation I would stick to the syntax of JavaScript Template Literals of cause without enclosing the template string by backticks.\nFor the substitution one needs a regex which targets both the valid substitute template syntax  and a valid object path syntax. Thus variable/property names can start with ,  and upper/lowercase latin letters only, whereas within a variable name the numbers from  to  are allowed. Thus a regex which does capture such a valid object path from a valid template syntax looks like this ...\n\nValue interpolation then is not that complicated anymore. One just does  an object path like  into an array of property names like . The final value can be evaluated via a simple  task which programmatically walks down the property chain of the provided object/type ...\n\r\n\r\n\r\n\r\n\r\n\r\n\nThe above approach based on a less rigid object-path regex like ...  ... then turns into the one beneath ...\n\r\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "important; top: 0; }\r\n\r\n\r\n\nRead on SO about why eval has limited use cases ... why is eval <span class=\"highlight\">evil</span>\nEdit\nFor a custom template-string evaluation / interpolation I would stick to the syntax of JavaScript Template &hellip; For the substitution one needs a <span class=\"highlight\">regex</span> which targets both the valid substitute template syntax ${ foo.bar } <span class=\"highlight\">and</span> a valid object path syntax. &hellip; ",
            "title": "Function to replace a substring with a function value in javascript"
        },
        {
            "tags": [
                "javascript",
                "if-statement",
                "string-length"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 68704897,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1628458234,
            "creation_date": 1628458057,
            "body": "I am trying to make a search like ctrl+f. I have a function that scrolls to the next keyword when you hit enter. I&#39;m trying to make it to reset the count once you went through all the words, but it just gives me an error. For example if I search &quot;Lorem&quot; it will return 13 matches, so after I hit enter for the 13th time it supposed to reset, but it gives me an error instead. I dont get why (count &lt; elements.length) doesnt work. This is the part where I&#39;m stuck:\nP.S. To avoid the confusion, &quot;mark&quot; is a custom element tag that gets wrapped to the words in the text that matches the input and then highlights it.\n\n\r\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": ") {\n    endRegExp = <span class=\"highlight\">regex</span>;\n    return endRegExp;\n  };\n\n  this.setBreakRegExp = function(<span class=\"highlight\">regex</span>) {\n    breakRegExp = <span class=\"highlight\">regex</span>;\n    return breakRegExp;\n  };\n\n  this.setMatchType = function(type)\n  {\n    switch &hellip; Lorem Ipsum comes from sections 1.10.32 <span class=\"highlight\">and</span> 1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>) by Cicero, written in 45 BC. &hellip; ",
            "title": "Javascript (count &lt; elements.length) doesnt work"
        },
        {
            "tags": [
                "javascript",
                "arrays",
                "loops",
                "full-text-search"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 68685495,
            "is_answered": false,
            "question_id": 68685355,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1628271044,
            "creation_date": 1628271044,
            "body": "You can use a variable to store the current index in the search results.\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "Lorem Ipsum comes from sections 1.10.32 <span class=\"highlight\">and</span> 1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>) by Cicero, written in 45 BC. &hellip; ) {\n    endRegExp = <span class=\"highlight\">regex</span>;\n    return endRegExp;\n  };\n\n  this.setBreakRegExp = function(<span class=\"highlight\">regex</span>) {\n    breakRegExp = <span class=\"highlight\">regex</span>;\n    return breakRegExp;\n  };\n\n  this.setMatchType = function(type)\n  {\n    switch &hellip; ",
            "title": "How can I make input matches counter on enter press like ctrl+f?"
        },
        {
            "tags": [
                "python",
                "regex",
                "validation",
                "character",
                "alphabet"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 67939520,
            "is_answered": false,
            "question_id": 48074764,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1623425430,
            "creation_date": 1623424614,
            "body": "if u want a solution that&#39;s not dependent on unicode-compliance of the utility app, for the main block of AC00-D7AF, u can use\n\nthat slab expanded out would be\n\nif u need the extra stuff - jamo, compatability jamo, circled form, parenthesized form, and half width form, append this one to the one above\neither\n\nor\n\nif you only need the modern jamo that makes up the 11,172 syllable collection, then it&#39;s a lot cleaner :\n\nor if u prefer it without superfluous brackets :\n\nps : i only formatted like this here for readability. there aren&#39;t any spaces tabs or new line in between those octal codes. it&#39;s one continuous string.\npersonally i&#39;d much rather work with clean modern era regex myself, but using these octals are an necessary evil for myself to bring mawk1.3.4 and mawk2-beta up to full UTF8 compliancy.\n(at least in terms of lengthC() ordC() substrC() and character-level splitting but at the UC13 code-point level, plus hangul-only NFD-to-NFC.\nbut nothing fancy like grapheme clusters or bi-directional texts)\n",
            "excerpt": "only formatted like this here for readability. there aren&#39;t any spaces tabs or new line in between those octal codes. it&#39;s one continuous string.\npersonally i&#39;d much rather work with clean modern era <span class=\"highlight\">regex</span> &hellip; myself, but using these octals are an necessary <span class=\"highlight\">evil</span> for myself to bring mawk1.3.4 <span class=\"highlight\">and</span> mawk2-beta up to full UTF8 compliancy. &hellip; ",
            "title": "Regex to match all Hangul (Korean) characters and syllable blocks"
        },
        {
            "tags": [
                "javascript",
                "uuid",
                "denial-of-service"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 67608989,
            "is_answered": false,
            "question_id": 67608900,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1621449218,
            "creation_date": 1621449218,
            "body": "The OWASP article you linked has your answer. A pattern is considered &quot;Evil&quot; (vulnerable to a ReDOS attack) if it contains repetition inside a repeated group.\n\nEvil Regexes\nA Regex is called “evil” if it can stuck on crafted input.\nEvil Regex pattern contains:\n\nGrouping with repetition\nInside the repeated group:\n\nRepetition\nAlternation with overlapping\n\n\n\n\n\nYour pattern does not have grouping inside of repetition so it is not vulnerable. That said, if you know you expect a UUID inside the first 36 characters of the string you are searching, there is an efficiency benefit to trimming the string  before you attempt to match. I don&#39;t know if the splice is hard enough to read to warrant the extra time searching your string, you&#39;ll have to judge that for yourself.\n",
            "excerpt": "A pattern is considered &quot;<span class=\"highlight\">Evil</span>&quot; (vulnerable to a ReDOS attack) if it contains repetition inside a repeated group.\n\n<span class=\"highlight\">Evil</span> Regexes\nA <span class=\"highlight\">Regex</span> is called “<span class=\"highlight\">evil</span>” if it can stuck on crafted input. &hellip; <span class=\"highlight\">Evil</span> <span class=\"highlight\">Regex</span> pattern contains:\n\nGrouping with repetition\nInside the repeated group:\n\nRepetition\nAlternation with overlapping\n\n\n\n\n\nYour pattern does not have grouping inside of repetition so it is not vulnerable &hellip; ",
            "title": "Is regex uuid validator is safe for untrusted strings"
        },
        {
            "tags": [
                "python",
                "string"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 66864965,
            "is_answered": false,
            "question_id": 66864721,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1617168090,
            "creation_date": 1617079811,
            "body": "Here&#39;s a regex-based approach to the problem. We form a regex from  by adding  between each letter in the word. Then we attempt to match the regex against . Since  is inherently greedy, you will get the longest possible match inside word. You can then compare the length of the matched string to the length of , and if the matched string is longer, then  is a kangaroo word:\n\nOutput:\n\nAlternatively you can take an iterative approach. There are two conditions that need to be true for the input to be a kangaroo word:\n\nthe letters of the lookup word must be present in the word in order\nthere must be at least one extra letter between the letters of the lookup word\n\nThe first condition can be tested by checking each letter in turn to see that there is an occurrence of it after the previous letter in the word. The last condition can be checked by testing that the first occurrence of the first letter is more than the length of the word away from the last occurrence of the last letter. For example:\n\nThe results are the same as the regex version.\n",
            "excerpt": "(word, lookup_word):\n    <span class=\"highlight\">regex</span> = &#39;.*&#39;.join(lookup_word)\n    match = re.search(<span class=\"highlight\">regex</span>, word)\n    return match is not None <span class=\"highlight\">and</span> len(match.group()) &gt; len(lookup_word)\n\nprint(areAllCharsInWordInOrderFixed(&#39;encourage &hellip; &#39;, &#39;urge&#39;)) # True\nprint(areAllCharsInWordInOrderFixed(&#39;devil&#39;, &#39;<span class=\"highlight\">evil</span>&#39;)) # False\nprint(areAllCharsInWordInOrderFixed(&#39;devilishly&#39;, &#39;<span class=\"highlight\">evil</span>&#39;)) # True\nprint(areAllCharsInWordInOrderFixed(&#39;encourage&#39;, &#39;nrage &hellip; ",
            "title": "Efficiently Detecting Kangaroo Words"
        },
        {
            "tags": [
                "php",
                "nginx",
                "mod-rewrite",
                "url-rewriting"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 66232867,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1613601055,
            "creation_date": 1613513189,
            "body": "From an old project, I got this .htaccess file, which currently handle the apache rewrite rules:\n\nWhat the above snippet basically does, is that it rewrites all requests to index.php by keeping the query part string intact and stop after the first match, unless the file or folder exists.\nSo, in conclusion, by consulting the Nginx docs and by adding some additional security (permit access to sensible folders and files) and performance-related stuff (enable gzip or brotli output compression where it&#39;s possible [depending on the client, which one it is able to process]), I got this:\n\nThe new Nginx configuration above downloads the PHP file instead of bypassing it to the FPM handler. I have found this and this SO questions, but it doesn&#39;t seem to do the trick for me. Also, as mentioned in Nginx documentation,  is evil and we should avoid using it unless we are 100 percent sure what&#39;s going on. So, for my configuration, I avoided using it. Mainly because regex syntax also works with  and is way more securer in that context than . I mean, as far as I know. Please correct me, if I&#39;m wrong.\nThe main  file is dead simple right now:\n\nThe file above is mainly the openSUSE distributor shipped file, with a few changes.\nAnd this is my  file, which defines the FPM proxy handler for nginx (in order to don&#39;t repeat yourself; it&#39;s neccessarily needed anyways):\n\nI&#39;d appreciate any help with that issue.\n",
            "excerpt": "Also, as mentioned in Nginx documentation, if is <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> we should avoid using it unless we are 100 percent sure what&#39;s going on. So, for my configuration, I avoided using it. &hellip; Mainly because <span class=\"highlight\">regex</span> syntax also works with location <span class=\"highlight\">and</span> is way more securer in that context than if. I mean, as far as I know. Please correct me, if I&#39;m wrong. &hellip; ",
            "title": "How to convert a simple index.php redirection from apache to nginx format?"
        },
        {
            "tags": [
                "javascript",
                "google-apps-script",
                "base64",
                "ascii85",
                "base91"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 66096684,
            "is_answered": false,
            "question_id": 66026729,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1612765309,
            "creation_date": 1612764843,
            "body": "This solution works for me. The whole 3Byte is been encoded into 4 characters. I adapted the alphabet for replacing some missleading characters (0,O,i,l,1 etc.).\nThe base64 padding (&#39;=&#39;) is been removed after encoding and will be added before decoding inside the functions. CRC4 is not perfect - better than no CRC :)\nI am happy for any feedback, suggestions further optimisations. Thanks.\nGoogle Sheet frontend:\n\nAnother tab in this documents where you can define the variations/families/recipes:\n\nHere comes the code for the app script (special credits to @Kamil Kiełczewski for his base64 snippert):\n\nThe result can be tried/decoded with following HTML/JS snippet. Its quick and dirty.\nJust enter for example:\n\nPneumatic Connector  #Xs2a\nCamera #!$cg\nPower Supply 24V #p%qz\n\nYou can try to change manually the base64 code - for testing if the CRC4 works.\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "Techsppoks&quot;,&quot;Mashable&quot;]]},14:{family:[&quot;PC Brands&quot;],types:[[&quot;Asus&quot;,&quot;Intel&quot;,&quot;Dell&quot;,&quot;HP&quot;,&quot;Alienware&quot;,&quot;Microsoft&quot;,&quot;Apple&quot;,&quot;ACer&quot;,&quot;Sony&quot;,&quot;MSI&quot;,&quot;Razer&quot;,&quot;Toshiba&quot;,&quot;Gateway&quot;,&quot;LG&quot;,&quot;Compaq&quot;,&quot;Panasonic&quot;]]},15:{family:[&quot;<span class=\"highlight\">Evil</span> &hellip; Techsppoks&quot;,&quot;Mashable&quot;]]},14:{family:[&quot;PC Brands&quot;],types:[[&quot;Asus&quot;,&quot;Intel&quot;,&quot;Dell&quot;,&quot;HP&quot;,&quot;Alienware&quot;,&quot;Microsoft&quot;,&quot;Apple&quot;,&quot;ACer&quot;,&quot;Sony&quot;,&quot;MSI&quot;,&quot;Razer&quot;,&quot;Toshiba&quot;,&quot;Gateway&quot;,&quot;LG&quot;,&quot;Compaq&quot;,&quot;Panasonic&quot;]]},15:{family:[&quot;<span class=\"highlight\">Evil</span> &hellip; ",
            "title": "Convert Binary/Hex to Base91 / Ascii85 / Base64"
        },
        {
            "tags": [
                "nginx",
                "redirect"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 66016226,
            "is_answered": false,
            "question_id": 66016014,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1612296521,
            "creation_date": 1612293486,
            "body": "\nand\n\n at end of regex will you give trailing &quot;uri path&quot; (after  and before questionmark ) in your capture group .\nUntested.\n\nOK, now I understand your question. LOL. Gimmi a sec.\n\nI know  is evil. But I think I need it.\n\nCheck with  and look for  and .\nUntested.\n\nAnother method comes to mind.\n\nUse only when order of parameters is fixed.\nUntested.\n\nIn general regarding Nginx and Regex:\n\nI like named variables (see ). So no mixup with  in different scopes (http, server, location, deeper location, if, ...).\n will match all characters except of .\nSo  will make sure that you get the whole argument but not more.\n\n",
            "excerpt": "I know if is <span class=\"highlight\">evil</span>. But I think I need it.\nlocation ~ ^/a(/.*$|$)\n{\n    set $target_uri &#39;/b/c&#39;;\n    set $change_target_uri &#39;&#39;;\n    if ($arg_x)  # you can&#39;t have `<span class=\"highlight\">and</span>` in Nginx `if` condition! &hellip; In general regarding Nginx <span class=\"highlight\">and</span> <span class=\"highlight\">Regex</span>:\n\nI like named variables (see blubbi). So no mixup with $1 in different scopes (http, server, location, deeper location, if, ...). &hellip; ",
            "title": "How to redirect URLs with changing a path, but maintaining a parameter on Nginx?"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "cross-domain",
                "browser-plugin",
                "firefox-addon-webextensions"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 65368730,
            "is_answered": false,
            "question_id": 40572065,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1608373093,
            "creation_date": 1608373093,
            "body": "I had a similar issue today where my webextension had to call a javascript function that can only be accessed from the context of a specific web page and I was kinda annoyed that I was supposed to do all the script injection and json serialization and whatnot. But there&#39;s actually a pretty simple solution:\n\n will execute whatever code you pass to it in the context of the page instead of your content script.\nyeah, I know eval is evil, but in this context it really makes sense, because what I want to do (execute arbitrary code in the context of a web page) is evil by definition. It&#39;s like parsing HTML with regex; once you&#39;re at that point, you&#39;re tainted. Also, you&#39;re finally free from the burdens of writing code that is considered lawful good. So let&#39;s embrace the eval, just this one time ;)\n",
            "excerpt": "the script injection <span class=\"highlight\">and</span> json serialization <span class=\"highlight\">and</span> whatnot. &hellip; It&#39;s like parsing HTML with <span class=\"highlight\">regex</span>; once you&#39;re at that point, you&#39;re tainted. Also, you&#39;re finally free from the burdens of writing code that is considered lawful good. &hellip; ",
            "title": "Calling webpage JavaScript methods from browser extension"
        },
        {
            "tags": [
                "php",
                "preg-match",
                "extract",
                "alphanumeric"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 65283534,
            "is_answered": false,
            "question_id": 63154404,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1607919468,
            "creation_date": 1607919468,
            "body": "Unless you are doing hundreds of thousands of iterations of this technique, I don&#39;t think &quot;speed&quot; should factor into as a decision making criteria.\nFor me, I place a high importance on directness then readability.  For this reason, I probably wouldn&#39;t entertain a technique that generated arrays, incorporated a loop, or frankly, made more than one function call.  Regex isn&#39;t evil (I, for one, love it), so unless there is another single-function technique, I opt for regex every time.\nThat said, the only non-regex way (that isn&#39;t terribly convoluted) that I found is as @rid commented with .\n\n has the benefit of being more concise, arguably easier to read, and will not cause headaches if  your project needs to honor multi-byte characters in the future.\n does not generate a temporary array/variable from which the correct value must be extracted, and is very likely to outperform any  call but not to a noticeable/valuable degree.\n\nNotice that in my demo, the &quot;character mask&quot; seems to accept not more than one range of characters.  It would be handy if I could specify , but I was unable to get that to work.\nCode: (Demo)\n\nOutput:\n\nUltimately, I&#39;d go for  because I have used it thousands of times in my career as a php dev.  Conversely, I&#39;ve probably used  a maximum of 1 time in my career (outside of playing around on Stack Overflow) -- so there is a lack of familiarity / intuitive-ness.\n",
            "excerpt": "<span class=\"highlight\">Regex</span> isn&#39;t <span class=\"highlight\">evil</span> (I, for one, love it), so unless there is another single-function technique, I opt for <span class=\"highlight\">regex</span> every time. &hellip; That said, the only non-<span class=\"highlight\">regex</span> way (that isn&#39;t terribly convoluted) that I found is as @rid commented with strcspn(). &hellip; ",
            "title": "Get the first letter/number of string that is not a special character"
        },
        {
            "tags": [
                "java",
                "date",
                "dateformatter"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 65018928,
            "is_answered": false,
            "question_id": 65017630,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1606381554,
            "creation_date": 1606381554,
            "body": "After looking at the documentation, there seems to be no way to see which of the optional formats succeeded. So the easy way out is to build a collection of formatters to try, and to use them in order until one succeeds. However, this is ugly: you are using exceptions for flow-control\n\nAn existing question on SO deals with this problem. My suggested answer goes along the lines of one of its answers.\nA cleaner option may be to use your formats both as regular expressions (to only examine likely candidates) and as actual date formats (to parse only the good candidates). This comes at a cost in readability, and will still throw exceptions when parsing ambiguous formats, because the format-to-regex code is very simplistic:\n\nThe initial code could now be written as:\n\nBefore complicating this further, I would probably just go with ugly exceptions-as-control-flow (1st code snippet) as a lesser evil to re-implementing a time-parsing library.\ndisclaimer: above code is un-tested and may not compile and/or perform as expected\n",
            "excerpt": "This comes at a cost in readability, <span class=\"highlight\">and</span> will still throw exceptions when parsing ambiguous formats, because the format-to-<span class=\"highlight\">regex</span> code is very simplistic:\nenum FormatCandidate {\n    YMD(&quot;yyyyMMdd&quot;), &hellip; to re-implementing a time-parsing library.\ndisclaimer: above code is un-tested <span class=\"highlight\">and</span> may not compile <span class=\"highlight\">and</span>/or perform as expected &hellip; ",
            "title": "How to get date pattern for a date in Java"
        },
        {
            "tags": [
                "ruby",
                "string",
                "methods",
                "startswith"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 64953628,
            "is_answered": false,
            "question_id": 64951639,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1606044583,
            "creation_date": 1606044583,
            "body": "As a general rule, you should never ever blindly execute inputs from untrusted sources.\nInterpolating untrusted input into a  is not quite as bad as interpolating it into, say, , because the worst thing an attacker can do with a  is to construct an Evil Regex to conduct a Regular expression Denial of Service (ReDoS) attack (see also the section on Performance in the  documentation), whereas with , they could execute arbitrary code, including but not limited to, deleting the entire file system, scanning memory for unencrypted passwords / credit card information / PII and exfiltrate that via the network, etc.\nHowever, it is still a bad idea. For example, when I say &quot;the worst thing that happen is a ReDoS&quot;, that assumes that there are no bugs in the  implementation (Onigmo in the case of YARV, Joni in the case of JRuby and TruffleRuby, etc.) Ruby&#39;s s are quite powerful and thus Onigmo, Joni and co. are large and complex pieces of code, and may very well have their own security holes that could be used by a specially crafted .\nYou should properly sanitize and escape the user input before constructing the . Thankfully, the Ruby core library already contains a method which does exactly that: . So, you could do something like this:\n\nThe reason why your attempt at using  didn&#39;t work, is that  is for representing a  the same way you would have to write it as a  literal, i.e. it is escaping  metacharacters, not  metacharacters and it is including the quote characters around the  that you need to have it recognized as a  literal. You can easily see that when you simply try it out:\n\nSo, that means that \n\nincludes the quotes (which you don&#39;t want),\nescapes characters that don&#39;t need escaping in  just because they need escaping in s (e.g.  or ), and\ndoesn&#39;t escape characters that don&#39;t need escaping in s (e.g. , , , , , , ).\n\n",
            "excerpt": "Interpolating untrusted input into a Regexp is not quite as bad as interpolating it into, say, Kernel#eval, because the worst thing an attacker can do with a Regexp is to construct an <span class=\"highlight\">Evil</span> <span class=\"highlight\">Regex</span> to conduct &hellip; Ruby&#39;s Regexps are quite powerful <span class=\"highlight\">and</span> thus Onigmo, Joni <span class=\"highlight\">and</span> co. are large <span class=\"highlight\">and</span> complex pieces of code, <span class=\"highlight\">and</span> may very well have their own security holes that could be used by a specially crafted Regexp. &hellip; ",
            "title": "Get the same results from string.start_with? and string[ ]"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 64651494,
            "is_answered": false,
            "question_id": 64650569,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1604345077,
            "creation_date": 1604342766,
            "body": "Are you sure you have to do that? If you have only a limited number of possible functions, the safest thing to do is to simply map them, and then separate the wanted function and the arguments in the variable, using an array instead. More on that later.\nIf you wanted to provide a generic means for calling functions, you could for example:\n\nI&#39;m using  here, since  is a language statement and not a function, and therefore wouldn&#39;t work like this. If you had to echo here, you&#39;d have to make your own echo wrapper function, like , and call that instead.\nOr, for more readable code, you could list the array as:\n\nIf you needed multiple arguments, you could use this structure:\n\nWhere the arguments listed in the arguments array, unpacked with the splat operator, are in the same order as the target function&#39;s arguments.\nThere are of course only a limited number of useful functions that will directly output anything. Therefore, in the above example we capture the result from  instead and then echo; this simply to illustrate the basic use of variable functions and arguments.\nThis approach will however provide unhinged access to any function in your system, and as such shouldn&#39;t be used on anything but data/calls from trusted sources (you). Allowing users to provide any commands will open up your system to a world of mischief and misery.\nTherefore, my initial recommendation of providing a map of functions. You could:\n\nHave an array with a list of allowed core functions,\nHave an array with a list of your custom wrapper functions, or\nCheck for valid wrapper functions named with a prefix\n\nYou could for example implement wrappers as follows:\n\nThis would give you control over what&#39;s executed, and also whether values are returned or output, etc. pre/post-process. And then iterate your variable commands as follows:\n\nFor an additional layer of insulation, create a class with your custom calls as its methods, instead of polluting the global space with more functions. Ciykd use a public router method that handles no-match cases; calling e.g. , where  returns the  methods.\nI often do something like this when I need to map user requests to class public methods that return output; named e.g. ,  etc. and  for a fallback for unmatched requests. Handy for quick prototyping, where  =&gt; .\nIf you&#39;re stuck with receiving a string command (why?), you can use regex to parse it into something you can pass to functions. Or, if you absolutely trust the data,  isn&#39;t inherently and categorically evil, especially where a work-around would make for a more complex but equally wide back-door to your system. It&#39;s just not very elegant and smells of sloppy design.\n",
            "excerpt": ", you can use <span class=\"highlight\">regex</span> to parse it into something you can pass to functions. &hellip; Or, if you absolutely trust the data, eval isn&#39;t inherently <span class=\"highlight\">and</span> categorically <span class=\"highlight\">evil</span>, especially where a work-around would make for a more complex but equally wide back-door to your system. &hellip; ",
            "title": "Eval alternative to run script from string"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "security",
                "denial-of-service",
                "automaton"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 34042556,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1597852429,
            "creation_date": 1449058629,
            "body": "Is there an algorithm to determine whether a given JavaScript regex is vulnerable to ReDoS? The algorithm doesn&#39;t have to be perfect - some false positives and false negatives are acceptable. (I&#39;m specifically interested in ECMA-262 regexes.)\n",
            "excerpt": "Is there an algorithm to determine whether a given JavaScript <span class=\"highlight\">regex</span> is vulnerable to ReDoS? The algorithm doesn&#39;t have to be perfect - some false positives <span class=\"highlight\">and</span> false negatives are acceptable. &hellip; ",
            "title": "How can I programmatically identify evil regexes?"
        },
        {
            "tags": [
                "java",
                "regex",
                "multithreading"
            ],
            "question_score": 22,
            "is_accepted": false,
            "answer_id": 63458755,
            "is_answered": false,
            "question_id": 910740,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1597698915,
            "creation_date": 1597698915,
            "body": "What about checking the user-submitted regex for &quot;evil&quot; patterns prior to execution using one or more regex patterns (this could be in to form of a method called prior to conditional execution of the regex):\nThis regex:\n\nWill match:\n\nThis Regex:\n\nWill match:\n\nThis Regex:\n\nWill match:\n\nI may be a bit naive wrt Regex and Regex DoS, but I can&#39;t help but think that a little pre-screening for known &quot;evil&quot; patterns would go a long way toward preventing issues at execution time, especially if the regex in question is an input provided by an end user.  The patterns above are likely not refined enough, since I am far from an expert on regex.  It is just food for thought, since everything else I have found out there seems to indicate it can&#39;t be done, and focuses on either putting a time-out on the regex engine, or limiting the number of iterations it is allowed to execute.\n",
            "excerpt": "What about checking the user-submitted <span class=\"highlight\">regex</span> for &quot;<span class=\"highlight\">evil</span>&quot; patterns prior to execution using one or more <span class=\"highlight\">regex</span> patterns (this could be in to form of a method called prior to conditional execution of the <span class=\"highlight\">regex</span> &hellip; *a){x} for x \\&gt; 10\n\nI may be a bit naive wrt <span class=\"highlight\">Regex</span> <span class=\"highlight\">and</span> <span class=\"highlight\">Regex</span> DoS, but I can&#39;t help but think that a little pre-screening for known &quot;<span class=\"highlight\">evil</span>&quot; patterns would go a long way toward preventing issues at execution &hellip; ",
            "title": "Cancelling a long running regex match?"
        },
        {
            "tags": [
                "python",
                "python-3.x",
                "python-typing",
                "pep585"
            ],
            "question_score": 18,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 62871524,
            "item_type": "question",
            "score": 18,
            "last_activity_date": 1594748703,
            "creation_date": 1594627137,
            "body": "PEP 585 -- Type Hinting Generics In Standard Collections claims usability under both Python 3.7 and 3.8 with a standard  preamble. Notably:\n\nFor use cases restricted to type annotations, Python files with the  future-import (available since Python 3.7) can parameterize standard collections, including builtins.\n\n\nStarting with Python 3.7, when  is used, function and variable annotations can parameterize standard collections directly. Example:\n\n\nWhile the above toy example does technically parse, that&#39;s about all it does. Attempting to actually use a parametrized builtin collection at runtime under either Python 3.7 or 3.8 invariably raises the dreaded  exception:\n\nNote the  statement is the standard idiom for resolving PEP 563-style postponed annotations at runtime. Don&#39;t even get me started on PEP 563.\nwho you gonna believe: me or your lying PEP?\nThis discourages the devout Pythonista in me. PEP 585 repeatedly claims that it preserves runtime usability:\n\nPreserving the generic type at runtime enables introspection of the type which can be used for API generation or runtime type checking. Such usage is already present in the wild.\n\n\nJust like with the  module today, the parameterized generic types listed in the previous section all preserve their type parameters at runtime:\n\n\nOf course, none of the above works under Python 3.7 or 3.8 – regardless of whether  is enabled or not:\n\nSo PEP 585 blatantly breaks the wild and all existing attempts to introspect generic types at runtime – especially from runtime type checkers. The entire &quot;Parameters to generics are available at runtime&quot; section is a charade.\nAm I missing something painfully obvious or are parametrized builtin collections the poison pill they superficially appear to be? Since evaluating these collections at runtime under Python 3.7 and 3.8 unconditionally raises exceptions, they&#39;re unusable at runtime – rendering them not simply useless but directly harmful for the widespread use case of type introspection and especially runtime type checking.\nbetween a rock and a hard PEP\nAny codebase type-hinting with parametrized builtin collections will be fundamentally incompatible with runtime type checkers under Python 3.7 and 3.8. Codebases preferring runtime to static type checking while preserving backward compatibility with Python &lt; 3.9 (which has yet to even be officially released as of this writing) thus have no choice but to avoid parametrized builtin collections entirely.\nExcept that too is infeasible. Why? Because PEP 585 deprecates the entire hierarchy of  pseudo-containers:\n\nImporting those [e.g., , , ] from  is deprecated. Due to PEP 563 and the intention to minimize the runtime impact of , this deprecation will not generate . Instead, type checkers may warn about such deprecated usage when the target version of the checked program is signalled to be Python 3.9 or newer. It&#39;s recommended to allow for those warnings to be silenced on a project-wide basis.\n\n\nThe deprecated functionality will be removed from the  module in the first Python version released 5 years after the release of Python 3.9.0.\n\nConsider , for example. By 2025 (or shortly thereafter),  and thus  goes away. But  isn&#39;t safely parametrizable under Python 3.7 and 3.8, because doing so renders your project incompatible with anything that introspects types. So  isn&#39;t a viable option, either.\nSo there are no forward- and backward-compatible options. Instead, either:\n\nProhibit type introspection (and thus runtime type checking) entirely by just preferring builtin containers (e.g., ) to  pseudo-containers (e.g., ) or...\nSupport type introspection (and thus runtime type checking) by either:\n\nPreferring  pseudo-containers to builtin containers until 2025. At that time, both the project in question and all downstream projects of that project will need to be refactored as follows:\n\nDrop Python 3.7 and 3.8 support.\nReplace all  pseudo-containers with builtin containers.\n\n\nImmediately dropping Python 3.7 and 3.8 support by preferring builtin containers to  pseudo-containers. This has the distasteful disadvantage of requiring a currently unstable Python interpreter, but... that&#39;s technically an option. Somehow.\n\n\n\nIn 2020, there are no good options – only a spectrum of increasingly horrifying lessers of several malignant evils. One would hope that PEP authors would actually test their implementations at runtime. Yet, here we are, adrift without a paddle in a steaming cesspit of theorycrafted anti-APIs. Welcome to Python.\nbut that&#39;s not all\nThere is technically a third way. It&#39;s even more distasteful – but it should technically work. One awful theorycrafting deserves another, I always say!\nSince PEP 563-driven postponed annotations are merely strings, type introspection could cleverly run a regex-based replacement on each type being introspected. For each type that is a postponed annotation, globally replace each substring referencing a parametrized builtin container (e.g., ) in that annotation string with the corresponding substring referencing a parametrized  pseudo-container (e.g., ).\nThe result? A Python 3.7- and 3.8-compatible postponed annotation string safely evaluatable until 2025, at which point that internal replacement (and Python 3.7 and 3.8 support) could just be quietly dropped.\nThat&#39;s a totally cray-cray ludicrous speed kludge for the stars, but... that would probably work. The core issue, of course, is that one shouldn&#39;t need insane hackery just to comply with core official PEPs. But there&#39;s an even deeper underlying cultural issue underneath that technical issue. No one – neither the author of PEP 585 nor any of the commentators reviewing PEP 585 – actually tested their new hypothetical proposed functionality before deprecating the existing well-tested functionality that actually worked.\nCore official PEPs should just work out of the box. Increasingly, they don&#39;t. And that should concern everyone.\n",
            "excerpt": "Since PEP 563-driven postponed annotations are merely strings, type introspection could cleverly run a <span class=\"highlight\">regex</span>-based replacement on each type being introspected. &hellip; <span class=\"highlight\">And</span> that should concern everyone. &hellip; ",
            "title": "Is PEP 585 unusable at runtime under Python 3.7 and 3.8?"
        },
        {
            "tags": [
                "java",
                "double"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 62242174,
            "is_answered": false,
            "question_id": 62240868,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1591515619,
            "creation_date": 1591514948,
            "body": "I assume that &quot;overflow&quot; is talking about a number that is too large to represent.\n\nIf you call  on a &quot;really large number&quot;, you will actually get an INF value ... not an exception1.  So the simple solution2 to numbers that overflow is to use  to test the result of calling .  \n\nIt will be more efficient AND less code to do the conversion and test the result that to (try to) check before doing the test.\n\n\n\n1 - I checked the Java 11 source code.  Look at the code for .  The comments are kind of amusing.\n\n2 - If you are a graduate of the &quot;exceptions are evil&quot; school of thinking, you could use a regex to check the syntax of the string before calling .  My opinion is that it is unnecessary.  Just handle the exception.\n",
            "excerpt": "It will be more efficient <span class=\"highlight\">AND</span> less code to do the conversion <span class=\"highlight\">and</span> test the result that to (try to) check before doing the test.\n\n\n\n1 - I checked the Java 11 source code. &hellip; The comments are kind of amusing.\n\n2 - If you are a graduate of the &quot;exceptions are <span class=\"highlight\">evil</span>&quot; school of thinking, you could use a <span class=\"highlight\">regex</span> to check the syntax of the string before calling parseDouble. &hellip; ",
            "title": "Java Parse String to Double Overflow Check"
        },
        {
            "tags": [
                "regex",
                "apache",
                "nginx",
                "nginx-reverse-proxy"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 62199241,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1591305525,
            "creation_date": 1591286915,
            "body": "guys,\n\nI&#39;m in the process of migrating an application using a front Apache reverse-proxy to a NGinx reverse proxy.\n\nI&#39;m trying to find the right way to convert this rule :\n\n\n\nFrom my understanding, it means &quot;If the requested file name starts with /web, but doesn&#39;t contain the string &#39;-staging/&#39;, then redirect to the same URI without the /web, using a 307 HTTP redirection.\n\nI&#39;ve been trying using locations to get this, then regex, (trying to prevent using evil &quot;if&quot;), but no way, it&#39;s beyond my knowledge.\n\nCould someone help me to figure how to get this properly (the website will have heavy traffic, so, looking for something optimized), please ? Thank you in advance.\n",
            "excerpt": "I&#39;ve been trying using locations to get this, then <span class=\"highlight\">regex</span>, (trying to prevent using <span class=\"highlight\">evil</span> &quot;if&quot;), but no way, it&#39;s beyond my knowledge. &hellip; ",
            "title": "NGinx - Right way to rewrite URI matching a string and not the second"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 6,
            "is_accepted": true,
            "answer_id": 37734685,
            "is_answered": false,
            "question_id": 37734164,
            "item_type": "answer",
            "score": 10,
            "last_activity_date": 1589814973,
            "creation_date": 1465500654,
            "body": " is not a back reference in Java&#39;s regexes, nor in any other flavor I can think of. You only use  when you are replacing something:\n\n\n\nThere is some misinformation about what a back reference is, including the very place I got that snippet from: simple java regex with backreference does not work.\n\n\n\nJava modeled its regex syntax after other existing flavors where the  was already a meta character. It anchors to the end of the string (or line in multi-line mode).\n\nSimilarly, Java uses  for back references. Because regexes are strings, it must be escaped: .\n\nFrom a lexical/syntactic standpoint it is true that  could be used unambiguously (as a bonus it would prevent the need for the &quot;evil escaped escape&quot; when using back references). \n\nTo match a  that comes after the end of a line the regex would need to be :\n\n\n\nIt just makes more sense to use a familiar syntax instead of changing the rules, most of which came from Perl.\n\nThe first version of Perl came out in 1987, which is much earlier than Java, which was released in beta in 1995. \n\nI dug up the man pages for Perl 1, which say:\n\n\n  The bracketing construct  may also be used, in which case  matches the &#39;th substring. (Outside of the pattern, always use  instead of  in front of the digit. The scope of  (and ,  and ) extends to the end of the enclosing BLOCK or eval string, or to the next pattern match with subexpressions. The  notation sometimes works outside the current pattern, but should not be relied upon.) You may have as many parentheses as you wish. If you have more than 9 substrings, the variables , , ... refer to the corresponding substring. Within the pattern, , , etc. refer back to substrings if there have been at least that many left parens before the backreference. Otherwise (for backward compatibilty)  is the same as , a backspace, and  the same as , a tab. And so on. ( through  are always backreferences.)\n\n",
            "excerpt": "The scope of $&lt;digit&gt; (<span class=\"highlight\">and</span> $\\`, $&amp; <span class=\"highlight\">and</span> $&#39;) extends to the end of the enclosing BLOCK or eval string, or to the next pattern match with subexpressions. &hellip; Otherwise (for backward compatibilty) \\10 is the same as \\010, a backspace, <span class=\"highlight\">and</span> \\11 the same as \\011, a tab. <span class=\"highlight\">And</span> so on. (\\1 through \\9 are always backreferences.) &hellip; ",
            "title": "Regex backreferences in Java"
        },
        {
            "tags": [
                "php",
                "string",
                "matching"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 61282294,
            "is_answered": false,
            "question_id": 61282060,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1587165991,
            "creation_date": 1587165991,
            "body": "This sounds more like an algorithms question than a PHP question specifically.  Take a look at What is the fastest substring search algorithm?\n\nWell you can transform this into something like an O(n log n) algorithm, but it depends on the implementation specifics of :\n    \n\n\n\nHere each substring is examined by  exactly once.  Probably a better solution is to compose these strings into a series of regexes.  Internally, the regex engine is able to scan text very efficiently, typically scanning each character only one time:\n\nex.:\n\n\n\nFor your purposes the practical solution is very much dependent upon how many rigs you&#39;ve got an how many substrings per rig.  I suspect that unless you&#39;re dealing with tens of thousands of rigs or unless performance is a critical aspect of this application, a naive O(n^2) solution would probably suffice.  (Remember that premature optimization is the root of all evil!)  A simple benchmark would bear this out.\n\nAn even-better solution -- and potentially faster -- would be to set up an elasticsearch instance, but once again that may be too much effort to go to when a naive approach would suffice in a fraction of the implementation time.\n",
            "excerpt": "Internally, the <span class=\"highlight\">regex</span> engine is able to scan text very efficiently, typically scanning each character only one time:\n\nex.:\n\n&lt;? &hellip; (Remember that premature optimization is the root of all <span class=\"highlight\">evil</span>!)  A simple benchmark would bear this out. &hellip; ",
            "title": "Does a string contain any of a list of substrings in PHP?"
        },
        {
            "tags": [
                "php",
                "regex",
                "bash",
                "awk",
                "sed"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 60476607,
            "is_answered": false,
            "question_id": 23706113,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1583116553,
            "creation_date": 1583076051,
            "body": "Goal:\n\nRemove  from the beginning of every PHP file&#39;s first line using the stream editor, sed.\n\nDiscussion:\n\nThe stream editor has implicit and explicit line addressing. If you omit line addresses (numeric, regular expressions, or a combination of both), then the entire file is processed.\n\nPoint 1:\n\nIf you only want to target the first line, then you should specify it explicitly.\n\n\n\nHowever, since you are trying to rid your files of &quot;evil&quot;, you probably want to remove &quot;evil&quot; anywhere (globally) it is found on the first line.\n\n\n\nPoint 2:\n\nThe &quot;evil&quot; you are dealing with uses non-alpha numeric characters, so you must be wary of using it as input in various contexts. In order to use a regular expression to search for regular expression meta-characters (?, +, *, [, ], ., et al), you must either:\n\n\nEscape the meta-characters with backslashes to avoid pattern\ncollisions (Example: ), or\nChange the regular expression pattern delimiter to avoid a pattern collision, or\nBoth (This is what you should do in this case).\n\n\nIn sed, you can change the regex pattern delimiter by escaping a character before your pattern begins.\n\nExample:\n\n\n\nPoint 3:\n\nYou can search for strings as a  with regular expressions in sed! By definition, the most basic pattern is a sequence of characters. However, you must adhere to point number two above and escape any regex meta-characters, or the default pattern delimiter, /, if necessary.\n\nSolution 1:\n\nYour evil, I mean regex pattern, has regex meta-characters and the default pattern delimiter embedded in it!\n\n\n\nI would prescribe the following. Notice that I am now using double quotes because I want the shell to do variable interpolation before executing . Also, because I changed the regex pattern delimiter to , I did not need to escape the two forward slashes associated with that micro block quote. :-)\n\n\n\nNote: I will go out on a limb and say that anyone that puts white spaces in their file names should consider using the underscore, , instead.\n\nMr. @Ed Morton above is trying to warn against the possibility of word splitting, but  should prevent it if you pass your list into a function like above.\n\nHidden, non-printing characters in file names can be hard to deal with, but this specific solution should work for your problem to a high degree of certainty (99.9999%).\n\nSolution 2:\n\nMore generically:\n\n\n\nSolution 3:\n\nIn the event that it would be better to delete the first line of all the files ...\n\n\n\nFinal Note:\n\nBe sure to execute this solution with enough permissions, or else the  command will return messages to  in the following format.\n\n\n",
            "excerpt": "However, you must adhere to point number two above <span class=\"highlight\">and</span> escape any <span class=\"highlight\">regex</span> meta-characters, or the default pattern delimiter, /, if necessary. &hellip; Solution 1:\n\nYour <span class=\"highlight\">evil</span>, I mean <span class=\"highlight\">regex</span> pattern, has <span class=\"highlight\">regex</span> meta-characters <span class=\"highlight\">and</span> the default pattern delimiter embedded in it!\n\n&lt;?php /**/ eval(base64_decode(&quot;aWYoZnVuY3Rpb25&quot;));? &hellip; ",
            "title": "sed causing bash script to hang"
        },
        {
            "tags": [
                "python",
                "regex",
                "python-3.x"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 59669445,
            "is_answered": false,
            "question_id": 59668935,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1579918713,
            "creation_date": 1578591452,
            "body": "Your pattern is affected by catastrophic backtracking.\n\nHere is an alternative pattern that should work with your input:\n\n\n\nThis assumes that there must always be at least one non-word character separating the words (otherwise it would just match one long, unbroken word).\n\n(See also: How can I recognize an evil regex?)\n",
            "excerpt": "Here is an alternative pattern that should work with your input:\n\n<span class=\"highlight\">regex</span> = r&quot;preceding[^A-Za-z0-9\\n\\r]+(?:\\w+[^A-Za-z0-9\\n\\r]+)+? &hellip; (See also: How can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>?) &hellip; ",
            "title": "Python RegEx findall not responding"
        },
        {
            "tags": [
                "r"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 59699127,
            "is_answered": false,
            "question_id": 59699094,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1578782303,
            "creation_date": 1578781030,
            "body": "\n\nSince you want to preserve the single , you can use any of the following for more-specific patterns:\n\n\n\n(The exception for  in the second example is not strictly needed here, but provided as an example.)\n\nThe use of a &quot;look-ahead&quot; ( is used because you stated the requirement for a space before and after; if you use a pattern of , then it will miss many of the single letters (due to recursive replacements). If you relax this a little, then you can use word-boundaries, as in\n\n\n\n(While using perl-style regexes can technically have a performance penalty, I suspect that that really only matters if you&#39;re doing a lot and need to improve performance as much as you can. Not strictly required, and early optimization is &quot;the root of all evil&quot; - Donald Knuth)\n\nNote: In this last pattern, I&#39;m also excepting a lower-case  in addition to the upper-case ; if you are confident that you will never see an otherwise-valid , then you can adjust your pattern to use  instead. (Thanks to @jay.sf for highlighting this assumption.)\n",
            "excerpt": "= )&quot;, &quot;&quot;, &quot;I am a text r r o n n r <span class=\"highlight\">and</span> here&quot;, perl = TRUE)\n# [1] &quot;I am a text <span class=\"highlight\">and</span> here&quot;\n\n### any single-letter except &quot;a&quot; <span class=\"highlight\">and</span> &quot;i&quot;\ngsub(&quot;\\\\s[B-HJ-Zb-hj-z](? &hellip; Not strictly required, <span class=\"highlight\">and</span> early optimization is &quot;the root of all <span class=\"highlight\">evil</span>&quot; - Donald Knuth)\n\nNote: In this last pattern, I&#39;m also excepting a lower-case i in addition to the upper-case I; if you are confident &hellip; ",
            "title": "Remove single alphabetic letters strings"
        },
        {
            "tags": [
                "regex",
                "html-parsing"
            ],
            "question_score": 236,
            "is_accepted": false,
            "answer_id": 44577760,
            "is_answered": false,
            "question_id": 590747,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1576560760,
            "creation_date": 1497564407,
            "body": "HTML/XML is divided into markup and content. \nRegex is only useful doing a lexical tag parse.\nI guess you could deduce the content.\nIt would be a good choice for a SAX parser.\nTags and content could be delivered to a user\ndefined function where nesting/closure of elements\ncan be kept track of.  \n\nAs far as just parsing the tags, it can be done with\nregex and used to strip tags from a document.\n\nOver years of testing, I&#39;ve found the secret to the\nway browsers parse tags, both well and ill formed.  \n\nThe normal elements are parsed with this form:\n\nThe core of these tags use this regex\n\n\n\nYou&#39;ll notice this  as one of the alternations.\nThis will match unbalanced quotes from ill-formed tags.  \n\nIt is also, the single most root of all evil to regular expressions.\nThe way it&#39;s used will trigger a bump-along to satisfy it&#39;s greedy, must-match\nquantified container.  \n\nIf used passively, there is never a problem\nBut, if you force something to match by interspersing it with\na wanted attribute/value pair, and don&#39;t provide adequate protection\nfrom backtracking, it&#39;s an out of control nightmare.\n\nThis is the general form for just plain old tags.\nNotice the   representing the tag name?\nIn reality, the legal characters representing the tag name\nare an incredible list of Unicode characters.  \n\n\n\n\n\nMoving on, we also see that you just can&#39;t search for a specific tag\nwithout parsing ALL tags.\nI mean you could, but it would have to use a combination of\nverbs like (*SKIP)(*FAIL) but still all tags have to be parsed.\n\nThe reason is that tag syntax may be hidden inside other tags, etc.\n\nSo, to passively parse all tags, a regex is needed like the one below.\nThis particular one matches invisible content as well.\n\nAs new HTML or xml or any other develop new constructs, just add it as\none of the alternations. \n\n\n\nWeb page note - I&#39;ve never seen a web page (or xhtml/xml) that this\nhad trouble with. If you find one, let me know.  \n\nPerformance note - It&#39;s quick. This is the fastest tag parser I&#39;ve seen\n(there may be faster, who knows).\nI have several specific versions.  It is also excellent as scraper\n(if you&#39;re the hands-on type).\n\n\n\nComplete raw regex  \n\n  \n\nFormatted look  \n\n\n",
            "excerpt": "HTML/XML is divided into markup <span class=\"highlight\">and</span> content. \n<span class=\"highlight\">Regex</span> is only useful doing a lexical tag parse.\nI guess you could deduce the content.\nIt would be a good choice for a SAX parser. &hellip; As far as just parsing the tags, it can be done with\n<span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> used to strip tags from a document. &hellip; ",
            "title": "Using regular expressions to parse HTML: why not?"
        },
        {
            "tags": [
                "c++",
                "boost",
                "boost-spirit"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 59200636,
            "is_answered": false,
            "question_id": 59198525,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1575567901,
            "creation_date": 1575567901,
            "body": "The simplest without semantic actions&#185; would be to parse into an AST which you then interpret.\n\nThe more tedious approach would be to use semantic actions to build the result. (Keep in mind this gets problematic with backtracking grammars.)\n\nSimilar answers I have made:\n\n\nParsing comma-separated list of ranges and numbers with semantic actions\nA regex-based approach for range-expressions here method for expand a-z to abc...xyz form\nA competing version that uses C for performance method for expand a-z to abc...xyz form\n\n\nWithout further ado:\n\nUsing an AST Representation\n\nAn example AST:\n\n\n\n\n  The  is a good place where we can do logic asserts like &quot;the number of periods isn&#39;t zero&quot; or &quot;if the number of periods is 1, start and end must coincide&quot;.\n\n\nNow, for our end-result we want to have a translation to just-a-vector-of-V:\n\n\n\nNow that we have the basics down, let&#39;s parse and test:\n\nParsing\n\nFirst, let&#39;s adapt the AST types:\n\n\n\n\n  Note: the &quot;natural grammar order&quot; of the adapted properties makes attribute propagation painless without semantic actions\n\n\nNow let&#39;s roll a grammar:\n\n\n\n\n  Note:\n  \n  \n   enables rule debugging\n  The order of  is important, since  also parses individual numbers (so it would prevent  from being parsed in time.\n  \n\n\nA simple utility to invoke the parser and also  the intermediate representation:\n\n\n\nTesting\n\nThe proof of the pudding is in the eating:\n\nLive On Coliru\n\n\n\nPrinting\n\n\n\nUsing Semantic Actions Instead\n\nThis might be more efficient and I found I actually prefer the expressiveness of this approach.\n\nIt might not scale well as the grammar grows more complicated though.\n\nHere we &quot;invert&quot; the flow:\n\n\n\nHere  and  in the semantic actions are Lazy Actors that basically perform the same operation as  did in the AST-based appraoch, but\n\n\non the fly\nthe first operand is implicit (it is the last value already at the back of the vector)\n\n\nThis makes for a few extra checks (we don&#39;t want UB when the user passes a string that starts with  or ):\n\n\n\nTo avoid tedious  in the semantic actions, let&#39;s adapt as Phoenix Functions:\n\n\n\nParsing\n\nThe  helper became simpler because we have no intermediate representation:\n\n\n\nTesting\n\nAgain, the proof of the pudding is in the eating. The test program with unmodified :\n\nLive On Coliru\n\n\n\nPrinting the same as before:\n\n\n\n\n\n&#185; Boost Spirit: &quot;Semantic actions are evil&quot;?\n",
            "excerpt": "Similar answers I have made:\n\n\nParsing comma-separated list of ranges <span class=\"highlight\">and</span> numbers with semantic actions\nA <span class=\"highlight\">regex</span>-based approach for range-expressions here method for expand a-z to abc...xyz form\nA competing &hellip; the same as before:\n\n&quot;1 1.5 2 2.5 3 FOR 4 3.5&quot; -&gt; PASSED {  {1, 1.5, 2, 2.5, 3, 3, 3, 3, 3.5, }\n&quot;1 2 3 4 RAMP 3 6 7 8&quot; -&gt; PASSED {  {1, 2, 3, 4, 5, 6, 7, 8, }\n\n\n\n\n&#185; Boost Spirit: &quot;Semantic actions are <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Boost spirit: how to use custom logic when parsing a list of doubles with text specifiers"
        },
        {
            "tags": [
                "regex",
                "bash",
                "scripting",
                "escaping"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 36345272,
            "is_answered": false,
            "question_id": 33744733,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1572984201,
            "creation_date": 1459465280,
            "body": "Just loop until you&#39;ve found a one line fortune:\n\n\n\nThe  loop will keep going until  exits with a nonzero value, which only happens when we&#39;ve found our one-liner.  The  code reads the whole fortune and then, at the end, checks to see if the number of records (, the line count) is one.  If so, print the last (the only) line and exit the  loop.\n\nI assume you had used  as an effort to limit the size, so I expanded it to 80.  Obviously, you can remove it, return it to 65, or change it to another value as you see fit.\n\n\n\nHere&#39;s a variant that accepts one-line quotes (with a second line of attribution) and prints on one line:\n\n\n\nThis adds two conditionals.  First, we track the content of line 1.  Second, if line two has  as its first whitespace-delimited content, decrement the line count and replace the leading whitespace with a single space (altering  causes  to be respaced), and prepend the previous line so the final clause only sees one line.\n\nSo e.g. this quote:\n\n\n\nis now accepted after becoming:\n\n\n\n\n\nTo exclude  (a noble pursuit &#128515;):\n\n\n\nAll I did was say there is no index for &quot;Evil&quot; in the final condition. You could use an extended regex instead with  although note that  regexes do not allow numeric quantifiers (so  is fine but  and  won&#39;t work). If you want case-insensitive, you have to do .\n",
            "excerpt": "index($0, &quot;<span class=\"highlight\">Evil</span>&quot;)) { print; exit 1 } }\n&#39;; do true; done\n\n\nAll I did was say there is no index for &quot;<span class=\"highlight\">Evil</span>&quot; in the final condition. You could use an extended <span class=\"highlight\">regex</span> instead with (NR == 1 &amp;&amp; ! &hellip; /<span class=\"highlight\">Evil</span>/) although note that awk regexes do not allow numeric quantifiers (so /a+/ is fine but /a{1,}/ <span class=\"highlight\">and</span> /a{1,9}/ won&#39;t work). If you want case-insensitive, you have to do tolower($0) !~ /<span class=\"highlight\">evil</span>/. &hellip; ",
            "title": "Fortune with -m exclude string"
        },
        {
            "tags": [
                "regex",
                "html-parsing"
            ],
            "question_score": 201,
            "is_accepted": false,
            "answer_id": 4234491,
            "is_answered": false,
            "question_id": 4231382,
            "item_type": "answer",
            "score": 726,
            "last_activity_date": 1571920382,
            "creation_date": 1290280762,
            "body": "Oh Yes You Can Use Regexes to Parse HTML!\nFor the task you are attempting, regexes are perfectly fine!\nIt is true that most people underestimate the difficulty of parsing HTML with regular expressions and therefore do so poorly.\nBut this is not some fundamental flaw related to computational theory. That silliness is parroted a lot around here, but don’t you believe them.\nSo while it certainly can be done (this posting serves as an existence proof of this incontrovertible fact), that doesn’t mean it&#160;should&#160;be.\nYou must decide for yourself whether you’re up to the task of writing what amounts to a dedicated, special-purpose HTML parser out of regexes. Most people are not.\nBut I am. ☻\n\nGeneral Regex-Based HTML Parsing Solutions\nFirst I’ll show how easy it is to parse arbitrary HTML with regexes. The full program’s at the end of this posting, but the heart of the parser is:\n\nSee how easy that is to read?\nAs written, it identifies each piece of HTML and tells  where it found that piece. You could easily modify it to do whatever else you want with any given type of piece, or for more particular types than these.\nI have no failing test cases (left :): I’ve successfully run this code on more than 100,000 HTML files — every single one I could quickly and easily get my hands on. Beyond those, I’ve also run it on files specifically constructed to break na&#239;ve parsers.\nThis is not a na&#239;ve parser.\nOh, I’m sure it isn’t perfect, but I haven’t managed to break it yet.  I figure that even if something did, the fix would be easy to fit in because of the program’s clear structure. Even regex-heavy programs should have stucture.\nNow that that’s out of the way, let me address the OP’s question.\nDemo of Solving the OP’s Task Using Regexes\nThe little  program I include below produces the following output, so that you can see that parsing HTML with regexes works just fine for what you wish to do:\n\nParse Input Tags, See No Evil Input\nHere’s the source for the program that produced the output above.\n\nThere you go! Nothing to it! :)\nOnly  you can judge whether your skill with regexes is up to any particular parsing task. Everyone’s level of skill is different, and every new task is different. For jobs where you have a well-defined input set, regexes are obviously the right choice, because it is trivial to put some together when you have a restricted subset of HTML to deal with. Even regex beginners should be handle those jobs with regexes.  Anything else is overkill.\nHowever, once the HTML starts becoming less nailed down, once it starts to ramify in ways you cannot predict but which are perfectly legal, once you have to match more different sorts of things or with more complex dependencies, you will eventually reach a point where you have to work harder to effect a solution that uses regexes than you would have to using a parsing class. Where that break-even point falls  depends again on your own comfort level with regexes.\nSo What Should I Do?\nI’m not going to tell you what you must do or what you cannot do.  I think that’s Wrong. I just want to present you with possibilties, open your eyes a bit. You get to choose what you want to do and how you want to do it. There are no absolutes — and nobody else knows your own situation as well as you yourself do. If something seems like it’s too much work, well, maybe it is.  Programming should be fun, you know. If it isn’t, you may be doing it wrong.\nOne can look at my  program in any number of valid ways.  One such is that you indeed can parse HTML with regular expressions. But another is that it is much, much, much harder than almost anyone ever thinks it is. This can easily lead to the conclusion that my program is a testament to what you should not do, because it really is too hard.\nI won’t disagree with that.  Certainly if everything I do in my program doesn’t make sense to you after some study, then you should not be attempting to use regexes for this kind of task. For specific HTML, regexes are great, but for generic HTML, they’re tantamount to madness. I use parsing classes all the time, especially if it’s HTML I haven’t generated myself.\nRegexes  optimal for small HTML parsing problems,  pessimal for large ones\nEven if my program is taken as  illustrative of why you should not use regexes for parsing general HTML — which is OK, because I kinda meant for it to be that ☺  — it still should be an eye-opener so more people break the terribly common and nasty, nasty habit of writing unreadable, unstructured, and unmaintainable patterns.\nPatterns do not have to be ugly, and they do not have to be hard. If you create ugly patterns, it is a reflection on you, not them.\nPhenomenally Exquisite Regex Language\nI’ve been asked to point out that my proferred solution to your problem has been written in Perl. Are you surprised? Did you not notice? Is this revelation a bombshell?\nIt is true that not all other tools and programming languages are quite as convenient, expressive, and powerful when it comes to regexes as Perl is. There’s a big spectrum out there, with some being more suitable than others.  In general, the languages that have expressed regexes as part of the core language instead of as a library are easier to work with. I’ve done nothing with regexes that you couldn’t do in, say, PCRE, although you would structure the program differently if you were using C.\nEventually other languages will be catch up with where Perl is now in terms of regexes.  I say this because back when Perl started, nobody else had anything like Perl’s regexes. Say anything you like, but this is where Perl clearly won: everybody copied Perl’s regexes albeit at varying stages of their development.  Perl pioneered almost (not quite all, but almost) everything that you have come to rely on in modern patterns today, no matter what tool or language you use.  So eventually the others will catch up.\nBut they’ll only catch up to where Perl was sometime in the past, just as it is now.  Everything advances.  In regexes if nothing else, where Perl leads, others follow. Where will Perl be once everybody else finally catches up to where Perl is now?  I have no idea, but I know we too will have moved. Probably we’ll be closer to Perl₆’s style of crafting patterns.\nIf you like that kind  of thing but would like to use it in Perl₅,  you might be interested in Damian Conway’s wonderful Regexp::Grammars module. It’s completely awesome, and makes what I’ve done here in my program seem just as primitive as mine makes the patterns that people cram together without whitespace or alphabetic identifiers.  Check it out!\n\nSimple HTML Chunker\nHere is the complete source to the parser I showed the centerpiece from at the beginning of this posting.\nI am not suggesting that you should use this over a rigorously tested parsing class. But I am tired of people pretending that nobody can parse HTML with regexes just because they can’t. You clearly can, and this program is proof of that assertion.\nSure,  it isn’t easy, but it is possible!\nAnd trying to do so is a terrible waste of time, because good parsing classes exist which you should use for this task.  The right answer to people trying to parse arbitrary HTML is not that it is impossible.  That is a facile and disingenuous answer.  The correct and honest answer is that they shouldn’t attempt it because it is too much of a bother to figure out from scratch; they should not  break their back striving to re&#239;nvent a wheel that works perfectly well.\nOn the other hand, HTML that falls within a predicable subset is ultra-easy to parse with regexes. It’s no wonder people try to use them, because for small problems, toy problems perhaps, nothing could be easier. That’s why it’s so important to distinguish the two tasks — specific vs generic — as these do not necessarily demand the same approach.\nI hope in the future here to see a more fair and honest treatment of questions about HTML and regexes.\nHere’s my HTML lexer.  It doesn’t try to do a validating parse; it just identifies the lexical elements. You might think of it more as an HTML chunker than an HTML parser. It isn’t very forgiving of broken HTML, although it makes some very small allowances in that direction.\nEven if you never parse full HTML yourself (and why should you? it’s a solved problem!), this program has lots of cool regex bits that I believe a lot of people can learn a lot from.  Enjoy!\n\n",
            "excerpt": "_V192234675_.gif&quot;\n        type =&gt; &quot;image&quot;\n\nParse Input Tags, See No <span class=\"highlight\">Evil</span> Input\nHere’s the source for the program that produced the output above.\n#! &hellip; Even if you never parse full HTML yourself (<span class=\"highlight\">and</span> why should you? it’s a solved problem!), this program has lots of cool <span class=\"highlight\">regex</span> bits that I believe a lot of people can learn a lot from.  Enjoy!\n#! &hellip; ",
            "title": "What to do when a regular expression pattern doesn&#39;t match anywhere in a string?"
        },
        {
            "tags": [
                "nginx"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 58299129,
            "is_answered": false,
            "question_id": 49867809,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1570606365,
            "creation_date": 1570606365,
            "body": "I was also searching how to use Nginx&#39;s  with a concatenated string. I found this question, and a bunch of other articles saying &quot;if is evil&quot;, but not offering a replacement.\n\nAnd then I ran into this question, which led me to a solution that is much more compact and elegant - especially when you need multiple  cases, so I&#39;ll post it for other searchers.\n\n\n\nBasically, this compares the first argument from the first line (the concatenated ) with first arguments from other lines ( literal,  regex case insensitive, or  by default), and assigns the second arguments from corresponding lines ( or  in our case, could be anything) to the variable passed as the second argument on the first line ().\n\nSaving a lot of extra lines of code if you need 10+ ifs\n",
            "excerpt": "I found this question, <span class=\"highlight\">and</span> a bunch of other articles saying &quot;if is <span class=\"highlight\">evil</span>&quot;, but not offering a replacement. &hellip; example <span class=\"highlight\">regex</span> case insensitive, or default by default), <span class=\"highlight\">and</span> assigns the second arguments from corresponding lines (1 or 0 in our case, could be anything) to the variable passed as the second argument on &hellip; ",
            "title": "if condition concatenation in nginx conf file"
        },
        {
            "tags": [
                "php",
                "security",
                "http-headers"
            ],
            "question_score": 408,
            "is_accepted": true,
            "answer_id": 4499749,
            "is_answered": false,
            "question_id": 4410704,
            "item_type": "answer",
            "score": 342,
            "last_activity_date": 1564068960,
            "creation_date": 1292938164,
            "body": "Sending headers earlier than the normal course may have far reaching consequences. Below are just a few of them that happened to come to my mind at the moment:\n\n\nWhile current PHP releases may have output buffering on, the actual production servers you will be deploying your code on are far more important than any development or testing machines. And they do not always tend to follow latest PHP trends immediately.\nYou may have headaches over inexplicable functionality loss. Say, you are implementing some kind payment gateway, and redirect user to a specific URL after successful confirmation by the payment processor. If some kind of PHP error, even a warning, or an excess line ending happens, the payment may remain unprocessed and the user may still seem unbilled. This is also one of the reasons why needless redirection is evil and if redirection is to be used, it must be used with caution.\nYou may get &quot;Page loading canceled&quot; type of errors in Internet Explorer, even in the most recent versions. This is because an AJAX response/json include contains something that it shouldn&#39;t contain, because of the excess line endings in some PHP files, just as I&#39;ve encountered a few days ago.\nIf you have some file downloads in your app, they can break too, because of this. And you may not notice it, even after years, since the specific breaking habit of a download depends on the server, the browser, the type and content of the file (and possibly some other factors I don&#39;t want to bore you with).\nFinally, many PHP frameworks including Symfony, Zend and Laravel (there is no mention of this in the coding guidelines but it follows the suit) and the PSR-2 standard (item 2.2) require omission of the closing tag. PHP manual itself (1,2), Wordpress, Drupal and many other PHP software I guess, advise to do so. If you simply make a habit of following the standard (and setup PHP-CS-Fixer for your code) you can forget the issue. Otherwise you will always need to keep the issue in your mind.\n\n\nBonus: a few gotchas (actually currently one) related to these 2 characters:\n\n\nEven some well-known libraries may contain excess line endings after . An example is Smarty, even the most recent versions of both 2.* and 3.* branch have this. So, as always, watch for third party code. Bonus in bonus: A regex for deleting needless PHP endings: replace  with empty text in all files that contain PHP code.\n\n",
            "excerpt": "This is also one of the reasons why needless redirection is <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> if redirection is to be used, it must be used with caution. &hellip; Bonus in bonus: A <span class=\"highlight\">regex</span> for deleting needless PHP endings: replace (\\s*\\?&gt;\\s*)$ with empty text in all files that contain PHP code. &hellip; ",
            "title": "Why would one omit the close tag?"
        },
        {
            "tags": [
                "regex",
                "character",
                "filenames"
            ],
            "question_score": -1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 56795736,
            "item_type": "question",
            "score": -1,
            "last_activity_date": 1561659406,
            "creation_date": 1561655015,
            "body": "I&#39;m looking for a Regex that exchanges all illegal filename chars like () space . etc before the filetype ending like .jpg by an - \n\ni got:\n[^a-zA-Z0-9_-]+\nmatches every illegal filename char, but including file extension\nand\n.*(?=.)\nmatching everything until the last occurence of .\n\nhow do i combine these?\n\none of my evil file names is\n(800x800-png)MGC1000-03EPTD-021_RAL7035-5010.tif.png\n\nafter regex replace it should look like\n-800x800-png-MGC1000-03EPTD-021_RAL7035-5010-tif.png\n\nthe regex should be working in libre office / excel search and replace.\n\nthanks for your help!\n",
            "excerpt": "file extension\n<span class=\"highlight\">and</span>\n.*(? &hellip; one of my <span class=\"highlight\">evil</span> file names is\n(800x800-png)MGC1000-03EPTD-021_RAL7035-5010.tif.png\n\nafter <span class=\"highlight\">regex</span> replace it should look like\n-800x800-png-MGC1000-03EPTD-021_RAL7035-5010-tif.png\n\nthe <span class=\"highlight\">regex</span> should be working &hellip; ",
            "title": "Regex for all illegal filename characters before filetype extension"
        },
        {
            "tags": [
                "regex",
                "bash",
                "sed"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 56150580,
            "is_answered": false,
            "question_id": 56150157,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1557926900,
            "creation_date": 1557926900,
            "body": "As the comment by @Tom above alludes, using regex to parse HTML is generally evil.  That being said, if you only have single level (non nested) HTML tags, then regex might work here.  But, Sed&#39;s regex engine is not very powerful, as it does not support lazy dot.  Here is a way to do this using Perl in the Bash:\n\n\n\nThis outputs:\n\n\n",
            "excerpt": "As the comment by @Tom above alludes, using <span class=\"highlight\">regex</span> to parse HTML is generally <span class=\"highlight\">evil</span>.  That being said, if you only have single level (non nested) HTML tags, then <span class=\"highlight\">regex</span> might work here. &hellip; But, Sed&#39;s <span class=\"highlight\">regex</span> engine is not very powerful, as it does not support lazy dot. &hellip; ",
            "title": "Delete string between 2 paterns on more than one line"
        },
        {
            "tags": [
                "php",
                "html",
                "preg-replace",
                "paragraph"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 56123779,
            "is_answered": false,
            "question_id": 56123741,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1557813154,
            "creation_date": 1557813154,
            "body": "Note that it is generally evil and bad practice to use regex to parse HTML.  But, assuming you only have a string with a set of top level HTML  tags, regex might be an option here.\n\n\n\nThis outputs:\n\n\n\nHere is an explanation of the regex:\n\n\n\nThe only perhaps tricky part of the above regex is:\n\n\n\nThis is a tempered dot, and it works by applying a negative lookahead  at each step we match any character.  This is critical, because it ensures that the regex engine will not accidentally cross over multiple  tags to find .\n",
            "excerpt": "Note that it is generally <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> bad practice to use <span class=\"highlight\">regex</span> to parse HTML.  But, assuming you only have a string with a set of top level HTML &lt;p&gt; tags, <span class=\"highlight\">regex</span> might be an option here. &hellip; .)*\n\n\nThis is a tempered dot, <span class=\"highlight\">and</span> it works by applying a negative lookahead (?!&lt;/p&gt;) at each step we match any character. &hellip; ",
            "title": "How to remove paragraph tag &lt;p&gt; with contains special word in preg_replace?"
        },
        {
            "tags": [
                "reactjs"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 56067658,
            "is_answered": false,
            "question_id": 35754225,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1557516323,
            "creation_date": 1557436392,
            "body": "There doesn&#39;t seem to be a great answer for this, after trying many things.\nIf there is an answer to the question it might be that there&#39;s no good way to do it. I think it doesn&#39;t hurt to look at potential solutions though and the drawbacks of each one.\n\nSolution 1\n\nUse componentWillUpdate. This is deprecated.\n\nSolution 2\n\nValidate state on render - but in your case and in most others, validation may lead to setState, which react tells you never to do in render(), but doesn&#39;t go into any detail about what will actually happen. Of course, you would have to be careful to prevent infinite loops, but if you call setState in render() upon some condition which cannot logically result in an infinite loop, then what unintended side effects could occur? \n\nSolution 3\n\nAs above, make a wrapper function to both validate and set state. But this is no good in my opinion because any state changes done with set state directly cannot be validated. Not only does setState directly not call your validation, but your validation also does not run on the items in the initial state. You might say, why would you give your component an initial state that&#39;s invalid, but I don&#39;t care, if I want to validate state I want it to validate 50000% of the time and no less.\n\nIn a complex form example, there are other issues with this. What if the validity of one field depends on the state of another field? Surely then, a function to re-validate a field when it changes is not enough. Some people will say to test the field being passed in and dispatch multiple events for re-validation, but again, this just isn&#39;t acceptable to me. Its not fullproof, it can lead to bugs, and make things hard to test. \n\nSolution 4\n\nUse componentWillReceiveProps. Not only is this deprecated, but its also static, meaning that you don&#39;t have access to the component instance. For some components this is fine because you can still modify the state that is returned, but if your component has data outside of state and props then you cannot access it, in addition to not being able to use non-static methods, which in my opinion makes this method pretty useless in many situations.\n\nSolution 5\n\nHaven&#39;t tested this one (bear with me, its fairly nuts), but you can override setState function in your component. Insert a callback into every setState instance. Track how many times setState is called and how many times the setState callback is called. Inside the callback, you can check the two counters stored in the object to see if the last callback is currently running, then, if it is, run one function which validates all state. On render, set both of the counters back down to zero. I don&#39;t recommend this by any means. It may work but its a pretty major hack.\n\nSolution 6\n\nYou can use componentDidUpdate, but this is inefficient. You will be blindly setting state with a value that was not validated then letting your component render only to validate it after and possibly call render again. Once again you have to be careful to avoid infinite loop while calling setState in componentDidUpdate. I read elsewhere that at least if you set the state here, the DOM will only re-draw once. In other words, it doesn&#39;t draw immediately after render() but waits until componentDidUpdate is triggered and re-calls render if state changes in there. This seems like maybe its the only solution I know about that react only warns about without telling you explicitely not to do this. In your case, the efficiency does not matter, but what if the state you were trying to validate was a 100 field form with a very expensive render method. Now, on every key down you&#39;ve essentially doubled the amount of work that react has to do to render your components, causing them to first render without being validated, and then filtering and/or validating them for a very likely second render.\n\nAdditional Issues\n\nIn my case, i&#39;m working on a form and not a simple component like you described above. I may go with a mix of solution 3 and 5. Its more complicated then I want though. It involves using one function to filter, generate errors, and set the state for each field (ie. solution 3). And then on componenetDidUpdate I may look for state keys whose values are different from the last value that the field was validated with. The second step here has many ways of doing so, all of which are messy and inefficient. To make it worse, they practically never run under normal circumstances because I always use the first function to update and validate their state, so this makes testing it harder. It&#39;s like leaving some fallback in my app that seems to work but during the entire development process it never triggers except for like the one time that I decided to test it. Seems like a bad idea to me. \n\nThere are additional efficiency concerns I also won&#39;t get into which relates to trying not to re-validate a field if it has the same value it was validated with last time. This is a whole other can of worms, but basically what it boils down to is that you should be able to not only validate a state before render, but you should have access to the previous state as well, so you can save some cpu time and only validate the fields that changed. For example, if you have a very long textarea with some complex regex, it would be nice to not validate that on every component render even if its a separate field that is changing.\n\nAfterthoughts\n\nI&#39;m very thoroughly disappointed that react seems to provide no legitimate option for this. Seeing as you can call setState many times in one operation, and each one will be queued, how is it that they don&#39;t provide us with one callback after all state changes are resolved and we&#39;re about to render? Well if you think about it, the render function itself is this callback, because I think its only ever called after setStates are resolved, but again, its evil to call setState on render, and it would be a million times cleaner to have render() simply receive the correct state, so I don&#39;t see how this is very useful.\n\nDoes anyone know why they decided to get rid of componentWillUpdate?\n",
            "excerpt": "For example, if you have a very long textarea with some complex <span class=\"highlight\">regex</span>, it would be nice to not validate that on every component render even if its a separate field that is changing. &hellip; Well if you think about it, the render function itself is this callback, because I think its only ever called after setStates are resolved, but again, its <span class=\"highlight\">evil</span> to call setState on render, <span class=\"highlight\">and</span> it would &hellip; ",
            "title": "React state validation"
        },
        {
            "tags": [
                "regex",
                "performance",
                "regex-lookarounds",
                "regex-greedy"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 56048020,
            "is_answered": false,
            "question_id": 56046890,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1557393247,
            "creation_date": 1557344783,
            "body": "An optimized expression for finding the final line of a large input string would be the one that introduces explicit boundaries:\n\n\n\nIn languages like PHP it would be written as  (s are delimiters and  is multiline flag). The caret  makes engine not to go through  (evil) regex if it is not matched. So we have defined a very well known boundary, not only for us to recognize the desired part but also for engines and their builtin optimizations.\n\nThe performance of this regex depends on number of lines of input string. So an input string like yours isn&#39;t a problem at all but something like this would bring some attention.\n\nIn both cases it performs fast and doesn&#39;t come to a failure.\n",
            "excerpt": "*\\z/m (/s are delimiters <span class=\"highlight\">and</span> m is multiline flag). The caret ^ makes engine not to go through .* (<span class=\"highlight\">evil</span>) <span class=\"highlight\">regex</span> if it is not matched. &hellip; In both cases it performs fast <span class=\"highlight\">and</span> doesn&#39;t come to a failure. &hellip; ",
            "title": "RegEx for matching the last line"
        },
        {
            "tags": [
                "javascript",
                "node.js",
                "web-crawler",
                "puppeteer"
            ],
            "question_score": 4,
            "is_accepted": true,
            "answer_id": 55576899,
            "is_answered": false,
            "question_id": 55567952,
            "item_type": "answer",
            "score": 6,
            "last_activity_date": 1554826054,
            "creation_date": 1554737347,
            "body": "Short answer: Don&#39;t (re)build a parser in Node.js, use the browser instead\n\nI strongly advise against evaluating or parsing crawled data in Node.js if you are anyway using puppeteer for crawling. When you are using puppeteer you already have a browser with a great sandbox for JavaScript code running in another process. Why risk that kind of isolation and &quot;rebuild&quot; a parser in your Node.js script? If your Node.js script breaks, your whole script will fail. In the worst case, you might even expose your machine to serious risks when you try to run untrusted code inside your main thread.\n\nInstead, try to do as much parsing as possible inside the context of the page. You can even do an evil  call there. There worst that could happen? Your browser hangs or crashes.\n\nExample\n\nImagine the following HTML page (very much simplified). You are trying to read the text which is pushed into an array. The only information you have is that there is an additional attribute  which is set to .\n\n\n\nBad code\n\nHere is a simple example what your code might look like right now:\n\n\n\nIn this example, the script extracts the JavaScript code from the page. Now we have the JavaScript code from the page and we &quot;only&quot; need to parse it, right? Well, this is the wrong approach. Don&#39;t try to rebuild a parser inside Node.js. Just use the browser. There are basically two approaches you can take to do that in your case.\n\n\nInject proxy functions into the page and fake some built-in functions (recommended)\nParse the data on the client-side (!) by using , a regex or  (eval only if really necessary)\n\n\n\n\nOption 1: Inject proxy functions into the page\n\nIn this approach you are replacing native browser functions with your own &quot;fake functions&quot;. Example:\n\n\n\nThis code replaces the original  function with our own function. Everything works as normal, but when an item with our target id is pushed into an array, a special condition is triggered. To inject this function into the page, you could use . To receive the data from Node.js you would have to expose a function to the browser via :\n\n\n\nNow it doesn&#39;t really matter how complex the code of the page is, whether it happens inside some asynchronous handler or whether the page changes the surrounding code. As long as the target data is pushing the data into an array, we will get it.\n\nYou can use this approach for a lot of crawling. Check how the data is processed and replace the low level functions processing the data with your own proxy version of it.\n\nOption 2: Parse the data\n\nLet&#39;s assume the first approach does not work for some reason. The data is in some script tag, but you are not able to get it by using fake functions.\n\nThen you should parse the data, but not inside your Node.js environment. Do it inside the page context. You could run a regular expression or use . But do it before returning the data back to Node.js. This approach has the benefit that if your code will crash your environment for some reason, it will not be your main script, but just your browser that crashes.\n\nTo give some example code. Instead of running the code from the original &quot;bad code&quot; sample, we change it to this:\n\n\n\nThis will only return the parts of the code we need, which can then be fruther processed from within Node.js.\n\n\n\nIndependent of which approach you choose, both ways are much better and more secure than running unknown code inside your main thread. If you absolutely have to process the data in your Node.js environment, use a regular expression for it like shown in the answer from trincot. You should never use eval to run untrusted code.\n",
            "excerpt": "You can even do an <span class=\"highlight\">evil</span> eval call there. There worst that could happen? Your browser hangs or crashes.\n\nExample\n\nImagine the following HTML page (very much simplified). &hellip; which extracts the data you want/); // we run our <span class=\"highlight\">regex</span> in the browser\n    return match; // <span class=\"highlight\">and</span> only return the results\n});\n\n\nThis will only return the parts of the code we need, which can then be fruther &hellip; ",
            "title": "How to get JavaScript object in JavaScript code?"
        },
        {
            "tags": [
                "html",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 55127085,
            "is_answered": false,
            "question_id": 55126617,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1552468849,
            "creation_date": 1552410460,
            "body": "As already mentioned in the comments, Regex is not the way to go here.\n\nThat said: I have come up with this (https://regex101.com/r/3OVaO2/2)\n\n\n\nHowever, this will only remove ONE evil attribute. The problem is, that with PCRE, you cannot have variable length lookbehind assertions. If you switch it to ECMAscript, you can do this (https://regex101.com/r/3OVaO2/3)\n\n\n\nThis will probably do, what you want it to do. Nonetheless, this is NOT the holy grail for sanitizing HTML. Be careful with your output, if you don&#39;t consider your input safe.\n\nAlso, the definition of the tags may need some tweaking, since there may be tags like , which are currently not detected by the regular expression.\n",
            "excerpt": "As already mentioned in the comments, <span class=\"highlight\">Regex</span> is not the way to go here.\n\nThat said: I have come up with this (https://regex101.com/r/3OVaO2/2)\n\n(&lt;\\w+\\s*[^&gt;]*)\\s(?!href|title|alt)[\\w\\-\\d]+=(?:([&#39;&quot;]).*? &hellip; \\2|\\w+)\n\n\nHowever, this will only remove ONE <span class=\"highlight\">evil</span> attribute. The problem is, that with PCRE, you cannot have variable length lookbehind assertions. &hellip; ",
            "title": "Remove all inline html attributes, but leave some"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 55102898,
            "is_answered": false,
            "question_id": 55102827,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1552313797,
            "creation_date": 1552310851,
            "body": "First of all, using regex to parse HTML is evil.\n\nNow that this is out of the way, here is a working script:\n\n\n\nHere is an explanation of the pattern :\n\n\n\nAs for your current errors, you have defined  to be a delimiter for the regex pattern.  This means that if you want to use a literal forward slash, you therefore must escape it (as you would a regex metacharacter).\n",
            "excerpt": "First of all, using <span class=\"highlight\">regex</span> to parse HTML is <span class=\"highlight\">evil</span>. &hellip; This means that if you want to use a literal forward slash, you therefore must escape it (as you would a <span class=\"highlight\">regex</span> metacharacter). &hellip; ",
            "title": "PHP preg_match_all(): Unknown modifier &#39;&gt;&#39;"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 116,
            "is_accepted": false,
            "answer_id": 43872595,
            "is_answered": false,
            "question_id": 12841970,
            "item_type": "answer",
            "score": 17,
            "last_activity_date": 1551298425,
            "creation_date": 1494340192,
            "body": "Detecting evil regexes\n\n\nTry Nicolaas Weideman&#39;s RegexStaticAnalysis project.\nTry my ensemble-style vuln-regex-detector which has a CLI for Weideman&#39;s tool and others.\n\n\nRules of thumb\n\nEvil regexes are always due to ambiguity in the corresponding NFA, which you can visualize with tools like regexper.\n\nHere are some forms of ambiguity. Don&#39;t use these in your regexes.\n\n\nNesting quantifiers like  (aka &quot;star height &gt; 1&quot;). This can cause exponential blow-up. See substack&#39;s  tool.\nQuantified Overlapping Disjunctions like . This can cause exponential blow-up.\nAvoid Quantified Overlapping Adjacencies like . This can cause polynomial blow-up.\n\n\nAdditional resources\n\nI wrote this paper on super-linear regexes. It includes loads of references to other regex-related research.\n",
            "excerpt": "Detecting <span class=\"highlight\">evil</span> regexes\n\n\nTry Nicolaas Weideman&#39;s RegexStaticAnalysis project.\nTry my ensemble-style vuln-<span class=\"highlight\">regex</span>-detector which has a CLI for Weideman&#39;s tool <span class=\"highlight\">and</span> others. &hellip; It includes loads of references to other <span class=\"highlight\">regex</span>-related research. &hellip; ",
            "title": "How can I recognize an evil regex?"
        },
        {
            "tags": [
                "python",
                "json",
                "regex"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 54689474,
            "is_answered": false,
            "question_id": 54689404,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1550144108,
            "creation_date": 1550144108,
            "body": "First, using regex on JSON is evil, almost as bad as killing a kitten.\n\nIf you want to represent  as a valid JSON value, then consider using this structure:\n\n\n\nIf you need the string literal  to behave like a number, then consider just casting it to an integer in your Python script.\n",
            "excerpt": "First, using <span class=\"highlight\">regex</span> on JSON is <span class=\"highlight\">evil</span>, almost as bad as killing a kitten. &hellip; ",
            "title": "Converting string with leading-zero integer to json"
        },
        {
            "tags": [
                "c#",
                ".net-core",
                "asp.net-core-2.0"
            ],
            "question_score": 11,
            "is_accepted": false,
            "answer_id": 54634368,
            "is_answered": false,
            "question_id": 50356774,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1549900565,
            "creation_date": 1549900565,
            "body": "If I should guess, I would blame Regex\n\n\n is not implemented in .NET Core 2.0 (source)\nSome of your 175 patterns may be slightly evil\n\n\nThis may lead to significant performance difference between .NET Framework 4.6 and .NET Core 2.0 which may result in unresponsive application.\n",
            "excerpt": "If I should guess, I would blame <span class=\"highlight\">Regex</span>\n\n\nRegexOptions.Compiled is not implemented in .NET Core 2.0 (source)\nSome of your 175 patterns may be slightly <span class=\"highlight\">evil</span>\n\n\nThis may lead to significant performance difference &hellip; between .NET Framework 4.6 <span class=\"highlight\">and</span> .NET Core 2.0 which may result in unresponsive application. &hellip; ",
            "title": ".NET Core 2.0 Regex Timeout deadlocking"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 54459445,
            "is_answered": false,
            "question_id": 54459081,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1548933658,
            "creation_date": 1548933658,
            "body": "Here&#39;s my try on this: \nYou can see a working demo here.\nThe expression matches everything you want to remove. It uses lookaheads with arbitrary quantifiers - i hope the regex engine you are using supports this.\nMaybe there&#39;s also a solution without those, but that&#39;s what i can offer for now.\n\nEDIT: I changed the expression so it&#39;s not using the evil  anymore.\n",
            "excerpt": "It uses lookaheads with arbitrary quantifiers - i hope the <span class=\"highlight\">regex</span> engine you are using supports this.\nMaybe there&#39;s also a solution without those, but that&#39;s what i can offer for now. &hellip; EDIT: I changed the expression so it&#39;s not using the <span class=\"highlight\">evil</span> .*? anymore. &hellip; ",
            "title": "Regex to strip email subaddressing (dots and +wildcards)"
        },
        {
            "tags": [
                "nginx",
                "nginx-location"
            ],
            "question_score": 262,
            "is_accepted": false,
            "answer_id": 43595323,
            "is_answered": false,
            "question_id": 35320674,
            "item_type": "answer",
            "score": 71,
            "last_activity_date": 1547240028,
            "creation_date": 1493058660,
            "body": "Both the regex and included files are good methods, and I frequently use those.  But another alternative is to use a &quot;named location&quot;, which is a useful approach in many situations —&#160;especially more complicated ones.  The official &quot;If is Evil&quot; page shows essentially the following as a good way to do things:\n\n\n\nThere are advantages and disadvantages to these various approaches.  One big advantage to a regex is that you can capture parts of the match and use them to modify the response.  Of course, you can usually achieve similar results with the other approaches by either setting a variable in the original block or using .  The downside of the regex approach is that it can get unwieldy if you want to match a variety of locations, plus the low precedence of a regex might just not fit with how you want to match locations —&#160;not to mention that  there are apparently performance impacts from regexes in some cases.\n\nThe main advantage of including files (as far as I can tell) is that it is a little more flexible about exactly what you can include —&#160;it doesn&#39;t have to be a full location block, for example.  But it&#39;s also just subjectively a bit clunkier than named locations.\n\nAlso note that there is a related solution that you may be able to use in similar situations: nested locations.  The idea is that you would start with a very general location, apply some configuration common to several of the possible matches, and then have separate nested locations for the different types of paths that you want to match.  For example, it might be useful to do something like this:\n\n\n",
            "excerpt": "Both the <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> included files are good methods, <span class=\"highlight\">and</span> I frequently use those. &hellip; One big advantage to a <span class=\"highlight\">regex</span> is that you can capture parts of the match <span class=\"highlight\">and</span> use them to modify the response. &hellip; ",
            "title": "How can I have same rule for two locations in NGINX config?"
        },
        {
            "tags": [
                "java",
                "regex",
                "scala"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 53603271,
            "is_answered": false,
            "question_id": 53602965,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1543878182,
            "creation_date": 1543878182,
            "body": "It might be related to RegEx DOS.\n\nJava uses the traditional NFA algorithm [1] to support features such as lazy, backtracking and backreference. NFA &#39;eats in&#39; a character each time and tries to match it with regexp, and &#39;spits&#39; it out if it does not match. It will keep spitting until it can find another match (similar to deep first search), and thus bad expressions might cause the RegEx engine to encounter a RegEx DOS, and specifically in Java, it will finally cause a stack overflow for long strings.\n\nAccording to OWASP, evil regexp expressions contain:\nEvil Regex pattern contains:\n\n\nGrouping with repetition (1)\nInside the repeated group:\n\n\nRepetition\nAlternation with overlapping (2)\n\n\n\nAfter a brief examination of your regexp expression, it seems that you have (1) and (2) since you have  (repetition) and  (overlapping), thus I believe you may have to restructure your RegEx expression to avoid RegEx DOS.\n",
            "excerpt": "It will keep spitting until it can find another match (similar to deep first search), <span class=\"highlight\">and</span> thus bad expressions might cause the <span class=\"highlight\">RegEx</span> engine to encounter a <span class=\"highlight\">RegEx</span> DOS, <span class=\"highlight\">and</span> specifically in Java, it will finally &hellip; According to OWASP, <span class=\"highlight\">evil</span> regexp expressions contain:\n<span class=\"highlight\">Evil</span> <span class=\"highlight\">Regex</span> pattern contains:\n\n\nGrouping with repetition (1)\nInside the repeated group:\n\n\nRepetition\nAlternation with overlapping (2)\n\n\n\nAfter a brief &hellip; ",
            "title": "Simple regex fails with stackoverflow on big string in Scala/Java"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "regex"
            ],
            "question_score": 13,
            "is_accepted": false,
            "answer_id": 53555186,
            "is_answered": false,
            "question_id": 3890475,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1543571971,
            "creation_date": 1543571971,
            "body": "Unlike the  function, the  function returns  or  and is generally preferred when simply testing if a RegEx matches.  The  modifier for case insensitive matching works with both functions.\n\nExample using  with :\n\n\n\n\n\n\nFiddle with the code:\nhttps://jsfiddle.net/71tg4dkw\n\nNote:\nBe aware of evil links that hide their file extension, like:\n\n\nDocumentation for :\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\n",
            "excerpt": "Unlike the match() function, the test() function returns true or false <span class=\"highlight\">and</span> is generally preferred when simply testing if a <span class=\"highlight\">RegEx</span> matches. &hellip; :\nBe aware of <span class=\"highlight\">evil</span> links that hide their file extension, like:\nhttps://example.com/evil.exe? &hellip; ",
            "title": "regex case insensitivity"
        },
        {
            "tags": [
                "php",
                "mysql",
                "eval",
                "preg-replace-callback"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 52819868,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1539708785,
            "creation_date": 1539616605,
            "body": "For a site content creators maintain HTML lists in the format below which a cronjob (Perl) parses into a mySQL database. PHP pulls the data into paginated indices.\n\n\n\n(Perl extracts text and URL and stores them in the database as header, URL, linktext, footer.)\n\nOccasionally a user function call is inserted into the text, like this:\n\n\n\nThe query returns this string for the first line ($header):\n\n\n\nOf course this is not executed when pulled in a query. Nor would it occur in a fixed place, thus cannot be parsed into a separate field.\n\nI have read a couple threads on using  here, and given that only content creators in the house edit the lists, it should be safe enough. IOW if evil code is injected in either list or database we have bigger problems than unsanitized code inserted by some outside party into a form.\n\nMy other idea is . However, some suggested on SO that essentially it has the same problem as , albeit I think the regex should/could lock this down. Also I don&#39;t see how this could execute arbitrary code, unless by passing it as parameter value to the user function.\n\nWhat would be the better approach? Or is there some other, safer approach? (PHP 7.2, mySQL 5.6)\n\nTIA\n\nEdit\n\nI have implemented the code below using a callback, and no . Applying only to few permitted functions which incidentally all require only one numerical parameter it seems quite locked down.\n\n\n\nThanks for your help.\n",
            "excerpt": "/path/to/file.php&quot;&gt;Lorem ipsum dolor sit amet&lt;/a&gt;&lt;br&gt;\nconsectetuer adipiscing elit&lt;/li&gt;\n\n\n(Perl extracts text <span class=\"highlight\">and</span> URL <span class=\"highlight\">and</span> stores them in the database as header, URL, linktext, footer.) &hellip; However, some suggested on SO that essentially it has the same problem as eval, albeit I think the <span class=\"highlight\">regex</span> should/could lock this down. &hellip; ",
            "title": "Execute PHP User Function within mySQL Query Result"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 52019534,
            "is_answered": false,
            "question_id": 52019513,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1535217612,
            "creation_date": 1535217126,
            "body": "This is a classic example of why the  combination can be evil. Use a negated character set instead:\n\n\n\nYou can try it here.\n\n\n\nCompare the behavior of the two expressions:\n\n\nMatch anything greedily. For the second match, the regex matches anything greedily. It will match anything until it reaches the end of the string, and then has to backtrack until it finds a . As soon as it finds a , it stops, hence you end up with  as a match.\nMatch anything but a . Here the regex is matching anything that is not a , therefore at every step is checks whether the next is a  or not. For the second match, you can see that as soon as it finds a , it stops. \n\n",
            "excerpt": ".+ combination can be <span class=\"highlight\">evil</span>. Use a negated character set instead:\n\n(\\$\\{(\\b[a-zA-Z0-9]+\\b)\\})(\\[([^]]+)\\])\n                              ^^^\n\n\nYou can try it here. &hellip; For the second match, the <span class=\"highlight\">regex</span> matches anything greedily. It will match anything until it reaches the end of the string, <span class=\"highlight\">and</span> then has to backtrack until it finds a ]. &hellip; ",
            "title": "Regex capturing group not working as intended"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "browser-extension"
            ],
            "question_score": 18,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 24045756,
            "item_type": "question",
            "score": 18,
            "last_activity_date": 1534620836,
            "creation_date": 1401909425,
            "body": "After I read about Hover Zoom being evil (yikes!), two articles made me instantly switch to another one, called Imagus:\n\n\nHoverzoom’s Malware controversy, and Imagus alternative - ghacks.net\nImagus is a Hover Zoom Replacement to Enlarge Images on Mouseover - LifeHacker\n\n\nImagus seems to fit the bill by doing pretty much what Hover Zoom also could, but in addition, it seems to support custom filters (to support more sites), in addition to the huge bunch it already comes packed with.\n\nIn the options page, on Chrome, the filters section looks deliciously hackable:\n\n&#160;&#160;\n\nHowever, at the same time, it seems to be written in what I would call Perl Javascript.\n\n&#160;&#160;\n\nI consider myself well-versed in Javascript, DOM and Regex, but it&#39;s just painful to try to guess what that is doing, so I looked for documentation. It seems like there was an MyOpera blog, and now the website of the project is, for the time being, hosted on Google Docs.\n\nThe page doesn&#39;t mention anything about how to develop &quot;filters&quot; (or &quot;sieves&quot;, as written in that page?)\n\nSo, how can I develop a custom filter? I&#39;m not aware of all the possibilities (it seems to be pretty flexible), but even a simple example like just modifying URLs would be good. (turning  into  or something).\n\nOr even just an explanation of the fields. They seem to be:\n\n\n\n\n\n\n\n &lt;- Probably Comment\n\n",
            "excerpt": "After I read about Hover Zoom being <span class=\"highlight\">evil</span> (yikes!) &hellip; I consider myself well-versed in Javascript, DOM <span class=\"highlight\">and</span> <span class=\"highlight\">Regex</span>, but it&#39;s just painful to try to guess what that is doing, so I looked for documentation. &hellip; ",
            "title": "How to develop custom filters for the Imagus hover zoom extension?"
        },
        {
            "tags": [
                "regex",
                "python-3.6"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 49019340,
            "is_answered": false,
            "question_id": 49019085,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1519773264,
            "creation_date": 1519772474,
            "body": "Much luck with regex, if you just need the result:\n\n\n\nOutput:\n\n\n\nMake sure to read the eval() \nand have a look into:\n\n\nhttps://opensourcehacker.com/2014/10/29/safe-evaluation-of-math-expressions-in-pure-python/\nhttps://softwareengineering.stackexchange.com/questions/311507/why-are-eval-like-features-considered-evil-in-contrast-to-other-possibly-harmfu/311510\nhttps://www.kevinlondon.com/2015/07/26/dangerous-python-functions.html\n\n\n\n\nExample for hundreds of lines:\n\n\n",
            "excerpt": "Much luck with <span class=\"highlight\">regex</span>, if you just need the result:\n\nimport re\n\ns=&quot;[  9]  -21 - ( 12) - (  -5) + ( -26) = ______&quot;\n\ns = s[s.find(&quot;]&quot;)+1:s.find(&quot;=&quot;)]           #  cut away line nr <span class=\"highlight\">and</span> = ... &hellip; /questions/311507/why-are-eval-like-features-considered-<span class=\"highlight\">evil</span>-in-contrast-to-other-possibly-harmfu/311510\nhttps://www.kevinlondon.com/2015/07/26/dangerous-python-functions.html\n\n\n\n\nExample for hundreds &hellip; ",
            "title": "Regex to pull out numbers and operands"
        },
        {
            "tags": [
                "bash",
                "sed",
                "grep",
                "wget"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 48950339,
            "is_answered": false,
            "question_id": 48949846,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1519406511,
            "creation_date": 1519396951,
            "body": "A fully fledged solution using xpath :\n\nCommand :\n\n\n\nOutput :\n\n\n\nNotes :\n\n\nDon&#39;t parse HTML with regex, use a proper XML/HTML parser like we do here. Check: Using regular expressions with HTML tags\nCheck https://github.com/sputnick-dev/saxon-lint (my own project)\n\n\n\n\n if what I wrote bores you and you just want a quick and dirty command even if it&#39;s evil, then use \n",
            "excerpt": "Check: Using regular expressions with HTML tags\nCheck https://github.com/sputnick-dev/saxon-lint (my own project)\n\n\n\n\n if what I wrote bores you <span class=\"highlight\">and</span> you just want a quick <span class=\"highlight\">and</span> dirty command even if it&#39;s &hellip; <span class=\"highlight\">evil</span>, then use curl -s https://www.foreca.de/Deutschland/Berlin/Berlin | grep -oP &#39;\\d+\\s+hPa&#39; &hellip; ",
            "title": "Bash wget filter specific word"
        },
        {
            "tags": [
                "ruby",
                "regex",
                "split",
                "bbcode"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 3792262,
            "is_answered": false,
            "question_id": 3788959,
            "item_type": "answer",
            "score": 46,
            "last_activity_date": 1516881323,
            "creation_date": 1285382957,
            "body": "Please don&#39;t use BBCode. It&#39;s evil.\n\n\n  BBCode came to life when developers\n  were too lazy to parse HTML correctly\n  and decided to invent their own markup\n  language. As with all products of\n  laziness, the result is completely\n  inconsistent, unstandardized, and\n  widely adopted.\n\n\nTry to use a user-friendlier markup language, like Markdown (that&#39;s what Stack Overflow uses) or Textile.\nBoth of them have parsers for Ruby:\n\n\nMaruku for Markdown\nRedCloth for Textile\n\n\n\n\nIf you still don&#39;t want to heed to my advice and choose to go with BBCode, don&#39;t reinvent the wheel and use a BBCode parser. To answer your question directly, there is the least desirable option: use regex.\n\n\n\nAs seen on rubular. Although I would use , so it will extract the contents inside the  tags. Note that this is fairly fragile and will break if there are nested  tags. Hence, the advice to use a parser.\n",
            "excerpt": "It&#39;s <span class=\"highlight\">evil</span>.\n\n\n  BBCode came to life when developers\n  were too lazy to parse HTML correctly\n  <span class=\"highlight\">and</span> decided to invent their own markup\n  language. &hellip; To answer your question directly, there is the least desirable option: use <span class=\"highlight\">regex</span>.\n\n/\\[img\\].*?\\[\\/img\\]/\n\n\nAs seen on rubular. Although I would use /\\[img\\](.*?) &hellip; ",
            "title": "Regex to split BBCode into pieces"
        },
        {
            "tags": [
                "java",
                "java-stream"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 47893858,
            "is_answered": false,
            "question_id": 47317870,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1513711349,
            "creation_date": 1513711349,
            "body": "The solution by @Bohemian works fine, but the OP asked for an inline RegEx solution as well.  This can be made as follows:\n\n\n\nNote that this will create a new  object for each and every line in your log file.  If you a processing a log file with hundreds of thousand lines, a lot of temporary matcher objects are being created and abandoned to the garbage collector.\n\nIt is possible to reuse a  object by calling the  method, passing in the new subject for the next regex match.  The method returns the matcher object itself, so that the method can be chained, like .  We can abuse this signature to create a  mapping.  Thus, the above could be rewritten as:\n\n\n\nThis may be thought of as a hack, saving the construction of hundreds of thousands of temporary  objects, or the ultimate evil using side-effects in stream pipelines.  Premature optimization is the root of all evil, so only use this technique if it can be shown that this pipeline is actually worth optimizing.\n",
            "excerpt": "The solution by @Bohemian works fine, but the OP asked for an inline <span class=\"highlight\">RegEx</span> solution as well. &hellip; It is possible to reuse a Matcher object by calling the Matcher#reset(String) method, passing in the new subject for the next <span class=\"highlight\">regex</span> match. &hellip; ",
            "title": "Using Regex or StringTokenizer inline with Stream"
        },
        {
            "tags": [
                "python",
                "string",
                "list",
                "file",
                "string-concatenation"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 47858725,
            "is_answered": false,
            "question_id": 47858219,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1513539381,
            "creation_date": 1513539381,
            "body": "You don&#39;t need regex for a simple task like this, you were actually on the right track but you got yourself tangled up in trying to parse everything instead of just streaming the file and deciding where to cut.\n\nBased on your data, you want to cut on the line starting with  (denoting the author) and you want to cut that line from first comma onwards. Presumably, you also want to remove the empty lines, too. Thus, a simple stream modifier would look something like:\n\n\n\nAnd that&#39;s all there is to it. As long as there are no other new lines in the data it will produce exactly the result you want, i.e. for a  file containing:\n\n“The road to hell is paved with works-in-progress.”\n—Philip Roth, WD some other stuff here\n\n“The only thing necessary for the triumph of evil is for good men to do nothing.”\n—Edmund Burke, whatever there is\n\n“You know nothing John Snow.”\n—The wildling Ygritte, &quot;A Dance With Dragons&quot; - George R.R. Martin\n\nIt will produce a  file containing:\n\n“The road to hell is paved with works-in-progress.” —Philip Roth\n“The only thing necessary for the triumph of evil is for good men to do nothing.” —Edmund Burke\n“You know nothing John Snow.” —The wildling Ygritte\n",
            "excerpt": "You don&#39;t need <span class=\"highlight\">regex</span> for a simple task like this, you were actually on the right track but you got yourself tangled up in trying to parse everything instead of just streaming the file <span class=\"highlight\">and</span> deciding where &hellip; it immediately\n\n\n<span class=\"highlight\">And</span> that&#39;s all there is to it. &hellip; ",
            "title": "Open a file, reformat, and write to a new file in Python 3"
        },
        {
            "tags": [
                "regex",
                "arrays",
                "bash"
            ],
            "question_score": 41,
            "is_accepted": false,
            "answer_id": 30971572,
            "is_answered": false,
            "question_id": 20366609,
            "item_type": "answer",
            "score": 25,
            "last_activity_date": 1508088432,
            "creation_date": 1434942120,
            "body": "Bash brace expansion don&#39;t use regexes. The pattern used is just some shell glob, which you can find in bash manual 3.5.8.1 Pattern Matching.\n\nYour two-step solution is cool, but it needs some quotes for whitespace safety:\n\n\n\nYou can also do it in some evil way:\n\n\n",
            "excerpt": "Your two-step solution is cool, but it needs some quotes for whitespace safety:\n\nARR_PRE=(&quot;${ARRAY[@]/#/prefix_}&quot;)\necho &quot;${ARR_PRE[@]/%/_suffix}&quot;\n\n\nYou can also do it in some <span class=\"highlight\">evil</span> way:\n\neval &quot;something &hellip; ",
            "title": "Prefix and postfix elements of a bash array"
        },
        {
            "tags": [
                "python",
                "regex",
                "parsing"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 46513287,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1506870335,
            "creation_date": 1506867554,
            "body": "I have a text which format resemble this sample : \n\n\n  PAUL: Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo &gt;ligula eget dolor. \n  \n  LEONARD: Aenean massa. Cum sociis natoque penatibus et magnis dis parturient &gt;montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque &gt;eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, &gt;fringilla vel, aliquet nec, vulputate eget, arcu. \n  \n  EVIL NINJA [on the roof]: In enim justo, rhoncus ut, imperdiet a, venenatis &gt;vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. &gt;Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. &gt;Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. \n  \n  PAUL [SCREAMING]: Aliquam lorem ante, dapibus in, viverra quis, feugiat a, &gt;tellus. \n\n\nAnd a regular expression to parse the transcripts into dialogs. \n\n\n\nI am trying to capture all the locutors so that the regular expression matches \n\n\n\nAs you can see here I have not been able to capture all of the locutors. \n\n\n  EVIL NINJA [on the roof]:\n\n\nHow can I capture the above as well ? Is regex even the right way to go for this ? \n\nEdit : All the speakers name are in caps, and ends with a colon. This is the format in which all of the transcripts i&#39;m dealing with is.\n",
            "excerpt": "<span class=\"highlight\">And</span> a regular expression to parse the transcripts into dialogs. &hellip; <span class=\"highlight\">EVIL</span> NINJA [on the roof]:\n\n\nHow can I capture the above as well ? Is <span class=\"highlight\">regex</span> even the right way to go for this ? \n\nEdit : All the speakers name are in caps, <span class=\"highlight\">and</span> ends with a colon. &hellip; ",
            "title": "Parsing transcripts with regular expression"
        },
        {
            "tags": [
                "python",
                "regex",
                "parsing"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 46513364,
            "is_answered": false,
            "question_id": 46513287,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1506868091,
            "creation_date": 1506868091,
            "body": "The problem with your regex is that it doesn&#39;t allow any whitespace, so it doesn&#39;t match &quot;EVIL NINJA&quot; or &quot;on the roof&quot;.\n\nBut yes, regex is absolutely the right way to do this. You can try this:\n\n\n\nUsage:\n\n\n\nOutput:\n\n\n",
            "excerpt": "The problem with your <span class=\"highlight\">regex</span> is that it doesn&#39;t allow any whitespace, so it doesn&#39;t match &quot;<span class=\"highlight\">EVIL</span> NINJA&quot; or &quot;on the roof&quot;.\n\nBut yes, <span class=\"highlight\">regex</span> is absolutely the right way to do this. &hellip; : <span class=\"highlight\">EVIL</span> NINJA\ncontext: on the roof\n\nperson: PAUL\ncontext: SCREAMING &hellip; ",
            "title": "Parsing transcripts with regular expression"
        },
        {
            "tags": [
                "python",
                "regex",
                "string"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 46430751,
            "is_answered": false,
            "question_id": 46417454,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1506440634,
            "creation_date": 1506440634,
            "body": " Non-regex alternative \n\nI know you tagged regex, but these kinds of problems are not well-suited to regular expressions.  There are many tricky edge cases, and the failure mode for edge cases is often returning incorrect results, when you would prefer an exception raised instead.  \n\nYou have to choose the lesser of two evils: a simple regex which misbehaves on weird inputs, or a monster regex which is incomprehensible to everyone except the regex engine itself.  \n\nIt&#39;s often easier just by writing a little parser that keeps track of whether you&#39;re enclosed in parens or not.  That&#39;s simple to write, and simple to maintain.  \n\nHere&#39;s a parser based solution and a barrage of tests that might trip up any regex based approach.  This will also detect when the problem is poorly constrained (unbalanced parens), and raise if necessary.  \n\n\n",
            "excerpt": "Non-<span class=\"highlight\">regex</span> alternative \n\nI know you tagged <span class=\"highlight\">regex</span>, but these kinds of problems are not well-suited to regular expressions. &hellip; That&#39;s simple to write, <span class=\"highlight\">and</span> simple to maintain.  \n\nHere&#39;s a parser based solution <span class=\"highlight\">and</span> a barrage of tests that might trip up any <span class=\"highlight\">regex</span> based approach. &hellip; ",
            "title": "How to split a string has &#39;A/B/C(D/E)&#39; format?"
        },
        {
            "tags": [
                "regex",
                "security",
                "go",
                "glob"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 38689161,
            "is_answered": false,
            "question_id": 38393367,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1506287357,
            "creation_date": 1470006889,
            "body": "By &quot;evil regex&quot; I assume you mean a regex that falls victim to catastrophic backtracking.\n\nFrom what you&#39;re describing, it seems like you&#39;re using a glob library to avoid these &quot;evil regexes&quot;. Globs are essentially a weaker version of regex.\n\nThe thing that you&#39;re missing here is the fact that regexes don&#39;t have to be evil. This can be proven in plain Go, with no external libraries.\n\nTry running this Go program:\n\n\n\nYou might wonder why this code doesn&#39;t measure how much time execution took. It&#39;s because it&#39;s not needed (and also because I don&#39;t know much Go).\n\nThe regex will work in almost all regex flavors. You can try running it in Java, Perl or another similar flavor (I like using PCRE on https://regex101.com/#pcre), but the outcome will be one of two things:\n\n\nA timeout\nYou get fed up with how long it&#39;s taking and stop the program\n\n\nYes, that combination causes catastrophic backtracking in most regex flavors. But not Go. Why?\n\nGo doesn&#39;t use backtracking at all for its regexes, so it&#39;s not even a possibility. According to this site:\n\n\n  In Go, we find an optimized regular expression engine. This runs in linear time, making complex patterns faster. It is located in the regexp package.\n\n\nRead more about the differences between backtracking and non-backtracking engines here.\n\n\n\nConsidering the glob library (according to that GitHub link) appears faster than Go&#39;s regexps, performance shouldn&#39;t be a problem.\n",
            "excerpt": "By &quot;<span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>&quot; I assume you mean a <span class=\"highlight\">regex</span> that falls victim to catastrophic backtracking.\n\nFrom what you&#39;re describing, it seems like you&#39;re using a glob library to avoid these &quot;<span class=\"highlight\">evil</span> regexes&quot;. &hellip; It&#39;s because it&#39;s not needed (<span class=\"highlight\">and</span> also because I don&#39;t know much Go).\n\nThe <span class=\"highlight\">regex</span> will work in almost all <span class=\"highlight\">regex</span> flavors. &hellip; ",
            "title": "Are there evil globs?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "character-class"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 46394020,
            "is_answered": false,
            "question_id": 46393875,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1506282616,
            "creation_date": 1506281438,
            "body": "This should match exactly what you&#39;re looking for. When parsing using this on a non-global level for each line - it will parse off the parenthesis. \n\n\n\nSee below...\n\n\n",
            "excerpt": "var s = &#39;Lorem Ipsum comes from sections 1.10.32 <span class=\"highlight\">and</span> 1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>) by Cicero, written in 45 BC. This should also match () <span class=\"highlight\">and</span> ( ).&#39; &hellip; :\\))/g)\n)\n\n//CONSOLE OUTPUT\n(3) [&quot;(The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>)&quot;, &quot;()&quot;, &quot;( )&quot;]\n0: &quot;(The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>)&quot;\n1: &quot;()&quot;\n2: &quot;( )&quot;\nlength: 3 &hellip; ",
            "title": "Match the parentheses with or without a text in it - Regex"
        },
        {
            "tags": [
                "vba",
                "excel",
                "parsing",
                "vbe"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 45745199,
            "is_answered": false,
            "question_id": 45743203,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1503005590,
            "creation_date": 1503005265,
            "body": "As @MatsMug says, parsing VBA with Regex is hard impossible, but line-numbers are a simpler case, and should be findable with regex alone.\n\nFortunately, line numbers can only appear within a procedure body (including before the  statement), so we know they&#39;ll never be the first line of your code.\n\nUnfortunately, you can prefix a line-label with 0 or more line continuations:\n\n\n\nFurthermore, a line number isn&#39;t always followed by a space - it can be followed by an instruction separator, giving the line-number the appearance of a line-label:\n\n\n\nAnd if you&#39;re code is evil, you might encounter a negative line-number (entered by using hex notation - which VBE dutifully pretty prints back to the code-pane with a leading space and a negative number):\n\n\n\nAnd we also need to be able to identify numbers that appear on a continued line, that aren&#39;t line-numbers:\n\n\n\nSo, here&#39;s some evil line-numbering, with a mix of all of those edge-cases:\n\n\n\nAnd here&#39;s some regex that identifies the line-numbers:\n\n\n\nAnd here&#39;s a syntax highlight from regex101:\n\n\n",
            "excerpt": "As @MatsMug says, parsing VBA with <span class=\"highlight\">Regex</span> is hard impossible, but line-numbers are a simpler case, <span class=\"highlight\">and</span> should be findable with <span class=\"highlight\">regex</span> alone. &hellip; &quot;-1&quot; line number is achieved by entering &quot;&amp;HFFFFFFFF&quot;\n\nDebug.Print _\n2 &amp; &quot;is not a line-number&quot;\n\n60 End Sub\n\n\n<span class=\"highlight\">And</span> here&#39;s some <span class=\"highlight\">regex</span> that identifies the line-numbers:\n\n(? &hellip; ",
            "title": "VBA - Find all numbered lines in VBE Modules via pattern search"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "regex-negation"
            ],
            "question_score": 5,
            "is_accepted": true,
            "answer_id": 45502614,
            "is_answered": false,
            "question_id": 45501997,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1501863431,
            "creation_date": 1501837505,
            "body": "You can use String match for that\n\nThe regex below simply matches anything that&#39;s not a mustach, optionally surrounded by mustaches.\n\nExample snippet:\n\n\r\n\r\n\r\n\r\n\r\n\n\nBut to make it more precise, the regex pattern becomes a bit more complicated.\nThe regex below matches: \n\n\n&quot;what you want&quot;\n (a word between 2 mustaches on each side)\nOR &quot;what you don&#39;t want followed by what you want&quot;\n(using lazy matching and positive lookahead)\nOR &quot;what remains&quot;\n\n\n\r\n\r\n\r\n\r\n\r\n\n\nAnd last but not least, the evil SM method.\nSplit AND Match on the same regex. And concatinate them into a single array.\nThe downside of this method is that the order is not preserved.\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "The <span class=\"highlight\">regex</span> below matches: \n\n\n&quot;what you want&quot;\n (a word between 2 mustaches on each side)\nOR &quot;what you don&#39;t want followed by what you want&quot;\n(using lazy matching <span class=\"highlight\">and</span> positive lookahead)\nOR &quot;what remains&quot; &hellip; +/g;\r\n\r\nvar array = str.match(pattern);\r\n\r\nconsole.log(str);\r\nconsole.log(pattern);\r\nconsole.log(array);\r\n\r\n\r\n\n\n<span class=\"highlight\">And</span> last but not least, the <span class=\"highlight\">evil</span> SM method.\nSplit <span class=\"highlight\">AND</span> Match on the same <span class=\"highlight\">regex</span>. &hellip; ",
            "title": "Splitting string into matching and non-matching groups in javascript"
        },
        {
            "tags": [
                "javascript",
                "arrays",
                "string"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 44847982,
            "is_answered": false,
            "question_id": 44847727,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1498992513,
            "creation_date": 1498830180,
            "body": "Solution without eval, which is evil, using regex with group:\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "Solution without eval, which is <span class=\"highlight\">evil</span>, using <span class=\"highlight\">regex</span> with group:\n\n\r\n\r\nvar datastatusMonthly = [3];\r\n\r\nvar text = &#39;datastatusMonthly[0]&#39;;\r\nvar <span class=\"highlight\">regex</span> = /(datastatusMonthly)\\[([0-9]+)\\]/g;\r\nvar match = regex.exec &hellip; ",
            "title": "convert String to array in javascript &quot;datastatusMonthly[0]&quot;"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 116,
            "is_accepted": false,
            "answer_id": 44585641,
            "is_answered": false,
            "question_id": 12841970,
            "item_type": "answer",
            "score": 16,
            "last_activity_date": 1497605177,
            "creation_date": 1497605177,
            "body": "What you call an &quot;evil&quot; regex is a regex that exhibits catastrophic backtracking.  The linked page (which I wrote) explains the concept in detail.  Basically, catastrophic backtracking happens when a regex fails to match and different permutations of the same regex can find a partial match.  The regex engine then tries all those permutations.  If you want to go over your code and inspect your regexes these are the 3 key issues to look at:\n\n\nAlternatives must be mutually exclusive.  If multiple alternatives can match the same text then the engine will try both if the remainder of the regex fails.  If the alternatives are in a group that is repeated, you have catastrophic backtracking.  A classic example is  to match any amount of any text when the regex flavor does not have a &quot;dot matches line breaks&quot; mode.  If this is part of a longer regex then a subject string with a sufficiently long run of spaces (matched by both  and ) will break the regex.  The fix is to use  to make the alternatives mutually exclusive or even better to be more specific about which characters are really allowed, such as  for ASCII printables, tabs, and line breaks.\nQuantified tokens that are in sequence must either be mutually exclusive with each other or be mutually exclusive what comes between them.  Otherwise both can match the same text and all combinations of the two quantifiers will be tried when the remainder of the regex fails to match.  A classic example is  to match 3 things with &quot;anything&quot; between them. When  can&#39;t be matched the first  will expand character by character until the end of the line or file.  For each expansion the second  will expand character by character to match the remainder of the line or file.  The fix is to realize that you can&#39;t have &quot;anything&quot; between them.  The first run needs to stop at  and the second run needs to stop at .  With single characters  is an easy solution.  Since we now stop at the delimiter, we can use possessive quantifiers to further increase performance.\nA group that contains a token with a quantifier must not have a quantifier of its own unless the quantified token inside the group can only be matched with something else that is mutually exclusive with it.  That ensures that there is no way that fewer iterations of the outer quantifier with more iterations of the inner quantifier can match the same text as more iterations of the outer quantifier with fewer iterations of the inner quantifier.  This is the problem illustrated in JDB&#39;s answer.\n\n\nWhile I was writing my answer I decided that this merited a full article on my website.  This is now online too.\n",
            "excerpt": "What you call an &quot;<span class=\"highlight\">evil</span>&quot; <span class=\"highlight\">regex</span> is a <span class=\"highlight\">regex</span> that exhibits catastrophic backtracking.  The linked page (which I wrote) explains the concept in detail. &hellip; Basically, catastrophic backtracking happens when a <span class=\"highlight\">regex</span> fails to match <span class=\"highlight\">and</span> different permutations of the same <span class=\"highlight\">regex</span> can find a partial match.  The <span class=\"highlight\">regex</span> engine then tries all those permutations. &hellip; ",
            "title": "How can I recognize an evil regex?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "camelcasing"
            ],
            "question_score": 291,
            "is_accepted": false,
            "answer_id": 43889080,
            "is_answered": false,
            "question_id": 2970525,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1494410090,
            "creation_date": 1494410090,
            "body": "Upper camel case (&quot;TestString&quot;) to lower camel case (&quot;testString&quot;) without using regex (let&#39;s face it, regex is evil):\n\n\n",
            "excerpt": "Upper camel case (&quot;TestString&quot;) to lower camel case (&quot;testString&quot;) without using <span class=\"highlight\">regex</span> (let&#39;s face it, <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span>):\n\n&#39;TestString&#39;.split(&#39;&#39;).reduce((t, v, k) =&gt; t + (k === 0 ? &hellip; ",
            "title": "Converting any string into camel case"
        },
        {
            "tags": [
                "c++",
                "boost",
                "boost-spirit",
                "boost-phoenix",
                "boost-spirit-lex"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 43102309,
            "is_answered": false,
            "question_id": 43100216,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1490867055,
            "creation_date": 1490815023,
            "body": "I&#39;m going to chant the oft-heard &quot;Why&quot;?\n\nThis time, for good reason.\n\nIn general, avoid semantic actions: Boost Spirit: &quot;Semantic actions are evil&quot;?. \n\nPhoenix Actors are needlessly more complex than the dedicated functor. They have a sweet point (mainly simple assignment or builtin operations). But if the actor is any kind of non-trivial you&#39;ll see the complexity ramp up quickly, not just for the human but also for the compiler. This leads to\n\n\nslow compilation\nsub-optimal emitted code\nharder to maintain source\nnew classes of error (e.g. when the expression templates hold references to locals/temporaries, something that Boost Proto (and hence Phoenix) does not prevent or signal. In fact, it encourages it by assuming all template expressions are ephemeral, but I digress).\n\n\n\n  Interestingly: Spirit X3 dropped Phoenix altogether, even though Phoenix was once the brain child of Spirit&#179;.\n  \n  The new style uses c++14 polymorphic lambdas, that look 90% like the helper function object in the original code, but inline as a lambda.\n\n\nThis specific case\n\nCan&#39;t work. At all.\n\nThe problem is that you&#39;re mixing lazy/deferred actors with direct invocations. That can never work. The type of  isn&#39;t supposed to be . Of course. It is supposed to be a lazy actor&#185; that can be used at some later time to create a . \n\nNow that we know that (and why)  is an actor type, it should become clear why it is completely bogus to call  on it. You might as well say\n\n\n\nAnd wonder why it would not compile.\n\nSummary:\n\nYou should probably just have the dedicated functor. You can of course Phoenix-adapt the regex functions you require, but all it does is shift the complexity tax for some syntactic sugar.\n\nI&#39;d always opt for the more naive approach that is going to be more understandable to a seasoned c++ programmer, and avoids pitfalls that come with high-wire acts&#178;.\n\nNevertheless, here&#39;s a pointer should you be curious:\n\nhttp://www.boost.org/doc/libs/1_63_0/libs/phoenix/doc/html/phoenix/modules/function.html\n\nLive On Coliru\n\n\n\n\n\n&#185; think composed function object that can be invoked at a later time\n\n&#178; the balance might tip if you were designing this as an EDSL for further configuration by non-experts, but then you will have the added responsibility of documenting your EDSL and the constraints in which it can be used\n\n&#179; should we say, spirit-child of a brain?\n",
            "excerpt": "In general, avoid semantic actions: Boost Spirit: &quot;Semantic actions are <span class=\"highlight\">evil</span>&quot;?. \n\nPhoenix Actors are needlessly more complex than the dedicated functor. &hellip; You can of course Phoenix-adapt the <span class=\"highlight\">regex</span> functions you require, but all it does is shift the complexity tax for some syntactic sugar. &hellip; ",
            "title": "Converting a Boost Spirit Lex semantic action to Phoenix - How to access _val?"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 132,
            "is_accepted": false,
            "answer_id": 42824600,
            "is_answered": false,
            "question_id": 22115,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1489633848,
            "creation_date": 1489633848,
            "body": "If you want to generate &quot;critical&quot; strings, you may want to consider:\n\nEGRET http://elarson.pythonanywhere.com/\nthat generates &quot;evil&quot; strings covering your regular expressions\n\nMUTREX http://cs.unibg.it/mutrex/\nthat generates fault-detecting strings by regex mutation\n\nBoth are academic tools (I am one of the authors of the latter) and work reasonably well.\n",
            "excerpt": "If you want to generate &quot;critical&quot; strings, you may want to consider:\n\nEGRET http://elarson.pythonanywhere.com/\nthat generates &quot;<span class=\"highlight\">evil</span>&quot; strings covering your regular expressions\n\nMUTREX http://cs.unibg.it &hellip; /mutrex/\nthat generates fault-detecting strings by <span class=\"highlight\">regex</span> mutation\n\nBoth are academic tools (I am one of the authors of the latter) <span class=\"highlight\">and</span> work reasonably well. &hellip; ",
            "title": "Using Regex to generate Strings rather than match them"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "angular",
                "ionic2"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 42090266,
            "is_answered": false,
            "question_id": 42088669,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1486471544,
            "creation_date": 1486471544,
            "body": "Regex is an evil beast. Luckily I found this nice little example on regexlib.com\n\nThis seems to be kind-of what you&#39;re looking for. As for why Angular isn&#39;t matching your whitespace, it may potentially be that you have to double-escape your whitespace selector, so  it would look like:\n\n\n\nBut that&#39;s just a guess.\n",
            "excerpt": "<span class=\"highlight\">Regex</span> is an <span class=\"highlight\">evil</span> beast. Luckily I found this nice little example on regexlib.com\n\nThis seems to be kind-of what you&#39;re looking for. &hellip; ",
            "title": "Ionic 2 : Form validator (regex)"
        },
        {
            "tags": [
                "php",
                "arrays",
                "preg-match",
                "strpos",
                "preg-split"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 41905431,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1485566009,
            "creation_date": 1485566009,
            "body": "I’m trying to convert a formula like;\n\n\n\nInto a multi dimensional array structured as such\n\n\n\nSo as it can be processed via a function similar to;\n\n\n\n(doCalculation simply processes the 2 values passed to it with the defined function)\n\nThe formula can have any level of complexity and the key to structuring the array is with position of the brackets (items in brackets are contained in calc)\n\ne.g\n\n100 *((1 + 21) * ((2 * 10) + 90))\n\nwould become;\n\n\narray\n\n\nval: 100\n\narray\n\n\nfunc: *\ncalc\n\n\narray\n\n\ncalc\n\n\narray\n\n\nval:1\n\narray\n\n\nfunc: +\nval: 21\n\n\n\narray\n\n\nfunc: *\ncalc\n\n\narray\n\n\ncalc\n\n\narray\n\n\nval: 2\n\narray\n\n\nfunc: *\nval: 10\n\n\n\narray\n\n\nfunc: +\nval: 90\n\n\n\n\n\n\n\nThe reason for this approach is it gives the script complete control over what functions can be passed, so as advanced custom functions can be used and to avoid the use of eval() which should in all fairness be spelt evil().\n\nThe issue here is also simplified slighly as in the actual application it uses field references rather than actual values.\n\nThe issue I am having is with creating the array with the correct structure.\n\nHow could i convert an equation such as 100 *((1 + 21) * ((2 * 10) + 90)) into a php array in the format above.\n\nSomething like (below) is the best i&#39;ve come up with so far, but it won&#39;t work on more complex functions.\n\n\n\nI&#39;m sure that my current approach is wrong.... the answer is likely with looping through the string and using preg_split to split on each bracket or potentially using a regex... but so far i&#39;ve just been hitting brick walls.\n\nAny help would be greatly appreciated.\n",
            "excerpt": "to avoid the use of eval() which should in all fairness be spelt <span class=\"highlight\">evil</span>(). &hellip; using preg_split to split on each bracket or potentially using a <span class=\"highlight\">regex</span>... but so far i&#39;ve just been hitting brick walls. &hellip; ",
            "title": "PHP: Convert a string containing a mathematical formula into a multi dimensional array so is it can be calculated programatically without using eval()"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 76947953,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1692647902,
            "creation_date": 1692643259,
            "body": "Starting with Java 9, the regex engine began supporting variable-length lookbehind. I guess that&#39;s great and all if you want it, but that&#39;s a really good way to make a regex that is vulnerable to ReDOS attacks, or just being accidentally ReDOSsed by ordinary user input.\nFor reasons that are beyond the scope of this question, I am unable to police the regexes that my application is using to the extent that I&#39;d like. We&#39;ve had problems with regexes that wouldn&#39;t even have compiled in ancient versions of Java, but instead are causing application hangs (when a clean failure would have been much preferred).\nI&#39;m guessing the answer is &quot;no&quot;, but is there any way to get like legacy behavior on the Java regex engine, or to otherwise enable stricter checking, so that pathological regexes like this won&#39;t even be compiled by the engine? It would be much better to just fail these regexes, than for it to work most of the time but then if you give it just the right input it hangs.\nEdit to add: So there&#39;s stuff like this open source project that would maybe be something to look at if I decide I need to analyze any new regexes to make sure they aren&#39;t Evil. It would be nice if there was just a &quot;strict&quot; setting on the regex engine or something tho...\n",
            "excerpt": "I guess that&#39;s great <span class=\"highlight\">and</span> all if you want it, but that&#39;s a really good way to make a <span class=\"highlight\">regex</span> that is vulnerable to ReDOS attacks, or just being accidentally ReDOSsed by ordinary user input. &hellip; Edit to add: So there&#39;s stuff like this open source project that would maybe be something to look at if I decide I need to analyze any new regexes to make sure they aren&#39;t <span class=\"highlight\">Evil</span>. &hellip; ",
            "title": "Can Java&#39;s regex engine be made to forbid variable length lookbehind?"
        },
        {
            "tags": [
                "perl",
                "for-loop",
                "numbers",
                "primes"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 33919970,
            "is_answered": false,
            "question_id": 27134252,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1691198495,
            "creation_date": 1448464224,
            "body": "One of Abigail&#39;s .sigs has a regex (!) that determines whether a number is prime:\n\nThat takes about 15 seconds on my system. Of course, as evil-otto points out, there are faster solutions.\nThere is a very good explanation of how the regex works on Neil Kandalgaonkar&#39;s excellent blog1. The workings of Abigail&#39;s marvelous brain are left unexplained.\n\n1). See: Abigail&#39;s regex to test for prime numbers.\nLink uses WayBack which is required. Original reference:\nhttp://neilk.net/blog/2000/06/01/abigails-regex-to-test-for-prime-numbers/\n",
            "excerpt": "Of course, as <span class=\"highlight\">evil</span>-otto points out, there are faster solutions.\nThere is a very good explanation of how the <span class=\"highlight\">regex</span> works on Neil Kandalgaonkar&#39;s excellent blog1. &hellip; See: Abigail&#39;s <span class=\"highlight\">regex</span> to test for prime numbers.\nLink uses WayBack which is required. Original reference:\nhttp://neilk.net/blog/2000/06/01/abigails-<span class=\"highlight\">regex</span>-to-test-for-prime-numbers/ &hellip; ",
            "title": "Prime numbers in perl"
        },
        {
            "tags": [
                "linux",
                "bash",
                "posix"
            ],
            "question_score": 840,
            "is_accepted": false,
            "answer_id": 30515012,
            "is_answered": false,
            "question_id": 8987037,
            "item_type": "answer",
            "score": 262,
            "last_activity_date": 1684502850,
            "creation_date": 1432839590,
            "body": "Kill all processes matching the string &quot;myProcessName&quot;:\n\nSource: http://www.commandlinefu.com/commands/view/1138/ps-ef-grep-process-grep-v-grep-awk-print-2-xargs-kill-9\nWhy &quot;ps pipe kill&quot; from terminal is evil:\nThe Piping of integers you scraped from  to  is bad, and you should feel bad, doubly so if you&#39;re root or a user with elevated privileges, because it doesn&#39;t give your process a chance to cleanly shut down socket connections, clean up temp files, inform its children that it is going away or reset its terminal characteristics.\nInstead send 15, and wait a second or two, and if that doesn&#39;t\nwork, send 2, and if that doesn&#39;t work, send 1.  If that doesn&#39;t,\nREMOVE THE BINARY because the program is badly behaved.\nAs a general principle we don&#39;t use Unix Railgun to trim the hedges.  https://porkmail.org/era/unix/award.html#kill\nExplanation of above command:\n produces a list of process id&#39;s on the computer visible to this user.  The pipe grep filters that down for rows containing that string.  The  says don&#39;t match on the process itself doing the grepping.  The pipe awk print says split the rows on default delimiter whitespace and filter to the second column which is our process id.  The pipe xargs spins up a new process to send all those pid&#39;s to , ending them all.\nWhy  is bad, dangerous, ugly and hackish:\n\nThere&#39;s a small possibility that you will accidentally end the operating system or cause undefined behavior in an unrelated process, leading to whole system instability because  lists thousands of processes, and you can&#39;t be sure some 3rd party process shares your process name, or that in the time between read and execute kill -9, the processid had changed to something else, and now you&#39;ve ended some random necessary process unrelated to yours.\n\nIf the code being force-ended is doing any database ops or secure transactions with low probability race conditions, some fraction of a percent of the time, atomicity of that transaction will be wrecked, producing undefined behavior.  kill -9 takes no prisoners.  If your code is sensitive to this, try replacing the  part with a transmitted flag that requests a graceful shutdown, and only if that request is denied, last-resort to \n\n\nBut, if you understand all the risks and control for them with unique names, and you&#39;re ok with a few dropped transactions or occasional corruption, then 99.9% of the time yer gonna be fine. If there&#39;s a problem, reboot the computer, make sure there aren&#39;t any process collisions.  It&#39;s because of code like this that makes the tech support script: &quot;Have you tried restarting your computer&quot; a level 5 meme.  &quot;A Rogue Robot scraped  to find integers and sent those to , so reboot the computer to clear the problem.\nWhy not just use  which is easier?\nThe above gives me manual control because , , ,  and  are multi-platform standard.  It gives full control to which regex engine to use, which part of the process name to match, handling case sensitivity and exception management.\n\nDoes the same thing for me, but see  has different behaviors, flags and regex engines between variants of Linux, Mac, Zune-Bash and my opensource router.  So yes, put your 35000 Watt Unix-Railgun into the capable hands of pkill to trim the hedges.  See what happens.\nGrepping once\nYou can substitute the  with square brackets around the first letter of the command to kill, which does the same thing and prevents grep from grepping itself, for example:\n\nWhy that works:\nhttps://askubuntu.com/questions/153419/how-does-this-tricky-bracket-expression-in-grep-work\n",
            "excerpt": "It gives full control to which <span class=\"highlight\">regex</span> engine to use, which part of the process name to match, handling case sensitivity <span class=\"highlight\">and</span> exception management.\npkill -f -e -c myProcessName\n\nDoes the same thing for me &hellip; , but see man pkill has different behaviors, flags <span class=\"highlight\">and</span> <span class=\"highlight\">regex</span> engines between variants of Linux, Mac, Zune-Bash <span class=\"highlight\">and</span> my opensource router. &hellip; ",
            "title": "How to kill all processes with a given partial name?"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 16,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 288800,
            "item_type": "question",
            "score": 16,
            "last_activity_date": 1682102164,
            "creation_date": 1226620185,
            "body": "I have this naive regex &quot;&lt;([\\s]|[^&lt;])+?&gt;&quot; (excluding the quotation marks). It seems so\nstraightforward but it is indeed evil when it works against the below HTML text. It sends the Java regular expression engine to an infinite loop.\nI have another regex (&quot;&lt;.+?&gt;&quot;), which does somewhat the same thing, but it doesn&#39;t kill anything. Do you know why this happens?\n\nit even keeps looping with an online Java regex tool (such as www.fileformat.info/tool/regex.htm) or a utility like RegexBuddy.\n",
            "excerpt": "I have this naive <span class=\"highlight\">regex</span> &quot;&lt;([\\s]|[^&lt;])+?&gt;&quot; (excluding the quotation marks). It seems so\nstraightforward but it is indeed <span class=\"highlight\">evil</span> when it works against the below HTML text. &hellip; I have another <span class=\"highlight\">regex</span> (&quot;&lt;.+?&gt;&quot;), which does somewhat the same thing, but it doesn&#39;t kill anything. Do you know why this happens? &hellip; ",
            "title": "Why does this regular expression kill the Java regex engine?"
        },
        {
            "tags": [
                "html",
                "email",
                "jvm",
                "jsoup",
                "conditional-comments"
            ],
            "question_score": 4,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 54694473,
            "item_type": "question",
            "score": 4,
            "last_activity_date": 1679529462,
            "creation_date": 1550160068,
            "body": "I know how terribly wrong it is to (attempt to) parse HTML with Regex, which is why I&#39;m trying really, really hard to avoid it.\n\nI have an app that generates HTML emails. We&#39;re using a big fancy WYSIWYG drop in email editor that takes care of generating responsive emails and also generates the abysmal markup for clients like MS Outlook. It does that last bit using conditional comments, which look something like the following. Note that the  has an  attribute, and wraps the  tag that non-mso clients will see.\n\n\n\nOf course, this is just one of dozens (possibly hundreds?) of possible formattings that we need to work with.\n\nPrior to the introduction of this editor, we asked our customers to generate their own HTML emails with a more rudimentary WYSIWYG HMTL editor; but it was incumbent on them to make responsive templates and test their content in various clients. From their perspective, this new editor is a huge win.\n\nAs we&#39;re sending emails, it&#39;s important to track the link clicks via a tracking link that redirects through to the originally-intended link.\n\nTo date, we&#39;ve used jSoup to parse the email content, looking for any anchor tags and replace their href attribute contents. Because regex html parsing is evil, right?\n\nConditional comments have thrown a wrench in those gears.\n\nBecause they are comments, jSoup ignores them, and clicks from MS Outlook and other clients that handle the  markup haven&#39;t been transformed to go through our link tracker, so the clicks don&#39;t get tracked. This is a problem for us.\n\n\n\nFirst idea: replace the conditional comments with a custom tag\n\nAt first I was hopeful to pre-process the message body before letting jSoup have it. I would replace  with  and  with . This was simple enough to do, even for complex forms of the conditions inside the comments. I used a regex to make some simple replacements:\n\n\n became \n became  \netc\n\n\nNotice that I url-encoded the original comment in its entirety. url-encoding it made sure that I could easily use regex to find my marker comments and transform them back (so that I didn&#39;t have to worry about  inside the &quot;orig&quot; attribute content...\n\nThis started to break down when I realized there were multiple possible ways the comments could be closed. I spent a little bit of time working on a similar approach for the closing tags.\n\n\n became \nsame approach for  and \n\n\nI don&#39;t know if you can have attributes on a closing tag. I never tested it because I had another realization before I got to that point. The realization was that using  wasn&#39;t going to produce desirable output from jSoup because the resulting INPUT would often look like:\n\n\n\nThis is not tidy HTML and jSoup will try to correct it, changing the order of tags to make something that it thinks is more correct. When I realized that, I stopped what I was doing and started thinking about the problem again.\n\n\n\nSecond idea: the same thing, but with comments\n\nIf the (new) problem was that jSoup didn&#39;t like my tag nesting, what if I could expose the HTML from inside the conditional comments as if it weren&#39;t commented out, but keep some markers in as comments that I can later transform back into comments? The goal was to aim at making this:\n\n\n\nThis should parse as fairly tidy HTML, right? So I made the code modifications and gave it a shot.\n\nSadly, the documents that we&#39;re working with are far more complex than the simple example I started from above. Here&#39;s the first few lines of an actual sample document:\n\n\n\nAfter the comment conversion, we&#39;ve effectively dropped an  block into the  block, of which jSoup is decidedly not a fan. This is what I get back for the above input, after converting the conditional comments into my plain marked comments, parsing with jSoup, and then converting my markers back to their conditional comments:\n\n\n\nThere are some big problems here. The  block gets basically immediately closed. The  tag moves up to before the  block, and everything that came after it moved down into the body. This isn&#39;t going to work.\n\n\n\nNow what?\n\nI feel like we&#39;re basically out of options. \n\n\nDo nothing and just don&#39;t count the clicks from MS Outlook/etc clients. In some cases we might be able to detect a click anyway via a downstream conversion on that email. (Even if we don&#39;t have record of you clicking the link, if you made a payment then we know you got there...)\nWe could let our mail provider do the link tracking for us (experimentation required; not positive they would track the  links either). Historically we started this system with a provider that didn&#39;t offer link tracking so we had to roll our own. Current provider offers it, but we&#39;ve got years of existing code and processes that would have to be updated to support this change. We&#39;re keeping it in our back pocket if we can&#39;t figure something else out, but the prospect of changing ships mid-stream is ... not appealing.\nOr lastly... maybe... regex? (/me ducks) We could let jSoup do its thing for the normal HTML, and then use regex to replace any links that remain. This becomes a game of whack-a-mole with current and future markup. What might we run into aside from a  in the future? &#175;\\_(ツ)_/&#175; And we won&#39;t know what we&#39;re missing without regular manual reviews.\n\n\nUnless there&#39;s another option that we haven&#39;t explored yet. So... are we stuck with nothing/regex?\n\nWe&#39;re on the JVM so anything Java is within reach, I guess.\n",
            "excerpt": "To date, we&#39;ve used jSoup to parse the email content, looking for any anchor tags <span class=\"highlight\">and</span> replace their href attribute contents. Because <span class=\"highlight\">regex</span> html parsing is <span class=\"highlight\">evil</span>, right? &hellip; Or lastly... maybe... <span class=\"highlight\">regex</span>? (/me ducks) We could let jSoup do its thing for the normal HTML, <span class=\"highlight\">and</span> then use <span class=\"highlight\">regex</span> to replace any links that remain. &hellip; ",
            "title": "Parsing HTML Email content inside of conditional comments (trying to avoid regex!)"
        },
        {
            "tags": [
                "python",
                "regex",
                "replace"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 75746343,
            "is_answered": false,
            "question_id": 75746210,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1678891654,
            "creation_date": 1678891654,
            "body": "Disclaimer: It is generally evil and a menace to use regex to clean up XML content, which task should be delegated to a proper parser.  Given that you have no nested tags, you may try using the following replacement logic:\n\nThis prints:\n\nThe regex pattern used here matches:\n\n An XML tag\n OR\n any intermediate content, up to, but not including,\nthe next XML tag or the end of the string\n\nWe do a lambda replacement, which selectively strips spaces only from the intermediate content, but not from the tags themselves.\n",
            "excerpt": "Disclaimer: It is generally <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> a menace to use <span class=\"highlight\">regex</span> to clean up XML content, which task should be delegated to a proper parser. &hellip; &gt;|$)&#39;, lambda m: m.group().replace(&#39; &#39;, &#39;&#39;) if not m.group().startswith(&#39;&lt;&#39;) <span class=\"highlight\">and</span> not m.group().endswith(&#39;&gt;&#39;) else m.group(), inp)\nprint(output)\n\nThis prints:\n&lt;?xml version=&quot;1.0&quot;? &hellip; ",
            "title": "Python: Using sub() tu replace string matched by regex"
        },
        {
            "tags": [
                "perl"
            ],
            "question_score": 13,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 4,
            "is_answered": true,
            "question_id": 167238,
            "item_type": "question",
            "score": 13,
            "last_activity_date": 1677726740,
            "creation_date": 1223045253,
            "body": "The question is not how to tell in a oneliner. If you&#39;re writing the code in a one-liner, you know you are. But how does a module, included by  know that it all started from a oneliner. \n\nThis is mine. It&#39;s non-portable though and relies on UNIX standard commands (although, it can be made portable more or less.)\n\n\n\nAnd if you have a snazzier regex, feel free to improve upon mine. \n\n\n\nA couple of people have asked why I would want to do this. brian correctly guessed that I wanted to change export behavior based on whether it&#39;s a script, which we can assume has had some amount of design, or whether it&#39;s a oneliner where the user is trying to do as much as possible in a single command line. \n\nThis sounds bad, because there&#39;s this credo that exporters should respect other packages--sometimes known as &quot; is EVIL!&quot; But it seems to me that it&#39;s a foolish consistency when applied to oneliners. After all perl itself goes out of it&#39;s way to violate the structure of its language and give you easy loops if you ask for them on the command line, I simply want to extend that idea for my operational/business domain. I even want to apply source filters (gasp!) if it helps. \n\nBut this question also suggests that I might want to be a good citizen of Perl as well, because I only to break the community guidelines in certain cases. It is quite awesome to be able to create major business-level actions just by changing the command line in a batch scheduler rather than writing a whole new module. The test cycle is much compressed. \n",
            "excerpt": "\\s+-[^\\P{IsLower}e]*e[^\\P{IsLower}e]*\\s+/m\n    ;\n\n\n<span class=\"highlight\">And</span> if you have a snazzier <span class=\"highlight\">regex</span>, feel free to improve upon mine. &hellip; This sounds bad, because there&#39;s this credo that exporters should respect other packages--sometimes known as &quot;@EXPORT is <span class=\"highlight\">EVIL</span>!&quot; &hellip; ",
            "title": "What&#39;s the best way to tell if your perl&#39;s running on -e?"
        },
        {
            "tags": [
                "python",
                "web-scraping",
                "cloudflare"
            ],
            "question_score": 16,
            "is_accepted": false,
            "answer_id": 75312785,
            "is_answered": false,
            "question_id": 65604551,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1675266696,
            "creation_date": 1675266696,
            "body": "I can suggest such workflow to &quot;try&quot; to avoid Cloudflare WAF/bot mitigation:\n\ndon&#39;t cycle user agents, proxies or weird tunnels to surf\ndon&#39;t use fixed ip addresses, better leased lines like xDSL, home links and 4G/LTE\ntry to appear as mobile instead of a desktop/tablet\ntry to reproduce pointer movements like never before AKA record your mouse moves and migrate them 1:1 while scraping (yes u need JS enabled and some headless browser able to make up as &quot;common&quot; one)\ndon&#39;t cycle against different Cloudflare protected entities otherwise the attacker ip will be greylisted in a minute (AKA build your own targets blacklist, never touch such entities or you will go in the CF blacklist flawlessy)\ntry to reproduce a real life navigation in all aspects, including errors, waitings and more\ncheck your used ip after any scrape against popular blacklists otherwise bad errors will shortly appears (crowdsec is a good starting point)\nthe usual scrape is a googlebot scrape, a single regex WAF rule on CLoudflare will block 99,99% of the tries then.. avoid to fake as google and try to be LESS evil instead (ex: asking webmasters for APIs or data export if any).\n\nSource: I use Cloudflare with hundreds of domains and thousands of records (Enterprise) from the beginning of the company.\nThat way you will be closer to the point (and you will help them increasing  the overall security).\n",
            "excerpt": "more\ncheck your used ip after any scrape against popular blacklists otherwise bad errors will shortly appears (crowdsec is a good starting point)\nthe usual scrape is a googlebot scrape, a single <span class=\"highlight\">regex</span> &hellip; WAF rule on CLoudflare will block 99,99% of the tries then.. avoid to fake as google <span class=\"highlight\">and</span> try to be LESS <span class=\"highlight\">evil</span> instead (ex: asking webmasters for APIs or data export if any). &hellip; ",
            "title": "Can&#39;t bypass cloudflare with python cloudscraper"
        },
        {
            "tags": [
                "php",
                "xml"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 74974224,
            "is_answered": false,
            "question_id": 74971941,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1672583947,
            "creation_date": 1672570651,
            "body": " is a commonly cited expression - a  to parse XML is not, in my opinion, the  The task of presenting the contents of an XML file in table form can best be accomplished with XSL Transformations\nGiven the original XML, saved as  a simple XSL stylesheet can be used to generate the entire HTML Table with the content drawn directly from the XML.\ncatalog.xsl\n\nTo use the XSL within PHP:\n\nThis yields:\n\nTo display the  and the content - again using XSLT the  file needs to be modified slightly. Within the  loop you also want to add the tagName like this perhaps:\n\nThis modification yields:\n\n\nTo process the XML with DOMDocument only and store the tag&amp;value as a string and the value also as string you could do like this:\n\nWhich yields output like this:\n\n",
            "excerpt": "&quot;The Right tool for the right job&quot; is a commonly cited expression - a <span class=\"highlight\">Regex</span> to parse XML is not, in my opinion, the &quot;Right Tool!&quot; &hellip; &lt;/description&gt;\n            [11] =&gt; A former architect battles corporate zombies, \n      an <span class=\"highlight\">evil</span> sorceress, <span class=\"highlight\">and</span> her own childhood to become queen \n      of the world.\n        )\n\n    [bk103] =&gt; Array &hellip; ",
            "title": "How to take and display the content and tags of the xml file?"
        },
        {
            "tags": [
                "html",
                "nginx"
            ],
            "question_score": 44,
            "is_accepted": true,
            "answer_id": 38238001,
            "is_answered": false,
            "question_id": 38228393,
            "item_type": "answer",
            "score": 150,
            "last_activity_date": 1667677988,
            "creation_date": 1467868828,
            "body": "The &quot;Holy Grail&quot; Solution for Removing &quot;.html&quot; in NGINX:\nUPDATED ANSWER: This question piqued my curiosity, and I went on another, more in-depth search for a &quot;holy grail&quot; solution for  redirects in NGINX. Here is the link to the answer I found, since I didn&#39;t come up with it myself: https://stackoverflow.com/a/32966347/4175718\nHowever, I&#39;ll give an example and explain how it works. Here is the code:\n\nWhat&#39;s happening here is a pretty ingenious use of the  directive. NGINX runs a regex on the  portion of incoming requests. The regex checks if the URI has an .html extension and then stores the extension-less portion of the URI in the built-in variable .\nFrom the docs, since it took me a while to figure out where the  came from:\n\nRegular expressions can contain captures that are made available for later reuse in the $1..$9 variables.\n\nThe regex both checks for the existence of unwanted .html requests and effectively sanitizes the URI so that it does not include the extension. Then, using a simple  statement, the request is redirected to the sanitized URI that is now stored in .\nThe best part about this, as original author cnst explains, is that\n\nDue to the fact that $request_uri is always constant per request, and is not affected by other rewrites, it won&#39;t, in fact, form any infinite loops.\n\nUnlike the rewrites, which operate on any  request (including the invisible internal redirect to ), this solution only operates on external URIs that are visible to the user.\nWhat does &quot;try_files&quot; do?\nYou will still need the  directive, as otherwise NGINX will have no idea what to do with the newly sanitized extension-less URIs. The  directive shown above will first try the new URL by itself, then try it with the &quot;.html&quot; extension, then try it as a directory name.\nThe NGINX docs also explain how the default  directive works. The default  directive is ordered differently than the example above so the explanation below does not perfectly line up:\n\nNGINX will first append  to the end of the URI and try to serve it. If it finds an appropriate  file, it will return that file and will maintain the extension-less URI. If it cannot find an appropriate  file, it will try the URI without any extension, then the URI as a directory, and then finally return a 404 error.\n\nUPDATE: What does the regex do?\nThe above answer touches on the use of regular expressions, but here is a more specific explanation for those who are still curious. The following regular expression (regex) is used:\n\nThis breaks down as:\n: indicates beginning of line.\n: match the character &quot;/&quot; literally. Forward slashes do NOT need to be escaped in NGINX.\n: capturing group: match any character an unlimited number of times\n: match the character &quot;.&quot; literally. This must be escaped with a backslash.\n: match the string &quot;html&quot; literally.\n: match a literal &quot;?&quot; or the end of the string. This is done to avoid mishandling file names with something after &quot;.html&quot;.\nThe capturing group  is what contains the non-&quot;.html&quot; portion of the URL. This can later be referenced with the variable . NGINX is then configured to re-try the request () and the  directive internally re-appends the &quot;.html&quot; extension so the file can be located.\nUPDATE: Retaining the query string\nTo retain query strings and arguments passed to a  page, the  statement can be changed to:\n\nThis should allow requests such as  to redirect to  instead of just .\n\nNote that this is considered safe usage of the `if` directive.\nFrom the NGINX page If Is Evil:\n\nThe only 100% safe things which may be done inside if in a location context are:\nreturn ...;\nrewrite ... last;\n\n\nAlso, note that you may swap out the &#39;302&#39; redirect for a &#39;301&#39;.\nA  redirect is permanent, and is cached by web browsers and search engines. If your goal is to permanently remove the  extension from pages that are already indexed by a search engine, you will want to use a  redirect. However, if you are testing on a live site, it is best practice to start with a  and only move to a  when you are absolutely confident your configuration is working correctly.\n",
            "excerpt": "The <span class=\"highlight\">regex</span> checks if the URI has an .html extension <span class=\"highlight\">and</span> then stores the extension-less portion of the URI in the built-in variable $1. &hellip; The <span class=\"highlight\">regex</span> both checks for the existence of unwanted .html requests <span class=\"highlight\">and</span> effectively sanitizes the URI so that it does not include the extension. &hellip; ",
            "title": "NGINX remove .html extension"
        },
        {
            "tags": [
                "c++",
                "visual-studio",
                "cmake"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 73698691,
            "is_answered": false,
            "question_id": 69564143,
            "item_type": "answer",
            "score": -1,
            "last_activity_date": 1666511775,
            "creation_date": 1663052354,
            "body": "Your first solution can be simplified by using  option of  instead of  option.\nThis will also get rid of the evil  command.\n\nSee CMake Regex Specification.\n\nAs for the  option, your solution is pretty good.\nWith the following minor modification, I can get the filtering behaviour as you desire, where files are filtered according to their folder name, and the ones at the root folder has no filter instead of being listed under &quot;Source Files&quot;.\n\n\nNote that it is sometimes necessary to run CMake command in a clean build environment for VS filters to take effect.\nI suspect that was the reason you had to apply a workaround to the  solution.\n",
            "excerpt": "This will also get rid of the <span class=\"highlight\">evil</span> GLOB command.\nsource_group(&quot;benchmark&quot; REGULAR_EXPRESSION &quot;benchmark/.+\\.(h|cpp)&quot;)\nsource_group(&quot;builder&quot; REGULAR_EXPRESSION &quot;builder/.+\\.(h|cpp)&quot;)\n... &hellip; See CMake <span class=\"highlight\">Regex</span> Specification.\n\nAs for the TREE option, your solution is pretty good. &hellip; ",
            "title": "How can I cleanly place files in the &quot;root&quot; filter in Visual Studio using CMake?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "string"
            ],
            "question_score": -2,
            "is_accepted": true,
            "answer_id": 73871703,
            "is_answered": false,
            "question_id": 73871509,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1664300209,
            "creation_date": 1664300209,
            "body": "The regex is pretty simple and can be almost identical to your string. Where you want to pick out some words use the match syntax  - the period is &quot;any character&quot;, and the  is &quot;one or more&quot;.\nUse  on the string with the expression to return an array of matches which you can then destructure into a number of variables (I&#39;ve called them   and  here).\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "`[` <span class=\"highlight\">and</span> `]` around &quot;Alert&quot;\n// as they are part of <span class=\"highlight\">regex</span> syntax. `^` <span class=\"highlight\">and</span> `$`\n// signify the start <span class=\"highlight\">and</span> end of the string respectively\nconst re = /^\\[Alert\\] (.+) has thrown a (.+) in (.+)\\.$/;\nconst str &hellip; = &#39;[Alert] Trump has thrown a tantrum in his <span class=\"highlight\">Evil</span> Lair.&#39; &hellip; ",
            "title": "Take key values from a string in Javascript"
        },
        {
            "tags": [
                "java",
                "regex",
                "string"
            ],
            "question_score": -3,
            "is_accepted": false,
            "answer_id": 73704934,
            "is_answered": false,
            "question_id": 73688734,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1663080094,
            "creation_date": 1663080094,
            "body": "The OWASP page describes evil regexes as those that contain\n\n\nGrouping with repetition\nInside the repeated group:\n\nRepetition\nAlternation with overlapping\n\n\n\n\nwhich is not always right. Their examples are good, but the rules are too generic and even good and safe patterns can be trigger the vulnerability\nYou can actually remove the first  to stop the warning from showing:\n\nThis way, only one  is used.\n",
            "excerpt": "The OWASP page describes <span class=\"highlight\">evil</span> regexes as those that contain\n\n\nGrouping with repetition\nInside the repeated group:\n\nRepetition\nAlternation with overlapping\n\n\n\n\nwhich is not always right. &hellip; Their examples are good, but the rules are too generic <span class=\"highlight\">and</span> even good <span class=\"highlight\">and</span> safe patterns can be trigger the vulnerability\nYou can actually remove the first + to stop the warning from showing:\ninput.matches &hellip; ",
            "title": "Will these two regex give me the same desired output?"
        },
        {
            "tags": [
                "regex",
                "floating-point",
                "integer",
                "numbers"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 73137567,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1658925492,
            "creation_date": 1658923322,
            "body": "I have this regex to test if the user input is valid:\n\nThe main point is in the regex: . However sonarcloud is feeling it as a security hotspot saying:\nMake sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.\nI guess it&#39;s because of the double digit test, but I couldn&#39;t find a way to avoid it. Is it a security threat, or harmless?\n",
            "excerpt": "I have this <span class=\"highlight\">regex</span> to test if the user input is valid:\nvalue.length === 0 ||\nvalue === &#39;-&#39; ||\n(!isNaN(parseFloat(value)) &amp;&amp; /^-?\\d+\\.?\\d*$/.test(value))\n\nThe main point is in the <span class=\"highlight\">regex</span>: /^-?\\d+\\.? &hellip; However sonarcloud is feeling it as a security hotspot saying:\nMake sure the <span class=\"highlight\">regex</span> used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service. &hellip; ",
            "title": "Match negative/positive float/int regex - is it evil?"
        },
        {
            "tags": [
                "regex",
                "scala",
                "unapply"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 72964888,
            "is_answered": false,
            "question_id": 72961975,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1657708679,
            "creation_date": 1657708679,
            "body": "I am not sure why you would expect it to not compile.  is valid syntax, and matches the extractor definition.\nFor example, this returns true:\n\nI guess, what you are really asking is why extractor does not throw a run-time error if number of parameters does not match the number of capturing groups in the regex ...\nThe answer to that is &quot;that&#39;s just how it is implemented&quot;.\nIt is not really obvious at all that throwing in this case would be a better solution than simply failing the match. Runtime errors are generally considered evil in scala (and in functional programming in general), and are only used in cases, when there is no other viable alternative.\n",
            "excerpt": "I am not sure why you would expect it to not compile. <span class=\"highlight\">regex</span>(&lt;any number of strings&gt;) is valid syntax, <span class=\"highlight\">and</span> matches the extractor definition. &hellip; Runtime errors are generally considered <span class=\"highlight\">evil</span> in scala (<span class=\"highlight\">and</span> in functional programming in general), <span class=\"highlight\">and</span> are only used in cases, when there is no other viable alternative. &hellip; ",
            "title": "Why does this compile? (Scala Regex unapplySeq)"
        },
        {
            "tags": [
                "c#",
                "asp.net-core",
                "xss"
            ],
            "question_score": 19,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 5,
            "is_answered": true,
            "question_id": 52239262,
            "item_type": "question",
            "score": 19,
            "last_activity_date": 1656876401,
            "creation_date": 1536439438,
            "body": "In ASP.NET we had Request Validation but in ASP.NET Core there is no such thing.\nHow can we protect an ASP.NET Core app against XSS in the best way?\nRequest validation gone:\nhttps://nvisium.com/resources/blog/2017/08/08/dude-wheres-my-request-validation.html\n\nthis guy recommmends RegEx on  like:\n[RegularExpression(@&quot;^[a-zA-Z0-9 -&#39;]*$&quot;, ErrorMessage = &quot;Invalid characters detected&quot;)]\npublic string Name { get; set; }\n\n\n...but that does not work for globalization/internationalization, i.e. non-latin characters like &#230;, &#248; &#229; 汉字.\nX-XSS to do &gt;limited&lt; XSS-protection: https://dotnetcoretutorials.com/2017/01/10/set-x-xss-protection-asp-net-core/ Like this but there is only limited support afaik:\n\nThe documentation from Microsoft is two years old: https://learn.microsoft.com/en-us/aspnet/core/security/cross-site-scripting?view=aspnetcore-2.1 and does not really cover it.\nI am thinking to do something simple like:\n\n\non all data submission - but it seems kind of wonky.\n\nI have asked the same question for Microsoft but I am interested to hear how people are solving this problem in real-life applications.\nUpdate: what we are trying to accomplish:\nIn our application, we have webforms where people can input names, email, content and similar. The data is stored in a database and will be viewed on a frontend system and possibly other systems in the future (like RSS feeds, JSON, whatever). Some forms contain rich-text editors (TinyMCE) and allow users to markup their texts. Malicious users could enter  in the fields. What is the best way to strip the evil characters in ASP.NET Core before it reaches the database - I prefer evil scripts not to be stored in the database at all.\nI figured something like this could work:\n\n",
            "excerpt": "Some forms contain rich-text editors (TinyMCE) <span class=\"highlight\">and</span> allow users to markup their texts. Malicious users could enter &lt;script&gt;alert(&#39;<span class=\"highlight\">evil</span> stuff&#39;);&lt;/script&gt; in the fields. &hellip; What is the best way to strip the <span class=\"highlight\">evil</span> characters in ASP.NET Core before it reaches the database - I prefer <span class=\"highlight\">evil</span> scripts not to be stored in the database at all. &hellip; ",
            "title": "How to protect against XSS in ASP.NET Core?"
        },
        {
            "tags": [
                "awk",
                "text-processing",
                "unix-text-processing"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 72695200,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1655830113,
            "creation_date": 1655784098,
            "body": "Given the following example URLs:\nurls.txt\n\nI&#39;m using this command:\n\nTo produce this desired output:\n\nBut it yields this output:\n\nWhy is it printing a semblance of the original URL before the correct output?\n\nHere is the above code formatted legibly with :\n\n",
            "excerpt": "MiscHostsFiles/raw/master/MiscAdTrackingHostBlock.txt\nhttps://github.com/DK-255/Pi-hole-list-1/raw/main/Ads-Blocklist\nhttps://github.com/DRSDavidSoft/additional-hosts/raw/master/domains/blacklist/adservers-<span class=\"highlight\">and</span>-trackers.txt &hellip; /smartphone-<span class=\"highlight\">and</span>-general-ads-analytics-<span class=\"highlight\">regex</span>-blocklist-ftprivacy.txt\nhttps://github.com/hell-sh/<span class=\"highlight\">Evil</span>-Domains/raw/master/<span class=\"highlight\">evil</span>-domains.txt\nhttps://github.com/hosts-file/BulgarianHostsFile/raw/master/bhf.txt &hellip; ",
            "title": "Issue converting github.com/*/raw/* URLs to raw.githubusercontent.com URLS using AWK"
        },
        {
            "tags": [
                "awk",
                "text-processing",
                "unix-text-processing"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 72704220,
            "is_answered": false,
            "question_id": 72695200,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1655830113,
            "creation_date": 1655828910,
            "body": "Your only real problem is that awk fields, arrays, and strings all start at 1, not 0, so your loop should have started at 1, not 0. As written first time through your loop  is doing .\nHaving said that, I think what you want is the following with a couple of other things tidied up:\n\n\n\nThe only slightly tricky part in that is  which is how you remove a mid-record field in awk - first convert the field to a string that matches RS since that can&#39;t be present in the input (we can use RS directly when it&#39;s a string like  rather than a regexp) so we changed  to  in the 6th field which meant the record now contained  and then removed  thereby removing the 6th field and preceding .\n",
            "excerpt": "/smartphone-<span class=\"highlight\">and</span>-general-ads-analytics-<span class=\"highlight\">regex</span>-blocklist-ftprivacy.txt\nhttps://raw.githubusercontent.com/hell-sh/<span class=\"highlight\">Evil</span>-Domains/master/<span class=\"highlight\">evil</span>-domains.txt\nhttps://raw.githubusercontent.com/hosts-file/BulgarianHostsFile &hellip; then removed /\\n thereby removing the 6th field <span class=\"highlight\">and</span> preceding /. &hellip; ",
            "title": "Issue converting github.com/*/raw/* URLs to raw.githubusercontent.com URLS using AWK"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": -2,
            "is_accepted": false,
            "answer_id": 72498731,
            "is_answered": false,
            "question_id": 72498625,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1654336065,
            "creation_date": 1654336065,
            "body": "I hope this regex can help you :\n\nAlso be carefull about evil regex, each regex is potentially a open door for DDOS attack on you website.\nI tried your regex on :  https://regexr.com/\nIt&#39;s a good tools for testing your regex\n",
            "excerpt": "I hope this <span class=\"highlight\">regex</span> can help you :\n \\/([a-zA-Z]+)(.*)[\\/](more|next|[0-9]+) \n\n \\/([a-zA-Z]+)(.*)[\\/](more|next|[0-9]+){0,1}[\\/]{0,1}   \n\nAlso be carefull about <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>, each <span class=\"highlight\">regex</span> is potentially a open &hellip; I tried your <span class=\"highlight\">regex</span> on :  https://regexr.com/\nIt&#39;s a good tools for testing your <span class=\"highlight\">regex</span> &hellip; ",
            "title": "regex route filters some /string after slug url"
        },
        {
            "tags": [
                "nginx",
                "nginx-location"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 72173828,
            "is_answered": false,
            "question_id": 72056975,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1652107251,
            "creation_date": 1652107251,
            "body": "Nginx takes a  location modifier as an exact match (docs are here). If you want to make a location that will catch every URI containing  substring (obviously including ), you can use a regex one:\n\nThe  modifier makes the location block in @user973254 answer (original answer version, already fixed) a prefix one with the greater priority than any regex locations, so it will overtake only the URIs starting with  (obviously not including  from your example).\nHowever if your web backend requires an additional URI processing (which is a most common case nowadays), you&#39;ll need at least to replicate your main location behavior with this new location. Fortunately, there is a way to avoid such a problems, and can be easily applied to an arbitrary number of sites as you ask for in your original question. You can check required conditions to make a decision for blocking the request or not using the (very powerful)  block feature. And since we want to match address against a list of subnets, we will use a chain of  and  blocks. To use regexes (PRCE/PCRE2 syntax) for a  block match use a  string prefix ( for case-insensitive match), strings containing some special characters (e.g. curly braces) should be single- or double-qouted. Here is a generic example (you&#39;ll need only the first line of the following  block to fulfill your question requirements):\n\nYou can swap the logic to check the URI first (it can be some performance impact since the regex matching will be performed for every request including requests from the non-restricted networks, however if the majority of requests come from public addresses, there will be no significant difference). That way you can have a common non-restricted subnes list and per-site URI lists:\n\nOf course, you are not limited to use 403 return code using this solution (which is the case when you are using / directives). It also has nothing to do with the famous &quot;If is evil&quot; article since this  is used in  context.\n",
            "excerpt": "<span class=\"highlight\">And</span> since we want to match address against a list of subnets, we will use a chain of map <span class=\"highlight\">and</span> geo blocks. &hellip; It also has nothing to do with the famous &quot;If is <span class=\"highlight\">evil</span>&quot; article since this if is used in server context. &hellip; ",
            "title": "Nginx deny if location contains"
        },
        {
            "tags": [
                "redirect",
                "google-cloud-platform",
                "load-balancing"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 70526479,
            "is_answered": false,
            "question_id": 70525042,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1640825992,
            "creation_date": 1640825992,
            "body": "Url maps path matcher does not support conditions or regex.\nAs quoted from the documentation, Path matcher has some constraints:\n\nA path rule can only include a wildcard character (*) after a forward slash character (/). For example, /videos/* and /videos/hd/* are valid for path rules, but /videos* and /videos/hd* are not.\n\n\nPath rules do not use regular expression or substring matching. For example, path rules for either /videos/hd or /videos/hd/* do not apply to a URL with the path /video/hd-abcd. However, a path rule for /video/* does apply to that path.\n\n\nPath matchers (and URL maps in general) do not offer features that function like Apache LocationMatch directives. If you have an application that generates dynamic URL paths that have a common prefix, such as /videos/hd-abcd and /videos/hd-pqrs, and you need to send requests made to those paths to different backend services, you might not be able to do that with a URL map. For simple cases containing only a few possible dynamic URLs, you might be able to create a path matcher with a limited set of path rules. For more complex cases, you need to do path-based regular expression matching on your backends.\n\n\nWhat you are looking for can be achieved by setting up  or  webservers as the only backend for your  and configuring this backend to route requests with conditions and/or regex to your services.\nPS: If is Evil... when used in location context\n",
            "excerpt": "What you are looking for can be achieved by setting up Nginx or Apache webservers as the only backend for your LoadBalancer <span class=\"highlight\">and</span> configuring this backend to route requests with conditions <span class=\"highlight\">and</span>/or <span class=\"highlight\">regex</span> to &hellip; PS: If is <span class=\"highlight\">Evil</span>... when used in location context &hellip; ",
            "title": "Redirect request based on parameter on GCP"
        },
        {
            "tags": [
                "json",
                "bash",
                "large-files",
                "data-extraction"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 70449626,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1640252943,
            "creation_date": 1640178730,
            "body": "I have a fairly large JSON file (~8GB) that has the following format:\n\nI want to extract all the values of the  to a separate file and I want to do it automatically.\nI tried using this  command\n\nbut the process terminated due to large memory usage (it used more than 80% of my ram at some points and the GUI was unresponsive).\nThen I tried to first use the  command to separate the input into 2GB files\n\nand then use the same  command from above, and this time it finished fairly quickly for every chunk, in about 30 seconds.\nThis method where I have to split the input first would be fine for me but the the only problem is automatically checking if the  command splits the file properly, i.e. not in the middle of  key-pair, since that would result in losing some of the important data.\nI&#39;d like to know if there&#39;s a better/more elegant way to do this.\nWhat also interests me is why doesn&#39;t  work on 8GB file but works like a charm on 2GB files. The regex I use for matching doesn&#39;t seem to be evil.\nMy assumption is that it tries to load the whole line first (which uses half of my RAM) and then it uses more memory for it&#39;s internal calculations, which causes the system to start using SWAP memory which in turn causes really slow performance before terminating the program (10+ minutes).\nSome important info specific for this problem:\n\nThe format of objects inside  array will always be the same\nThe input json is minified, it contains no spaces or new lines\nThe input file is static\nI&#39;m obviously interested in extracting all of the important data\n\n",
            "excerpt": "<span class=\"highlight\">and</span> this time it finished fairly quickly for every chunk, in about 30 seconds. &hellip; The <span class=\"highlight\">regex</span> I use for matching doesn&#39;t seem to be <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Automating data extraction from large json file (~8GB)"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 70305380,
            "is_answered": false,
            "question_id": 70304831,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1639155444,
            "creation_date": 1639143518,
            "body": "Using  is very unsafe way to solve this problem:\nWhen is eval evil in php?\nOne solution is using  function and find your desired format with regex and replace it with custom function.\n function perform a regular expression search and replace using a callback.\nhttps://www.php.net/manual/en/function.preg-replace-callback.php\nJust need to replace line  with following line:\n\n",
            "excerpt": "Using eval is very unsafe way to solve this problem:\nWhen is eval <span class=\"highlight\">evil</span> in php? &hellip; One solution is using preg_replace_callback function <span class=\"highlight\">and</span> find your desired format with <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> replace it with custom function.\npreg_replace_callback function perform a regular expression search <span class=\"highlight\">and</span> &hellip; ",
            "title": "How to assign value of json object to variable in form of text values of textarea?"
        },
        {
            "tags": [
                "regex",
                "spring-boot",
                "sonarqube"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 70301405,
            "is_answered": false,
            "question_id": 70300327,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1639123445,
            "creation_date": 1639123445,
            "body": "You can mark it as reviewed and safe to use.\nThe  pattern is equal to .\nFor a regex to be an evil regex, there must be a considerable backtracking possibility that is only possible with , , ,  and  / ? like quantifiers in non-final position inside the pattern.\nYours is an example of a pattern where only the one or two digit pattern can get backtracked into, but there is just two possible ways to match the pattern, which is not problematic and does not present any threat.\n",
            "excerpt": "You can mark it as reviewed <span class=\"highlight\">and</span> safe to use.\nThe Test--[A-Z]{3}_[0-9]{1,2}[MYD]{1} pattern is equal to Test--[A-Z][A-Z][A-Z]_[0-9][0-9]?[MYD]. &hellip; For a <span class=\"highlight\">regex</span> to be an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>, there must be a considerable backtracking possibility that is only possible with *, *?, +, +? <span class=\"highlight\">and</span> {x,} / {x,}? &hellip; ",
            "title": "Regular Expressions are marked as Security Hotspot on SonarQube report"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 200,
            "is_accepted": true,
            "answer_id": 12643073,
            "is_answered": false,
            "question_id": 12643009,
            "item_type": "answer",
            "score": 439,
            "last_activity_date": 1635437431,
            "creation_date": 1348846620,
            "body": "TL;DR\nUse  instead of  and  instead of  to avoid escaping issues in some languages (like Java).\nThanks to the nameless one for originally recognizing this.\n\nOne relatively simple pattern for matching a floating point number in a larger string is:\n\nThis will match:\n\n\n\n\n\nSee a working example\nIf you also want to match  (a period with no decimal part), then you&#39;ll need a slightly longer expression:\n\nSee pkeller&#39;s answer for a fuller explanation of this pattern\nIf you want to include a wider spectrum of numbers, including scientific notation and non-decimal numbers such as hex and octal, see my answer to How do I identify if a string is a number?.\nIf you want to validate that an input is a number (rather than finding a number within the input), then you should surround the pattern with  and , like so:\n\nIrregular Regular Expressions\n&quot;Regular expressions&quot;, as implemented in most modern languages, APIs, frameworks, libraries, etc., are based on a concept developed in formal language theory. However, software engineers have added many extensions that take these implementations far beyond the formal definition. So, while most regular expression engines resemble one another, there is actually no standard. For this reason, a lot depends on what language, API, framework or library you are using.\n(Incidentally, to help reduce confusion, many have taken to using &quot;regex&quot; or &quot;regexp&quot; to describe these enhanced matching languages. See Is a Regex the Same as a Regular Expression? at RexEgg.com for more information.)\nThat said, most regex engines (actually, all of them, as far as I know) would accept . Most likely, there&#39;s an issue with escaping.\nThe Trouble with Escaping\nSome languages have built-in support for regexes, such as JavaScript. For those languages that don&#39;t, escaping can be a problem.\nThis is because you are basically coding in a language within a language. Java, for example, uses  as an escape character within it&#39;s strings, so if you want to place a literal backslash character within a string, you must escape it:\n\nHowever, regexes also use the  character for escaping, so if you want to match a literal  character, you must escape it for the regex engine, and then escape it again for Java:\n\nIn your case, you have probably not escaped the backslash character in the language you are programming in:\n\nAll this escaping can get very confusing. If the language you are working with supports raw strings, then you should use those to cut down on the number of backslashes, but not all languages do (most notably: Java). Fortunately, there&#39;s an alternative that will work some of the time:\n\nFor a regex engine,  and  mean exactly the same thing. Note that this doesn&#39;t work in every case, like newline (), open square bracket () and backslash ( or ).\nA Note about Matching Numbers\n(Hint: It&#39;s harder than you think)\nMatching a number is one of those things you&#39;d think is quite easy with regex, but it&#39;s actually pretty tricky. Let&#39;s take a look at your approach, piece by piece:\n\nMatch an optional  or \n\nMatch 0 or more sequential digits\n\nMatch an optional \n\nMatch 0 or more sequential digits\nFirst, we can clean up this expression a bit by using a character class shorthand for the digits (note that this is also susceptible to the escaping issue mentioned above):\n = \nI&#39;m going to use  below, but keep in mind that it means the same thing as . (Well, actually, in some engines  will match digits from all scripts, so it&#39;ll match more than  will, but that&#39;s probably not significant in your case.)\nNow, if you look at this carefully, you&#39;ll realize that every single part of your pattern is optional. This pattern can match a 0-length string; a string composed only of  or ; or, a string composed only of a . This is probably not what you&#39;ve intended.\nTo fix this, it&#39;s helpful to start by &quot;anchoring&quot; your regex with the bare-minimum required string, probably a single digit:\n\nNow we want to add the decimal part, but it doesn&#39;t go where you think it might:\n\nThis will still match values like . Worse, it&#39;s got a tinge of evil about it. The period is optional, meaning that you&#39;ve got two repeated classes side-by-side ( and ). This can actually be dangerous if used in just the wrong way, opening your system up to DoS attacks.\nTo fix this, rather than treating the period as optional, we need to treat it as required (to separate the repeated character classes) and instead make the entire decimal portion optional:\n\nThis is looking better now. We require a period between the first sequence of digits and the second, but there&#39;s a fatal flaw: we can&#39;t match  because a leading digit is now required.\nThis is actually pretty easy to fix. Instead of making the &quot;decimal&quot; portion of the number optional, we need to look at it as a sequence of characters: 1 or more numbers that may be prefixed by a  that may be prefixed by 0 or more numbers:\n\nNow we just add the sign:\n\nOf course, those slashes are pretty annoying in Java, so we can substitute in our long-form character classes:\n\nMatching versus Validating\nThis has come up in the comments a couple times, so I&#39;m adding an addendum on matching versus validating.\nThe goal of matching is to find some content within the input (the &quot;needle in a haystack&quot;). The goal of validating is to ensure that the input is in an expected format.\nRegexes, by their nature, only match text. Given some input, they will either find some matching text or they will not. However, by &quot;snapping&quot; an expression to the beginning and ending of the input with anchor tags ( and ), we can ensure that no match is found unless the entire input matches the expression, effectively using regexes to validate.\nThe regex described above () will match one or more numbers within a target string. So given the input:\n\nThe regex will match , , ,  and .\nTo validate that a given input is a number and nothing but a number, &quot;snap&quot; the expression to the start and end of the input by wrapping it in anchor tags:\n\nThis will only find a match if the entire input is a floating point number, and will not find a match if the input contains additional characters. So, given the input , a match will be found, but given  no matches will be found.\nNote that some regex engines have a ,  or similar function, which essentially does what I&#39;ve described automatically, returning  if a match is found and  if no match is found. Also keep in mind that some engines allow you to set flags which change the definition of  and , matching the beginning/end of a line rather than the beginning/end of the entire input. This is typically not the default, but be on the lookout for these flags.\n",
            "excerpt": "Worse, it&#39;s got a tinge of <span class=\"highlight\">evil</span> about it. The period is optional, meaning that you&#39;ve got two repeated classes side-by-side (\\d+ <span class=\"highlight\">and</span> \\d*). &hellip; So given the input:\napple 1.34 pear 7.98 version 1.2.3.4\n\nThe <span class=\"highlight\">regex</span> will match 1.34, 7.98, 1.2, .3 <span class=\"highlight\">and</span> .4. &hellip; ",
            "title": "Regular expression for floating point numbers"
        },
        {
            "tags": [
                "php",
                "xml"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 69686634,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1634987324,
            "creation_date": 1634979938,
            "body": "Please help\nI have been finding a code for this but failed\nsource: https://www.singtel.com/etc/singtel/public/tv/epg-parsed-data/23102021.json\nThis is a epg html site\nCould you suggest a way to convert this link contents to XML?\nbtw the link is based on the day\nhttps://www.singtel.com/etc/singtel/public/tv/epg-parsed-data/ddMMyyyy.json\nmaybe this will help\n\r\n\r\n\r\n\r\n\r\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": ",||}\nindex_description.scrub{<span class=\"highlight\">regex</span>||&quot;program&quot;:\\{&quot;description&quot;:&quot;(.*?)&quot; &hellip; Sandman join forces to protect children&#39;s imagination from the <span class=\"highlight\">evil</span> Pitch! &hellip; ",
            "title": "html epg to xml via php"
        },
        {
            "tags": [
                "c#",
                ".net",
                "mailkit"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 60832412,
            "is_answered": false,
            "question_id": 60825872,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1633166022,
            "creation_date": 1585057872,
            "body": "You can read this blog post that explains what most C# MIME parsers get wrong and why MimeKit can handle multiple charset encodings.\nhttps://jeffreystedfast.blogspot.com/2013/09/time-for-rant-on-mime-parsers.html\nhttps://jeffreystedfast.blogspot.com/2013/08/why-decoding-rfc2047-encoded-headers-is.html\nTime for a rant on mime parsers...\nWarning: Viewer discretion is advised.\nWhere should I begin?\nI guess I should start by saying that I am obsessed with MIME and, in particular, MIME parsers. No, really. I am obsessed. Don&#39;t believe me? I&#39;ve written and/or worked on several MIME parsers at this point. It started off in my college days working on Spruce which had a horrendously bad MIME parser, and so as you read farther along in my rant about shitty MIME parsers, keep in mind: I&#39;ve been there, I&#39;ve written a shitty MIME parser.\nAs a handful of people are aware, I&#39;ve recently started implementing a C# MIME parser called MimeKit. As I work on this, I&#39;ve been searching around on GitHub and Google to see what other MIME parsers exist out there to find out what sort of APIs they provide. I thought perhaps I&#39;ll find one that offers a well-designed API that will inspire me. Perhaps, by some miracle, I&#39;d find one that was actually pretty good that I could just contribute to instead of writing my own from scratch (yea, wishful thinking). Instead, all I have found are poorly designed and implemented MIME parsers, many probably belong on the front page of the Daily WTF.\nI guess I&#39;ll start with some softballs.\nFirst, there&#39;s the fact that every single one of them was written as  parsers. Don&#39;t be fooled by the ones claiming to be &quot;stream parsers&quot;, because all any of those did was to slap a  on top of the byte stream and start using . What&#39;s so bad about that, you ask? For those not familiar with MIME, I&#39;d like for you to take a look at the raw email sources in your inboxes particularly if you have correspondence with anyone outside of the US. Hopefully, most of your friends and colleagues are using more-or-less MIME compliant email clients, but I guarantee you&#39;ll find at least a few emails with raw 8bit text.\nNow, if the language they were using was C or C++, they might be able to get away with doing this because they&#39;d technically be operating on byte arrays, but with Java and C#, a &#39;string&#39; is a unicode string. Tell me: how does one get a unicode string from a raw byte array?\nBingo. You need to know the charset before you can convert those bytes into unicode characters.\nTo be fair, there&#39;s really no good way of handling raw 8bit text in message headers, but by using a  approach, you are really limiting the possibilities.\nNext up is the  approach. One of the 2 early parsers in GMime (pan-mime-parser.c back in the version 0.7 days) used a  approach, so I understand the thinking behind this. And really, there&#39;s nothing wrong with this approach as far as correctness goes, it&#39;s more of a &quot;this can never be fast&quot; complaint. Of the two early parsers in GMime, the pan-mime-parser.c backend was horribly slow compared to the in-memory parser. Of course, that&#39;s not very surprising. More surprising to me at the time was that when I wrote GMime&#39;s current generation of the parser (sometime between v0.7 and v1.0), it was just as fast as the in-memory parser ever was and only ever had up to 4k in a read buffer at any given time. My point is, there are far better approaches than  if you want your parser to be reasonably performant... and why wouldn&#39;t you want that? Your users definitely want that.\nOkay, now come the more serious problems that I encountered in nearly all of the mime parser libraries I found.\nI think that every single mime parser I&#39;ve found so far uses the &quot;String.Split()&quot; approach for parsing address headers and/or for parsing parameter lists on headers such as Content-Type and Content-Disposition.\nHere&#39;s an example from one C# MIME parser:\n\nHere&#39;s how this same parser decodes encoded-word tokens:\n\nWhat?! It completely throws away the charset in each of those encoded-word tokens. In the case of quoted-printable tokens, it assumes they are all ASCII (actually, latin1 may work as well?) and in the case of base64 encoded-word tokens, it assumes they are all in UTF-7!?!? Where in the world did he get that idea? I can&#39;t begin to imagine his code working on any base64 encoded-word tokens in the real world. &#129318;‍♂️\nI&#39;d just like to point out that this is what this project&#39;s description states:\nA small, efficient, and working mime parser library written in c#.\n...\nI&#39;ve used several open-source mime parsers before, but they all either\nfail on one kind of encoding or the other, or miss some crucial\ninformation. That&#39;s why I decided to finally have a go at the problem\nmyself.\nI&#39;ll grant you that his MIME parser is small, but I&#39;d have to take issue with the &quot;efficient&quot; and &quot;working&quot; adjectives. With the heavy use of string allocations and regex matching, it could hardly be considered &quot;efficient&quot;. And as the code pointed out above illustrates, &quot;working&quot; is a bit of an overstatement.\nFolks... this is what you get when you opt for a &quot;lightweight&quot; MIME parser because you think that parsers like GMime are &quot;bloated&quot;.\nOn to parser #2... I like to call this the &quot;Humpty Dumpty&quot; approach:\n\nI&#39;ll give this guy some credit, at least he saw that his  approach was flawed and so tried to compensate by piecing Humpty Dumpty back together again. Of course, with his String.Trim()ing, he just won&#39;t be able to put him back together again with any level of certainty. The white space in those quoted tokens may have significant meaning.\nMany of the C# MIME parsers out there like to use Regex all over the place. Here&#39;s a snippet from one parser that is entirely written in Regex (yea, have fun maintaining that...):\n\nLet&#39;s pretend that the regex pattern strings are correct in their definitions (because they are god-awful to read and I can&#39;t be bothered to double-check them), the replacing of &#39;_&#39; with a space is wrong (it should only be done in the &quot;q&quot; case) and the  is just evil. Not to mention that there could be multiple encoded words per field.Body which this code utterly fails to handle.\nGuys. I know you love regular expressions and that they are very very useful, but they are no substitute for writing a real tokenizer. This is especially true if you want to be lenient in what you accept (and in the case of MIME, you really need to be).\n",
            "excerpt": "With the heavy use of string allocations <span class=\"highlight\">and</span> <span class=\"highlight\">regex</span> matching, it could hardly be considered &quot;efficient&quot;. <span class=\"highlight\">And</span> as the code pointed out above illustrates, &quot;working&quot; is a bit of an overstatement. &hellip; the &quot;q&quot; case) <span class=\"highlight\">and</span> the Regex.Replace() is just <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Supporting multiple content encoding in .net Framework 4.6.1 using mailkit"
        },
        {
            "tags": [
                "sql",
                "oracle"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 69351237,
            "is_answered": false,
            "question_id": 69347664,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1632765334,
            "creation_date": 1632765334,
            "body": "If data really is that simple, regular expressions make code rather simple. Way simpler than  option. Why don&#39;t you want to use regex? Because it is evil, or ...?\n\nsample data in lines #1 - 4\n: take the 2nd numeric value from the column\n: take the last numeric value from the column\n\n\n\n\nAs of\n\nWhat is the best way to create a new column to show the version without duplicate the line?\n\nI have no idea what that means. &quot;Without duplicate the line&quot;? Which line? Which duplicate?\n",
            "excerpt": "Why don&#39;t you want to use <span class=\"highlight\">regex</span>? Because it is <span class=\"highlight\">evil</span>, or ...? &hellip; ",
            "title": "Oracle SQL - Reading delimiter"
        },
        {
            "tags": [
                "nginx",
                "configuration",
                "nginx-cache"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 69268906,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1632227338,
            "creation_date": 1632227338,
            "body": "I&#39;m looking to improve nginx caching by removing irrelevant query parameters (that could come from web crawlers or similar) from the request. I have come across an unwieldy solution on the internet:\n\nIt works, but it&#39;s not very concise, takes a lot of steps and from what I learned, if is evil.\nI know there are maps, which can do basic regex things but they don&#39;t work in this scenario (because there can be any number of parameters in any order that I need to remove).\nI also found this substitution module which can do regex replace but it&#39;s only made for specific operations and not for setting a variable.\nSo I have two questions:\n\nDoes anyone know whether there is some tooling to set a variable by doing a regex replace operation?\nIs using if in this case really that bad? It&#39;s not inside a location context and I don&#39;t know whether many consecutive regexes are actually worse than one large regex replace.\n\nI would be very thankful if someone with more nginx know-how could weigh in here and help me out. Thanks :)\n",
            "excerpt": "location / {\n  # set $c_uri as cache_key\n  proxy_cache_key $c_uri;\n  ...\n}\n    \n\nIt works, but it&#39;s not very concise, takes a lot of steps <span class=\"highlight\">and</span> from what I learned, if is <span class=\"highlight\">evil</span>. &hellip; It&#39;s not inside a location context <span class=\"highlight\">and</span> I don&#39;t know whether many consecutive regexes are actually worse than one large <span class=\"highlight\">regex</span> replace. &hellip; ",
            "title": "NGINX - Setting a variable with regex replace"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 116,
            "is_accepted": true,
            "answer_id": 12846121,
            "is_answered": false,
            "question_id": 12841970,
            "item_type": "answer",
            "score": 116,
            "last_activity_date": 1630933909,
            "creation_date": 1349979734,
            "body": "Why Are Evil Regexes A Problem?\nBecause computers do exactly what you tell them to do, even if it&#39;s not what you meant or is totally unreasonable. If you ask a regex engine to prove that, for some given input, there either is or is not a match for a given pattern, then the engine will attempt to do that no matter how many different combinations must be tested.\nHere is a simple pattern inspired by the first example in the OP&#39;s post:\n\nGiven the input:\n\nabababababababababababab\n\nThe regex engine tries something like  and a match is found on the first try.\nBut then we throw the monkey wrench in:\n\nabababababababababababab a\n\nThe engine will first try  but that fails because of that extra . This causes catastrophic backtracking, because our pattern , in a show of good faith, will release one of its captures (it will &quot;backtrack&quot;) and let the outer pattern try again. For our regex engine, that looks something like this:\n\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n\nThe number of possible combinations scales exponentially with the length of the input and, before you know it, the regex engine is eating up all your system resources trying to solve this thing until, having exhausted every possible combination of terms, it finally gives up and reports &quot;There is no match.&quot; Meanwhile your server has turned into a burning pile of molten metal.\nHow to Spot Evil Regexes\nIt&#39;s actually very tricky. Catastrophic backtracking in modern regex engines is similar in nature to the halting problem which Alan Turing proved was impossible to solve. I have written problematic regexes myself, even though I know what they are and generally how to avoid them. Wrapping everything you can in an atomic group can help to prevent the backtracking issue. It basically tells the regex engine not to revisit a given expression - &quot;lock whatever you matched on the first try&quot;. Note, however, that atomic expressions don&#39;t prevent backtracking within the expression, so  is still dangerous, but  is safe (it&#39;ll match  and then refuse to give up any of it&#39;s matched characters, thus preventing catastrophic backtracking).\nUnfortunately, once it&#39;s written, it&#39;s actually very hard to immediately or quickly find a problem regex. In the end, recognizing a bad regex is like recognizing any other bad code - it takes a lot of time and experience and/or a single catastrophic event.\n\nInterestingly, since this answer was first written, a team at the University of Texas at Austin published a paper describing the development of a tool capable of performing static analysis of regular expressions with the express purpose of finding these &quot;evil&quot; patterns. The tool was developed to analyse Java programs, but I suspect that in the coming years we&#39;ll see more tools developed around analysing and detecting problematic patterns in JavaScript and other languages, especially as the rate of ReDoS attacks continues to climb.\n\nStatic Detection of DoS Vulnerabilities in\nPrograms that use Regular Expressions\nValentin W&#252;stholz, Oswaldo Olivo, Marijn J. H. Heule, and Isil Dillig\nThe University of Texas at Austin\n\n",
            "excerpt": "How to Spot <span class=\"highlight\">Evil</span> Regexes\nIt&#39;s actually very tricky. Catastrophic backtracking in modern <span class=\"highlight\">regex</span> engines is similar in nature to the halting problem which Alan Turing proved was impossible to solve. &hellip; In the end, recognizing a bad <span class=\"highlight\">regex</span> is like recognizing any other bad code - it takes a lot of time <span class=\"highlight\">and</span> experience <span class=\"highlight\">and</span>/or a single catastrophic event. &hellip; ",
            "title": "How can I recognize an evil regex?"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 116,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 8,
            "is_answered": true,
            "question_id": 12841970,
            "item_type": "question",
            "score": 116,
            "last_activity_date": 1630933909,
            "creation_date": 1349965833,
            "body": "I recently became aware of Regular expression Denial of Service attacks, and decided to root out so-called &#39;evil&#39; regex patterns wherever I could find them in my codebase - or at least those that are used on user input. The examples given at the OWASP link above and wikipedia are helpful, but they don&#39;t do a great job of explaining the problem in simple terms.\n\nA description of evil regexes, from wikipedia:\n\n\nthe regular expression applies repetition (&quot;+&quot;, &quot;*&quot;) to a complex subexpression;\nfor the repeated subexpression, there exists a match which is also a suffix of another valid match.\n\n\nWith examples, again from wikipedia:\n\n\n\n\n\n\n for x &gt; 10\n\n\nIs this a problem that just doesn&#39;t have a simpler explanation? I&#39;m looking for something that would make it easier to avoid this problem while writing regexes, or to find them within an existing codebase.\n",
            "excerpt": "I recently became aware of Regular expression Denial of Service attacks, <span class=\"highlight\">and</span> decided to root out so-called &#39;<span class=\"highlight\">evil</span>&#39; <span class=\"highlight\">regex</span> patterns wherever I could find them in my codebase - or at least those that are used &hellip; The examples given at the OWASP link above <span class=\"highlight\">and</span> wikipedia are helpful, but they don&#39;t do a great job of explaining the problem in simple terms. &hellip; ",
            "title": "How can I recognize an evil regex?"
        },
        {
            "tags": [
                "regex",
                "emacs",
                "replace"
            ],
            "question_score": 60,
            "is_accepted": false,
            "answer_id": 69066512,
            "is_answered": false,
            "question_id": 677021,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1630869527,
            "creation_date": 1630869527,
            "body": "When using evil, you can simply do \n is responsible for lowercasing all following letters, this should also work for .\nI have not found documentation around Emacs for that, but it seems to match this list: https://www.boost.org/doc/libs/1_44_0/libs/regex/doc/html/boost_regex/format/perl_format.html\n",
            "excerpt": "When using <span class=\"highlight\">evil</span>, you can simply do :%s/&lt;\\([^&gt;]+\\)&gt;/&lt;\\L\\1&gt;\n\\L is responsible for lowercasing all following letters, this should also work for query-replace-regexp. &hellip; I have not found documentation around Emacs for that, but it seems to match this list: https://www.boost.org/doc/libs/1_44_0/libs/<span class=\"highlight\">regex</span>/doc/html/boost_regex/format/perl_format.html &hellip; ",
            "title": "Emacs: regular expression replacing to change case"
        },
        {
            "tags": [
                "javascript",
                "object",
                "properties",
                "evaluation",
                "template-literals"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 68726771,
            "is_answered": false,
            "question_id": 68725756,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1628670602,
            "creation_date": 1628598219,
            "body": "\nI did this. But is it a good approach ?\n\nI can not really tell, but ... Consider this ...\n\r\n\r\n\r\n\r\n\r\n\r\n\nRead on SO about why eval has limited use cases ... why is eval evil\nEdit\nFor a custom template-string evaluation / interpolation I would stick to the syntax of JavaScript Template Literals of cause without enclosing the template string by backticks.\nFor the substitution one needs a regex which targets both the valid substitute template syntax  and a valid object path syntax. Thus variable/property names can start with ,  and upper/lowercase latin letters only, whereas within a variable name the numbers from  to  are allowed. Thus a regex which does capture such a valid object path from a valid template syntax looks like this ...\n\nValue interpolation then is not that complicated anymore. One just does  an object path like  into an array of property names like . The final value can be evaluated via a simple  task which programmatically walks down the property chain of the provided object/type ...\n\r\n\r\n\r\n\r\n\r\n\r\n\nThe above approach based on a less rigid object-path regex like ...  ... then turns into the one beneath ...\n\r\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "important; top: 0; }\r\n\r\n\r\n\nRead on SO about why eval has limited use cases ... why is eval <span class=\"highlight\">evil</span>\nEdit\nFor a custom template-string evaluation / interpolation I would stick to the syntax of JavaScript Template &hellip; For the substitution one needs a <span class=\"highlight\">regex</span> which targets both the valid substitute template syntax ${ foo.bar } <span class=\"highlight\">and</span> a valid object path syntax. &hellip; ",
            "title": "Function to replace a substring with a function value in javascript"
        },
        {
            "tags": [
                "javascript",
                "if-statement",
                "string-length"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 68704897,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1628458234,
            "creation_date": 1628458057,
            "body": "I am trying to make a search like ctrl+f. I have a function that scrolls to the next keyword when you hit enter. I&#39;m trying to make it to reset the count once you went through all the words, but it just gives me an error. For example if I search &quot;Lorem&quot; it will return 13 matches, so after I hit enter for the 13th time it supposed to reset, but it gives me an error instead. I dont get why (count &lt; elements.length) doesnt work. This is the part where I&#39;m stuck:\nP.S. To avoid the confusion, &quot;mark&quot; is a custom element tag that gets wrapped to the words in the text that matches the input and then highlights it.\n\n\r\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": ") {\n    endRegExp = <span class=\"highlight\">regex</span>;\n    return endRegExp;\n  };\n\n  this.setBreakRegExp = function(<span class=\"highlight\">regex</span>) {\n    breakRegExp = <span class=\"highlight\">regex</span>;\n    return breakRegExp;\n  };\n\n  this.setMatchType = function(type)\n  {\n    switch &hellip; Lorem Ipsum comes from sections 1.10.32 <span class=\"highlight\">and</span> 1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>) by Cicero, written in 45 BC. &hellip; ",
            "title": "Javascript (count &lt; elements.length) doesnt work"
        },
        {
            "tags": [
                "javascript",
                "arrays",
                "loops",
                "full-text-search"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 68685495,
            "is_answered": false,
            "question_id": 68685355,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1628271044,
            "creation_date": 1628271044,
            "body": "You can use a variable to store the current index in the search results.\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "Lorem Ipsum comes from sections 1.10.32 <span class=\"highlight\">and</span> 1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>) by Cicero, written in 45 BC. &hellip; ) {\n    endRegExp = <span class=\"highlight\">regex</span>;\n    return endRegExp;\n  };\n\n  this.setBreakRegExp = function(<span class=\"highlight\">regex</span>) {\n    breakRegExp = <span class=\"highlight\">regex</span>;\n    return breakRegExp;\n  };\n\n  this.setMatchType = function(type)\n  {\n    switch &hellip; ",
            "title": "How can I make input matches counter on enter press like ctrl+f?"
        },
        {
            "tags": [
                "python",
                "regex",
                "validation",
                "character",
                "alphabet"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 67939520,
            "is_answered": false,
            "question_id": 48074764,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1623425430,
            "creation_date": 1623424614,
            "body": "if u want a solution that&#39;s not dependent on unicode-compliance of the utility app, for the main block of AC00-D7AF, u can use\n\nthat slab expanded out would be\n\nif u need the extra stuff - jamo, compatability jamo, circled form, parenthesized form, and half width form, append this one to the one above\neither\n\nor\n\nif you only need the modern jamo that makes up the 11,172 syllable collection, then it&#39;s a lot cleaner :\n\nor if u prefer it without superfluous brackets :\n\nps : i only formatted like this here for readability. there aren&#39;t any spaces tabs or new line in between those octal codes. it&#39;s one continuous string.\npersonally i&#39;d much rather work with clean modern era regex myself, but using these octals are an necessary evil for myself to bring mawk1.3.4 and mawk2-beta up to full UTF8 compliancy.\n(at least in terms of lengthC() ordC() substrC() and character-level splitting but at the UC13 code-point level, plus hangul-only NFD-to-NFC.\nbut nothing fancy like grapheme clusters or bi-directional texts)\n",
            "excerpt": "only formatted like this here for readability. there aren&#39;t any spaces tabs or new line in between those octal codes. it&#39;s one continuous string.\npersonally i&#39;d much rather work with clean modern era <span class=\"highlight\">regex</span> &hellip; myself, but using these octals are an necessary <span class=\"highlight\">evil</span> for myself to bring mawk1.3.4 <span class=\"highlight\">and</span> mawk2-beta up to full UTF8 compliancy. &hellip; ",
            "title": "Regex to match all Hangul (Korean) characters and syllable blocks"
        },
        {
            "tags": [
                "javascript",
                "uuid",
                "denial-of-service"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 67608989,
            "is_answered": false,
            "question_id": 67608900,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1621449218,
            "creation_date": 1621449218,
            "body": "The OWASP article you linked has your answer. A pattern is considered &quot;Evil&quot; (vulnerable to a ReDOS attack) if it contains repetition inside a repeated group.\n\nEvil Regexes\nA Regex is called “evil” if it can stuck on crafted input.\nEvil Regex pattern contains:\n\nGrouping with repetition\nInside the repeated group:\n\nRepetition\nAlternation with overlapping\n\n\n\n\n\nYour pattern does not have grouping inside of repetition so it is not vulnerable. That said, if you know you expect a UUID inside the first 36 characters of the string you are searching, there is an efficiency benefit to trimming the string  before you attempt to match. I don&#39;t know if the splice is hard enough to read to warrant the extra time searching your string, you&#39;ll have to judge that for yourself.\n",
            "excerpt": "A pattern is considered &quot;<span class=\"highlight\">Evil</span>&quot; (vulnerable to a ReDOS attack) if it contains repetition inside a repeated group.\n\n<span class=\"highlight\">Evil</span> Regexes\nA <span class=\"highlight\">Regex</span> is called “<span class=\"highlight\">evil</span>” if it can stuck on crafted input. &hellip; <span class=\"highlight\">Evil</span> <span class=\"highlight\">Regex</span> pattern contains:\n\nGrouping with repetition\nInside the repeated group:\n\nRepetition\nAlternation with overlapping\n\n\n\n\n\nYour pattern does not have grouping inside of repetition so it is not vulnerable &hellip; ",
            "title": "Is regex uuid validator is safe for untrusted strings"
        },
        {
            "tags": [
                "python",
                "string"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 66864965,
            "is_answered": false,
            "question_id": 66864721,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1617168090,
            "creation_date": 1617079811,
            "body": "Here&#39;s a regex-based approach to the problem. We form a regex from  by adding  between each letter in the word. Then we attempt to match the regex against . Since  is inherently greedy, you will get the longest possible match inside word. You can then compare the length of the matched string to the length of , and if the matched string is longer, then  is a kangaroo word:\n\nOutput:\n\nAlternatively you can take an iterative approach. There are two conditions that need to be true for the input to be a kangaroo word:\n\nthe letters of the lookup word must be present in the word in order\nthere must be at least one extra letter between the letters of the lookup word\n\nThe first condition can be tested by checking each letter in turn to see that there is an occurrence of it after the previous letter in the word. The last condition can be checked by testing that the first occurrence of the first letter is more than the length of the word away from the last occurrence of the last letter. For example:\n\nThe results are the same as the regex version.\n",
            "excerpt": "(word, lookup_word):\n    <span class=\"highlight\">regex</span> = &#39;.*&#39;.join(lookup_word)\n    match = re.search(<span class=\"highlight\">regex</span>, word)\n    return match is not None <span class=\"highlight\">and</span> len(match.group()) &gt; len(lookup_word)\n\nprint(areAllCharsInWordInOrderFixed(&#39;encourage &hellip; &#39;, &#39;urge&#39;)) # True\nprint(areAllCharsInWordInOrderFixed(&#39;devil&#39;, &#39;<span class=\"highlight\">evil</span>&#39;)) # False\nprint(areAllCharsInWordInOrderFixed(&#39;devilishly&#39;, &#39;<span class=\"highlight\">evil</span>&#39;)) # True\nprint(areAllCharsInWordInOrderFixed(&#39;encourage&#39;, &#39;nrage &hellip; ",
            "title": "Efficiently Detecting Kangaroo Words"
        },
        {
            "tags": [
                "php",
                "nginx",
                "mod-rewrite",
                "url-rewriting"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 66232867,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1613601055,
            "creation_date": 1613513189,
            "body": "From an old project, I got this .htaccess file, which currently handle the apache rewrite rules:\n\nWhat the above snippet basically does, is that it rewrites all requests to index.php by keeping the query part string intact and stop after the first match, unless the file or folder exists.\nSo, in conclusion, by consulting the Nginx docs and by adding some additional security (permit access to sensible folders and files) and performance-related stuff (enable gzip or brotli output compression where it&#39;s possible [depending on the client, which one it is able to process]), I got this:\n\nThe new Nginx configuration above downloads the PHP file instead of bypassing it to the FPM handler. I have found this and this SO questions, but it doesn&#39;t seem to do the trick for me. Also, as mentioned in Nginx documentation,  is evil and we should avoid using it unless we are 100 percent sure what&#39;s going on. So, for my configuration, I avoided using it. Mainly because regex syntax also works with  and is way more securer in that context than . I mean, as far as I know. Please correct me, if I&#39;m wrong.\nThe main  file is dead simple right now:\n\nThe file above is mainly the openSUSE distributor shipped file, with a few changes.\nAnd this is my  file, which defines the FPM proxy handler for nginx (in order to don&#39;t repeat yourself; it&#39;s neccessarily needed anyways):\n\nI&#39;d appreciate any help with that issue.\n",
            "excerpt": "Also, as mentioned in Nginx documentation, if is <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> we should avoid using it unless we are 100 percent sure what&#39;s going on. So, for my configuration, I avoided using it. &hellip; Mainly because <span class=\"highlight\">regex</span> syntax also works with location <span class=\"highlight\">and</span> is way more securer in that context than if. I mean, as far as I know. Please correct me, if I&#39;m wrong. &hellip; ",
            "title": "How to convert a simple index.php redirection from apache to nginx format?"
        },
        {
            "tags": [
                "javascript",
                "google-apps-script",
                "base64",
                "ascii85",
                "base91"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 66096684,
            "is_answered": false,
            "question_id": 66026729,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1612765309,
            "creation_date": 1612764843,
            "body": "This solution works for me. The whole 3Byte is been encoded into 4 characters. I adapted the alphabet for replacing some missleading characters (0,O,i,l,1 etc.).\nThe base64 padding (&#39;=&#39;) is been removed after encoding and will be added before decoding inside the functions. CRC4 is not perfect - better than no CRC :)\nI am happy for any feedback, suggestions further optimisations. Thanks.\nGoogle Sheet frontend:\n\nAnother tab in this documents where you can define the variations/families/recipes:\n\nHere comes the code for the app script (special credits to @Kamil Kiełczewski for his base64 snippert):\n\nThe result can be tried/decoded with following HTML/JS snippet. Its quick and dirty.\nJust enter for example:\n\nPneumatic Connector  #Xs2a\nCamera #!$cg\nPower Supply 24V #p%qz\n\nYou can try to change manually the base64 code - for testing if the CRC4 works.\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "Techsppoks&quot;,&quot;Mashable&quot;]]},14:{family:[&quot;PC Brands&quot;],types:[[&quot;Asus&quot;,&quot;Intel&quot;,&quot;Dell&quot;,&quot;HP&quot;,&quot;Alienware&quot;,&quot;Microsoft&quot;,&quot;Apple&quot;,&quot;ACer&quot;,&quot;Sony&quot;,&quot;MSI&quot;,&quot;Razer&quot;,&quot;Toshiba&quot;,&quot;Gateway&quot;,&quot;LG&quot;,&quot;Compaq&quot;,&quot;Panasonic&quot;]]},15:{family:[&quot;<span class=\"highlight\">Evil</span> &hellip; Techsppoks&quot;,&quot;Mashable&quot;]]},14:{family:[&quot;PC Brands&quot;],types:[[&quot;Asus&quot;,&quot;Intel&quot;,&quot;Dell&quot;,&quot;HP&quot;,&quot;Alienware&quot;,&quot;Microsoft&quot;,&quot;Apple&quot;,&quot;ACer&quot;,&quot;Sony&quot;,&quot;MSI&quot;,&quot;Razer&quot;,&quot;Toshiba&quot;,&quot;Gateway&quot;,&quot;LG&quot;,&quot;Compaq&quot;,&quot;Panasonic&quot;]]},15:{family:[&quot;<span class=\"highlight\">Evil</span> &hellip; ",
            "title": "Convert Binary/Hex to Base91 / Ascii85 / Base64"
        },
        {
            "tags": [
                "nginx",
                "redirect"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 66016226,
            "is_answered": false,
            "question_id": 66016014,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1612296521,
            "creation_date": 1612293486,
            "body": "\nand\n\n at end of regex will you give trailing &quot;uri path&quot; (after  and before questionmark ) in your capture group .\nUntested.\n\nOK, now I understand your question. LOL. Gimmi a sec.\n\nI know  is evil. But I think I need it.\n\nCheck with  and look for  and .\nUntested.\n\nAnother method comes to mind.\n\nUse only when order of parameters is fixed.\nUntested.\n\nIn general regarding Nginx and Regex:\n\nI like named variables (see ). So no mixup with  in different scopes (http, server, location, deeper location, if, ...).\n will match all characters except of .\nSo  will make sure that you get the whole argument but not more.\n\n",
            "excerpt": "I know if is <span class=\"highlight\">evil</span>. But I think I need it.\nlocation ~ ^/a(/.*$|$)\n{\n    set $target_uri &#39;/b/c&#39;;\n    set $change_target_uri &#39;&#39;;\n    if ($arg_x)  # you can&#39;t have `<span class=\"highlight\">and</span>` in Nginx `if` condition! &hellip; In general regarding Nginx <span class=\"highlight\">and</span> <span class=\"highlight\">Regex</span>:\n\nI like named variables (see blubbi). So no mixup with $1 in different scopes (http, server, location, deeper location, if, ...). &hellip; ",
            "title": "How to redirect URLs with changing a path, but maintaining a parameter on Nginx?"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "cross-domain",
                "browser-plugin",
                "firefox-addon-webextensions"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 65368730,
            "is_answered": false,
            "question_id": 40572065,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1608373093,
            "creation_date": 1608373093,
            "body": "I had a similar issue today where my webextension had to call a javascript function that can only be accessed from the context of a specific web page and I was kinda annoyed that I was supposed to do all the script injection and json serialization and whatnot. But there&#39;s actually a pretty simple solution:\n\n will execute whatever code you pass to it in the context of the page instead of your content script.\nyeah, I know eval is evil, but in this context it really makes sense, because what I want to do (execute arbitrary code in the context of a web page) is evil by definition. It&#39;s like parsing HTML with regex; once you&#39;re at that point, you&#39;re tainted. Also, you&#39;re finally free from the burdens of writing code that is considered lawful good. So let&#39;s embrace the eval, just this one time ;)\n",
            "excerpt": "the script injection <span class=\"highlight\">and</span> json serialization <span class=\"highlight\">and</span> whatnot. &hellip; It&#39;s like parsing HTML with <span class=\"highlight\">regex</span>; once you&#39;re at that point, you&#39;re tainted. Also, you&#39;re finally free from the burdens of writing code that is considered lawful good. &hellip; ",
            "title": "Calling webpage JavaScript methods from browser extension"
        },
        {
            "tags": [
                "php",
                "preg-match",
                "extract",
                "alphanumeric"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 65283534,
            "is_answered": false,
            "question_id": 63154404,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1607919468,
            "creation_date": 1607919468,
            "body": "Unless you are doing hundreds of thousands of iterations of this technique, I don&#39;t think &quot;speed&quot; should factor into as a decision making criteria.\nFor me, I place a high importance on directness then readability.  For this reason, I probably wouldn&#39;t entertain a technique that generated arrays, incorporated a loop, or frankly, made more than one function call.  Regex isn&#39;t evil (I, for one, love it), so unless there is another single-function technique, I opt for regex every time.\nThat said, the only non-regex way (that isn&#39;t terribly convoluted) that I found is as @rid commented with .\n\n has the benefit of being more concise, arguably easier to read, and will not cause headaches if  your project needs to honor multi-byte characters in the future.\n does not generate a temporary array/variable from which the correct value must be extracted, and is very likely to outperform any  call but not to a noticeable/valuable degree.\n\nNotice that in my demo, the &quot;character mask&quot; seems to accept not more than one range of characters.  It would be handy if I could specify , but I was unable to get that to work.\nCode: (Demo)\n\nOutput:\n\nUltimately, I&#39;d go for  because I have used it thousands of times in my career as a php dev.  Conversely, I&#39;ve probably used  a maximum of 1 time in my career (outside of playing around on Stack Overflow) -- so there is a lack of familiarity / intuitive-ness.\n",
            "excerpt": "<span class=\"highlight\">Regex</span> isn&#39;t <span class=\"highlight\">evil</span> (I, for one, love it), so unless there is another single-function technique, I opt for <span class=\"highlight\">regex</span> every time. &hellip; That said, the only non-<span class=\"highlight\">regex</span> way (that isn&#39;t terribly convoluted) that I found is as @rid commented with strcspn(). &hellip; ",
            "title": "Get the first letter/number of string that is not a special character"
        },
        {
            "tags": [
                "java",
                "date",
                "dateformatter"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 65018928,
            "is_answered": false,
            "question_id": 65017630,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1606381554,
            "creation_date": 1606381554,
            "body": "After looking at the documentation, there seems to be no way to see which of the optional formats succeeded. So the easy way out is to build a collection of formatters to try, and to use them in order until one succeeds. However, this is ugly: you are using exceptions for flow-control\n\nAn existing question on SO deals with this problem. My suggested answer goes along the lines of one of its answers.\nA cleaner option may be to use your formats both as regular expressions (to only examine likely candidates) and as actual date formats (to parse only the good candidates). This comes at a cost in readability, and will still throw exceptions when parsing ambiguous formats, because the format-to-regex code is very simplistic:\n\nThe initial code could now be written as:\n\nBefore complicating this further, I would probably just go with ugly exceptions-as-control-flow (1st code snippet) as a lesser evil to re-implementing a time-parsing library.\ndisclaimer: above code is un-tested and may not compile and/or perform as expected\n",
            "excerpt": "This comes at a cost in readability, <span class=\"highlight\">and</span> will still throw exceptions when parsing ambiguous formats, because the format-to-<span class=\"highlight\">regex</span> code is very simplistic:\nenum FormatCandidate {\n    YMD(&quot;yyyyMMdd&quot;), &hellip; to re-implementing a time-parsing library.\ndisclaimer: above code is un-tested <span class=\"highlight\">and</span> may not compile <span class=\"highlight\">and</span>/or perform as expected &hellip; ",
            "title": "How to get date pattern for a date in Java"
        },
        {
            "tags": [
                "ruby",
                "string",
                "methods",
                "startswith"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 64953628,
            "is_answered": false,
            "question_id": 64951639,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1606044583,
            "creation_date": 1606044583,
            "body": "As a general rule, you should never ever blindly execute inputs from untrusted sources.\nInterpolating untrusted input into a  is not quite as bad as interpolating it into, say, , because the worst thing an attacker can do with a  is to construct an Evil Regex to conduct a Regular expression Denial of Service (ReDoS) attack (see also the section on Performance in the  documentation), whereas with , they could execute arbitrary code, including but not limited to, deleting the entire file system, scanning memory for unencrypted passwords / credit card information / PII and exfiltrate that via the network, etc.\nHowever, it is still a bad idea. For example, when I say &quot;the worst thing that happen is a ReDoS&quot;, that assumes that there are no bugs in the  implementation (Onigmo in the case of YARV, Joni in the case of JRuby and TruffleRuby, etc.) Ruby&#39;s s are quite powerful and thus Onigmo, Joni and co. are large and complex pieces of code, and may very well have their own security holes that could be used by a specially crafted .\nYou should properly sanitize and escape the user input before constructing the . Thankfully, the Ruby core library already contains a method which does exactly that: . So, you could do something like this:\n\nThe reason why your attempt at using  didn&#39;t work, is that  is for representing a  the same way you would have to write it as a  literal, i.e. it is escaping  metacharacters, not  metacharacters and it is including the quote characters around the  that you need to have it recognized as a  literal. You can easily see that when you simply try it out:\n\nSo, that means that \n\nincludes the quotes (which you don&#39;t want),\nescapes characters that don&#39;t need escaping in  just because they need escaping in s (e.g.  or ), and\ndoesn&#39;t escape characters that don&#39;t need escaping in s (e.g. , , , , , , ).\n\n",
            "excerpt": "Interpolating untrusted input into a Regexp is not quite as bad as interpolating it into, say, Kernel#eval, because the worst thing an attacker can do with a Regexp is to construct an <span class=\"highlight\">Evil</span> <span class=\"highlight\">Regex</span> to conduct &hellip; Ruby&#39;s Regexps are quite powerful <span class=\"highlight\">and</span> thus Onigmo, Joni <span class=\"highlight\">and</span> co. are large <span class=\"highlight\">and</span> complex pieces of code, <span class=\"highlight\">and</span> may very well have their own security holes that could be used by a specially crafted Regexp. &hellip; ",
            "title": "Get the same results from string.start_with? and string[ ]"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 64651494,
            "is_answered": false,
            "question_id": 64650569,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1604345077,
            "creation_date": 1604342766,
            "body": "Are you sure you have to do that? If you have only a limited number of possible functions, the safest thing to do is to simply map them, and then separate the wanted function and the arguments in the variable, using an array instead. More on that later.\nIf you wanted to provide a generic means for calling functions, you could for example:\n\nI&#39;m using  here, since  is a language statement and not a function, and therefore wouldn&#39;t work like this. If you had to echo here, you&#39;d have to make your own echo wrapper function, like , and call that instead.\nOr, for more readable code, you could list the array as:\n\nIf you needed multiple arguments, you could use this structure:\n\nWhere the arguments listed in the arguments array, unpacked with the splat operator, are in the same order as the target function&#39;s arguments.\nThere are of course only a limited number of useful functions that will directly output anything. Therefore, in the above example we capture the result from  instead and then echo; this simply to illustrate the basic use of variable functions and arguments.\nThis approach will however provide unhinged access to any function in your system, and as such shouldn&#39;t be used on anything but data/calls from trusted sources (you). Allowing users to provide any commands will open up your system to a world of mischief and misery.\nTherefore, my initial recommendation of providing a map of functions. You could:\n\nHave an array with a list of allowed core functions,\nHave an array with a list of your custom wrapper functions, or\nCheck for valid wrapper functions named with a prefix\n\nYou could for example implement wrappers as follows:\n\nThis would give you control over what&#39;s executed, and also whether values are returned or output, etc. pre/post-process. And then iterate your variable commands as follows:\n\nFor an additional layer of insulation, create a class with your custom calls as its methods, instead of polluting the global space with more functions. Ciykd use a public router method that handles no-match cases; calling e.g. , where  returns the  methods.\nI often do something like this when I need to map user requests to class public methods that return output; named e.g. ,  etc. and  for a fallback for unmatched requests. Handy for quick prototyping, where  =&gt; .\nIf you&#39;re stuck with receiving a string command (why?), you can use regex to parse it into something you can pass to functions. Or, if you absolutely trust the data,  isn&#39;t inherently and categorically evil, especially where a work-around would make for a more complex but equally wide back-door to your system. It&#39;s just not very elegant and smells of sloppy design.\n",
            "excerpt": ", you can use <span class=\"highlight\">regex</span> to parse it into something you can pass to functions. &hellip; Or, if you absolutely trust the data, eval isn&#39;t inherently <span class=\"highlight\">and</span> categorically <span class=\"highlight\">evil</span>, especially where a work-around would make for a more complex but equally wide back-door to your system. &hellip; ",
            "title": "Eval alternative to run script from string"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "security",
                "denial-of-service",
                "automaton"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 34042556,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1597852429,
            "creation_date": 1449058629,
            "body": "Is there an algorithm to determine whether a given JavaScript regex is vulnerable to ReDoS? The algorithm doesn&#39;t have to be perfect - some false positives and false negatives are acceptable. (I&#39;m specifically interested in ECMA-262 regexes.)\n",
            "excerpt": "Is there an algorithm to determine whether a given JavaScript <span class=\"highlight\">regex</span> is vulnerable to ReDoS? The algorithm doesn&#39;t have to be perfect - some false positives <span class=\"highlight\">and</span> false negatives are acceptable. &hellip; ",
            "title": "How can I programmatically identify evil regexes?"
        },
        {
            "tags": [
                "java",
                "regex",
                "multithreading"
            ],
            "question_score": 22,
            "is_accepted": false,
            "answer_id": 63458755,
            "is_answered": false,
            "question_id": 910740,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1597698915,
            "creation_date": 1597698915,
            "body": "What about checking the user-submitted regex for &quot;evil&quot; patterns prior to execution using one or more regex patterns (this could be in to form of a method called prior to conditional execution of the regex):\nThis regex:\n\nWill match:\n\nThis Regex:\n\nWill match:\n\nThis Regex:\n\nWill match:\n\nI may be a bit naive wrt Regex and Regex DoS, but I can&#39;t help but think that a little pre-screening for known &quot;evil&quot; patterns would go a long way toward preventing issues at execution time, especially if the regex in question is an input provided by an end user.  The patterns above are likely not refined enough, since I am far from an expert on regex.  It is just food for thought, since everything else I have found out there seems to indicate it can&#39;t be done, and focuses on either putting a time-out on the regex engine, or limiting the number of iterations it is allowed to execute.\n",
            "excerpt": "What about checking the user-submitted <span class=\"highlight\">regex</span> for &quot;<span class=\"highlight\">evil</span>&quot; patterns prior to execution using one or more <span class=\"highlight\">regex</span> patterns (this could be in to form of a method called prior to conditional execution of the <span class=\"highlight\">regex</span> &hellip; *a){x} for x \\&gt; 10\n\nI may be a bit naive wrt <span class=\"highlight\">Regex</span> <span class=\"highlight\">and</span> <span class=\"highlight\">Regex</span> DoS, but I can&#39;t help but think that a little pre-screening for known &quot;<span class=\"highlight\">evil</span>&quot; patterns would go a long way toward preventing issues at execution &hellip; ",
            "title": "Cancelling a long running regex match?"
        },
        {
            "tags": [
                "python",
                "python-3.x",
                "python-typing",
                "pep585"
            ],
            "question_score": 18,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 62871524,
            "item_type": "question",
            "score": 18,
            "last_activity_date": 1594748703,
            "creation_date": 1594627137,
            "body": "PEP 585 -- Type Hinting Generics In Standard Collections claims usability under both Python 3.7 and 3.8 with a standard  preamble. Notably:\n\nFor use cases restricted to type annotations, Python files with the  future-import (available since Python 3.7) can parameterize standard collections, including builtins.\n\n\nStarting with Python 3.7, when  is used, function and variable annotations can parameterize standard collections directly. Example:\n\n\nWhile the above toy example does technically parse, that&#39;s about all it does. Attempting to actually use a parametrized builtin collection at runtime under either Python 3.7 or 3.8 invariably raises the dreaded  exception:\n\nNote the  statement is the standard idiom for resolving PEP 563-style postponed annotations at runtime. Don&#39;t even get me started on PEP 563.\nwho you gonna believe: me or your lying PEP?\nThis discourages the devout Pythonista in me. PEP 585 repeatedly claims that it preserves runtime usability:\n\nPreserving the generic type at runtime enables introspection of the type which can be used for API generation or runtime type checking. Such usage is already present in the wild.\n\n\nJust like with the  module today, the parameterized generic types listed in the previous section all preserve their type parameters at runtime:\n\n\nOf course, none of the above works under Python 3.7 or 3.8 – regardless of whether  is enabled or not:\n\nSo PEP 585 blatantly breaks the wild and all existing attempts to introspect generic types at runtime – especially from runtime type checkers. The entire &quot;Parameters to generics are available at runtime&quot; section is a charade.\nAm I missing something painfully obvious or are parametrized builtin collections the poison pill they superficially appear to be? Since evaluating these collections at runtime under Python 3.7 and 3.8 unconditionally raises exceptions, they&#39;re unusable at runtime – rendering them not simply useless but directly harmful for the widespread use case of type introspection and especially runtime type checking.\nbetween a rock and a hard PEP\nAny codebase type-hinting with parametrized builtin collections will be fundamentally incompatible with runtime type checkers under Python 3.7 and 3.8. Codebases preferring runtime to static type checking while preserving backward compatibility with Python &lt; 3.9 (which has yet to even be officially released as of this writing) thus have no choice but to avoid parametrized builtin collections entirely.\nExcept that too is infeasible. Why? Because PEP 585 deprecates the entire hierarchy of  pseudo-containers:\n\nImporting those [e.g., , , ] from  is deprecated. Due to PEP 563 and the intention to minimize the runtime impact of , this deprecation will not generate . Instead, type checkers may warn about such deprecated usage when the target version of the checked program is signalled to be Python 3.9 or newer. It&#39;s recommended to allow for those warnings to be silenced on a project-wide basis.\n\n\nThe deprecated functionality will be removed from the  module in the first Python version released 5 years after the release of Python 3.9.0.\n\nConsider , for example. By 2025 (or shortly thereafter),  and thus  goes away. But  isn&#39;t safely parametrizable under Python 3.7 and 3.8, because doing so renders your project incompatible with anything that introspects types. So  isn&#39;t a viable option, either.\nSo there are no forward- and backward-compatible options. Instead, either:\n\nProhibit type introspection (and thus runtime type checking) entirely by just preferring builtin containers (e.g., ) to  pseudo-containers (e.g., ) or...\nSupport type introspection (and thus runtime type checking) by either:\n\nPreferring  pseudo-containers to builtin containers until 2025. At that time, both the project in question and all downstream projects of that project will need to be refactored as follows:\n\nDrop Python 3.7 and 3.8 support.\nReplace all  pseudo-containers with builtin containers.\n\n\nImmediately dropping Python 3.7 and 3.8 support by preferring builtin containers to  pseudo-containers. This has the distasteful disadvantage of requiring a currently unstable Python interpreter, but... that&#39;s technically an option. Somehow.\n\n\n\nIn 2020, there are no good options – only a spectrum of increasingly horrifying lessers of several malignant evils. One would hope that PEP authors would actually test their implementations at runtime. Yet, here we are, adrift without a paddle in a steaming cesspit of theorycrafted anti-APIs. Welcome to Python.\nbut that&#39;s not all\nThere is technically a third way. It&#39;s even more distasteful – but it should technically work. One awful theorycrafting deserves another, I always say!\nSince PEP 563-driven postponed annotations are merely strings, type introspection could cleverly run a regex-based replacement on each type being introspected. For each type that is a postponed annotation, globally replace each substring referencing a parametrized builtin container (e.g., ) in that annotation string with the corresponding substring referencing a parametrized  pseudo-container (e.g., ).\nThe result? A Python 3.7- and 3.8-compatible postponed annotation string safely evaluatable until 2025, at which point that internal replacement (and Python 3.7 and 3.8 support) could just be quietly dropped.\nThat&#39;s a totally cray-cray ludicrous speed kludge for the stars, but... that would probably work. The core issue, of course, is that one shouldn&#39;t need insane hackery just to comply with core official PEPs. But there&#39;s an even deeper underlying cultural issue underneath that technical issue. No one – neither the author of PEP 585 nor any of the commentators reviewing PEP 585 – actually tested their new hypothetical proposed functionality before deprecating the existing well-tested functionality that actually worked.\nCore official PEPs should just work out of the box. Increasingly, they don&#39;t. And that should concern everyone.\n",
            "excerpt": "Since PEP 563-driven postponed annotations are merely strings, type introspection could cleverly run a <span class=\"highlight\">regex</span>-based replacement on each type being introspected. &hellip; <span class=\"highlight\">And</span> that should concern everyone. &hellip; ",
            "title": "Is PEP 585 unusable at runtime under Python 3.7 and 3.8?"
        },
        {
            "tags": [
                "java",
                "double"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 62242174,
            "is_answered": false,
            "question_id": 62240868,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1591515619,
            "creation_date": 1591514948,
            "body": "I assume that &quot;overflow&quot; is talking about a number that is too large to represent.\n\nIf you call  on a &quot;really large number&quot;, you will actually get an INF value ... not an exception1.  So the simple solution2 to numbers that overflow is to use  to test the result of calling .  \n\nIt will be more efficient AND less code to do the conversion and test the result that to (try to) check before doing the test.\n\n\n\n1 - I checked the Java 11 source code.  Look at the code for .  The comments are kind of amusing.\n\n2 - If you are a graduate of the &quot;exceptions are evil&quot; school of thinking, you could use a regex to check the syntax of the string before calling .  My opinion is that it is unnecessary.  Just handle the exception.\n",
            "excerpt": "It will be more efficient <span class=\"highlight\">AND</span> less code to do the conversion <span class=\"highlight\">and</span> test the result that to (try to) check before doing the test.\n\n\n\n1 - I checked the Java 11 source code. &hellip; The comments are kind of amusing.\n\n2 - If you are a graduate of the &quot;exceptions are <span class=\"highlight\">evil</span>&quot; school of thinking, you could use a <span class=\"highlight\">regex</span> to check the syntax of the string before calling parseDouble. &hellip; ",
            "title": "Java Parse String to Double Overflow Check"
        },
        {
            "tags": [
                "regex",
                "apache",
                "nginx",
                "nginx-reverse-proxy"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 62199241,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1591305525,
            "creation_date": 1591286915,
            "body": "guys,\n\nI&#39;m in the process of migrating an application using a front Apache reverse-proxy to a NGinx reverse proxy.\n\nI&#39;m trying to find the right way to convert this rule :\n\n\n\nFrom my understanding, it means &quot;If the requested file name starts with /web, but doesn&#39;t contain the string &#39;-staging/&#39;, then redirect to the same URI without the /web, using a 307 HTTP redirection.\n\nI&#39;ve been trying using locations to get this, then regex, (trying to prevent using evil &quot;if&quot;), but no way, it&#39;s beyond my knowledge.\n\nCould someone help me to figure how to get this properly (the website will have heavy traffic, so, looking for something optimized), please ? Thank you in advance.\n",
            "excerpt": "I&#39;ve been trying using locations to get this, then <span class=\"highlight\">regex</span>, (trying to prevent using <span class=\"highlight\">evil</span> &quot;if&quot;), but no way, it&#39;s beyond my knowledge. &hellip; ",
            "title": "NGinx - Right way to rewrite URI matching a string and not the second"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 6,
            "is_accepted": true,
            "answer_id": 37734685,
            "is_answered": false,
            "question_id": 37734164,
            "item_type": "answer",
            "score": 10,
            "last_activity_date": 1589814973,
            "creation_date": 1465500654,
            "body": " is not a back reference in Java&#39;s regexes, nor in any other flavor I can think of. You only use  when you are replacing something:\n\n\n\nThere is some misinformation about what a back reference is, including the very place I got that snippet from: simple java regex with backreference does not work.\n\n\n\nJava modeled its regex syntax after other existing flavors where the  was already a meta character. It anchors to the end of the string (or line in multi-line mode).\n\nSimilarly, Java uses  for back references. Because regexes are strings, it must be escaped: .\n\nFrom a lexical/syntactic standpoint it is true that  could be used unambiguously (as a bonus it would prevent the need for the &quot;evil escaped escape&quot; when using back references). \n\nTo match a  that comes after the end of a line the regex would need to be :\n\n\n\nIt just makes more sense to use a familiar syntax instead of changing the rules, most of which came from Perl.\n\nThe first version of Perl came out in 1987, which is much earlier than Java, which was released in beta in 1995. \n\nI dug up the man pages for Perl 1, which say:\n\n\n  The bracketing construct  may also be used, in which case  matches the &#39;th substring. (Outside of the pattern, always use  instead of  in front of the digit. The scope of  (and ,  and ) extends to the end of the enclosing BLOCK or eval string, or to the next pattern match with subexpressions. The  notation sometimes works outside the current pattern, but should not be relied upon.) You may have as many parentheses as you wish. If you have more than 9 substrings, the variables , , ... refer to the corresponding substring. Within the pattern, , , etc. refer back to substrings if there have been at least that many left parens before the backreference. Otherwise (for backward compatibilty)  is the same as , a backspace, and  the same as , a tab. And so on. ( through  are always backreferences.)\n\n",
            "excerpt": "The scope of $&lt;digit&gt; (<span class=\"highlight\">and</span> $\\`, $&amp; <span class=\"highlight\">and</span> $&#39;) extends to the end of the enclosing BLOCK or eval string, or to the next pattern match with subexpressions. &hellip; Otherwise (for backward compatibilty) \\10 is the same as \\010, a backspace, <span class=\"highlight\">and</span> \\11 the same as \\011, a tab. <span class=\"highlight\">And</span> so on. (\\1 through \\9 are always backreferences.) &hellip; ",
            "title": "Regex backreferences in Java"
        },
        {
            "tags": [
                "php",
                "string",
                "matching"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 61282294,
            "is_answered": false,
            "question_id": 61282060,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1587165991,
            "creation_date": 1587165991,
            "body": "This sounds more like an algorithms question than a PHP question specifically.  Take a look at What is the fastest substring search algorithm?\n\nWell you can transform this into something like an O(n log n) algorithm, but it depends on the implementation specifics of :\n    \n\n\n\nHere each substring is examined by  exactly once.  Probably a better solution is to compose these strings into a series of regexes.  Internally, the regex engine is able to scan text very efficiently, typically scanning each character only one time:\n\nex.:\n\n\n\nFor your purposes the practical solution is very much dependent upon how many rigs you&#39;ve got an how many substrings per rig.  I suspect that unless you&#39;re dealing with tens of thousands of rigs or unless performance is a critical aspect of this application, a naive O(n^2) solution would probably suffice.  (Remember that premature optimization is the root of all evil!)  A simple benchmark would bear this out.\n\nAn even-better solution -- and potentially faster -- would be to set up an elasticsearch instance, but once again that may be too much effort to go to when a naive approach would suffice in a fraction of the implementation time.\n",
            "excerpt": "Internally, the <span class=\"highlight\">regex</span> engine is able to scan text very efficiently, typically scanning each character only one time:\n\nex.:\n\n&lt;? &hellip; (Remember that premature optimization is the root of all <span class=\"highlight\">evil</span>!)  A simple benchmark would bear this out. &hellip; ",
            "title": "Does a string contain any of a list of substrings in PHP?"
        },
        {
            "tags": [
                "php",
                "regex",
                "bash",
                "awk",
                "sed"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 60476607,
            "is_answered": false,
            "question_id": 23706113,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1583116553,
            "creation_date": 1583076051,
            "body": "Goal:\n\nRemove  from the beginning of every PHP file&#39;s first line using the stream editor, sed.\n\nDiscussion:\n\nThe stream editor has implicit and explicit line addressing. If you omit line addresses (numeric, regular expressions, or a combination of both), then the entire file is processed.\n\nPoint 1:\n\nIf you only want to target the first line, then you should specify it explicitly.\n\n\n\nHowever, since you are trying to rid your files of &quot;evil&quot;, you probably want to remove &quot;evil&quot; anywhere (globally) it is found on the first line.\n\n\n\nPoint 2:\n\nThe &quot;evil&quot; you are dealing with uses non-alpha numeric characters, so you must be wary of using it as input in various contexts. In order to use a regular expression to search for regular expression meta-characters (?, +, *, [, ], ., et al), you must either:\n\n\nEscape the meta-characters with backslashes to avoid pattern\ncollisions (Example: ), or\nChange the regular expression pattern delimiter to avoid a pattern collision, or\nBoth (This is what you should do in this case).\n\n\nIn sed, you can change the regex pattern delimiter by escaping a character before your pattern begins.\n\nExample:\n\n\n\nPoint 3:\n\nYou can search for strings as a  with regular expressions in sed! By definition, the most basic pattern is a sequence of characters. However, you must adhere to point number two above and escape any regex meta-characters, or the default pattern delimiter, /, if necessary.\n\nSolution 1:\n\nYour evil, I mean regex pattern, has regex meta-characters and the default pattern delimiter embedded in it!\n\n\n\nI would prescribe the following. Notice that I am now using double quotes because I want the shell to do variable interpolation before executing . Also, because I changed the regex pattern delimiter to , I did not need to escape the two forward slashes associated with that micro block quote. :-)\n\n\n\nNote: I will go out on a limb and say that anyone that puts white spaces in their file names should consider using the underscore, , instead.\n\nMr. @Ed Morton above is trying to warn against the possibility of word splitting, but  should prevent it if you pass your list into a function like above.\n\nHidden, non-printing characters in file names can be hard to deal with, but this specific solution should work for your problem to a high degree of certainty (99.9999%).\n\nSolution 2:\n\nMore generically:\n\n\n\nSolution 3:\n\nIn the event that it would be better to delete the first line of all the files ...\n\n\n\nFinal Note:\n\nBe sure to execute this solution with enough permissions, or else the  command will return messages to  in the following format.\n\n\n",
            "excerpt": "However, you must adhere to point number two above <span class=\"highlight\">and</span> escape any <span class=\"highlight\">regex</span> meta-characters, or the default pattern delimiter, /, if necessary. &hellip; Solution 1:\n\nYour <span class=\"highlight\">evil</span>, I mean <span class=\"highlight\">regex</span> pattern, has <span class=\"highlight\">regex</span> meta-characters <span class=\"highlight\">and</span> the default pattern delimiter embedded in it!\n\n&lt;?php /**/ eval(base64_decode(&quot;aWYoZnVuY3Rpb25&quot;));? &hellip; ",
            "title": "sed causing bash script to hang"
        },
        {
            "tags": [
                "python",
                "regex",
                "python-3.x"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 59669445,
            "is_answered": false,
            "question_id": 59668935,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1579918713,
            "creation_date": 1578591452,
            "body": "Your pattern is affected by catastrophic backtracking.\n\nHere is an alternative pattern that should work with your input:\n\n\n\nThis assumes that there must always be at least one non-word character separating the words (otherwise it would just match one long, unbroken word).\n\n(See also: How can I recognize an evil regex?)\n",
            "excerpt": "Here is an alternative pattern that should work with your input:\n\n<span class=\"highlight\">regex</span> = r&quot;preceding[^A-Za-z0-9\\n\\r]+(?:\\w+[^A-Za-z0-9\\n\\r]+)+? &hellip; (See also: How can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>?) &hellip; ",
            "title": "Python RegEx findall not responding"
        },
        {
            "tags": [
                "r"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 59699127,
            "is_answered": false,
            "question_id": 59699094,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1578782303,
            "creation_date": 1578781030,
            "body": "\n\nSince you want to preserve the single , you can use any of the following for more-specific patterns:\n\n\n\n(The exception for  in the second example is not strictly needed here, but provided as an example.)\n\nThe use of a &quot;look-ahead&quot; ( is used because you stated the requirement for a space before and after; if you use a pattern of , then it will miss many of the single letters (due to recursive replacements). If you relax this a little, then you can use word-boundaries, as in\n\n\n\n(While using perl-style regexes can technically have a performance penalty, I suspect that that really only matters if you&#39;re doing a lot and need to improve performance as much as you can. Not strictly required, and early optimization is &quot;the root of all evil&quot; - Donald Knuth)\n\nNote: In this last pattern, I&#39;m also excepting a lower-case  in addition to the upper-case ; if you are confident that you will never see an otherwise-valid , then you can adjust your pattern to use  instead. (Thanks to @jay.sf for highlighting this assumption.)\n",
            "excerpt": "= )&quot;, &quot;&quot;, &quot;I am a text r r o n n r <span class=\"highlight\">and</span> here&quot;, perl = TRUE)\n# [1] &quot;I am a text <span class=\"highlight\">and</span> here&quot;\n\n### any single-letter except &quot;a&quot; <span class=\"highlight\">and</span> &quot;i&quot;\ngsub(&quot;\\\\s[B-HJ-Zb-hj-z](? &hellip; Not strictly required, <span class=\"highlight\">and</span> early optimization is &quot;the root of all <span class=\"highlight\">evil</span>&quot; - Donald Knuth)\n\nNote: In this last pattern, I&#39;m also excepting a lower-case i in addition to the upper-case I; if you are confident &hellip; ",
            "title": "Remove single alphabetic letters strings"
        },
        {
            "tags": [
                "regex",
                "html-parsing"
            ],
            "question_score": 236,
            "is_accepted": false,
            "answer_id": 44577760,
            "is_answered": false,
            "question_id": 590747,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1576560760,
            "creation_date": 1497564407,
            "body": "HTML/XML is divided into markup and content. \nRegex is only useful doing a lexical tag parse.\nI guess you could deduce the content.\nIt would be a good choice for a SAX parser.\nTags and content could be delivered to a user\ndefined function where nesting/closure of elements\ncan be kept track of.  \n\nAs far as just parsing the tags, it can be done with\nregex and used to strip tags from a document.\n\nOver years of testing, I&#39;ve found the secret to the\nway browsers parse tags, both well and ill formed.  \n\nThe normal elements are parsed with this form:\n\nThe core of these tags use this regex\n\n\n\nYou&#39;ll notice this  as one of the alternations.\nThis will match unbalanced quotes from ill-formed tags.  \n\nIt is also, the single most root of all evil to regular expressions.\nThe way it&#39;s used will trigger a bump-along to satisfy it&#39;s greedy, must-match\nquantified container.  \n\nIf used passively, there is never a problem\nBut, if you force something to match by interspersing it with\na wanted attribute/value pair, and don&#39;t provide adequate protection\nfrom backtracking, it&#39;s an out of control nightmare.\n\nThis is the general form for just plain old tags.\nNotice the   representing the tag name?\nIn reality, the legal characters representing the tag name\nare an incredible list of Unicode characters.  \n\n\n\n\n\nMoving on, we also see that you just can&#39;t search for a specific tag\nwithout parsing ALL tags.\nI mean you could, but it would have to use a combination of\nverbs like (*SKIP)(*FAIL) but still all tags have to be parsed.\n\nThe reason is that tag syntax may be hidden inside other tags, etc.\n\nSo, to passively parse all tags, a regex is needed like the one below.\nThis particular one matches invisible content as well.\n\nAs new HTML or xml or any other develop new constructs, just add it as\none of the alternations. \n\n\n\nWeb page note - I&#39;ve never seen a web page (or xhtml/xml) that this\nhad trouble with. If you find one, let me know.  \n\nPerformance note - It&#39;s quick. This is the fastest tag parser I&#39;ve seen\n(there may be faster, who knows).\nI have several specific versions.  It is also excellent as scraper\n(if you&#39;re the hands-on type).\n\n\n\nComplete raw regex  \n\n  \n\nFormatted look  \n\n\n",
            "excerpt": "HTML/XML is divided into markup <span class=\"highlight\">and</span> content. \n<span class=\"highlight\">Regex</span> is only useful doing a lexical tag parse.\nI guess you could deduce the content.\nIt would be a good choice for a SAX parser. &hellip; As far as just parsing the tags, it can be done with\n<span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> used to strip tags from a document. &hellip; ",
            "title": "Using regular expressions to parse HTML: why not?"
        },
        {
            "tags": [
                "c++",
                "boost",
                "boost-spirit"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 59200636,
            "is_answered": false,
            "question_id": 59198525,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1575567901,
            "creation_date": 1575567901,
            "body": "The simplest without semantic actions&#185; would be to parse into an AST which you then interpret.\n\nThe more tedious approach would be to use semantic actions to build the result. (Keep in mind this gets problematic with backtracking grammars.)\n\nSimilar answers I have made:\n\n\nParsing comma-separated list of ranges and numbers with semantic actions\nA regex-based approach for range-expressions here method for expand a-z to abc...xyz form\nA competing version that uses C for performance method for expand a-z to abc...xyz form\n\n\nWithout further ado:\n\nUsing an AST Representation\n\nAn example AST:\n\n\n\n\n  The  is a good place where we can do logic asserts like &quot;the number of periods isn&#39;t zero&quot; or &quot;if the number of periods is 1, start and end must coincide&quot;.\n\n\nNow, for our end-result we want to have a translation to just-a-vector-of-V:\n\n\n\nNow that we have the basics down, let&#39;s parse and test:\n\nParsing\n\nFirst, let&#39;s adapt the AST types:\n\n\n\n\n  Note: the &quot;natural grammar order&quot; of the adapted properties makes attribute propagation painless without semantic actions\n\n\nNow let&#39;s roll a grammar:\n\n\n\n\n  Note:\n  \n  \n   enables rule debugging\n  The order of  is important, since  also parses individual numbers (so it would prevent  from being parsed in time.\n  \n\n\nA simple utility to invoke the parser and also  the intermediate representation:\n\n\n\nTesting\n\nThe proof of the pudding is in the eating:\n\nLive On Coliru\n\n\n\nPrinting\n\n\n\nUsing Semantic Actions Instead\n\nThis might be more efficient and I found I actually prefer the expressiveness of this approach.\n\nIt might not scale well as the grammar grows more complicated though.\n\nHere we &quot;invert&quot; the flow:\n\n\n\nHere  and  in the semantic actions are Lazy Actors that basically perform the same operation as  did in the AST-based appraoch, but\n\n\non the fly\nthe first operand is implicit (it is the last value already at the back of the vector)\n\n\nThis makes for a few extra checks (we don&#39;t want UB when the user passes a string that starts with  or ):\n\n\n\nTo avoid tedious  in the semantic actions, let&#39;s adapt as Phoenix Functions:\n\n\n\nParsing\n\nThe  helper became simpler because we have no intermediate representation:\n\n\n\nTesting\n\nAgain, the proof of the pudding is in the eating. The test program with unmodified :\n\nLive On Coliru\n\n\n\nPrinting the same as before:\n\n\n\n\n\n&#185; Boost Spirit: &quot;Semantic actions are evil&quot;?\n",
            "excerpt": "Similar answers I have made:\n\n\nParsing comma-separated list of ranges <span class=\"highlight\">and</span> numbers with semantic actions\nA <span class=\"highlight\">regex</span>-based approach for range-expressions here method for expand a-z to abc...xyz form\nA competing &hellip; the same as before:\n\n&quot;1 1.5 2 2.5 3 FOR 4 3.5&quot; -&gt; PASSED {  {1, 1.5, 2, 2.5, 3, 3, 3, 3, 3.5, }\n&quot;1 2 3 4 RAMP 3 6 7 8&quot; -&gt; PASSED {  {1, 2, 3, 4, 5, 6, 7, 8, }\n\n\n\n\n&#185; Boost Spirit: &quot;Semantic actions are <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Boost spirit: how to use custom logic when parsing a list of doubles with text specifiers"
        },
        {
            "tags": [
                "regex",
                "bash",
                "scripting",
                "escaping"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 36345272,
            "is_answered": false,
            "question_id": 33744733,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1572984201,
            "creation_date": 1459465280,
            "body": "Just loop until you&#39;ve found a one line fortune:\n\n\n\nThe  loop will keep going until  exits with a nonzero value, which only happens when we&#39;ve found our one-liner.  The  code reads the whole fortune and then, at the end, checks to see if the number of records (, the line count) is one.  If so, print the last (the only) line and exit the  loop.\n\nI assume you had used  as an effort to limit the size, so I expanded it to 80.  Obviously, you can remove it, return it to 65, or change it to another value as you see fit.\n\n\n\nHere&#39;s a variant that accepts one-line quotes (with a second line of attribution) and prints on one line:\n\n\n\nThis adds two conditionals.  First, we track the content of line 1.  Second, if line two has  as its first whitespace-delimited content, decrement the line count and replace the leading whitespace with a single space (altering  causes  to be respaced), and prepend the previous line so the final clause only sees one line.\n\nSo e.g. this quote:\n\n\n\nis now accepted after becoming:\n\n\n\n\n\nTo exclude  (a noble pursuit &#128515;):\n\n\n\nAll I did was say there is no index for &quot;Evil&quot; in the final condition. You could use an extended regex instead with  although note that  regexes do not allow numeric quantifiers (so  is fine but  and  won&#39;t work). If you want case-insensitive, you have to do .\n",
            "excerpt": "index($0, &quot;<span class=\"highlight\">Evil</span>&quot;)) { print; exit 1 } }\n&#39;; do true; done\n\n\nAll I did was say there is no index for &quot;<span class=\"highlight\">Evil</span>&quot; in the final condition. You could use an extended <span class=\"highlight\">regex</span> instead with (NR == 1 &amp;&amp; ! &hellip; /<span class=\"highlight\">Evil</span>/) although note that awk regexes do not allow numeric quantifiers (so /a+/ is fine but /a{1,}/ <span class=\"highlight\">and</span> /a{1,9}/ won&#39;t work). If you want case-insensitive, you have to do tolower($0) !~ /<span class=\"highlight\">evil</span>/. &hellip; ",
            "title": "Fortune with -m exclude string"
        },
        {
            "tags": [
                "regex",
                "html-parsing"
            ],
            "question_score": 201,
            "is_accepted": false,
            "answer_id": 4234491,
            "is_answered": false,
            "question_id": 4231382,
            "item_type": "answer",
            "score": 726,
            "last_activity_date": 1571920382,
            "creation_date": 1290280762,
            "body": "Oh Yes You Can Use Regexes to Parse HTML!\nFor the task you are attempting, regexes are perfectly fine!\nIt is true that most people underestimate the difficulty of parsing HTML with regular expressions and therefore do so poorly.\nBut this is not some fundamental flaw related to computational theory. That silliness is parroted a lot around here, but don’t you believe them.\nSo while it certainly can be done (this posting serves as an existence proof of this incontrovertible fact), that doesn’t mean it&#160;should&#160;be.\nYou must decide for yourself whether you’re up to the task of writing what amounts to a dedicated, special-purpose HTML parser out of regexes. Most people are not.\nBut I am. ☻\n\nGeneral Regex-Based HTML Parsing Solutions\nFirst I’ll show how easy it is to parse arbitrary HTML with regexes. The full program’s at the end of this posting, but the heart of the parser is:\n\nSee how easy that is to read?\nAs written, it identifies each piece of HTML and tells  where it found that piece. You could easily modify it to do whatever else you want with any given type of piece, or for more particular types than these.\nI have no failing test cases (left :): I’ve successfully run this code on more than 100,000 HTML files — every single one I could quickly and easily get my hands on. Beyond those, I’ve also run it on files specifically constructed to break na&#239;ve parsers.\nThis is not a na&#239;ve parser.\nOh, I’m sure it isn’t perfect, but I haven’t managed to break it yet.  I figure that even if something did, the fix would be easy to fit in because of the program’s clear structure. Even regex-heavy programs should have stucture.\nNow that that’s out of the way, let me address the OP’s question.\nDemo of Solving the OP’s Task Using Regexes\nThe little  program I include below produces the following output, so that you can see that parsing HTML with regexes works just fine for what you wish to do:\n\nParse Input Tags, See No Evil Input\nHere’s the source for the program that produced the output above.\n\nThere you go! Nothing to it! :)\nOnly  you can judge whether your skill with regexes is up to any particular parsing task. Everyone’s level of skill is different, and every new task is different. For jobs where you have a well-defined input set, regexes are obviously the right choice, because it is trivial to put some together when you have a restricted subset of HTML to deal with. Even regex beginners should be handle those jobs with regexes.  Anything else is overkill.\nHowever, once the HTML starts becoming less nailed down, once it starts to ramify in ways you cannot predict but which are perfectly legal, once you have to match more different sorts of things or with more complex dependencies, you will eventually reach a point where you have to work harder to effect a solution that uses regexes than you would have to using a parsing class. Where that break-even point falls  depends again on your own comfort level with regexes.\nSo What Should I Do?\nI’m not going to tell you what you must do or what you cannot do.  I think that’s Wrong. I just want to present you with possibilties, open your eyes a bit. You get to choose what you want to do and how you want to do it. There are no absolutes — and nobody else knows your own situation as well as you yourself do. If something seems like it’s too much work, well, maybe it is.  Programming should be fun, you know. If it isn’t, you may be doing it wrong.\nOne can look at my  program in any number of valid ways.  One such is that you indeed can parse HTML with regular expressions. But another is that it is much, much, much harder than almost anyone ever thinks it is. This can easily lead to the conclusion that my program is a testament to what you should not do, because it really is too hard.\nI won’t disagree with that.  Certainly if everything I do in my program doesn’t make sense to you after some study, then you should not be attempting to use regexes for this kind of task. For specific HTML, regexes are great, but for generic HTML, they’re tantamount to madness. I use parsing classes all the time, especially if it’s HTML I haven’t generated myself.\nRegexes  optimal for small HTML parsing problems,  pessimal for large ones\nEven if my program is taken as  illustrative of why you should not use regexes for parsing general HTML — which is OK, because I kinda meant for it to be that ☺  — it still should be an eye-opener so more people break the terribly common and nasty, nasty habit of writing unreadable, unstructured, and unmaintainable patterns.\nPatterns do not have to be ugly, and they do not have to be hard. If you create ugly patterns, it is a reflection on you, not them.\nPhenomenally Exquisite Regex Language\nI’ve been asked to point out that my proferred solution to your problem has been written in Perl. Are you surprised? Did you not notice? Is this revelation a bombshell?\nIt is true that not all other tools and programming languages are quite as convenient, expressive, and powerful when it comes to regexes as Perl is. There’s a big spectrum out there, with some being more suitable than others.  In general, the languages that have expressed regexes as part of the core language instead of as a library are easier to work with. I’ve done nothing with regexes that you couldn’t do in, say, PCRE, although you would structure the program differently if you were using C.\nEventually other languages will be catch up with where Perl is now in terms of regexes.  I say this because back when Perl started, nobody else had anything like Perl’s regexes. Say anything you like, but this is where Perl clearly won: everybody copied Perl’s regexes albeit at varying stages of their development.  Perl pioneered almost (not quite all, but almost) everything that you have come to rely on in modern patterns today, no matter what tool or language you use.  So eventually the others will catch up.\nBut they’ll only catch up to where Perl was sometime in the past, just as it is now.  Everything advances.  In regexes if nothing else, where Perl leads, others follow. Where will Perl be once everybody else finally catches up to where Perl is now?  I have no idea, but I know we too will have moved. Probably we’ll be closer to Perl₆’s style of crafting patterns.\nIf you like that kind  of thing but would like to use it in Perl₅,  you might be interested in Damian Conway’s wonderful Regexp::Grammars module. It’s completely awesome, and makes what I’ve done here in my program seem just as primitive as mine makes the patterns that people cram together without whitespace or alphabetic identifiers.  Check it out!\n\nSimple HTML Chunker\nHere is the complete source to the parser I showed the centerpiece from at the beginning of this posting.\nI am not suggesting that you should use this over a rigorously tested parsing class. But I am tired of people pretending that nobody can parse HTML with regexes just because they can’t. You clearly can, and this program is proof of that assertion.\nSure,  it isn’t easy, but it is possible!\nAnd trying to do so is a terrible waste of time, because good parsing classes exist which you should use for this task.  The right answer to people trying to parse arbitrary HTML is not that it is impossible.  That is a facile and disingenuous answer.  The correct and honest answer is that they shouldn’t attempt it because it is too much of a bother to figure out from scratch; they should not  break their back striving to re&#239;nvent a wheel that works perfectly well.\nOn the other hand, HTML that falls within a predicable subset is ultra-easy to parse with regexes. It’s no wonder people try to use them, because for small problems, toy problems perhaps, nothing could be easier. That’s why it’s so important to distinguish the two tasks — specific vs generic — as these do not necessarily demand the same approach.\nI hope in the future here to see a more fair and honest treatment of questions about HTML and regexes.\nHere’s my HTML lexer.  It doesn’t try to do a validating parse; it just identifies the lexical elements. You might think of it more as an HTML chunker than an HTML parser. It isn’t very forgiving of broken HTML, although it makes some very small allowances in that direction.\nEven if you never parse full HTML yourself (and why should you? it’s a solved problem!), this program has lots of cool regex bits that I believe a lot of people can learn a lot from.  Enjoy!\n\n",
            "excerpt": "_V192234675_.gif&quot;\n        type =&gt; &quot;image&quot;\n\nParse Input Tags, See No <span class=\"highlight\">Evil</span> Input\nHere’s the source for the program that produced the output above.\n#! &hellip; Even if you never parse full HTML yourself (<span class=\"highlight\">and</span> why should you? it’s a solved problem!), this program has lots of cool <span class=\"highlight\">regex</span> bits that I believe a lot of people can learn a lot from.  Enjoy!\n#! &hellip; ",
            "title": "What to do when a regular expression pattern doesn&#39;t match anywhere in a string?"
        },
        {
            "tags": [
                "nginx"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 58299129,
            "is_answered": false,
            "question_id": 49867809,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1570606365,
            "creation_date": 1570606365,
            "body": "I was also searching how to use Nginx&#39;s  with a concatenated string. I found this question, and a bunch of other articles saying &quot;if is evil&quot;, but not offering a replacement.\n\nAnd then I ran into this question, which led me to a solution that is much more compact and elegant - especially when you need multiple  cases, so I&#39;ll post it for other searchers.\n\n\n\nBasically, this compares the first argument from the first line (the concatenated ) with first arguments from other lines ( literal,  regex case insensitive, or  by default), and assigns the second arguments from corresponding lines ( or  in our case, could be anything) to the variable passed as the second argument on the first line ().\n\nSaving a lot of extra lines of code if you need 10+ ifs\n",
            "excerpt": "I found this question, <span class=\"highlight\">and</span> a bunch of other articles saying &quot;if is <span class=\"highlight\">evil</span>&quot;, but not offering a replacement. &hellip; example <span class=\"highlight\">regex</span> case insensitive, or default by default), <span class=\"highlight\">and</span> assigns the second arguments from corresponding lines (1 or 0 in our case, could be anything) to the variable passed as the second argument on &hellip; ",
            "title": "if condition concatenation in nginx conf file"
        },
        {
            "tags": [
                "php",
                "security",
                "http-headers"
            ],
            "question_score": 408,
            "is_accepted": true,
            "answer_id": 4499749,
            "is_answered": false,
            "question_id": 4410704,
            "item_type": "answer",
            "score": 342,
            "last_activity_date": 1564068960,
            "creation_date": 1292938164,
            "body": "Sending headers earlier than the normal course may have far reaching consequences. Below are just a few of them that happened to come to my mind at the moment:\n\n\nWhile current PHP releases may have output buffering on, the actual production servers you will be deploying your code on are far more important than any development or testing machines. And they do not always tend to follow latest PHP trends immediately.\nYou may have headaches over inexplicable functionality loss. Say, you are implementing some kind payment gateway, and redirect user to a specific URL after successful confirmation by the payment processor. If some kind of PHP error, even a warning, or an excess line ending happens, the payment may remain unprocessed and the user may still seem unbilled. This is also one of the reasons why needless redirection is evil and if redirection is to be used, it must be used with caution.\nYou may get &quot;Page loading canceled&quot; type of errors in Internet Explorer, even in the most recent versions. This is because an AJAX response/json include contains something that it shouldn&#39;t contain, because of the excess line endings in some PHP files, just as I&#39;ve encountered a few days ago.\nIf you have some file downloads in your app, they can break too, because of this. And you may not notice it, even after years, since the specific breaking habit of a download depends on the server, the browser, the type and content of the file (and possibly some other factors I don&#39;t want to bore you with).\nFinally, many PHP frameworks including Symfony, Zend and Laravel (there is no mention of this in the coding guidelines but it follows the suit) and the PSR-2 standard (item 2.2) require omission of the closing tag. PHP manual itself (1,2), Wordpress, Drupal and many other PHP software I guess, advise to do so. If you simply make a habit of following the standard (and setup PHP-CS-Fixer for your code) you can forget the issue. Otherwise you will always need to keep the issue in your mind.\n\n\nBonus: a few gotchas (actually currently one) related to these 2 characters:\n\n\nEven some well-known libraries may contain excess line endings after . An example is Smarty, even the most recent versions of both 2.* and 3.* branch have this. So, as always, watch for third party code. Bonus in bonus: A regex for deleting needless PHP endings: replace  with empty text in all files that contain PHP code.\n\n",
            "excerpt": "This is also one of the reasons why needless redirection is <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> if redirection is to be used, it must be used with caution. &hellip; Bonus in bonus: A <span class=\"highlight\">regex</span> for deleting needless PHP endings: replace (\\s*\\?&gt;\\s*)$ with empty text in all files that contain PHP code. &hellip; ",
            "title": "Why would one omit the close tag?"
        },
        {
            "tags": [
                "regex",
                "character",
                "filenames"
            ],
            "question_score": -1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 56795736,
            "item_type": "question",
            "score": -1,
            "last_activity_date": 1561659406,
            "creation_date": 1561655015,
            "body": "I&#39;m looking for a Regex that exchanges all illegal filename chars like () space . etc before the filetype ending like .jpg by an - \n\ni got:\n[^a-zA-Z0-9_-]+\nmatches every illegal filename char, but including file extension\nand\n.*(?=.)\nmatching everything until the last occurence of .\n\nhow do i combine these?\n\none of my evil file names is\n(800x800-png)MGC1000-03EPTD-021_RAL7035-5010.tif.png\n\nafter regex replace it should look like\n-800x800-png-MGC1000-03EPTD-021_RAL7035-5010-tif.png\n\nthe regex should be working in libre office / excel search and replace.\n\nthanks for your help!\n",
            "excerpt": "file extension\n<span class=\"highlight\">and</span>\n.*(? &hellip; one of my <span class=\"highlight\">evil</span> file names is\n(800x800-png)MGC1000-03EPTD-021_RAL7035-5010.tif.png\n\nafter <span class=\"highlight\">regex</span> replace it should look like\n-800x800-png-MGC1000-03EPTD-021_RAL7035-5010-tif.png\n\nthe <span class=\"highlight\">regex</span> should be working &hellip; ",
            "title": "Regex for all illegal filename characters before filetype extension"
        },
        {
            "tags": [
                "regex",
                "bash",
                "sed"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 56150580,
            "is_answered": false,
            "question_id": 56150157,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1557926900,
            "creation_date": 1557926900,
            "body": "As the comment by @Tom above alludes, using regex to parse HTML is generally evil.  That being said, if you only have single level (non nested) HTML tags, then regex might work here.  But, Sed&#39;s regex engine is not very powerful, as it does not support lazy dot.  Here is a way to do this using Perl in the Bash:\n\n\n\nThis outputs:\n\n\n",
            "excerpt": "As the comment by @Tom above alludes, using <span class=\"highlight\">regex</span> to parse HTML is generally <span class=\"highlight\">evil</span>.  That being said, if you only have single level (non nested) HTML tags, then <span class=\"highlight\">regex</span> might work here. &hellip; But, Sed&#39;s <span class=\"highlight\">regex</span> engine is not very powerful, as it does not support lazy dot. &hellip; ",
            "title": "Delete string between 2 paterns on more than one line"
        },
        {
            "tags": [
                "php",
                "html",
                "preg-replace",
                "paragraph"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 56123779,
            "is_answered": false,
            "question_id": 56123741,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1557813154,
            "creation_date": 1557813154,
            "body": "Note that it is generally evil and bad practice to use regex to parse HTML.  But, assuming you only have a string with a set of top level HTML  tags, regex might be an option here.\n\n\n\nThis outputs:\n\n\n\nHere is an explanation of the regex:\n\n\n\nThe only perhaps tricky part of the above regex is:\n\n\n\nThis is a tempered dot, and it works by applying a negative lookahead  at each step we match any character.  This is critical, because it ensures that the regex engine will not accidentally cross over multiple  tags to find .\n",
            "excerpt": "Note that it is generally <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> bad practice to use <span class=\"highlight\">regex</span> to parse HTML.  But, assuming you only have a string with a set of top level HTML &lt;p&gt; tags, <span class=\"highlight\">regex</span> might be an option here. &hellip; .)*\n\n\nThis is a tempered dot, <span class=\"highlight\">and</span> it works by applying a negative lookahead (?!&lt;/p&gt;) at each step we match any character. &hellip; ",
            "title": "How to remove paragraph tag &lt;p&gt; with contains special word in preg_replace?"
        },
        {
            "tags": [
                "reactjs"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 56067658,
            "is_answered": false,
            "question_id": 35754225,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1557516323,
            "creation_date": 1557436392,
            "body": "There doesn&#39;t seem to be a great answer for this, after trying many things.\nIf there is an answer to the question it might be that there&#39;s no good way to do it. I think it doesn&#39;t hurt to look at potential solutions though and the drawbacks of each one.\n\nSolution 1\n\nUse componentWillUpdate. This is deprecated.\n\nSolution 2\n\nValidate state on render - but in your case and in most others, validation may lead to setState, which react tells you never to do in render(), but doesn&#39;t go into any detail about what will actually happen. Of course, you would have to be careful to prevent infinite loops, but if you call setState in render() upon some condition which cannot logically result in an infinite loop, then what unintended side effects could occur? \n\nSolution 3\n\nAs above, make a wrapper function to both validate and set state. But this is no good in my opinion because any state changes done with set state directly cannot be validated. Not only does setState directly not call your validation, but your validation also does not run on the items in the initial state. You might say, why would you give your component an initial state that&#39;s invalid, but I don&#39;t care, if I want to validate state I want it to validate 50000% of the time and no less.\n\nIn a complex form example, there are other issues with this. What if the validity of one field depends on the state of another field? Surely then, a function to re-validate a field when it changes is not enough. Some people will say to test the field being passed in and dispatch multiple events for re-validation, but again, this just isn&#39;t acceptable to me. Its not fullproof, it can lead to bugs, and make things hard to test. \n\nSolution 4\n\nUse componentWillReceiveProps. Not only is this deprecated, but its also static, meaning that you don&#39;t have access to the component instance. For some components this is fine because you can still modify the state that is returned, but if your component has data outside of state and props then you cannot access it, in addition to not being able to use non-static methods, which in my opinion makes this method pretty useless in many situations.\n\nSolution 5\n\nHaven&#39;t tested this one (bear with me, its fairly nuts), but you can override setState function in your component. Insert a callback into every setState instance. Track how many times setState is called and how many times the setState callback is called. Inside the callback, you can check the two counters stored in the object to see if the last callback is currently running, then, if it is, run one function which validates all state. On render, set both of the counters back down to zero. I don&#39;t recommend this by any means. It may work but its a pretty major hack.\n\nSolution 6\n\nYou can use componentDidUpdate, but this is inefficient. You will be blindly setting state with a value that was not validated then letting your component render only to validate it after and possibly call render again. Once again you have to be careful to avoid infinite loop while calling setState in componentDidUpdate. I read elsewhere that at least if you set the state here, the DOM will only re-draw once. In other words, it doesn&#39;t draw immediately after render() but waits until componentDidUpdate is triggered and re-calls render if state changes in there. This seems like maybe its the only solution I know about that react only warns about without telling you explicitely not to do this. In your case, the efficiency does not matter, but what if the state you were trying to validate was a 100 field form with a very expensive render method. Now, on every key down you&#39;ve essentially doubled the amount of work that react has to do to render your components, causing them to first render without being validated, and then filtering and/or validating them for a very likely second render.\n\nAdditional Issues\n\nIn my case, i&#39;m working on a form and not a simple component like you described above. I may go with a mix of solution 3 and 5. Its more complicated then I want though. It involves using one function to filter, generate errors, and set the state for each field (ie. solution 3). And then on componenetDidUpdate I may look for state keys whose values are different from the last value that the field was validated with. The second step here has many ways of doing so, all of which are messy and inefficient. To make it worse, they practically never run under normal circumstances because I always use the first function to update and validate their state, so this makes testing it harder. It&#39;s like leaving some fallback in my app that seems to work but during the entire development process it never triggers except for like the one time that I decided to test it. Seems like a bad idea to me. \n\nThere are additional efficiency concerns I also won&#39;t get into which relates to trying not to re-validate a field if it has the same value it was validated with last time. This is a whole other can of worms, but basically what it boils down to is that you should be able to not only validate a state before render, but you should have access to the previous state as well, so you can save some cpu time and only validate the fields that changed. For example, if you have a very long textarea with some complex regex, it would be nice to not validate that on every component render even if its a separate field that is changing.\n\nAfterthoughts\n\nI&#39;m very thoroughly disappointed that react seems to provide no legitimate option for this. Seeing as you can call setState many times in one operation, and each one will be queued, how is it that they don&#39;t provide us with one callback after all state changes are resolved and we&#39;re about to render? Well if you think about it, the render function itself is this callback, because I think its only ever called after setStates are resolved, but again, its evil to call setState on render, and it would be a million times cleaner to have render() simply receive the correct state, so I don&#39;t see how this is very useful.\n\nDoes anyone know why they decided to get rid of componentWillUpdate?\n",
            "excerpt": "For example, if you have a very long textarea with some complex <span class=\"highlight\">regex</span>, it would be nice to not validate that on every component render even if its a separate field that is changing. &hellip; Well if you think about it, the render function itself is this callback, because I think its only ever called after setStates are resolved, but again, its <span class=\"highlight\">evil</span> to call setState on render, <span class=\"highlight\">and</span> it would &hellip; ",
            "title": "React state validation"
        },
        {
            "tags": [
                "regex",
                "performance",
                "regex-lookarounds",
                "regex-greedy"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 56048020,
            "is_answered": false,
            "question_id": 56046890,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1557393247,
            "creation_date": 1557344783,
            "body": "An optimized expression for finding the final line of a large input string would be the one that introduces explicit boundaries:\n\n\n\nIn languages like PHP it would be written as  (s are delimiters and  is multiline flag). The caret  makes engine not to go through  (evil) regex if it is not matched. So we have defined a very well known boundary, not only for us to recognize the desired part but also for engines and their builtin optimizations.\n\nThe performance of this regex depends on number of lines of input string. So an input string like yours isn&#39;t a problem at all but something like this would bring some attention.\n\nIn both cases it performs fast and doesn&#39;t come to a failure.\n",
            "excerpt": "*\\z/m (/s are delimiters <span class=\"highlight\">and</span> m is multiline flag). The caret ^ makes engine not to go through .* (<span class=\"highlight\">evil</span>) <span class=\"highlight\">regex</span> if it is not matched. &hellip; In both cases it performs fast <span class=\"highlight\">and</span> doesn&#39;t come to a failure. &hellip; ",
            "title": "RegEx for matching the last line"
        },
        {
            "tags": [
                "javascript",
                "node.js",
                "web-crawler",
                "puppeteer"
            ],
            "question_score": 4,
            "is_accepted": true,
            "answer_id": 55576899,
            "is_answered": false,
            "question_id": 55567952,
            "item_type": "answer",
            "score": 6,
            "last_activity_date": 1554826054,
            "creation_date": 1554737347,
            "body": "Short answer: Don&#39;t (re)build a parser in Node.js, use the browser instead\n\nI strongly advise against evaluating or parsing crawled data in Node.js if you are anyway using puppeteer for crawling. When you are using puppeteer you already have a browser with a great sandbox for JavaScript code running in another process. Why risk that kind of isolation and &quot;rebuild&quot; a parser in your Node.js script? If your Node.js script breaks, your whole script will fail. In the worst case, you might even expose your machine to serious risks when you try to run untrusted code inside your main thread.\n\nInstead, try to do as much parsing as possible inside the context of the page. You can even do an evil  call there. There worst that could happen? Your browser hangs or crashes.\n\nExample\n\nImagine the following HTML page (very much simplified). You are trying to read the text which is pushed into an array. The only information you have is that there is an additional attribute  which is set to .\n\n\n\nBad code\n\nHere is a simple example what your code might look like right now:\n\n\n\nIn this example, the script extracts the JavaScript code from the page. Now we have the JavaScript code from the page and we &quot;only&quot; need to parse it, right? Well, this is the wrong approach. Don&#39;t try to rebuild a parser inside Node.js. Just use the browser. There are basically two approaches you can take to do that in your case.\n\n\nInject proxy functions into the page and fake some built-in functions (recommended)\nParse the data on the client-side (!) by using , a regex or  (eval only if really necessary)\n\n\n\n\nOption 1: Inject proxy functions into the page\n\nIn this approach you are replacing native browser functions with your own &quot;fake functions&quot;. Example:\n\n\n\nThis code replaces the original  function with our own function. Everything works as normal, but when an item with our target id is pushed into an array, a special condition is triggered. To inject this function into the page, you could use . To receive the data from Node.js you would have to expose a function to the browser via :\n\n\n\nNow it doesn&#39;t really matter how complex the code of the page is, whether it happens inside some asynchronous handler or whether the page changes the surrounding code. As long as the target data is pushing the data into an array, we will get it.\n\nYou can use this approach for a lot of crawling. Check how the data is processed and replace the low level functions processing the data with your own proxy version of it.\n\nOption 2: Parse the data\n\nLet&#39;s assume the first approach does not work for some reason. The data is in some script tag, but you are not able to get it by using fake functions.\n\nThen you should parse the data, but not inside your Node.js environment. Do it inside the page context. You could run a regular expression or use . But do it before returning the data back to Node.js. This approach has the benefit that if your code will crash your environment for some reason, it will not be your main script, but just your browser that crashes.\n\nTo give some example code. Instead of running the code from the original &quot;bad code&quot; sample, we change it to this:\n\n\n\nThis will only return the parts of the code we need, which can then be fruther processed from within Node.js.\n\n\n\nIndependent of which approach you choose, both ways are much better and more secure than running unknown code inside your main thread. If you absolutely have to process the data in your Node.js environment, use a regular expression for it like shown in the answer from trincot. You should never use eval to run untrusted code.\n",
            "excerpt": "You can even do an <span class=\"highlight\">evil</span> eval call there. There worst that could happen? Your browser hangs or crashes.\n\nExample\n\nImagine the following HTML page (very much simplified). &hellip; which extracts the data you want/); // we run our <span class=\"highlight\">regex</span> in the browser\n    return match; // <span class=\"highlight\">and</span> only return the results\n});\n\n\nThis will only return the parts of the code we need, which can then be fruther &hellip; ",
            "title": "How to get JavaScript object in JavaScript code?"
        },
        {
            "tags": [
                "html",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 55127085,
            "is_answered": false,
            "question_id": 55126617,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1552468849,
            "creation_date": 1552410460,
            "body": "As already mentioned in the comments, Regex is not the way to go here.\n\nThat said: I have come up with this (https://regex101.com/r/3OVaO2/2)\n\n\n\nHowever, this will only remove ONE evil attribute. The problem is, that with PCRE, you cannot have variable length lookbehind assertions. If you switch it to ECMAscript, you can do this (https://regex101.com/r/3OVaO2/3)\n\n\n\nThis will probably do, what you want it to do. Nonetheless, this is NOT the holy grail for sanitizing HTML. Be careful with your output, if you don&#39;t consider your input safe.\n\nAlso, the definition of the tags may need some tweaking, since there may be tags like , which are currently not detected by the regular expression.\n",
            "excerpt": "As already mentioned in the comments, <span class=\"highlight\">Regex</span> is not the way to go here.\n\nThat said: I have come up with this (https://regex101.com/r/3OVaO2/2)\n\n(&lt;\\w+\\s*[^&gt;]*)\\s(?!href|title|alt)[\\w\\-\\d]+=(?:([&#39;&quot;]).*? &hellip; \\2|\\w+)\n\n\nHowever, this will only remove ONE <span class=\"highlight\">evil</span> attribute. The problem is, that with PCRE, you cannot have variable length lookbehind assertions. &hellip; ",
            "title": "Remove all inline html attributes, but leave some"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 55102898,
            "is_answered": false,
            "question_id": 55102827,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1552313797,
            "creation_date": 1552310851,
            "body": "First of all, using regex to parse HTML is evil.\n\nNow that this is out of the way, here is a working script:\n\n\n\nHere is an explanation of the pattern :\n\n\n\nAs for your current errors, you have defined  to be a delimiter for the regex pattern.  This means that if you want to use a literal forward slash, you therefore must escape it (as you would a regex metacharacter).\n",
            "excerpt": "First of all, using <span class=\"highlight\">regex</span> to parse HTML is <span class=\"highlight\">evil</span>. &hellip; This means that if you want to use a literal forward slash, you therefore must escape it (as you would a <span class=\"highlight\">regex</span> metacharacter). &hellip; ",
            "title": "PHP preg_match_all(): Unknown modifier &#39;&gt;&#39;"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 116,
            "is_accepted": false,
            "answer_id": 43872595,
            "is_answered": false,
            "question_id": 12841970,
            "item_type": "answer",
            "score": 17,
            "last_activity_date": 1551298425,
            "creation_date": 1494340192,
            "body": "Detecting evil regexes\n\n\nTry Nicolaas Weideman&#39;s RegexStaticAnalysis project.\nTry my ensemble-style vuln-regex-detector which has a CLI for Weideman&#39;s tool and others.\n\n\nRules of thumb\n\nEvil regexes are always due to ambiguity in the corresponding NFA, which you can visualize with tools like regexper.\n\nHere are some forms of ambiguity. Don&#39;t use these in your regexes.\n\n\nNesting quantifiers like  (aka &quot;star height &gt; 1&quot;). This can cause exponential blow-up. See substack&#39;s  tool.\nQuantified Overlapping Disjunctions like . This can cause exponential blow-up.\nAvoid Quantified Overlapping Adjacencies like . This can cause polynomial blow-up.\n\n\nAdditional resources\n\nI wrote this paper on super-linear regexes. It includes loads of references to other regex-related research.\n",
            "excerpt": "Detecting <span class=\"highlight\">evil</span> regexes\n\n\nTry Nicolaas Weideman&#39;s RegexStaticAnalysis project.\nTry my ensemble-style vuln-<span class=\"highlight\">regex</span>-detector which has a CLI for Weideman&#39;s tool <span class=\"highlight\">and</span> others. &hellip; It includes loads of references to other <span class=\"highlight\">regex</span>-related research. &hellip; ",
            "title": "How can I recognize an evil regex?"
        },
        {
            "tags": [
                "python",
                "json",
                "regex"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 54689474,
            "is_answered": false,
            "question_id": 54689404,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1550144108,
            "creation_date": 1550144108,
            "body": "First, using regex on JSON is evil, almost as bad as killing a kitten.\n\nIf you want to represent  as a valid JSON value, then consider using this structure:\n\n\n\nIf you need the string literal  to behave like a number, then consider just casting it to an integer in your Python script.\n",
            "excerpt": "First, using <span class=\"highlight\">regex</span> on JSON is <span class=\"highlight\">evil</span>, almost as bad as killing a kitten. &hellip; ",
            "title": "Converting string with leading-zero integer to json"
        },
        {
            "tags": [
                "c#",
                ".net-core",
                "asp.net-core-2.0"
            ],
            "question_score": 11,
            "is_accepted": false,
            "answer_id": 54634368,
            "is_answered": false,
            "question_id": 50356774,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1549900565,
            "creation_date": 1549900565,
            "body": "If I should guess, I would blame Regex\n\n\n is not implemented in .NET Core 2.0 (source)\nSome of your 175 patterns may be slightly evil\n\n\nThis may lead to significant performance difference between .NET Framework 4.6 and .NET Core 2.0 which may result in unresponsive application.\n",
            "excerpt": "If I should guess, I would blame <span class=\"highlight\">Regex</span>\n\n\nRegexOptions.Compiled is not implemented in .NET Core 2.0 (source)\nSome of your 175 patterns may be slightly <span class=\"highlight\">evil</span>\n\n\nThis may lead to significant performance difference &hellip; between .NET Framework 4.6 <span class=\"highlight\">and</span> .NET Core 2.0 which may result in unresponsive application. &hellip; ",
            "title": ".NET Core 2.0 Regex Timeout deadlocking"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 54459445,
            "is_answered": false,
            "question_id": 54459081,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1548933658,
            "creation_date": 1548933658,
            "body": "Here&#39;s my try on this: \nYou can see a working demo here.\nThe expression matches everything you want to remove. It uses lookaheads with arbitrary quantifiers - i hope the regex engine you are using supports this.\nMaybe there&#39;s also a solution without those, but that&#39;s what i can offer for now.\n\nEDIT: I changed the expression so it&#39;s not using the evil  anymore.\n",
            "excerpt": "It uses lookaheads with arbitrary quantifiers - i hope the <span class=\"highlight\">regex</span> engine you are using supports this.\nMaybe there&#39;s also a solution without those, but that&#39;s what i can offer for now. &hellip; EDIT: I changed the expression so it&#39;s not using the <span class=\"highlight\">evil</span> .*? anymore. &hellip; ",
            "title": "Regex to strip email subaddressing (dots and +wildcards)"
        },
        {
            "tags": [
                "nginx",
                "nginx-location"
            ],
            "question_score": 262,
            "is_accepted": false,
            "answer_id": 43595323,
            "is_answered": false,
            "question_id": 35320674,
            "item_type": "answer",
            "score": 71,
            "last_activity_date": 1547240028,
            "creation_date": 1493058660,
            "body": "Both the regex and included files are good methods, and I frequently use those.  But another alternative is to use a &quot;named location&quot;, which is a useful approach in many situations —&#160;especially more complicated ones.  The official &quot;If is Evil&quot; page shows essentially the following as a good way to do things:\n\n\n\nThere are advantages and disadvantages to these various approaches.  One big advantage to a regex is that you can capture parts of the match and use them to modify the response.  Of course, you can usually achieve similar results with the other approaches by either setting a variable in the original block or using .  The downside of the regex approach is that it can get unwieldy if you want to match a variety of locations, plus the low precedence of a regex might just not fit with how you want to match locations —&#160;not to mention that  there are apparently performance impacts from regexes in some cases.\n\nThe main advantage of including files (as far as I can tell) is that it is a little more flexible about exactly what you can include —&#160;it doesn&#39;t have to be a full location block, for example.  But it&#39;s also just subjectively a bit clunkier than named locations.\n\nAlso note that there is a related solution that you may be able to use in similar situations: nested locations.  The idea is that you would start with a very general location, apply some configuration common to several of the possible matches, and then have separate nested locations for the different types of paths that you want to match.  For example, it might be useful to do something like this:\n\n\n",
            "excerpt": "Both the <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> included files are good methods, <span class=\"highlight\">and</span> I frequently use those. &hellip; One big advantage to a <span class=\"highlight\">regex</span> is that you can capture parts of the match <span class=\"highlight\">and</span> use them to modify the response. &hellip; ",
            "title": "How can I have same rule for two locations in NGINX config?"
        },
        {
            "tags": [
                "java",
                "regex",
                "scala"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 53603271,
            "is_answered": false,
            "question_id": 53602965,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1543878182,
            "creation_date": 1543878182,
            "body": "It might be related to RegEx DOS.\n\nJava uses the traditional NFA algorithm [1] to support features such as lazy, backtracking and backreference. NFA &#39;eats in&#39; a character each time and tries to match it with regexp, and &#39;spits&#39; it out if it does not match. It will keep spitting until it can find another match (similar to deep first search), and thus bad expressions might cause the RegEx engine to encounter a RegEx DOS, and specifically in Java, it will finally cause a stack overflow for long strings.\n\nAccording to OWASP, evil regexp expressions contain:\nEvil Regex pattern contains:\n\n\nGrouping with repetition (1)\nInside the repeated group:\n\n\nRepetition\nAlternation with overlapping (2)\n\n\n\nAfter a brief examination of your regexp expression, it seems that you have (1) and (2) since you have  (repetition) and  (overlapping), thus I believe you may have to restructure your RegEx expression to avoid RegEx DOS.\n",
            "excerpt": "It will keep spitting until it can find another match (similar to deep first search), <span class=\"highlight\">and</span> thus bad expressions might cause the <span class=\"highlight\">RegEx</span> engine to encounter a <span class=\"highlight\">RegEx</span> DOS, <span class=\"highlight\">and</span> specifically in Java, it will finally &hellip; According to OWASP, <span class=\"highlight\">evil</span> regexp expressions contain:\n<span class=\"highlight\">Evil</span> <span class=\"highlight\">Regex</span> pattern contains:\n\n\nGrouping with repetition (1)\nInside the repeated group:\n\n\nRepetition\nAlternation with overlapping (2)\n\n\n\nAfter a brief &hellip; ",
            "title": "Simple regex fails with stackoverflow on big string in Scala/Java"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "regex"
            ],
            "question_score": 13,
            "is_accepted": false,
            "answer_id": 53555186,
            "is_answered": false,
            "question_id": 3890475,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1543571971,
            "creation_date": 1543571971,
            "body": "Unlike the  function, the  function returns  or  and is generally preferred when simply testing if a RegEx matches.  The  modifier for case insensitive matching works with both functions.\n\nExample using  with :\n\n\n\n\n\n\nFiddle with the code:\nhttps://jsfiddle.net/71tg4dkw\n\nNote:\nBe aware of evil links that hide their file extension, like:\n\n\nDocumentation for :\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\n",
            "excerpt": "Unlike the match() function, the test() function returns true or false <span class=\"highlight\">and</span> is generally preferred when simply testing if a <span class=\"highlight\">RegEx</span> matches. &hellip; :\nBe aware of <span class=\"highlight\">evil</span> links that hide their file extension, like:\nhttps://example.com/evil.exe? &hellip; ",
            "title": "regex case insensitivity"
        },
        {
            "tags": [
                "php",
                "mysql",
                "eval",
                "preg-replace-callback"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 52819868,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1539708785,
            "creation_date": 1539616605,
            "body": "For a site content creators maintain HTML lists in the format below which a cronjob (Perl) parses into a mySQL database. PHP pulls the data into paginated indices.\n\n\n\n(Perl extracts text and URL and stores them in the database as header, URL, linktext, footer.)\n\nOccasionally a user function call is inserted into the text, like this:\n\n\n\nThe query returns this string for the first line ($header):\n\n\n\nOf course this is not executed when pulled in a query. Nor would it occur in a fixed place, thus cannot be parsed into a separate field.\n\nI have read a couple threads on using  here, and given that only content creators in the house edit the lists, it should be safe enough. IOW if evil code is injected in either list or database we have bigger problems than unsanitized code inserted by some outside party into a form.\n\nMy other idea is . However, some suggested on SO that essentially it has the same problem as , albeit I think the regex should/could lock this down. Also I don&#39;t see how this could execute arbitrary code, unless by passing it as parameter value to the user function.\n\nWhat would be the better approach? Or is there some other, safer approach? (PHP 7.2, mySQL 5.6)\n\nTIA\n\nEdit\n\nI have implemented the code below using a callback, and no . Applying only to few permitted functions which incidentally all require only one numerical parameter it seems quite locked down.\n\n\n\nThanks for your help.\n",
            "excerpt": "/path/to/file.php&quot;&gt;Lorem ipsum dolor sit amet&lt;/a&gt;&lt;br&gt;\nconsectetuer adipiscing elit&lt;/li&gt;\n\n\n(Perl extracts text <span class=\"highlight\">and</span> URL <span class=\"highlight\">and</span> stores them in the database as header, URL, linktext, footer.) &hellip; However, some suggested on SO that essentially it has the same problem as eval, albeit I think the <span class=\"highlight\">regex</span> should/could lock this down. &hellip; ",
            "title": "Execute PHP User Function within mySQL Query Result"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 52019534,
            "is_answered": false,
            "question_id": 52019513,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1535217612,
            "creation_date": 1535217126,
            "body": "This is a classic example of why the  combination can be evil. Use a negated character set instead:\n\n\n\nYou can try it here.\n\n\n\nCompare the behavior of the two expressions:\n\n\nMatch anything greedily. For the second match, the regex matches anything greedily. It will match anything until it reaches the end of the string, and then has to backtrack until it finds a . As soon as it finds a , it stops, hence you end up with  as a match.\nMatch anything but a . Here the regex is matching anything that is not a , therefore at every step is checks whether the next is a  or not. For the second match, you can see that as soon as it finds a , it stops. \n\n",
            "excerpt": ".+ combination can be <span class=\"highlight\">evil</span>. Use a negated character set instead:\n\n(\\$\\{(\\b[a-zA-Z0-9]+\\b)\\})(\\[([^]]+)\\])\n                              ^^^\n\n\nYou can try it here. &hellip; For the second match, the <span class=\"highlight\">regex</span> matches anything greedily. It will match anything until it reaches the end of the string, <span class=\"highlight\">and</span> then has to backtrack until it finds a ]. &hellip; ",
            "title": "Regex capturing group not working as intended"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "browser-extension"
            ],
            "question_score": 18,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 24045756,
            "item_type": "question",
            "score": 18,
            "last_activity_date": 1534620836,
            "creation_date": 1401909425,
            "body": "After I read about Hover Zoom being evil (yikes!), two articles made me instantly switch to another one, called Imagus:\n\n\nHoverzoom’s Malware controversy, and Imagus alternative - ghacks.net\nImagus is a Hover Zoom Replacement to Enlarge Images on Mouseover - LifeHacker\n\n\nImagus seems to fit the bill by doing pretty much what Hover Zoom also could, but in addition, it seems to support custom filters (to support more sites), in addition to the huge bunch it already comes packed with.\n\nIn the options page, on Chrome, the filters section looks deliciously hackable:\n\n&#160;&#160;\n\nHowever, at the same time, it seems to be written in what I would call Perl Javascript.\n\n&#160;&#160;\n\nI consider myself well-versed in Javascript, DOM and Regex, but it&#39;s just painful to try to guess what that is doing, so I looked for documentation. It seems like there was an MyOpera blog, and now the website of the project is, for the time being, hosted on Google Docs.\n\nThe page doesn&#39;t mention anything about how to develop &quot;filters&quot; (or &quot;sieves&quot;, as written in that page?)\n\nSo, how can I develop a custom filter? I&#39;m not aware of all the possibilities (it seems to be pretty flexible), but even a simple example like just modifying URLs would be good. (turning  into  or something).\n\nOr even just an explanation of the fields. They seem to be:\n\n\n\n\n\n\n\n &lt;- Probably Comment\n\n",
            "excerpt": "After I read about Hover Zoom being <span class=\"highlight\">evil</span> (yikes!) &hellip; I consider myself well-versed in Javascript, DOM <span class=\"highlight\">and</span> <span class=\"highlight\">Regex</span>, but it&#39;s just painful to try to guess what that is doing, so I looked for documentation. &hellip; ",
            "title": "How to develop custom filters for the Imagus hover zoom extension?"
        },
        {
            "tags": [
                "regex",
                "python-3.6"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 49019340,
            "is_answered": false,
            "question_id": 49019085,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1519773264,
            "creation_date": 1519772474,
            "body": "Much luck with regex, if you just need the result:\n\n\n\nOutput:\n\n\n\nMake sure to read the eval() \nand have a look into:\n\n\nhttps://opensourcehacker.com/2014/10/29/safe-evaluation-of-math-expressions-in-pure-python/\nhttps://softwareengineering.stackexchange.com/questions/311507/why-are-eval-like-features-considered-evil-in-contrast-to-other-possibly-harmfu/311510\nhttps://www.kevinlondon.com/2015/07/26/dangerous-python-functions.html\n\n\n\n\nExample for hundreds of lines:\n\n\n",
            "excerpt": "Much luck with <span class=\"highlight\">regex</span>, if you just need the result:\n\nimport re\n\ns=&quot;[  9]  -21 - ( 12) - (  -5) + ( -26) = ______&quot;\n\ns = s[s.find(&quot;]&quot;)+1:s.find(&quot;=&quot;)]           #  cut away line nr <span class=\"highlight\">and</span> = ... &hellip; /questions/311507/why-are-eval-like-features-considered-<span class=\"highlight\">evil</span>-in-contrast-to-other-possibly-harmfu/311510\nhttps://www.kevinlondon.com/2015/07/26/dangerous-python-functions.html\n\n\n\n\nExample for hundreds &hellip; ",
            "title": "Regex to pull out numbers and operands"
        },
        {
            "tags": [
                "bash",
                "sed",
                "grep",
                "wget"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 48950339,
            "is_answered": false,
            "question_id": 48949846,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1519406511,
            "creation_date": 1519396951,
            "body": "A fully fledged solution using xpath :\n\nCommand :\n\n\n\nOutput :\n\n\n\nNotes :\n\n\nDon&#39;t parse HTML with regex, use a proper XML/HTML parser like we do here. Check: Using regular expressions with HTML tags\nCheck https://github.com/sputnick-dev/saxon-lint (my own project)\n\n\n\n\n if what I wrote bores you and you just want a quick and dirty command even if it&#39;s evil, then use \n",
            "excerpt": "Check: Using regular expressions with HTML tags\nCheck https://github.com/sputnick-dev/saxon-lint (my own project)\n\n\n\n\n if what I wrote bores you <span class=\"highlight\">and</span> you just want a quick <span class=\"highlight\">and</span> dirty command even if it&#39;s &hellip; <span class=\"highlight\">evil</span>, then use curl -s https://www.foreca.de/Deutschland/Berlin/Berlin | grep -oP &#39;\\d+\\s+hPa&#39; &hellip; ",
            "title": "Bash wget filter specific word"
        },
        {
            "tags": [
                "ruby",
                "regex",
                "split",
                "bbcode"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 3792262,
            "is_answered": false,
            "question_id": 3788959,
            "item_type": "answer",
            "score": 46,
            "last_activity_date": 1516881323,
            "creation_date": 1285382957,
            "body": "Please don&#39;t use BBCode. It&#39;s evil.\n\n\n  BBCode came to life when developers\n  were too lazy to parse HTML correctly\n  and decided to invent their own markup\n  language. As with all products of\n  laziness, the result is completely\n  inconsistent, unstandardized, and\n  widely adopted.\n\n\nTry to use a user-friendlier markup language, like Markdown (that&#39;s what Stack Overflow uses) or Textile.\nBoth of them have parsers for Ruby:\n\n\nMaruku for Markdown\nRedCloth for Textile\n\n\n\n\nIf you still don&#39;t want to heed to my advice and choose to go with BBCode, don&#39;t reinvent the wheel and use a BBCode parser. To answer your question directly, there is the least desirable option: use regex.\n\n\n\nAs seen on rubular. Although I would use , so it will extract the contents inside the  tags. Note that this is fairly fragile and will break if there are nested  tags. Hence, the advice to use a parser.\n",
            "excerpt": "It&#39;s <span class=\"highlight\">evil</span>.\n\n\n  BBCode came to life when developers\n  were too lazy to parse HTML correctly\n  <span class=\"highlight\">and</span> decided to invent their own markup\n  language. &hellip; To answer your question directly, there is the least desirable option: use <span class=\"highlight\">regex</span>.\n\n/\\[img\\].*?\\[\\/img\\]/\n\n\nAs seen on rubular. Although I would use /\\[img\\](.*?) &hellip; ",
            "title": "Regex to split BBCode into pieces"
        },
        {
            "tags": [
                "java",
                "java-stream"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 47893858,
            "is_answered": false,
            "question_id": 47317870,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1513711349,
            "creation_date": 1513711349,
            "body": "The solution by @Bohemian works fine, but the OP asked for an inline RegEx solution as well.  This can be made as follows:\n\n\n\nNote that this will create a new  object for each and every line in your log file.  If you a processing a log file with hundreds of thousand lines, a lot of temporary matcher objects are being created and abandoned to the garbage collector.\n\nIt is possible to reuse a  object by calling the  method, passing in the new subject for the next regex match.  The method returns the matcher object itself, so that the method can be chained, like .  We can abuse this signature to create a  mapping.  Thus, the above could be rewritten as:\n\n\n\nThis may be thought of as a hack, saving the construction of hundreds of thousands of temporary  objects, or the ultimate evil using side-effects in stream pipelines.  Premature optimization is the root of all evil, so only use this technique if it can be shown that this pipeline is actually worth optimizing.\n",
            "excerpt": "The solution by @Bohemian works fine, but the OP asked for an inline <span class=\"highlight\">RegEx</span> solution as well. &hellip; It is possible to reuse a Matcher object by calling the Matcher#reset(String) method, passing in the new subject for the next <span class=\"highlight\">regex</span> match. &hellip; ",
            "title": "Using Regex or StringTokenizer inline with Stream"
        },
        {
            "tags": [
                "python",
                "string",
                "list",
                "file",
                "string-concatenation"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 47858725,
            "is_answered": false,
            "question_id": 47858219,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1513539381,
            "creation_date": 1513539381,
            "body": "You don&#39;t need regex for a simple task like this, you were actually on the right track but you got yourself tangled up in trying to parse everything instead of just streaming the file and deciding where to cut.\n\nBased on your data, you want to cut on the line starting with  (denoting the author) and you want to cut that line from first comma onwards. Presumably, you also want to remove the empty lines, too. Thus, a simple stream modifier would look something like:\n\n\n\nAnd that&#39;s all there is to it. As long as there are no other new lines in the data it will produce exactly the result you want, i.e. for a  file containing:\n\n“The road to hell is paved with works-in-progress.”\n—Philip Roth, WD some other stuff here\n\n“The only thing necessary for the triumph of evil is for good men to do nothing.”\n—Edmund Burke, whatever there is\n\n“You know nothing John Snow.”\n—The wildling Ygritte, &quot;A Dance With Dragons&quot; - George R.R. Martin\n\nIt will produce a  file containing:\n\n“The road to hell is paved with works-in-progress.” —Philip Roth\n“The only thing necessary for the triumph of evil is for good men to do nothing.” —Edmund Burke\n“You know nothing John Snow.” —The wildling Ygritte\n",
            "excerpt": "You don&#39;t need <span class=\"highlight\">regex</span> for a simple task like this, you were actually on the right track but you got yourself tangled up in trying to parse everything instead of just streaming the file <span class=\"highlight\">and</span> deciding where &hellip; it immediately\n\n\n<span class=\"highlight\">And</span> that&#39;s all there is to it. &hellip; ",
            "title": "Open a file, reformat, and write to a new file in Python 3"
        },
        {
            "tags": [
                "regex",
                "arrays",
                "bash"
            ],
            "question_score": 41,
            "is_accepted": false,
            "answer_id": 30971572,
            "is_answered": false,
            "question_id": 20366609,
            "item_type": "answer",
            "score": 25,
            "last_activity_date": 1508088432,
            "creation_date": 1434942120,
            "body": "Bash brace expansion don&#39;t use regexes. The pattern used is just some shell glob, which you can find in bash manual 3.5.8.1 Pattern Matching.\n\nYour two-step solution is cool, but it needs some quotes for whitespace safety:\n\n\n\nYou can also do it in some evil way:\n\n\n",
            "excerpt": "Your two-step solution is cool, but it needs some quotes for whitespace safety:\n\nARR_PRE=(&quot;${ARRAY[@]/#/prefix_}&quot;)\necho &quot;${ARR_PRE[@]/%/_suffix}&quot;\n\n\nYou can also do it in some <span class=\"highlight\">evil</span> way:\n\neval &quot;something &hellip; ",
            "title": "Prefix and postfix elements of a bash array"
        },
        {
            "tags": [
                "python",
                "regex",
                "parsing"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 46513287,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1506870335,
            "creation_date": 1506867554,
            "body": "I have a text which format resemble this sample : \n\n\n  PAUL: Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo &gt;ligula eget dolor. \n  \n  LEONARD: Aenean massa. Cum sociis natoque penatibus et magnis dis parturient &gt;montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque &gt;eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, &gt;fringilla vel, aliquet nec, vulputate eget, arcu. \n  \n  EVIL NINJA [on the roof]: In enim justo, rhoncus ut, imperdiet a, venenatis &gt;vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. &gt;Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. &gt;Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. \n  \n  PAUL [SCREAMING]: Aliquam lorem ante, dapibus in, viverra quis, feugiat a, &gt;tellus. \n\n\nAnd a regular expression to parse the transcripts into dialogs. \n\n\n\nI am trying to capture all the locutors so that the regular expression matches \n\n\n\nAs you can see here I have not been able to capture all of the locutors. \n\n\n  EVIL NINJA [on the roof]:\n\n\nHow can I capture the above as well ? Is regex even the right way to go for this ? \n\nEdit : All the speakers name are in caps, and ends with a colon. This is the format in which all of the transcripts i&#39;m dealing with is.\n",
            "excerpt": "<span class=\"highlight\">And</span> a regular expression to parse the transcripts into dialogs. &hellip; <span class=\"highlight\">EVIL</span> NINJA [on the roof]:\n\n\nHow can I capture the above as well ? Is <span class=\"highlight\">regex</span> even the right way to go for this ? \n\nEdit : All the speakers name are in caps, <span class=\"highlight\">and</span> ends with a colon. &hellip; ",
            "title": "Parsing transcripts with regular expression"
        },
        {
            "tags": [
                "python",
                "regex",
                "parsing"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 46513364,
            "is_answered": false,
            "question_id": 46513287,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1506868091,
            "creation_date": 1506868091,
            "body": "The problem with your regex is that it doesn&#39;t allow any whitespace, so it doesn&#39;t match &quot;EVIL NINJA&quot; or &quot;on the roof&quot;.\n\nBut yes, regex is absolutely the right way to do this. You can try this:\n\n\n\nUsage:\n\n\n\nOutput:\n\n\n",
            "excerpt": "The problem with your <span class=\"highlight\">regex</span> is that it doesn&#39;t allow any whitespace, so it doesn&#39;t match &quot;<span class=\"highlight\">EVIL</span> NINJA&quot; or &quot;on the roof&quot;.\n\nBut yes, <span class=\"highlight\">regex</span> is absolutely the right way to do this. &hellip; : <span class=\"highlight\">EVIL</span> NINJA\ncontext: on the roof\n\nperson: PAUL\ncontext: SCREAMING &hellip; ",
            "title": "Parsing transcripts with regular expression"
        },
        {
            "tags": [
                "python",
                "regex",
                "string"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 46430751,
            "is_answered": false,
            "question_id": 46417454,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1506440634,
            "creation_date": 1506440634,
            "body": " Non-regex alternative \n\nI know you tagged regex, but these kinds of problems are not well-suited to regular expressions.  There are many tricky edge cases, and the failure mode for edge cases is often returning incorrect results, when you would prefer an exception raised instead.  \n\nYou have to choose the lesser of two evils: a simple regex which misbehaves on weird inputs, or a monster regex which is incomprehensible to everyone except the regex engine itself.  \n\nIt&#39;s often easier just by writing a little parser that keeps track of whether you&#39;re enclosed in parens or not.  That&#39;s simple to write, and simple to maintain.  \n\nHere&#39;s a parser based solution and a barrage of tests that might trip up any regex based approach.  This will also detect when the problem is poorly constrained (unbalanced parens), and raise if necessary.  \n\n\n",
            "excerpt": "Non-<span class=\"highlight\">regex</span> alternative \n\nI know you tagged <span class=\"highlight\">regex</span>, but these kinds of problems are not well-suited to regular expressions. &hellip; That&#39;s simple to write, <span class=\"highlight\">and</span> simple to maintain.  \n\nHere&#39;s a parser based solution <span class=\"highlight\">and</span> a barrage of tests that might trip up any <span class=\"highlight\">regex</span> based approach. &hellip; ",
            "title": "How to split a string has &#39;A/B/C(D/E)&#39; format?"
        },
        {
            "tags": [
                "regex",
                "security",
                "go",
                "glob"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 38689161,
            "is_answered": false,
            "question_id": 38393367,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1506287357,
            "creation_date": 1470006889,
            "body": "By &quot;evil regex&quot; I assume you mean a regex that falls victim to catastrophic backtracking.\n\nFrom what you&#39;re describing, it seems like you&#39;re using a glob library to avoid these &quot;evil regexes&quot;. Globs are essentially a weaker version of regex.\n\nThe thing that you&#39;re missing here is the fact that regexes don&#39;t have to be evil. This can be proven in plain Go, with no external libraries.\n\nTry running this Go program:\n\n\n\nYou might wonder why this code doesn&#39;t measure how much time execution took. It&#39;s because it&#39;s not needed (and also because I don&#39;t know much Go).\n\nThe regex will work in almost all regex flavors. You can try running it in Java, Perl or another similar flavor (I like using PCRE on https://regex101.com/#pcre), but the outcome will be one of two things:\n\n\nA timeout\nYou get fed up with how long it&#39;s taking and stop the program\n\n\nYes, that combination causes catastrophic backtracking in most regex flavors. But not Go. Why?\n\nGo doesn&#39;t use backtracking at all for its regexes, so it&#39;s not even a possibility. According to this site:\n\n\n  In Go, we find an optimized regular expression engine. This runs in linear time, making complex patterns faster. It is located in the regexp package.\n\n\nRead more about the differences between backtracking and non-backtracking engines here.\n\n\n\nConsidering the glob library (according to that GitHub link) appears faster than Go&#39;s regexps, performance shouldn&#39;t be a problem.\n",
            "excerpt": "By &quot;<span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>&quot; I assume you mean a <span class=\"highlight\">regex</span> that falls victim to catastrophic backtracking.\n\nFrom what you&#39;re describing, it seems like you&#39;re using a glob library to avoid these &quot;<span class=\"highlight\">evil</span> regexes&quot;. &hellip; It&#39;s because it&#39;s not needed (<span class=\"highlight\">and</span> also because I don&#39;t know much Go).\n\nThe <span class=\"highlight\">regex</span> will work in almost all <span class=\"highlight\">regex</span> flavors. &hellip; ",
            "title": "Are there evil globs?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "character-class"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 46394020,
            "is_answered": false,
            "question_id": 46393875,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1506282616,
            "creation_date": 1506281438,
            "body": "This should match exactly what you&#39;re looking for. When parsing using this on a non-global level for each line - it will parse off the parenthesis. \n\n\n\nSee below...\n\n\n",
            "excerpt": "var s = &#39;Lorem Ipsum comes from sections 1.10.32 <span class=\"highlight\">and</span> 1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>) by Cicero, written in 45 BC. This should also match () <span class=\"highlight\">and</span> ( ).&#39; &hellip; :\\))/g)\n)\n\n//CONSOLE OUTPUT\n(3) [&quot;(The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>)&quot;, &quot;()&quot;, &quot;( )&quot;]\n0: &quot;(The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>)&quot;\n1: &quot;()&quot;\n2: &quot;( )&quot;\nlength: 3 &hellip; ",
            "title": "Match the parentheses with or without a text in it - Regex"
        },
        {
            "tags": [
                "vba",
                "excel",
                "parsing",
                "vbe"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 45745199,
            "is_answered": false,
            "question_id": 45743203,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1503005590,
            "creation_date": 1503005265,
            "body": "As @MatsMug says, parsing VBA with Regex is hard impossible, but line-numbers are a simpler case, and should be findable with regex alone.\n\nFortunately, line numbers can only appear within a procedure body (including before the  statement), so we know they&#39;ll never be the first line of your code.\n\nUnfortunately, you can prefix a line-label with 0 or more line continuations:\n\n\n\nFurthermore, a line number isn&#39;t always followed by a space - it can be followed by an instruction separator, giving the line-number the appearance of a line-label:\n\n\n\nAnd if you&#39;re code is evil, you might encounter a negative line-number (entered by using hex notation - which VBE dutifully pretty prints back to the code-pane with a leading space and a negative number):\n\n\n\nAnd we also need to be able to identify numbers that appear on a continued line, that aren&#39;t line-numbers:\n\n\n\nSo, here&#39;s some evil line-numbering, with a mix of all of those edge-cases:\n\n\n\nAnd here&#39;s some regex that identifies the line-numbers:\n\n\n\nAnd here&#39;s a syntax highlight from regex101:\n\n\n",
            "excerpt": "As @MatsMug says, parsing VBA with <span class=\"highlight\">Regex</span> is hard impossible, but line-numbers are a simpler case, <span class=\"highlight\">and</span> should be findable with <span class=\"highlight\">regex</span> alone. &hellip; &quot;-1&quot; line number is achieved by entering &quot;&amp;HFFFFFFFF&quot;\n\nDebug.Print _\n2 &amp; &quot;is not a line-number&quot;\n\n60 End Sub\n\n\n<span class=\"highlight\">And</span> here&#39;s some <span class=\"highlight\">regex</span> that identifies the line-numbers:\n\n(? &hellip; ",
            "title": "VBA - Find all numbered lines in VBE Modules via pattern search"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "regex-negation"
            ],
            "question_score": 5,
            "is_accepted": true,
            "answer_id": 45502614,
            "is_answered": false,
            "question_id": 45501997,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1501863431,
            "creation_date": 1501837505,
            "body": "You can use String match for that\n\nThe regex below simply matches anything that&#39;s not a mustach, optionally surrounded by mustaches.\n\nExample snippet:\n\n\r\n\r\n\r\n\r\n\r\n\n\nBut to make it more precise, the regex pattern becomes a bit more complicated.\nThe regex below matches: \n\n\n&quot;what you want&quot;\n (a word between 2 mustaches on each side)\nOR &quot;what you don&#39;t want followed by what you want&quot;\n(using lazy matching and positive lookahead)\nOR &quot;what remains&quot;\n\n\n\r\n\r\n\r\n\r\n\r\n\n\nAnd last but not least, the evil SM method.\nSplit AND Match on the same regex. And concatinate them into a single array.\nThe downside of this method is that the order is not preserved.\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "The <span class=\"highlight\">regex</span> below matches: \n\n\n&quot;what you want&quot;\n (a word between 2 mustaches on each side)\nOR &quot;what you don&#39;t want followed by what you want&quot;\n(using lazy matching <span class=\"highlight\">and</span> positive lookahead)\nOR &quot;what remains&quot; &hellip; +/g;\r\n\r\nvar array = str.match(pattern);\r\n\r\nconsole.log(str);\r\nconsole.log(pattern);\r\nconsole.log(array);\r\n\r\n\r\n\n\n<span class=\"highlight\">And</span> last but not least, the <span class=\"highlight\">evil</span> SM method.\nSplit <span class=\"highlight\">AND</span> Match on the same <span class=\"highlight\">regex</span>. &hellip; ",
            "title": "Splitting string into matching and non-matching groups in javascript"
        },
        {
            "tags": [
                "javascript",
                "arrays",
                "string"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 44847982,
            "is_answered": false,
            "question_id": 44847727,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1498992513,
            "creation_date": 1498830180,
            "body": "Solution without eval, which is evil, using regex with group:\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "Solution without eval, which is <span class=\"highlight\">evil</span>, using <span class=\"highlight\">regex</span> with group:\n\n\r\n\r\nvar datastatusMonthly = [3];\r\n\r\nvar text = &#39;datastatusMonthly[0]&#39;;\r\nvar <span class=\"highlight\">regex</span> = /(datastatusMonthly)\\[([0-9]+)\\]/g;\r\nvar match = regex.exec &hellip; ",
            "title": "convert String to array in javascript &quot;datastatusMonthly[0]&quot;"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 116,
            "is_accepted": false,
            "answer_id": 44585641,
            "is_answered": false,
            "question_id": 12841970,
            "item_type": "answer",
            "score": 16,
            "last_activity_date": 1497605177,
            "creation_date": 1497605177,
            "body": "What you call an &quot;evil&quot; regex is a regex that exhibits catastrophic backtracking.  The linked page (which I wrote) explains the concept in detail.  Basically, catastrophic backtracking happens when a regex fails to match and different permutations of the same regex can find a partial match.  The regex engine then tries all those permutations.  If you want to go over your code and inspect your regexes these are the 3 key issues to look at:\n\n\nAlternatives must be mutually exclusive.  If multiple alternatives can match the same text then the engine will try both if the remainder of the regex fails.  If the alternatives are in a group that is repeated, you have catastrophic backtracking.  A classic example is  to match any amount of any text when the regex flavor does not have a &quot;dot matches line breaks&quot; mode.  If this is part of a longer regex then a subject string with a sufficiently long run of spaces (matched by both  and ) will break the regex.  The fix is to use  to make the alternatives mutually exclusive or even better to be more specific about which characters are really allowed, such as  for ASCII printables, tabs, and line breaks.\nQuantified tokens that are in sequence must either be mutually exclusive with each other or be mutually exclusive what comes between them.  Otherwise both can match the same text and all combinations of the two quantifiers will be tried when the remainder of the regex fails to match.  A classic example is  to match 3 things with &quot;anything&quot; between them. When  can&#39;t be matched the first  will expand character by character until the end of the line or file.  For each expansion the second  will expand character by character to match the remainder of the line or file.  The fix is to realize that you can&#39;t have &quot;anything&quot; between them.  The first run needs to stop at  and the second run needs to stop at .  With single characters  is an easy solution.  Since we now stop at the delimiter, we can use possessive quantifiers to further increase performance.\nA group that contains a token with a quantifier must not have a quantifier of its own unless the quantified token inside the group can only be matched with something else that is mutually exclusive with it.  That ensures that there is no way that fewer iterations of the outer quantifier with more iterations of the inner quantifier can match the same text as more iterations of the outer quantifier with fewer iterations of the inner quantifier.  This is the problem illustrated in JDB&#39;s answer.\n\n\nWhile I was writing my answer I decided that this merited a full article on my website.  This is now online too.\n",
            "excerpt": "What you call an &quot;<span class=\"highlight\">evil</span>&quot; <span class=\"highlight\">regex</span> is a <span class=\"highlight\">regex</span> that exhibits catastrophic backtracking.  The linked page (which I wrote) explains the concept in detail. &hellip; Basically, catastrophic backtracking happens when a <span class=\"highlight\">regex</span> fails to match <span class=\"highlight\">and</span> different permutations of the same <span class=\"highlight\">regex</span> can find a partial match.  The <span class=\"highlight\">regex</span> engine then tries all those permutations. &hellip; ",
            "title": "How can I recognize an evil regex?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "camelcasing"
            ],
            "question_score": 291,
            "is_accepted": false,
            "answer_id": 43889080,
            "is_answered": false,
            "question_id": 2970525,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1494410090,
            "creation_date": 1494410090,
            "body": "Upper camel case (&quot;TestString&quot;) to lower camel case (&quot;testString&quot;) without using regex (let&#39;s face it, regex is evil):\n\n\n",
            "excerpt": "Upper camel case (&quot;TestString&quot;) to lower camel case (&quot;testString&quot;) without using <span class=\"highlight\">regex</span> (let&#39;s face it, <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span>):\n\n&#39;TestString&#39;.split(&#39;&#39;).reduce((t, v, k) =&gt; t + (k === 0 ? &hellip; ",
            "title": "Converting any string into camel case"
        },
        {
            "tags": [
                "c++",
                "boost",
                "boost-spirit",
                "boost-phoenix",
                "boost-spirit-lex"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 43102309,
            "is_answered": false,
            "question_id": 43100216,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1490867055,
            "creation_date": 1490815023,
            "body": "I&#39;m going to chant the oft-heard &quot;Why&quot;?\n\nThis time, for good reason.\n\nIn general, avoid semantic actions: Boost Spirit: &quot;Semantic actions are evil&quot;?. \n\nPhoenix Actors are needlessly more complex than the dedicated functor. They have a sweet point (mainly simple assignment or builtin operations). But if the actor is any kind of non-trivial you&#39;ll see the complexity ramp up quickly, not just for the human but also for the compiler. This leads to\n\n\nslow compilation\nsub-optimal emitted code\nharder to maintain source\nnew classes of error (e.g. when the expression templates hold references to locals/temporaries, something that Boost Proto (and hence Phoenix) does not prevent or signal. In fact, it encourages it by assuming all template expressions are ephemeral, but I digress).\n\n\n\n  Interestingly: Spirit X3 dropped Phoenix altogether, even though Phoenix was once the brain child of Spirit&#179;.\n  \n  The new style uses c++14 polymorphic lambdas, that look 90% like the helper function object in the original code, but inline as a lambda.\n\n\nThis specific case\n\nCan&#39;t work. At all.\n\nThe problem is that you&#39;re mixing lazy/deferred actors with direct invocations. That can never work. The type of  isn&#39;t supposed to be . Of course. It is supposed to be a lazy actor&#185; that can be used at some later time to create a . \n\nNow that we know that (and why)  is an actor type, it should become clear why it is completely bogus to call  on it. You might as well say\n\n\n\nAnd wonder why it would not compile.\n\nSummary:\n\nYou should probably just have the dedicated functor. You can of course Phoenix-adapt the regex functions you require, but all it does is shift the complexity tax for some syntactic sugar.\n\nI&#39;d always opt for the more naive approach that is going to be more understandable to a seasoned c++ programmer, and avoids pitfalls that come with high-wire acts&#178;.\n\nNevertheless, here&#39;s a pointer should you be curious:\n\nhttp://www.boost.org/doc/libs/1_63_0/libs/phoenix/doc/html/phoenix/modules/function.html\n\nLive On Coliru\n\n\n\n\n\n&#185; think composed function object that can be invoked at a later time\n\n&#178; the balance might tip if you were designing this as an EDSL for further configuration by non-experts, but then you will have the added responsibility of documenting your EDSL and the constraints in which it can be used\n\n&#179; should we say, spirit-child of a brain?\n",
            "excerpt": "In general, avoid semantic actions: Boost Spirit: &quot;Semantic actions are <span class=\"highlight\">evil</span>&quot;?. \n\nPhoenix Actors are needlessly more complex than the dedicated functor. &hellip; You can of course Phoenix-adapt the <span class=\"highlight\">regex</span> functions you require, but all it does is shift the complexity tax for some syntactic sugar. &hellip; ",
            "title": "Converting a Boost Spirit Lex semantic action to Phoenix - How to access _val?"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 132,
            "is_accepted": false,
            "answer_id": 42824600,
            "is_answered": false,
            "question_id": 22115,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1489633848,
            "creation_date": 1489633848,
            "body": "If you want to generate &quot;critical&quot; strings, you may want to consider:\n\nEGRET http://elarson.pythonanywhere.com/\nthat generates &quot;evil&quot; strings covering your regular expressions\n\nMUTREX http://cs.unibg.it/mutrex/\nthat generates fault-detecting strings by regex mutation\n\nBoth are academic tools (I am one of the authors of the latter) and work reasonably well.\n",
            "excerpt": "If you want to generate &quot;critical&quot; strings, you may want to consider:\n\nEGRET http://elarson.pythonanywhere.com/\nthat generates &quot;<span class=\"highlight\">evil</span>&quot; strings covering your regular expressions\n\nMUTREX http://cs.unibg.it &hellip; /mutrex/\nthat generates fault-detecting strings by <span class=\"highlight\">regex</span> mutation\n\nBoth are academic tools (I am one of the authors of the latter) <span class=\"highlight\">and</span> work reasonably well. &hellip; ",
            "title": "Using Regex to generate Strings rather than match them"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "angular",
                "ionic2"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 42090266,
            "is_answered": false,
            "question_id": 42088669,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1486471544,
            "creation_date": 1486471544,
            "body": "Regex is an evil beast. Luckily I found this nice little example on regexlib.com\n\nThis seems to be kind-of what you&#39;re looking for. As for why Angular isn&#39;t matching your whitespace, it may potentially be that you have to double-escape your whitespace selector, so  it would look like:\n\n\n\nBut that&#39;s just a guess.\n",
            "excerpt": "<span class=\"highlight\">Regex</span> is an <span class=\"highlight\">evil</span> beast. Luckily I found this nice little example on regexlib.com\n\nThis seems to be kind-of what you&#39;re looking for. &hellip; ",
            "title": "Ionic 2 : Form validator (regex)"
        },
        {
            "tags": [
                "php",
                "arrays",
                "preg-match",
                "strpos",
                "preg-split"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 41905431,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1485566009,
            "creation_date": 1485566009,
            "body": "I’m trying to convert a formula like;\n\n\n\nInto a multi dimensional array structured as such\n\n\n\nSo as it can be processed via a function similar to;\n\n\n\n(doCalculation simply processes the 2 values passed to it with the defined function)\n\nThe formula can have any level of complexity and the key to structuring the array is with position of the brackets (items in brackets are contained in calc)\n\ne.g\n\n100 *((1 + 21) * ((2 * 10) + 90))\n\nwould become;\n\n\narray\n\n\nval: 100\n\narray\n\n\nfunc: *\ncalc\n\n\narray\n\n\ncalc\n\n\narray\n\n\nval:1\n\narray\n\n\nfunc: +\nval: 21\n\n\n\narray\n\n\nfunc: *\ncalc\n\n\narray\n\n\ncalc\n\n\narray\n\n\nval: 2\n\narray\n\n\nfunc: *\nval: 10\n\n\n\narray\n\n\nfunc: +\nval: 90\n\n\n\n\n\n\n\nThe reason for this approach is it gives the script complete control over what functions can be passed, so as advanced custom functions can be used and to avoid the use of eval() which should in all fairness be spelt evil().\n\nThe issue here is also simplified slighly as in the actual application it uses field references rather than actual values.\n\nThe issue I am having is with creating the array with the correct structure.\n\nHow could i convert an equation such as 100 *((1 + 21) * ((2 * 10) + 90)) into a php array in the format above.\n\nSomething like (below) is the best i&#39;ve come up with so far, but it won&#39;t work on more complex functions.\n\n\n\nI&#39;m sure that my current approach is wrong.... the answer is likely with looping through the string and using preg_split to split on each bracket or potentially using a regex... but so far i&#39;ve just been hitting brick walls.\n\nAny help would be greatly appreciated.\n",
            "excerpt": "to avoid the use of eval() which should in all fairness be spelt <span class=\"highlight\">evil</span>(). &hellip; using preg_split to split on each bracket or potentially using a <span class=\"highlight\">regex</span>... but so far i&#39;ve just been hitting brick walls. &hellip; ",
            "title": "PHP: Convert a string containing a mathematical formula into a multi dimensional array so is it can be calculated programatically without using eval()"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 41409711,
            "is_answered": false,
            "question_id": 41409588,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1483199961,
            "creation_date": 1483198866,
            "body": "I was about to propose something very basic with regular expressions but I found this here:\n\nhttps://stackoverflow.com/a/7131156/6219628\n\nAfter reading more of the docs, I didn&#39;t found anything to ignore specific tags with just htmlspecialchars(), which doesn&#39;t sound surprising.\n\nEDIT: And since using regex to parse html seems to be evil, you may eventually appreciate reading this bulky answer :)\nhttps://stackoverflow.com/a/1732454/6219628\n",
            "excerpt": "EDIT: <span class=\"highlight\">And</span> since using <span class=\"highlight\">regex</span> to parse html seems to be <span class=\"highlight\">evil</span>, you may eventually appreciate reading this bulky answer :)\nhttps://stackoverflow.com/a/1732454/6219628 &hellip; ",
            "title": "how to escape only &lt;script&gt; tag using htmlspecialchars() in php"
        },
        {
            "tags": [
                "c++"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 38492825,
            "is_answered": false,
            "question_id": 38487653,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1478273397,
            "creation_date": 1469060115,
            "body": "I can&#39;t explain this in a comment. Please don&#39;t judge this too harshly:\n\n\n\nThis will catch and correctly handle MOST cases. What it can&#39;t deal with is:\n\nStuff like \n\n\n\nComments\n\n\n\nString literals\n\n\n\n[expletive deleted] macros\n\n\n\nAnd really odd stuff like\n\n\n\nTo do this right, you need a non-trivial state machine that can detect and eliminate the above failure cases.\n",
            "excerpt": "<span class=\"highlight\">Regex</span> is not\n           ^ finds a cin right here <span class=\"highlight\">and</span> starts reversing &lt;&lt;\n\n\nComments\n\n/* cout &gt;&gt; hah ha ha Sucker!!!; */\n\n\nString literals\n\nstd::string fail = &quot;cout &gt;&gt; Got you again!!!&quot; &hellip; ;\n\n\n[expletive deleted] macros\n\n#define <span class=\"highlight\">evil</span> cout &gt;\\\n&gt; &quot;Gotcha!!!&quot;;\n\n\n<span class=\"highlight\">And</span> really odd stuff like\n\ncout &lt;&lt; vector&lt;vector&lt;int&gt;&gt;(42)[0];\n                         ^ Muhuhahahahahaha!!! &hellip; ",
            "title": "A program that will correct a C++ program that has errors in the operator"
        },
        {
            "tags": [
                "python",
                "regex",
                "loops",
                "freeze"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 39992585,
            "is_answered": false,
            "question_id": 39990657,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1476256383,
            "creation_date": 1476256383,
            "body": "Note that by itself, a  pattern will not cause the catastrophic backtracking, it will only be &quot;evil&quot; inside a longer expression and especially when it is placed next to the start of the pattern since in case subsequent subpatterns fail the engine backtracks to this one, and as the 1+ quantifier inside is again quantified with , that creates a huge amount of possible variations to try before failing. You may have a look at your regex demo and click the regex debugger on the left to see example regex engine behavior.\n\nThe current regex can be written as \n\n\n\nSee the regex demo where there will be a match if you remove space and  in the second field.\n\nDetails:\n\n\n - start of string (not necessary with )\n - (Group 1) 1+ letters/digits/underscores\n - a whitespace\n - 3 pipe symbols\n - see above ( creates Group 2)\n - (Group 3) any 0+ characters other than linebreak characters.\n\n",
            "excerpt": "Note that by itself, a r&#39;(\\w+)+&#39; pattern will not cause the catastrophic backtracking, it will only be &quot;<span class=\"highlight\">evil</span>&quot; inside a longer expression <span class=\"highlight\">and</span> especially when it is placed next to the start of the pattern &hellip; You may have a look at your <span class=\"highlight\">regex</span> demo <span class=\"highlight\">and</span> click the <span class=\"highlight\">regex</span> debugger on the left to see example <span class=\"highlight\">regex</span> engine behavior. &hellip; ",
            "title": "Regex match (\\w+) to capture single words delimited by |||"
        },
        {
            "tags": [
                "c#",
                "c++",
                "regex",
                "string",
                "scanf"
            ],
            "question_score": -2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 39836420,
            "item_type": "question",
            "score": -2,
            "last_activity_date": 1475515682,
            "creation_date": 1475512899,
            "body": "I have to write an equivalent of this in C++ in C#,\n\n\n\nwhere the  method trims and removes all spaces in .\n\nI have looked around here on SO and most of the similar questions involves strings that contain delimiters such as spaces or commas, but don&#39;t apply to this case. So I turned to RegEx.\n\nSo far, I have this,\n\n\n\nIt works so far, but I was wondering if there is another way to do this? I a bit wary of RegEx, because according the accepted answer on this question, having  instead of  is potentially dangerous because of evil RegEx. But if I include those extra parenthesis, then I have an extra group. This causes  to split something like  into an array with the elements,\n\n\n\nThis way, I can&#39;t be sure that the unit,  in this case, will be in , which is a problem.\n\nI tested this on this .NET RegEx tester. I also tried to break my RegEx pattern, , but it seems to be fine and &quot;evil RegEx safe&quot;. So I&#39;m not sure if I should stick to what I&#39;ve done so far, or find a more elegant solution, if one exist.\n",
            "excerpt": "I a bit wary of <span class=\"highlight\">RegEx</span>, because according the accepted answer on this question, having ([-]?\\d*\\.?\\d+) instead of ([-]?(\\d*\\.)?\\d+) is potentially dangerous because of <span class=\"highlight\">evil</span> <span class=\"highlight\">RegEx</span>. &hellip; I tested this on this .NET <span class=\"highlight\">RegEx</span> tester. I also tried to break my <span class=\"highlight\">RegEx</span> pattern, ([-]?\\d*\\.?\\d+), but it seems to be fine <span class=\"highlight\">and</span> &quot;<span class=\"highlight\">evil</span> <span class=\"highlight\">RegEx</span> safe&quot;. &hellip; ",
            "title": "Separating number and unit in a string in C#"
        },
        {
            "tags": [
                "javascript",
                "html",
                "tags",
                "strip",
                "trim"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 5,
            "is_answered": false,
            "question_id": 39406901,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1473786733,
            "creation_date": 1473408887,
            "body": "I would like to trimm text from html tags, and paste result to these tags again. It&#39;s not DOM content, only string.\n\n\n\nWanted result is f.e.:\n\n\n\nI found library striptags, but it only gets rid off tags, but I want to keep them.\n\nIf you have any solution please let me know :)\n\nUPDATE:\n\nThanks all of you for advices. There are few things to add from me: 1. I never have information about html tags, because it came from quill text editor, and I need some kind of regex. 2. In my job there is no jQuery, it&#39;s kind of &#39;evil&#39; :P. 3. I&#39;m using react, so any use of &#39;document&#39; or &#39;window&#39; is unwanted here :(.\n",
            "excerpt": "I would like to trimm text from html tags, <span class=\"highlight\">and</span> paste result to these tags again. It&#39;s not DOM content, only string. &hellip; I never have information about html tags, because it came from quill text editor, <span class=\"highlight\">and</span> I need some kind of <span class=\"highlight\">regex</span>. 2. In my job there is no jQuery, it&#39;s kind of &#39;<span class=\"highlight\">evil</span>&#39; :P. 3. &hellip; ",
            "title": "How to get text from tags, trimm, and paste to tags again in javascript"
        },
        {
            "tags": [
                "regex",
                "perl",
                "regex-greedy"
            ],
            "question_score": 56,
            "is_accepted": true,
            "answer_id": 38495156,
            "is_answered": false,
            "question_id": 38431931,
            "item_type": "answer",
            "score": 20,
            "last_activity_date": 1472093973,
            "creation_date": 1469076879,
            "body": "When there is a &quot;plus&quot; node (e.g. ) at the beginning of a pattern and the node fails to match, the regex engine skips forward to the point of failure and tries again; with , on the other hand, the engine only advances one character at a time.\nYves Orton explains this optimization nicely here:\n\nThe start class optimisation has two modes, &quot;try every valid start position&quot; (doevery) and &quot;flip flop mode&quot; (!doevery) where it trys only the first valid start position in a sequence.\nConsider /(\\d+)X/ and the string &quot;123456Y&quot;, now we know that if we fail to match X after matching &quot;123456&quot; then we will also fail to match after &quot;23456&quot; (assuming no evil tricks are in place, which disable the optimisation anyway), so we know we can skip forward until the check /fails/ and only then start looking for a real match. This is flip-flop mode.\n\n triggers flip-flop mode; , , and  don&#39;t.\nThis optimization can&#39;t be applied to &quot;star&quot; nodes like  because they can match zero characters, so a failure at one point in a sequence isn&#39;t indicative of failure later in the same sequence.\n\nYou can see this in the debug output for each regex. I&#39;ve highlighted the skipped characters with . Compare this (skips four characters at a time):\n\nto this (skips one or two characters at a time):\n\nNote that the optimization isn&#39;t applied to , because  isn&#39;t at the beginning of the pattern. Both  (logically equivalent to ) and  (logically equivalent to ) probably could be optimized, though; it might make sense to ask on perl5-porters whether either would be worth the effort.\n\nIn case you&#39;re interested, &quot;flip-flop mode&quot; is enabled by setting the  flag on a regex when it&#39;s compiled. See the code around lines 7344 and 7405 in regcomp.c and line 1585 in regexec.c in the 5.24.0 source.\n",
            "excerpt": "\\s+) at the beginning of a pattern <span class=\"highlight\">and</span> the node fails to match, the <span class=\"highlight\">regex</span> engine skips forward to the point of failure <span class=\"highlight\">and</span> tries again; with \\s*, on the other hand, the engine only advances one character &hellip; Consider /(\\d+)X/ <span class=\"highlight\">and</span> the string &quot;123456Y&quot;, now we know that if we fail to match X after matching &quot;123456&quot; then we will also fail to match after &quot;23456&quot; (assuming no <span class=\"highlight\">evil</span> tricks are in place, which disable &hellip; ",
            "title": "Why is `\\s+` so much faster than `\\s\\s*` in this Perl regex?"
        },
        {
            "tags": [
                "regex",
                "string"
            ],
            "question_score": -2,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 36092225,
            "item_type": "question",
            "score": -2,
            "last_activity_date": 1471643318,
            "creation_date": 1458327079,
            "body": "For example, look at this email validating regex:\n. If you look carefully, there are three parts: stuff, the  character, and more stuff. So the regex requires an email address to have an , thus the string  will not match.\n\nYet most regex engines will catastrophically backtrack given this combination. (PCRE, which powers Regex101, is smarter than most, but other regex/string combinations can cause catastrophic backtracking.)\n\nWithout needing to know much about Big O, I can tell that combinatorial things are exponential, while searching is linear. So why don&#39;t regex engines ensure the string contains required characters (so they can quit early)?\n\nUnfortunately, most of what I&#39;ve read about catastrophic backtracking puts the blame on the regex writer for writing evil regexes, instead of exploring the possibility that regex engines/compilers need to do better. Although I found several sources that look at regex engines/compilers, they are too technical.\n\n\n\nComing back after getting more experience, I know that regexes are declarative, meaning the execution plan is determined by the computer, not the programmer. Optimization is one of the ways that regex engines differ the most.\n\nWhile PCRE and Perl have challenged the declarative status-quo with the introduction of backtracking control verbs, it is other engines, without the verbs, which are most likely to catastrophically backtrack.\n",
            "excerpt": "If you look carefully, there are three parts: stuff, the @ character, <span class=\"highlight\">and</span> more stuff. So the <span class=\"highlight\">regex</span> requires an email address to have an @, thus the string aaaaaaaaaaaaaaaaaaaaaa! will not match. &hellip; Unfortunately, most of what I&#39;ve read about catastrophic backtracking puts the blame on the <span class=\"highlight\">regex</span> writer for writing <span class=\"highlight\">evil</span> regexes, instead of exploring the possibility that <span class=\"highlight\">regex</span> engines/compilers need &hellip; ",
            "title": "Why don&#39;t regex engines ensure all required characters are in the string?"
        },
        {
            "tags": [
                "regex",
                "algorithm",
                "performance-testing",
                "analysis"
            ],
            "question_score": 10,
            "is_accepted": true,
            "answer_id": 38937338,
            "is_answered": false,
            "question_id": 38785589,
            "item_type": "answer",
            "score": 6,
            "last_activity_date": 1471196301,
            "creation_date": 1471125287,
            "body": "The worst input for a regular expression will vary from engine to engine. The same regex and string may take no time at all on one engine, but never finish on another.\n\nDifferences between engines\n\nEngine Type\n\nFor certain engines, the &quot;evilest&quot; regex is still benign, running in linear time (or  time when both the length of the regex and the length of the string may vary.) Of course, the reason for this is the implementation. These engines don&#39;t backtrack; instead they use a finite state machine (FSM).\n\nNote that some backtracking implementations use FSM, but only as an intermediate step. Don&#39;t let this confuse you; they&#39;re not FSM.\n\nMost of the old regex engines (like sed) use FSM matching. There are a few new engines that use this implementation, such as Go. PCRE even has DFA functions (search for &quot;DFA&quot; here) that use this type of matching.\n\nAnother answer of mine also addresses the potential speed difference between the two implementations.\n\nIt would be wise to consider using a FSM implementation if you are really worried about malicious input affecting the speed of your regex. Unfortunately, FSM is not as powerful as the other implementation; it lacks support for some features, such as back references.\n\nOptimizations\n\nEvil is actually a bit subjective. Something evil to one regex engine may not be evil to a different engine. An evil plot can be thwarted if the engine is optimized. Optimizations are particularly important to backtracking engines, given their potential exponential run time.\n\nShort-circuiting\n\nUnder certain conditions, the engine may be able to quickly determine a match is impossible. While running the regex  against the string , Regex101 says:\n\n\n  Your match failed outright. What this means is the engine, due to its internal optimizations, understood that your pattern would never match at any position, and thus did not even attempt to.\n\n\nKeep in mind that Wikipedia says the regex is evil, especially when paired with that string.\n\nOf course, the engine is smart to not need to backtrack to determine the match wouldn&#39;t work. It saw something pretty obvious: the regex needs an  in order to match, but no  was present in the string.\n\nModifiers\n\nI mention this because you might not expect modifiers to be a factor in regex performance. But they are.\n\nEven PCRE, one of the more optimized implementations, may take considerably more steps with both the  and  modifiers enabled. See my question here for more information about this. In the end, I figured out that only certain characters trigger this behavior.\n\nAnalyzing Strings\n\nString length\n\nIn general, a long string will be slower than a short string. In fact, if you find a string of length x that causes catastrophic backtracking, you can make it backtrack a bit more by increasing the length of the string.\n\nGreedy vs. Lazy\n\nCompare the speeds of these regexes:\n\n\n  on \n on \n  on \n on \n\n\nEssentially, greedy matching is best when you think you will need to match a lot. Lazy matching is best when you need to match only a little.\n\nNote that if you change the regex to  or , then the engine may optimize things considerably.\n\nBrute force testing\n\nThere are several frameworks that are specifically designed to try to find vulnerabilities in your regexes. It may be worthwhile to try one out.\n\nThere&#39;s really one thing that I will suggest if you wanted to try making your own algorithm. It&#39;s not practical to try all characters in the dictionary, especially if you want to test long strings.\n\nInstead, look at your regex to determine what characters you should test. If you have  as your regex, there are really only two things that go into the match:  and not . You could really just imagine that there are only two characters:  and  (aka not ) when you generate your strings to brute force with.\n\nSetting timeouts\n\nIt would be fantastic to be able to ensure your regex finishes before the heat death of the universe, right? Some regex engines do have a way to set a time out.\n\n.NET:\n\n\n\n\n\nJava\n\n\n\n\n\nPHP\n\n\n  \n  \n  Set the number of seconds a script is allowed to run. If this is reached, the script returns a fatal error. The default limit is 30 seconds or, if it exists, the  value defined in the .\n  \n  When called,  restarts the timeout counter from zero. In other words, if the timeout is the default 30 seconds, and 25 seconds into script execution a call such as  is made, the script will run for a total of 45 seconds before timing out.\n\n\nPerl\n\nYou might as well visit the link, since it&#39;s right on Stack Overflow.\n",
            "excerpt": "The same <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> string may take no time at all on one engine, but never finish on another. &hellip; Optimizations\n\n<span class=\"highlight\">Evil</span> is actually a bit subjective. Something <span class=\"highlight\">evil</span> to one <span class=\"highlight\">regex</span> engine may not be <span class=\"highlight\">evil</span> to a different engine. An <span class=\"highlight\">evil</span> plot can be thwarted if the engine is optimized. &hellip; ",
            "title": "Worst input for given regular expression"
        },
        {
            "tags": [
                "java",
                "arrays",
                "contains"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 38733306,
            "is_answered": false,
            "question_id": 38732972,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1470190638,
            "creation_date": 1470190638,
            "body": "A previous poster pointed out using &quot;boolean flags&quot; while iterating the String. This is okay if you&#39;re doing some microscopic performance optimizations, but I think it&#39;s a bit of an overoptimization compared to using some simpler methods like .\n\n\n\nIt&#39;s definitely not perfect, and there are attempts at regex validations for such things out there, but for a simple check it&#39;s more than sufficient.\n\nIf you really did want to do the string iteration only once, you could iterate . Though I&#39;d recommend just using direct char comparison over :\n\n\n\nIn short, &quot;premature optimization is the root of all evil&quot;. It&#39;s certainly fine to optimize but there are better, more modern methods like profiling of finding out why code is slow.\n",
            "excerpt": "email.contains(&#39; &#39;);\n}\n\n\nIt&#39;s definitely not perfect, <span class=\"highlight\">and</span> there are attempts at <span class=\"highlight\">regex</span> validations for such things out there, but for a simple check it&#39;s more than sufficient. &hellip; Though I&#39;d recommend just using direct char comparison over #compareTo:\n\nchar c = /* some char */;\nif (c == &#39;@&#39;) {\n    //etc\n}\n\n\nIn short, &quot;premature optimization is the root of all <span class=\"highlight\">evil</span>&quot;. &hellip; ",
            "title": "Search an array for missing information"
        },
        {
            "tags": [
                "php",
                "regex",
                "parsing",
                "text-parsing",
                "regex-lookarounds"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 38111480,
            "is_answered": false,
            "question_id": 38110833,
            "item_type": "answer",
            "score": 9,
            "last_activity_date": 1469880913,
            "creation_date": 1467241624,
            "body": "Update #2\nAccording to others comments\n\nNote: A short RegEx i.e.  is enough if you know your input does not contain  or  out of PHP syntax.\nSo a long RegEx, in what evil cases does it work?\n\nYou have  in a string between quotation marks \nYou have those quotation marks escaped inside one another\nYou have  in a comment block.  or  or \nYou have  in a heredoc or nowdoc  or \n\nOtherwise it is meant to have a pair of opening/closing braces and depth of nested braces is not important.\nDo we have a case that it fails?\nNo unless you have a martian that lives inside your codes.\n\nFormatting is done by @sln&#39;s RegexFormatter software.\nWhat I provided in live demo?\nLaravel&#39;s Eloquent Model.php file (~3500 lines) randomly is given as input. Check it out:\nLive demo\n",
            "excerpt": "1))*)})\n\nNote: A short <span class=\"highlight\">RegEx</span> i.e. {((?&gt;[^{}]++|(?R))*)} is enough if you know your input does not contain { or } out of PHP syntax.\nSo a long <span class=\"highlight\">RegEx</span>, in what <span class=\"highlight\">evil</span> cases does it work? &hellip; # heredocs <span class=\"highlight\">and</span> nowdocs\n                ( \\w+ )                      # (3) ^\n                [&quot;&#39;]? &hellip; ",
            "title": "Match the body of a function using Regex"
        },
        {
            "tags": [
                "apache",
                ".htaccess",
                "mod-rewrite",
                "nginx",
                "url-rewriting"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 38498106,
            "is_answered": false,
            "question_id": 38492378,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1469087287,
            "creation_date": 1469087287,
            "body": "Your  block accepts URIs that end with  (not including the query string). By adding a  after the  you are appending path info.\n\nUsing the documentation this should work for you:\n\n\n\nThe  regex has been changed to accept URIs with path info. The  directive has been replaced by an evil if, as the URI needs to be split first, before being tested for file existence.\n\nI like to place the  statement before any  statement to avoid the latter being silently overridden.\n",
            "excerpt": "fastcgi_params;\n    fastcgi_pass unix:/var/run/php5-fpm.sock;\n\n    fastcgi_index index.php;\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    fastcgi_param HTTP_PROXY &quot;&quot;;\n}\n\n\nThe location <span class=\"highlight\">regex</span> &hellip; The try_files directive has been replaced by an <span class=\"highlight\">evil</span> if, as the URI needs to be split first, before being tested for file existence. &hellip; ",
            "title": "nginx error 500 with slash in rewrite mechanism (import from apache)"
        },
        {
            "tags": [
                "jquery",
                "node.js",
                "cheerio"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 38492550,
            "is_answered": false,
            "question_id": 38491168,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1469058053,
            "creation_date": 1469058053,
            "body": "You&#39;d first need to obtain the raw content of the script tag (which you can do with cheerio), once you have the javascript inside the tag, you have options:\n\n\nSafe, but tightly coupled to the code structure: use regex to find the literal value: \n\n\n\r\n\r\n\r\n\r\n\r\n\n\n\nSafe and flexible, but more complicated (and performance costly). If the code is too complex to use a regex, and alternative approach is to obtain the AST of that js code, and then you&#39;d just traverse the AST to find the literal you&#39;re looking for, you can try Esprima online here to understand what the AST is and how it&#39;d look like: http://esprima.org/demo/parse.html\n\n\nFor the example you shared, the AST looks like this:\n\n\r\n\r\n\r\n\r\n\r\n\n\n\nUnsafe, nasty (see &quot;eval is evil&quot;), but fast and flexible:\n\n\n\r\n\r\n\r\n\r\n\r\n\n\nBig Warning, never use this eval approach if you don&#39;t have complete trust over the content of that script tag, you&#39;d be running that as part of your node.js app, creating a form of Script Injection vulnerability.\n",
            "excerpt": "If the code is too complex to use a <span class=\"highlight\">regex</span>, <span class=\"highlight\">and</span> alternative approach is to obtain the AST of that js code, <span class=\"highlight\">and</span> then you&#39;d just traverse the AST to find the literal you&#39;re looking for, you can try Esprima &hellip; &quot;sourceType&quot;: &quot;script&quot;\r\n}\r\n\r\n// you can use something smarter to look for &quot;Test&quot; variable declaration here\r\nvar value = ast.body[0].declarations[0].init.value;\r\n\r\n\r\n\n\n\nUnsafe, nasty (see &quot;eval is <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Get code inside script tag"
        },
        {
            "tags": [
                "python",
                "regex",
                "sanitization"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 38154832,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1467415267,
            "creation_date": 1467414077,
            "body": "The Problem:\n\nI have this artificial example function:\n\n\n\nwhich takes a list of words and dynamically constructs a regular expression pattern without proper escaping the words in the list.\n\nUsage samples:\n\n\n\nThe Question:\n\nHow can I test this function to prove that there is no proper regular expression escaping or input sanitization?\n\nIn other words, what items in a  list should I provide to &quot;break&quot; this function?\n\n\n\nI&#39;ve tried several &quot;evil&quot; regexes to simulate catastrophic backtracking and force the function to hang like  or , but the function just returns  instantly and there is no indication of a problem.\n",
            "excerpt": "Problem:\n\nI have this artificial example function:\n\ndef test_function(target, words):\n    pattern = re.compile(r&quot;|&quot;.join(words))\n\n    return bool(pattern.search(target))\n\n\nwhich takes a list of words <span class=\"highlight\">and</span> &hellip; I&#39;ve tried several &quot;<span class=\"highlight\">evil</span>&quot; regexes to simulate catastrophic backtracking <span class=\"highlight\">and</span> force the function to hang like (x+x+)+y or (a+)+, but the function just returns False instantly <span class=\"highlight\">and</span> there is no indication of &hellip; ",
            "title": "Proving a function has no proper input validation"
        },
        {
            "tags": [
                "php",
                "regex",
                "preg-replace"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 38039506,
            "is_answered": false,
            "question_id": 38039318,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1466951377,
            "creation_date": 1466951377,
            "body": "The PHP manual describes the modifier this way: (emphasis mine)\n\n\n  If this deprecated modifier is set,  does normal\n  substitution of backreferences in the replacement string, s it\n  as PHP code(!!), and uses the result for replacing the search string.\n  Single quotes, double quotes, backslashes () and NULL chars will be\n  escaped by backslashes in substituted backreferences.\n\n\nFirst of all, the very concept of this modifier was always evil.  It included an  case into source-code, the existence of which was usually overlooked and therefore quite easily exploited.\n\nThe online PHP documentation ... http://php.net/manual/en/reference.pcre.pattern.modifiers.php ... talks very extensively about this modifier, why it is evil, and specifically how to use  to replace it.\n\nLet&#39;s take your first regex, the one for &quot;Geshi syntax&quot;:\n\n\n\nThis could be replaced by something like:\n\n\n\nAfter the regex has been evaluated against the string and the matching groups (if any) have been identified, the array is handed to the callback. (The array looks like the one returned by a normal match.)  The value returned by the callback is the final replacement string.\n\nNow, the presence of an executable subroutine is made explicit, and it becomes impossible for a clever  to influence what it consists of or to inject arbitrary code.\n\nFurthermore, it&#39;s much more flexible.  You can, after all, insert an entire subroutine. (It can be an anonymous one, as shown, or it can be a reference to a subroutine that&#39;s used many times.)\n\nFrankly, the  modifier was a bad idea that won&#39;t be missed . . .  Callbacks do the same thing, and much more.\n",
            "excerpt": "First of all, the very concept of this modifier was always <span class=\"highlight\">evil</span>.  It included an eval case into source-code, the existence of which was usually overlooked <span class=\"highlight\">and</span> therefore quite easily exploited. &hellip; \\[\\/\\\\1\\]#ise&quot;,\n   function($subs) {\n      return source_highlighter($subs[2], $subs[1]);\n   },\n   $s);\n\n\nAfter the <span class=\"highlight\">regex</span> has been evaluated against the string <span class=\"highlight\">and</span> the matching groups (if any) have been &hellip; ",
            "title": "/e modifier is deprecated"
        },
        {
            "tags": [
                "regex",
                "pcre",
                "backtracking"
            ],
            "question_score": 20,
            "is_accepted": false,
            "answer_id": 37979580,
            "is_answered": false,
            "question_id": 37912224,
            "item_type": "answer",
            "score": 16,
            "last_activity_date": 1466637394,
            "creation_date": 1466636327,
            "body": "TL;DR\n\nIn short, &quot;backtracking&quot; is when a regex engine returns to a &quot;flexible&quot; match, attempting a different path to get a successful match.\n\nBacktracking with Alternation\n\nFor example, in the following pattern and input:\n\n\n\n\n\n\n\nThe regex engine will match &quot;foo&quot;, then attempt the first of the two options, matching &quot;b&quot; and then &quot;a&quot;, but fails at &quot;r&quot;. Rather than failing the whole match, though, it will &quot;rewind the tape&quot; and start with the second alternative, matching &quot;b&quot; then &quot;a&quot; and then &quot;z&quot;... success!\n\nBacktracking with Quantifiers\n\nThis also works with quantifiers. A quantifier is anything that encourages the engine to match a repeating pattern, including , ,  and  (depending on the engine).\n\nA greedy quantifier (the default) will match as many repetitions as possible before moving on to the rest of the pattern. For example, given the pattern and input below:\n\n\n\n\n\n\n\nThe pattern  will begin by matching the entire string: &quot;foobar&quot;. However, when it moves on to the , the regex engine has reach the end of the input and the match fails. Rather than simply giving up, the engine will ask the last greedy quantifier to give up one of its repetitions, now matching &quot;fooba&quot;. The match still fails, so the engine asks  to give up the &quot;a&quot; (failure), and then the &quot;b&quot;. After giving up the &quot;b&quot;, the engine can now match , and the match succeeds.\n\nTrees and Backtracking\n\nAnother way of thinking of a regex is as a &quot;tree&quot;, and backtracking is going back up a node and trying another path. Given the pattern  and the input &quot;foobaz&quot;, the engine will attempt something like the following:\n\n\n\nCounting the &quot;Backtracks&quot;\n\nAs to why you see differences in the &quot;number&quot; of backtracks... this probably has a lot to do with internal optimizations and logging level. For example, RegexBuddy does not appear to be logging the match to the empty string before , while regex101 does. In the end, though, it doesn&#39;t really matter what exact order you backtrack in (what order you climb back up the tree) so long as you end up with the same result.\n\nEvil Regexes\n\nYou already know this, but for the benefit of anyone else who happens by, your regex was written to demonstrate &quot;catastrophic backtracking&quot; (aka &quot;evil regex&quot;), where the number of backtrack attempts grows exponentially as the length of the input increases. These regexes can be exploited to perform DoS attacks, so you must use caution not to introduce these into your patterns (as I found out).\n",
            "excerpt": "Trees <span class=\"highlight\">and</span> Backtracking\n\nAnother way of thinking of a <span class=\"highlight\">regex</span> is as a &quot;tree&quot;, <span class=\"highlight\">and</span> backtracking is going back up a node <span class=\"highlight\">and</span> trying another path. &hellip; <span class=\"highlight\">Evil</span> Regexes\n\nYou already know this, but for the benefit of anyone else who happens by, your <span class=\"highlight\">regex</span> was written to demonstrate &quot;catastrophic backtracking&quot; (aka &quot;<span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>&quot;), where the number of backtrack &hellip; ",
            "title": "RegEx debugging"
        },
        {
            "tags": [
                "javascript",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 37707038,
            "is_answered": false,
            "question_id": 37706048,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1465401073,
            "creation_date": 1465400280,
            "body": "First I believe you have a typo in your regex it should be  instead of  notice the lower-case . This correctly matches accross lines.\n\nThis regex could accomplish what you need for matching such a document, someone could probably make a more optimized version:\n\n\n\nOn the other hand I would rather suggest you do this with a different approach if possible. For example if you&#39;re doing this within NodeJS I&#39;d strongly suggest you do a check per line for the  or  delimiters. Then fill the array with lines until the ending delimiter. \n\nAssuming that you want an array of lines in each document, loose pseudo code following:\n\n\n\nAnother note if you&#39;re doing this with HTML I&#39;d strongly suggest not to use regex at all as HTML is not a regular language :) you&#39;ll find many links on SO pointing to evil.\n",
            "excerpt": "First I believe you have a typo in your <span class=\"highlight\">regex</span> it should be [\\s\\S] instead of [\\S\\S] notice the lower-case s. This correctly matches accross lines. &hellip; at all as HTML is not a regular language :) you&#39;ll find many links on SO pointing to <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Split a huge text using regex delimiters"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 5,
            "is_accepted": false,
            "answer_id": 37193871,
            "is_answered": false,
            "question_id": 37193706,
            "item_type": "answer",
            "score": 10,
            "last_activity_date": 1464337103,
            "creation_date": 1463074540,
            "body": "You could, although it&#39;s evil, use an eval after joining all the array elements.\ni.e.\n\n\n\nUpdate:\n\nI just recently thought of a much simple (not simpler than eval) but safe answer. If the only boolean operations you&#39;re using are  and  and the parentheses are properly formatted, then you could do a bunch of regex replaces until there is only one value left, either &quot;true&quot; or &quot;false&quot;.\n\nThe boolean values for AND operations can only be as follows and they simplify to either true or false\n\n\n\nthe same goes for OR operations\n\n\n\nAs a result, we can replace the expression with their simplified values - true or false. Then, if there are parentheses around the expression it&#39;ll end up as either  or  and we can easily regex replace that as well.\n\nWe can then loop this routine until we&#39;re finally left with one value, either  or .\n\ni.e. in code\n\n\n\nAnnd, if you&#39;re really dangerous, you can chain all those replaces together\n\nAlso, please notice the lovely lack of recursion and use of only one loop\n",
            "excerpt": "You could, although it&#39;s <span class=\"highlight\">evil</span>, use an eval after joining all the array elements.\ni.e. &hellip; Then, if there are parentheses around the expression it&#39;ll end up as either &#39;(true)&#39; or &#39;(false)&#39; <span class=\"highlight\">and</span> we can easily <span class=\"highlight\">regex</span> replace that as well. &hellip; ",
            "title": "Turning an array of values and strings into an if statement in Javascript"
        },
        {
            "tags": [
                "php",
                "regex",
                "security",
                "preg-match",
                "denial-of-service"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 37378330,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1464167950,
            "creation_date": 1463943312,
            "body": "How can I trigger a Regex-DOS using the  function using an evil regular expression (e.g. (a+)+ )?\n\nFor example, I have the following situation:\n\n\n\nIf I have control over , how could I trigger a DOS attack or reach the backtrack limit of the  functions in php?\n\nHow could I do this with the following expressions?\n\n\n",
            "excerpt": "How can I trigger a <span class=\"highlight\">Regex</span>-DOS using the preg_match() function using an <span class=\"highlight\">evil</span> regular expression (e.g. (a+)+ )? &hellip; ",
            "title": "How to trigger Regex Denial-of-Service in PHP?"
        },
        {
            "tags": [
                "angularjs",
                "regex",
                "razor"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 37259708,
            "is_answered": false,
            "question_id": 37257509,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1463419551,
            "creation_date": 1463419551,
            "body": "I assume that your C# code is actually: . The  avoids needing the evil escaped escape.\n\nYou will likely need to use the evil escaped escape in this case. Note that you don&#39;t need to escape the  if you are putting it directly in a string (if you are using it how I think you are). You can also use braces to minimize the escaping. So you can take this regex:\n\n\n\nand pass it through regex planet to get this:\n\n\n\nI would not recommend manual conversion since you already have an escaped backslash.\n",
            "excerpt": "The @ avoids needing the <span class=\"highlight\">evil</span> escaped escape.\n\nYou will likely need to use the <span class=\"highlight\">evil</span> escaped escape in this case. &hellip; So you can take this <span class=\"highlight\">regex</span>:\n\n(\\w+/|\\w+\\\\)+(\\w+)[.]\\w+\n\n\n<span class=\"highlight\">and</span> pass it through <span class=\"highlight\">regex</span> planet to get this:\n\n&quot;(\\\\w+/|\\\\w+\\\\\\\\)+(\\\\w+)[.] &hellip; ",
            "title": "Pass regex to variable (angular)"
        },
        {
            "tags": [
                "python",
                "list",
                "python-2.7",
                "match"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 37252940,
            "is_answered": false,
            "question_id": 37252447,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1463398955,
            "creation_date": 1463398367,
            "body": "A naive and simple approach - use  to transform the string from the file to a Python evaluable form, then evil  it:\n\n\n\nI think, using  in this context (seems to be a harmless academic NLP task) is ok. If the tokens in your text file aren&#39;t strictly alphanumerical, you might need a smarter regex as  to match them, maybe sth. like ...\n",
            "excerpt": "A naive <span class=\"highlight\">and</span> simple approach - use <span class=\"highlight\">regex</span> substitution to transform the string from the file to a Python evaluable form, then <span class=\"highlight\">evil</span> eval it:\n\nimport re\n\ns2 = &#39;[go:VB, [like:IN, [i:PR]], [to:TO], [there:RB &hellip; If the tokens in your text file aren&#39;t strictly alphanumerical, you might need a smarter <span class=\"highlight\">regex</span> as r&#39;\\w+&#39; to match them, maybe sth. like r&#39;[^\\[\\]]+&#39;... &hellip; ",
            "title": "matching between two different structured python lists"
        },
        {
            "tags": [
                "arrays",
                "bash"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 37120157,
            "is_answered": false,
            "question_id": 37120028,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1462810404,
            "creation_date": 1462809076,
            "body": "Consider instead:\n\n\n\n\n\nI&#39;ll go into the details below:\n\n\n has to be explicitly created as an array to actually be an array -- otherwise, it&#39;s just a string with a bunch of files in it.\n\nThis is an array:\n\n\n\nThis is not an array (and, in fact, could be a single filename):\n\n\nA proper bash array is expanded with  to get all contents, or  to get only the first entry.\n\n\n\n...thus checks the existence (whether as a file or a symlink) of the first entry in the array -- which is sufficient to tell if the glob expression did in fact expand, or if it matched nothing.\nA boolean is better represented with numeric values than a string containing  or : Running  has potential to perform arbitrary activity if the contents of  could ever be set to a user-controlled value, whereas  -- checking whether  is a positive numeric value (true) or otherwise (false) -- has far less room for side effects in presence of bugs elsewhere.\nThere&#39;s no need to loop over array entries to print them in a list:  will expand the format string additional times whenever it has more arguments (from the array expansion) than its format string requires. Moreover, using  in your format string will quote nonprintable values, whitespace, newlines, &amp;c. in a format that&#39;s consumable by both human readers and the shell -- whereas otherwise a file created with  will appear to be two list entries, whereas in fact it is only one.\n\n",
            "excerpt": "with NUL delimiters for safety\n#files=( )\n#while IFS= read -r -d &#39;&#39; f; do\n#  files+=( &quot;$f&quot; )\n#done &lt; &lt;(printf &#39;%s\\0&#39; * | egrep --null --null-data -e &quot;$1&quot;)\n\n# ...or, evaluate all files against $1, as <span class=\"highlight\">regex</span> &hellip; with touch $&#39;<span class=\"highlight\">evil</span>\\n  - hiding&#39; will appear to be two list entries, whereas in fact it is only one. &hellip; ",
            "title": "Bash: rm with an array of filenames"
        },
        {
            "tags": [
                "php",
                "html",
                "xml",
                "xml-parsing",
                "html-parsing"
            ],
            "question_score": 2299,
            "is_accepted": false,
            "answer_id": 3650431,
            "is_answered": false,
            "question_id": 3577641,
            "item_type": "answer",
            "score": 154,
            "last_activity_date": 1462617827,
            "creation_date": 1283766053,
            "body": "Why you shouldn&#39;t and when you should use regular expressions?\n\nFirst off, a common misnomer: Regexps are not for &quot;parsing&quot; HTML. Regexes can however &quot;extract&quot; data. Extracting is what they&#39;re made for. The major drawback of regex HTML extraction over proper SGML toolkits or baseline XML parsers are their syntactic effort and varying reliability.\n\nConsider that making a somewhat dependable HTML extraction regex:\n\n\n\nis way less readable than a simple phpQuery or QueryPath equivalent:\n\n\n\nThere are however specific use cases where they can help.\n\n\nMany DOM traversal frontends don&#39;t reveal HTML comments , which however are sometimes the more useful anchors for extraction. In particular pseudo-HTML variations  or SGML residues are easy to tame with regexps.\nOftentimes regular expressions can save post-processing. However HTML entities often require manual caretaking.\nAnd lastly, for extremely simple tasks like extracting &lt;img src= urls, they are in fact a probable tool. The speed advantage over SGML/XML parsers mostly just comes to play for these very basic extraction procedures.\n\n\nIt&#39;s sometimes even advisable to pre-extract a snippet of HTML using regular expressions  and process the remainder using the simpler HTML parser frontends.\n\nNote: I actually have this app, where I employ XML parsing and regular expressions alternatively. Just last week the PyQuery parsing broke, and the regex still worked. Yes weird, and I can&#39;t explain it myself. But so it happened.\nSo please don&#39;t vote real-world considerations down, just because it doesn&#39;t match the regex=evil meme. But let&#39;s also not vote this up too much. It&#39;s just a sidenote for this topic.\n",
            "excerpt": "Just last week the PyQuery parsing broke, <span class=\"highlight\">and</span> the <span class=\"highlight\">regex</span> still worked. Yes weird, <span class=\"highlight\">and</span> I can&#39;t explain it myself. But so it happened. &hellip; So please don&#39;t vote real-world considerations down, just because it doesn&#39;t match the <span class=\"highlight\">regex</span>=<span class=\"highlight\">evil</span> meme. But let&#39;s also not vote this up too much. It&#39;s just a sidenote for this topic. &hellip; ",
            "title": "How do you parse and process HTML/XML in PHP?"
        },
        {
            "tags": [
                "c#",
                "sitecore",
                "sitecore8"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 37073199,
            "is_answered": false,
            "question_id": 37073132,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1462539884,
            "creation_date": 1462539884,
            "body": "No. There is no way to get the number of placeholder.\n\nSitecore generates pages dynamically. It can generated completely different output for  and . \n\n can be inside a rendering which is hidden for one user and shown for another.\n\nThat&#39;s why you simply cannot tell how many placeholder with particular key will be rendered in a final page.\n\nWhat you could try to do (which is reaaaaaaaly evil in my opinion) is to get the layout assigned to the page, get all the renderings and for all of them get their  or  +  files and use some regex (another bad thing for html) to count placeholders with particular key.\n\nBut again - you can never be 100% sure that this is the number that will be used on the rendered page.\n",
            "excerpt": "What you could try to do (which is reaaaaaaaly <span class=\"highlight\">evil</span> in my opinion) is to get the layout assigned to the page, get all the renderings <span class=\"highlight\">and</span> for all of them get their cshtml or aspx + ascx files <span class=\"highlight\">and</span> use some &hellip; <span class=\"highlight\">regex</span> (another bad thing for html) to count placeholders with particular key. &hellip; ",
            "title": "Sitecore get the number of placeholders"
        },
        {
            "tags": [
                "java",
                "regex",
                "maven",
                "checkstyle"
            ],
            "question_score": 9,
            "is_accepted": false,
            "answer_id": 36923279,
            "is_answered": false,
            "question_id": 33266679,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1462066673,
            "creation_date": 1461869820,
            "body": "I found some problems with how you&#39;re trying to use regexes. I think I also found a solution (but I am unable to test it because I don&#39;t use Maven/Checkstyle).\n\n\n\nYour hypothesis about  being the issue is wrong. Scrolling down the page for RegexpHeader, there is an example that uses a regex group like :\n\n\n\n\n\nThere is a problem with your regex here: . You&#39;re not escaping the regex control characters (but not the ones you pointed out). You should make it:\n\n\n\nIn Java, it is necessary to have the &quot;evil&quot; escaped escape (). The regex in its pure form is:\n\n\n\nYou can use the &quot;pure form&quot; when the regex is in its own file.\n\nThe full text from the docs states (emphasis mine):\n\n\n  the required header specified inline. Individual header lines must be separated by the string &quot;\\n&quot; (even on platforms with a different line separator), and regular expressions must not span multiple lines.\n\n\nThis might mean that you are required to prefix each line with the anchor . All the examples I saw were like that.\n\nYou might be wondering how you will be able to use regexes with Javadocs (for example), which fit the following format (roughly):\n\n\n\nThe middle line may be missing. Or there may be 500 lines like that.\n\nThey give an example of a header that deals with this.\n\nRegex file (excerpt):\n\n\n\nNote: The words  probably aren&#39;t in the file.\n\nRegexpHeader:\n\n\n\nSee how they have line 13 as &quot;multiline&quot;? From the doc:\n\n\n  line numbers to repeat (zero or more times)\n\n",
            "excerpt": "b\\\\*/\\n&quot;\n\n\nIn Java, it is necessary to have the &quot;<span class=\"highlight\">evil</span>&quot; escaped escape (\\\\). The <span class=\"highlight\">regex</span> in its pure form is:\n\n /\\*a(\\x10c)?b\\*/\\n\n\n\nYou can use the &quot;pure form&quot; when the <span class=\"highlight\">regex</span> is in its own file. &hellip; Individual header lines must be separated by the string &quot;\\n&quot; (even on platforms with a different line separator), <span class=\"highlight\">and</span> regular expressions must not span multiple lines. &hellip; ",
            "title": "How to specify an optional regex group with a newline character in checkstyle&#39;s RegexpHeader?"
        },
        {
            "tags": [
                "regex",
                "apache-nifi"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 36827823,
            "is_answered": false,
            "question_id": 36825860,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1461526390,
            "creation_date": 1461525925,
            "body": "You can use:\n\n\n\nThere&#39;s no need to escape this backslash because it&#39;s not a regex backslash.\n\nExplanation\n\n\nThe  matches a literal .\nThe  matches a . I have chosen to use brackets instead of the evil Java escaped escape.\n\n",
            "excerpt": "You can use:\n\nreplaceAll(&quot;\\&quot;[{]&quot;, &quot;{&quot;);\nreplaceAll(&quot;[}]\\&quot;&quot;, &quot;}&quot;);\n\n\nThere&#39;s no need to escape this backslash because it&#39;s not a <span class=\"highlight\">regex</span> backslash.\n\nExplanation\n\n\nThe \\&quot; matches a literal &quot;. &hellip; I have chosen to use brackets instead of the <span class=\"highlight\">evil</span> Java escaped escape. &hellip; ",
            "title": "ReplaceText processor configuration"
        },
        {
            "tags": [
                "regex",
                "mule",
                "mule-el"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 36774923,
            "is_answered": false,
            "question_id": 36749323,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1461254495,
            "creation_date": 1461254495,
            "body": "Mule (as this page indicates) does not give a way to avoid the evil escaped escape. If you use a  in your regex, you must escape it: . Java is the same way.\n\nAlso, you need to understand that certain regex symbols do not always need to be escaped. This is very important when you work in Mule/Java, because it means you avoid the evil escaped escape.\n\nDepending on where they appear in the regex, characters may either gain or lose meaning as meta characters. The  character only has special meaning when it is sandwiched inside  character classes. This means that you just can just use it normally instead of escaping it in your regular expression.\n\nI suggest that you read up on regexes.\n\nThere will be times that you need to use the evil escaped escape, which can get confusing. Personally, I usually use this site to convert my regexes into escaped s.\n",
            "excerpt": "Mule (as this page indicates) does not give a way to avoid the <span class=\"highlight\">evil</span> escaped escape. If you use a \\ in your <span class=\"highlight\">regex</span>, you must escape it: \\\\. Java is the same way. &hellip; Also, you need to understand that certain <span class=\"highlight\">regex</span> symbols do not always need to be escaped. This is very important when you work in Mule/Java, because it means you avoid the <span class=\"highlight\">evil</span> escaped escape. &hellip; ",
            "title": "Validator.matchesRegex in Mule blows up with basic pattern"
        },
        {
            "tags": [
                "java",
                "regex",
                "extglob"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 36636765,
            "is_answered": false,
            "question_id": 26042753,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1460683520,
            "creation_date": 1460683520,
            "body": "extglob can match a number of regex constructs ( is a list of alterations):\n\n\n\nThere are some things that regex does that cannot be done in extglob, as far as I know, too:\n\n\n\nAssuming all of the constructs in the regex have extglob equivalents, it would be possible to convert it to extglob form. It would be difficult, because regexes are represented by a CFG. And you&#39;re using Java, which forces you to use the evil escaped escape .\n\nWhy not just use a different bash utility that supports regexes? Like this.\n",
            "excerpt": "extglob can match a number of <span class=\"highlight\">regex</span> constructs (pattern-list is a list of alterations):\n\nextglob           <span class=\"highlight\">regex</span>\n--------------    -----------------\n\n\n?                 [^/]\n*                 [^/]*\n. &hellip; <span class=\"highlight\">And</span> you&#39;re using Java, which forces you to use the <span class=\"highlight\">evil</span> escaped escape \\\\.\n\nWhy not just use a different bash utility that supports regexes? Like this. &hellip; ",
            "title": "How to convert regex into an extglob expression?"
        },
        {
            "tags": [
                "c#",
                "regex",
                "regex-greedy"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 36632461,
            "is_answered": false,
            "question_id": 36632047,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1460664291,
            "creation_date": 1460662797,
            "body": "I can see Java&#39;s influence. The  means you do not need the evil escaped escape :\n\n\n\nIn case you didn&#39;t know, Java&#39;s regexes are a pain. Most languages aren&#39;t like that. Python, for example, uses  instead of C#&#39;s .\n\n\n\nEdit: JavaScript only makes you escape escapes within strings, but you can use something like: .  The syntax is similar to Perl, actually.\n\nJava has no alternative to escaped escapes, which is why I assumed you meant Java.\n",
            "excerpt": "The @ means you do not need the <span class=\"highlight\">evil</span> escaped escape \\\\:\n\n@&quot;^(\\s{3}){0,}(\\s{5})*$&quot;\n\nIn case you didn&#39;t know, Java&#39;s regexes are a pain. Most languages aren&#39;t like that. &hellip; ",
            "title": "C# regex (coming from a perl/javascript background)"
        },
        {
            "tags": [
                "regex",
                "perl",
                "alternation"
            ],
            "question_score": 7,
            "is_accepted": false,
            "answer_id": 36608603,
            "is_answered": false,
            "question_id": 36420517,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1460578203,
            "creation_date": 1460578203,
            "body": "How regex alternation is implemented in Perl is fairly well explained in \n\n\n  Matching this or that\n  \n  We can match different character strings with the alternation\n  metacharacter  . To match  or  , we form the regex  .\n  As before, Perl will try to match the regex at the earliest possible\n  point in the string. At each character position, Perl will first try\n  to match the first alternative,  . If  doesn&#39;t match, Perl will\n  then try the next alternative,  . If  doesn&#39;t match either, then\n  the match fails and Perl moves to the next position in the string.\n  Some examples:\n\n\n  \n  Even though  is the first alternative in the second regex,  is able to match\n  earlier in the string.\n\n\n  \n  Here, all the alternatives match at the first string position, so the\n  first alternative is the one that matches. If some of the alternatives\n  are truncations of the others, put the longest ones first to give them\n  a chance to match.\n\n\n  \n  The last example points out \n  that character classes are like alternations of characters. At a given\n  character position, the first alternative that allows the regexp match\n  to succeed will be the one that matches.\n\n\nSo this should explain the price you pay when using alternations in regex.\n\nWhen putting simple regex together, you don&#39;t pay such a price. It&#39;s well explained in another related question in SO. When directly searching for a constant string, or a set of characters as in the question, optimizations can be done and no backtracking is needed which means potentially faster code.\n\nWhen defining the regex alternations, just choosing a good order (putting the most common findings first) can influence the performance. It is not the same either to choose between two options, or twenty. As always, premature optimization is the root of all evil and you should instrumentiate you code (Devel::NYTProf) if there are problems or you want improvements. But as a general rule alternations should be kept to a minimum and avoided if possible since:\n\n\nThey easily make the regex too big an complex. We like simple, easy to understand / debug / maintain regex.\nVariability and input dependant. They could be an unexpected source of problems since they backtrack and can lead to unexpected lack of performance depending on your input. As I understand, there&#39;s no case when they will be faster.\nConceptually you are trying to match two different things, so we could argue that two different statements are more correct and clear than just one.\n\n\nHope this answer gets closer to what you were expecting.\n",
            "excerpt": "As always, premature optimization is the root of all <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> you should instrumentiate you code (Devel::NYTProf) if there are problems or you want improvements. &hellip; We like simple, easy to understand / debug / maintain <span class=\"highlight\">regex</span>.\nVariability <span class=\"highlight\">and</span> input dependant. &hellip; ",
            "title": "Is it faster to use alternation than subsequent replacements in regular expressions"
        },
        {
            "tags": [
                "python",
                "regex",
                "git",
                "githooks"
            ],
            "question_score": 22,
            "is_accepted": false,
            "answer_id": 24991376,
            "is_answered": false,
            "question_id": 12093748,
            "item_type": "answer",
            "score": 24,
            "last_activity_date": 1459352815,
            "creation_date": 1406536886,
            "body": " with  is a possibility:\n\n\n\nAdvantages:\n\n\nif the algorithm ever changes, the check will update automatically\nyou are sure to get it right, which is way harder with a monster Regex\n\n\nDisadvantages:\n\n\nslower because subprocess. But premature optimization is the root of all evil.\nrequires Git as a binary dependency. But in the case of a hook it will always be there.\n\n\npygit2, which uses C bindings to libgit2, would be an even better possibility if  is exposed there, as it would be faster than , but I haven&#39;t found it.\n",
            "excerpt": "check-ref-format&quot;, ref])\nexit_status = process.wait()\n\n\nAdvantages:\n\n\nif the algorithm ever changes, the check will update automatically\nyou are sure to get it right, which is way harder with a monster <span class=\"highlight\">Regex</span> &hellip; But premature optimization is the root of all <span class=\"highlight\">evil</span>.\nrequires Git as a binary dependency. But in the case of a hook it will always be there. &hellip; ",
            "title": "How do I check for valid Git branch names?"
        },
        {
            "tags": [
                "php",
                "magento",
                "nginx",
                "url-rewriting",
                "fastcgi"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 3948588,
            "is_answered": false,
            "question_id": 3947333,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1458824859,
            "creation_date": 1287226395,
            "body": "I have some experience with nginx in this regard and have even written about it. So in a shameless act of self-promotion here is the result of my earlier research:\nhttp://www.magentocommerce.com/boards/viewreply/211050/\n\n\n\nSix years on and the above link is dead.  Also my nginx configs are more mature.  The following starts by blocking all files and only allowing those which are explicitly public.  All other requests are rewritten to .  If you want to execute some other PHP file you must write your own exclusion.  This is the safest way I can think of.\n\n/etc/nginx/magento_server:\n\n\n\n/etc/nginx/conf.d/php.conf:\n\n\n\nEach store then has it&#39;s own server block similar to this:\n\n/etc/nginx/sites-enabled/yoursite.com:\n\n\n\nAnd since  files are ignored (because this is not Apache) it helps to put  in each web root:\n\n/var/www/.user.ini\n\n\n",
            "excerpt": "I have some experience with nginx in this regard <span class=\"highlight\">and</span> have even written about it. &hellip; Include from &quot;server {}&quot; block\n##\n\n# 1M = one month\nexpires 1M;\n# recommended for all content, regardless\nadd_header X-Content-Type-Options &quot;nosniff&quot;;\n\n##\n# Front handler\n##\n\nlocation / {\n    # if is <span class=\"highlight\">evil</span> &hellip; ",
            "title": "How can I remove index.php from the address while redirect requests to index.php via fastcgi?"
        },
        {
            "tags": [
                "regex",
                "string"
            ],
            "question_score": -2,
            "is_accepted": false,
            "answer_id": 36092368,
            "is_answered": false,
            "question_id": 36092225,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1458327625,
            "creation_date": 1458327625,
            "body": "I think you&#39;re taking this the wrong way, really:\n\n\n  Unfortunately, most of what I&#39;ve read about catastrophic backtracking puts the blame on the regex writer for writing evil regexes, instead of exploring the possibility that regex engines/compilers need to do better. Although I found several sources that look at regex engines/compilers, they are too technical.\n\n\nWell, if you write a regex, your regex engine will need to follow that program you&#39;ve written.\nIf you write a complex program, then there&#39;s nothing the engine can do about that; this regex explicitly specifies that you&#39;ll need to match &quot;stuff&quot; first, before looking for the .\n\nNow, not being too involved in writing compilers, I agree, in this case, it might be possible to first identify all the &quot;static&quot; elements, which here are only said , and look for them. Sadly, in the general case, this won&#39;t really help you, because there might either be more than one static element or the none at all…\n\nIf you cared about speed, you&#39;d actually just first search for the  with plain linear search, and then do your regex thing after you&#39;ve found one. \n\nRegexes were never meant to be as fast as linear search engines, because they were rather meant to be much, much more powerful. \n\nSo, not only are you taking the wrong person to the judge (the regex engine rather than the regex, which is a program with a complexity), you&#39;re also blaming the victim for the crime (you want to harvest the speed of just looking for the  character, but still use a regex).\n\n\nby the way, don&#39;t validate email addresses with regexes. It&#39;s the wrong tool: \nhttp://www.ex-parrot.com/pdw/Mail-RFC822-Address.html\n",
            "excerpt": "I think you&#39;re taking this the wrong way, really:\n\n\n  Unfortunately, most of what I&#39;ve read about catastrophic backtracking puts the blame on the <span class=\"highlight\">regex</span> writer for writing <span class=\"highlight\">evil</span> regexes, instead of exploring &hellip; Now, not being too involved in writing compilers, I agree, in this case, it might be possible to first identify all the &quot;static&quot; elements, which here are only said @, <span class=\"highlight\">and</span> look for them. &hellip; ",
            "title": "Why don&#39;t regex engines ensure all required characters are in the string?"
        },
        {
            "tags": [
                "regex",
                "security",
                "match",
                "code-injection",
                "denial-of-service"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 35917903,
            "is_answered": false,
            "question_id": 35798236,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1457617186,
            "creation_date": 1457616513,
            "body": "Yes it would be a naive approach and would make your server susceptible to DOS attacks. \n\nActually first link you have given yourself is pretty nice and complimentary to it you could look at : How can I recognize an evil regex?\n\nHowever it seems like it is a difficult task to detect such evil regexes. It depends how much risk do you want to take ? One solution could be building a mechanism to spawn processes/threads (depends on your platform) that evaluates input strings with the given regex and set a timeout for it. Once the process takes long (as long as you can afford) you could kill it.\n",
            "excerpt": "Actually first link you have given yourself is pretty nice <span class=\"highlight\">and</span> complimentary to it you could look at : How can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>? &hellip; One solution could be building a mechanism to spawn processes/threads (depends on your platform) that evaluates input strings with the given <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> set a timeout for it. &hellip; ",
            "title": "Not having parenthesis alone in a regex will prevent ReDOS?"
        },
        {
            "tags": [
                "python",
                "regex",
                "nlp",
                "nltk",
                "tokenize"
            ],
            "question_score": 17,
            "is_accepted": true,
            "answer_id": 35348340,
            "is_answered": false,
            "question_id": 35345761,
            "item_type": "answer",
            "score": 40,
            "last_activity_date": 1455220659,
            "creation_date": 1455218880,
            "body": "The default  is using the Treebank tokenizer that emulates the tokenizer from the Penn Treebank tokenizer.\n\nDo note that  doesn&#39;t achieve tokens in the linguistics sense, e.g.:\n\n\n\nIt is usually used to separate strings with specified delimiter, e.g. in a tab-separated file, you can use  or when you are trying to split a string by the newline  when your textfile has one sentence per line.\n\nAnd let&#39;s do some benchmarking in :\n\n\n\n[out]:\n\n\n\nIf we try a another tokenizers in bleeding edge NLTK from https://github.com/jonsafari/tok-tok/blob/master/tok-tok.pl:\n\n\n\n[out]:\n\n\n\n(Note: the source of the text file is from https://github.com/Simdiva/DSL-Task)\n\n\n\nIf we look at the native  implementation, the  vs  time for the  is comparable. But do that in the python implementation the regexes are pre-compiled while in perl, it isn&#39;t but then the proof is still in the pudding:\n\n\n\n(Note: When timing the , we had to pipe the output into a file, so the timing here includes the time the machine takes to output to file, whereas in the  timing, it&#39;s doesn&#39;t include time to output into a file)\n\n\n\nWith regards to , it&#39;s a little different and comparing speed benchmark without considering accuracy is a little quirky.\n\nConsider this:\n\n\nIf a regex splits a textfile/paragraph up in 1 sentence, then the speed is almost instantaneous, i.e. 0 work done. But that would be a horrible sentence tokenizer...\nIf sentences in a file is already separated by , then that is simply a case of comparing how  vs  and  would have nothing to do with the sentence tokenization ;P\n\n\nFor information on how  works in NLTK, see:\n\n\ntraining data format for nltk punkt\nUse of PunktSentenceTokenizer in NLTK\n\n\nSo to effectively compare  vs other regex based methods (not ), one would have to evaluate also the accuracy and have a dataset with humanly evaluated sentence in a tokenized format.\n\nConsider this task: https://www.hackerrank.com/challenges/from-paragraphs-to-sentences\n\nGiven the text:\n\n\n  In the third category he included those Brothers (the majority) who\n  saw nothing in Freemasonry but the external forms and ceremonies, and\n  prized the strict performance of these forms without troubling about\n  their purport or significance. Such were Willarski and even the Grand\n  Master of the principal lodge. Finally, to the fourth category also a\n  great many Brothers belonged, particularly those who had lately\n  joined. These according to Pierre&#39;s observations were men who had no\n  belief in anything, nor desire for anything, but joined the Freemasons\n  merely to associate with the wealthy young Brothers who were\n  influential through their connections or rank, and of whom there were\n  very many in the lodge.Pierre began to feel dissatisfied with what he\n  was doing. Freemasonry, at any rate as he saw it here, sometimes\n  seemed to him based merely on externals. He did not think of doubting\n  Freemasonry itself, but suspected that Russian Masonry had taken a\n  wrong path and deviated from its original principles. And so toward\n  the end of the year he went abroad to be initiated into the higher\n  secrets of the order.What is to be done in these circumstances? To\n  favor revolutions, overthrow everything, repel force by force?No! We\n  are very far from that. Every violent reform deserves censure, for it\n  quite fails to remedy evil while men remain what they are, and also\n  because wisdom needs no violence. &quot;But what is there in running across\n  it like that?&quot; said Ilagin&#39;s groom. &quot;Once she had missed it and turned\n  it away, any mongrel could take it,&quot; Ilagin was saying at the same\n  time, breathless from his gallop and his excitement.\n\n\nWe want to get this:\n\n\n\nSo simply doing  will give you nothing. Even without considering the order of the sentences, you will yield 0 positive result:\n\n\n",
            "excerpt": "Every violent reform deserves censure, for it\n  quite fails to remedy <span class=\"highlight\">evil</span> while men remain what they are, <span class=\"highlight\">and</span> also\n  because wisdom needs no violence. &hellip; Every violent reform deserves censure, for it quite fails to remedy <span class=\"highlight\">evil</span> while men remain what they are, <span class=\"highlight\">and</span> also because wisdom needs no violence.\n... &hellip; ",
            "title": "Python re.split() vs nltk word_tokenize and sent_tokenize"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "string",
                "count",
                "coffeescript"
            ],
            "question_score": 5,
            "is_accepted": true,
            "answer_id": 35215653,
            "is_answered": false,
            "question_id": 35215348,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1454641753,
            "creation_date": 1454641753,
            "body": "One regex to solve your problem is:\n\n\n\nThe parts are as follows:\n\n\n\nYou may be able to use a character class instead of a group:\n\n\n\nFor the final element, but that isn&#39;t working on https://regex101.com/.\n\nTested on the following:\n\n\n  Contrary to popular belief, Lorem Ipsum is not simply random text. It\n  has roots in a piece of classical Latin literature from 45 BC, making\n  it over 2000 years old. Richard McClintock, a Latin professor at\n  Hampden-Sydney College in Virginia, looked up one of the more obscure\n  Latin words, consectetur, from a Lorem Ipsum passage, and going\n  through the cites of the word in classical literature, discovered the\n  undoubtable source. Lorem Ipsum comes from sections 1.10.32 and\n  1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the\n  theory of ethics, very popular during the Renaissance. The first line\n  of Lorem Ipsum, &quot;Lorem ipsum dolor sit amet..&quot;, comes from a line in\n  section 1.10.32.\n\n\nAnd finds six sentences (bolded the end of sentences, not the actual match). Note that the different grouping might pose a problem if you&#39;re depending on it for any reason.\n",
            "excerpt": "One <span class=\"highlight\">regex</span> to solve your problem is:\n\n\\w[.?!](\\s|$)\n\n\nThe parts are as follows:\n\n\\w - Word character\n\\[.?!] - Punctuation as specified.\n(\\s|$) - Whitespace character OR the end of the string. &hellip; Lorem Ipsum comes from sections 1.10.32 <span class=\"highlight\">and</span>\n  1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>) by Cicero, written in 45 BC. &hellip; ",
            "title": "Count sentences in string with JavaScript"
        },
        {
            "tags": [
                "python",
                "request",
                "urllib"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 34917176,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1453362225,
            "creation_date": 1453359183,
            "body": "I&#39;m having some issues with , I can&#39;t even say exactly what&#39;s going on, so I&#39;ll provide the code and  the traceback. First, the code:\n\n\n\nThe idea for this program is that the user enters an URL from Amazon or other sites like that and the program retrieves the image of the object, the sell price and (eventually) shipping fees. This is done by creating a sort of simple database ( will populate the list self.contenuti with some dictionaries containing the data). Now,  has to beahave exactly the same, no matter the site, and this is accomplished by creating specific classes (like the class ) that will have the specific functions for retrieving the data (every site has is own structure, so I can&#39;t use the same regex) and simply putting them in the dictionary : whenever  is called, the appropriate class (here I have only ) will be called passing  as an argument, and this will be the content of the site provided, converted into str, so the class Amazon can search the appropriate informations via regex.\n\nThis is for home uses, I already created a similar program that, with the data collected, writes a simple HTML file that is a sort of image gallery of all the objects of interest. What I want to do here, with , is downloading the image so it will be displayed into a tkinter label when I will write the GUI. No HTML file needed, the whole thing will be GUI based, like a sort of database.\n\nThe problem is that, whatever URL I provide (here I&#39;m doing it in the  function, for debug purposes) I get this evil and nasty &quot;thing&quot;: \n\n\n\nFrom what I understand, the problem is in urllib: for some reason the URL is not parsed correctly and I end up with the error. So, I tried to write this:\n\n\n\nThis is wrote in another module, for testing purpose, there is only this piece of code. If I have it for its own, it works perfectly, with no error. I tried with other URLs, same thing: if I try the second piece of code, no errors; if I try to pass it to , I got the error. What is going on?\n",
            "excerpt": ") will be called passing self.sorgente as an argument, <span class=\"highlight\">and</span> this will be the content of the site provided, converted into str, so the class Amazon can search the appropriate informations via <span class=\"highlight\">regex</span>. &hellip; The problem is that, whatever URL I provide (here I&#39;m doing it in the main() function, for debug purposes) I get this <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> nasty &quot;thing&quot;: \n\nFile &quot;C:\\Users\\Admin\\pyproj\\amazons\\amazzone2_0.py&quot;, line &hellip; ",
            "title": "Type error when trying to use urllib.request, &#39;str&#39; object is not callable"
        },
        {
            "tags": [
                "r",
                "mongodb",
                "twitter",
                "sentiment-analysis",
                "mongolite"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 34471572,
            "is_answered": false,
            "question_id": 34469227,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1451135015,
            "creation_date": 1451135015,
            "body": "I think you wanted to use , which flattens the list of status object that  returns. In any case this works. Note that you need to install and then start  for this to work:\n\n\n\nYields the following (4 scored bad, 592 scored neutral, 4 scored good):\n\n\n",
            "excerpt": "# we want a simple array (&quot;a&quot;) of scores back, so we use  \n  # &quot;l&quot; + &quot;a&quot; + &quot;ply&quot; = &quot;laply&quot;:  \n  scores = laply(sentences, function(sentence, pos.words, neg.words) {\n    # clean up sentences with R&#39;s <span class=\"highlight\">regex</span>-driven &hellip; =.progress )  \n  scores.df = data.frame(score=scores, text=sentences)  \n  return(scores.df)  \n}\n\ntweets &lt;- as.character(df_ip_out$iphone.text)\nneg = c(&quot;bad&quot;,&quot;prank&quot;,&quot;inferior&quot;,&quot;<span class=\"highlight\">evil</span>&quot;,&quot;poor&quot;,&quot;minor&quot;)\npos &hellip; ",
            "title": "Error inserting/retrieving tweets into mongolite db"
        },
        {
            "tags": [
                "nginx"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 34395805,
            "is_answered": false,
            "question_id": 34388518,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1450701212,
            "creation_date": 1450701212,
            "body": "You&#39;ll need a second location block as  directives (all handlers, for that matter, see this post) aren&#39;t inherited by nested location blocks.\n\nIf you want to simplify your configuration without copy-and-pasting your other configuration, consider an  directive and put the common aspects of your location block into an external file.\n\nIt is technically possible that you could get away with just one location block by adding an  statement like:\n\n\n\nbut as per the Nginx wiki&#39;s If is Evil page, you&#39;ll want to test this and very carefully.  This also involves more of an overhead by invoking the regex engine; the better option is two location blocks.\n",
            "excerpt": "page, you&#39;ll want to test this <span class=\"highlight\">and</span> very carefully. &hellip; This also involves more of an overhead by invoking the <span class=\"highlight\">regex</span> engine; the better option is two location blocks. &hellip; ",
            "title": "Expand location only for specific file types"
        },
        {
            "tags": [
                "java",
                "string"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 34201911,
            "is_answered": false,
            "question_id": 34201880,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1449750489,
            "creation_date": 1449750489,
            "body": "An evil regex can help you.\n\n\n\nO/P :\n\n\n\nNote : This will return the entire String in case there is no &quot;Word[space]digits&quot; in the String. You will have to do a length check for the actual String and the returned String. If the length is same, then your String doesn&#39;t contain the expected pattern.\n",
            "excerpt": "An <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> can help you.\n\n    String test=&quot;top 10 products&quot;;\n    System.out.println(test.replaceAll(&quot;.*? &hellip; You will have to do a length check for the actual String <span class=\"highlight\">and</span> the returned String. If the length is same, then your String doesn&#39;t contain the expected pattern. &hellip; ",
            "title": "Check if a string has a word followed by a number"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "regex"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 33768168,
            "is_answered": false,
            "question_id": 33766484,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1447799170,
            "creation_date": 1447798867,
            "body": "Here is a way to do it without evil regex strings. Instead I wanted to try and do it with jQuery &#39;keydown&#39; event which was inline with what the questioner mentioned (see: newb at jQuery). Also note that &#39;keydown&#39; is better for this methodology as &#39;keyup&#39; will fire multiple times, though I guess this will too... Anyways, here is what I came up with:\n\n\n\nThis might be the most complicated way to do this ever but it does seem to work and satisfy all the constraints posed. Since I just noticed that this was flagged regex, this might be a terrible solution. Let the evisceration begin!\n\nSuper Bonus: This will work if you have any number of &quot;[]&quot; pairs in the string.\n",
            "excerpt": "Here is a way to do it without <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> strings. Instead I wanted to try <span class=\"highlight\">and</span> do it with jQuery &#39;keydown&#39; event which was inline with what the questioner mentioned (see: newb at jQuery). &hellip; Since I just noticed that this was flagged <span class=\"highlight\">regex</span>, this might be a terrible solution. Let the evisceration begin!\n\nSuper Bonus: This will work if you have any number of &quot;[]&quot; pairs in the string. &hellip; ",
            "title": "Javascript move text between brackets in textarea"
        },
        {
            "tags": [
                "android",
                "validation"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 33717819,
            "is_answered": false,
            "question_id": 33717377,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1447577058,
            "creation_date": 1447576524,
            "body": "User input is always evil! make that clear in your mind.  you can never trust users to put only the right stuff into your inputs. \nso just bounds check every input. If you want to get no empty strings check for it via\n\n\n\nsame stuff need to happen for every input.  if you e. g. try to get int values check em if they fit in your expected range and so on.... \n\nby this you don&#39;t need to put a space value into your editTexts while clearing em ...  (which need to be deleted by user if he wants to set the edittext correctly (-&gt; evil user just ignores the space and enters its name and you will have to check for leading or ending sign of space before putting it in your database ) \n\nhint: regex strings to ensure input is correct ;) \n",
            "excerpt": "(which need to be deleted by user if he wants to set the edittext correctly (-&gt; <span class=\"highlight\">evil</span> user just ignores the space <span class=\"highlight\">and</span> enters its name <span class=\"highlight\">and</span> you will have to check for leading or ending sign of space before &hellip; putting it in your database ) \n\nhint: <span class=\"highlight\">regex</span> strings to ensure input is correct ;) &hellip; ",
            "title": "How do I add validation for the edit text code in android?"
        },
        {
            "tags": [
                "r",
                "csv"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 33317589,
            "is_answered": false,
            "question_id": 33314026,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1445685670,
            "creation_date": 1445685670,
            "body": "This will get you started but you still have quite a bit of work to do. This works for one line (and it may work for the other two in the example) but it can be extrapolated to work with all of the lines ( FTW). Basically you need to rebuild the JSON structure from that single field (there may be alternative ways, especially if you do not need all the fields). It&#39;s easier than it might otherwise be since the Yelp schema is known. \n\nYou have to attack it in a pretty deterministic way, converting some fields before others, accounting for spaces in field names, dealing with arrays &amp; nested structures, etc. As I said, you have quite a bit of work ahead of you. If your regex-fu is weak, this will provide ample practice to become a regex ninja.\n\n\n\nAnd, whomever gave you this file deserves whatever evil comes their way in their programmatic life. I&#39;d give them back whatever they wanted from this in gnarly XML with EBCDIC encoding.\n",
            "excerpt": "If your <span class=\"highlight\">regex</span>-fu is weak, this will provide ample practice to become a <span class=\"highlight\">regex</span> ninja. &hellip; , whomever gave you this file deserves whatever <span class=\"highlight\">evil</span> comes their way in their programmatic life. &hellip; ",
            "title": "Instructing R to find variable name in rows when reading csv file"
        },
        {
            "tags": [
                "emacs",
                "evil-mode"
            ],
            "question_score": 11,
            "is_accepted": true,
            "answer_id": 22418983,
            "is_answered": false,
            "question_id": 18102004,
            "item_type": "answer",
            "score": 21,
            "last_activity_date": 1445565371,
            "creation_date": 1394852337,
            "body": "Update:  was recently replaced with . This  works on current evil and has the same usage as the old one:\n\n\n\n\n\nOriginal Answer:\n\nIf you end up defining more than one new text object, the repetition can get annoying, especially if you want to bind both inner and outer objects. If you hit that barrier, try this:\n\n\n\nUsage:\n\n\n\n(This is more than you wanted, but I&#39;ll leave it here in case it helps someone :)\n",
            "excerpt": "This  works on current <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> has the same usage as the old one:\n\n(defmacro define-<span class=\"highlight\">and</span>-bind-text-object (key start-<span class=\"highlight\">regex</span> end-<span class=\"highlight\">regex</span>)\n  (let ((inner-name (make-symbol &quot;inner-name&quot;))\n        (outer-name &hellip; (<span class=\"highlight\">evil</span>-define-text-object ,outer-name (count &amp;optional beg end type)\n         (<span class=\"highlight\">evil</span>-select-paren ,start-<span class=\"highlight\">regex</span> ,end-<span class=\"highlight\">regex</span> beg end type count t))\n       (define-key <span class=\"highlight\">evil</span>-inner-text-objects-map ,key (quote &hellip; ",
            "title": "Emacs Evil mode: how to create a new text object to select words with any non-space characters?"
        },
        {
            "tags": [
                "java",
                "xml"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 33116617,
            "is_answered": false,
            "question_id": 33116334,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1444800824,
            "creation_date": 1444796724,
            "body": "I think you should mention the programming language you are using so people can give you solutions with code anyway, for now I can think of regular expression can only be the solution and you have to know what will be the root tag your code should look for. like in above i can see  is the root tag. I&#39;ll try to compe up with code solution in few hours. \n\nFollowing code works in JDK 6 and should work in later versions as well\n\n\n\noutput is \n\n\n\nSee your code running online here\n",
            "excerpt": "&lt;/description&gt;&quot; +\n&quot;&lt;/book&gt;&quot; +\n&quot;&lt;/catalog&gt;&quot;;\n\nString <span class=\"highlight\">regex</span> = &quot;(\\\\&lt;catalog\\\\&gt;.*? &hellip; sorceress, <span class=\"highlight\">and</span> her own childhood to become queen of the world. &hellip; ",
            "title": "How to identify an xml in a text file containing many xml files along with other text using the node of the xml in Java?"
        },
        {
            "tags": [
                "ajax",
                "regex",
                "forms",
                "validation"
            ],
            "question_score": 6,
            "is_accepted": true,
            "answer_id": 32881866,
            "is_answered": false,
            "question_id": 32878110,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1443685123,
            "creation_date": 1443684774,
            "body": "Just for information you should not validate User code on the clientside. Always treat input from the client as evil\n\nI changed the regex so that the min length () of the Username is included\n\n\n",
            "excerpt": "Always treat input from the client as <span class=\"highlight\">evil</span>\n\nI changed the <span class=\"highlight\">regex</span> so that the min length (username.length &lt; 4) of the Username is included\n\n function username_check() {\n    var username = $(&#39;#warden_id&#39;) &hellip; ",
            "title": "form validation using ajax with regex"
        },
        {
            "tags": [
                "regex",
                "notepad++"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 32805237,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1443336349,
            "creation_date": 1443335639,
            "body": "From below the verse i try to remove all the tab and join them using . But i want to untouch the lines that start with the verse number.\n\n1       I am like one who gathers summer fruit\n        at the gleaning of the vineyard;\n        there is no cluster of grapes to eat,\n        none of the early figs that I crave.\n\n2       The faithful have been swept from the land;\n        not one upright person remains.\n        Everyone lies in wait to shed blood;\n        they hunt each other with nets.\n\n3       Both hands are skilled in doing evil;\n        the ruler demands gifts,\n        the judge accepts bribes,\n        the powerful dictate what they desire—\n        they all conspire together.\n\nIn Notepad++ find &amp; replace, using regex i find  and replace with  it replaces all the TAB. But i don&#39;t know how to join the lines so that it will become like this:\n\n1       I am like one who gathers summer fruit&lt;BR&gt;at the gleaning of the vineyard;&lt;BR&gt;there is no cluster of grapes to eat,&lt;BR&gt;none of the early figs that I crave.\n2       The faithful have been swept from the land;&lt;BR&gt;not one upright person remains.&lt;BR&gt;Everyone lies in wait to shed blood;&lt;BR&gt;they hunt each other with nets.\n3       Both hands are skilled in doing evil;&lt;BR&gt;the ruler demands gifts,&lt;BR&gt;the judge accepts bribes,&lt;BR&gt;the powerful dictate what they desire—&lt;BR&gt;they all conspire together.\n\nCan anyone please tell me how to join the lines using notepad++ regex?\n",
            "excerpt": "From below the verse i try to remove all the tab <span class=\"highlight\">and</span> join them using &lt;BR&gt;. &hellip; In Notepad++ find &amp; replace, using <span class=\"highlight\">regex</span> i find ^\\t <span class=\"highlight\">and</span> replace with &lt;BR&gt; it replaces all the TAB. &hellip; ",
            "title": "Regex to replace TAB and move up lines"
        },
        {
            "tags": [
                "bash",
                "shell"
            ],
            "question_score": 15,
            "is_accepted": false,
            "answer_id": 32789134,
            "is_answered": false,
            "question_id": 32787320,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1443208474,
            "creation_date": 1443208474,
            "body": "Instead of piping the output of  through , you might as well use the full capabilities of . You&#39;ll want to build up a an array that contains the options:\n\n\n\nto pass to  (where  ...  are the strings passed as arguments):\n\n\n\nWe&#39;re using  as an initializer, so that building up the array of options is simple; this also has the benefit (or flaw, depending on your point of view) that if no options are given then  exits early without listing all the content of the directory recursively.\n\nWith  you could use regexes to have more powerful matching capabilities; here we&#39;re using &#39;s  option, so we can only use the basic globs: ,  and . If your  supports the  option (GNU  does), and if you really need regexes, then it&#39;s trivial to modify the previous function.\n\n\n\nAnother possibility is to use Bash&#39;s extended globs:\n\n\n\nA few things to note here: \n\n\nThe whole function is included in a subshell—it&#39;s not a typo. That&#39;s to simplify a few things: no need to use local variables, and no need to save the shell options to restore them at the end of the function.\nThe first line uses the evil  but in a safe way: it&#39;s actually an idiomatic way to join the elements of the positional parameters with the first character of  (here a pipe character).\nWe need to set  to the empty string so as to avoid word splitting in the glob .\nThe glob  uses  and the   (with no quotes, it&#39;s not a typo). See Pattern Matching in the reference manual.\n\n\nThis function uses Bash&#39;s extended globs, that differ from (and aren&#39;t as powerful as) regexes (yet this should be enough for most cases).\n",
            "excerpt": "<span class=\"highlight\">and</span> [...]. If your find supports the -<span class=\"highlight\">regex</span> option (GNU find does), <span class=\"highlight\">and</span> if you really need regexes, then it&#39;s trivial to modify the previous function. &hellip; The first line uses the <span class=\"highlight\">evil</span> eval but in a safe way: it&#39;s actually an idiomatic way to join the elements of the positional parameters with the first character of IFS (here a pipe character). &hellip; ",
            "title": "bash scripting: build a command then execute"
        },
        {
            "tags": [
                "regex",
                "nginx",
                "location",
                "url-rewriting"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 32353046,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1441351146,
            "creation_date": 1441196592,
            "body": "I want to create a nginx localtion do to the following\n\nGiven URL:\n\nexample.com/foo/bar/123456?ItemID=123456&amp;aid=0&amp;bid=0\n\nTask:\n\nIf both numbers are the same and aid and bid are zero, then rewreite the url to example.com/foo/bar/123456\n\nMy Try:\n\n\n\nBut that doesn&#39;t work. ;)\n\nWould be great if s.o. could give me a hint.\n\nEDIT:\n\nnginx seems not to match GET-Parameters by regex at all (in location line) so you have to use $args and check with if (which can be evil according to documentation).\n",
            "excerpt": "ItemID=123456&amp;aid=0&amp;bid=0\n\nTask:\n\nIf both numbers are the same <span class=\"highlight\">and</span> aid <span class=\"highlight\">and</span> bid are zero, then rewreite the url to example.com/foo/bar/123456\n\nMy Try:\n\nlocation ~ ^/foo/bar/(?&lt;prid&gt;\\d+)\\? &hellip; EDIT:\n\nnginx seems not to match GET-Parameters by <span class=\"highlight\">regex</span> at all (in location line) so you have to use $args <span class=\"highlight\">and</span> check with if (which can be <span class=\"highlight\">evil</span> according to documentation). &hellip; ",
            "title": "nginx remove / rewrite GET Parameters for specific URL"
        },
        {
            "tags": [
                "json",
                "vb.net"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 31755824,
            "is_answered": false,
            "question_id": 31755494,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1438379986,
            "creation_date": 1438379986,
            "body": "If you are certain that you will only ever need the hashes, you can actually use a regex to get all the hashes from this file.  Yes, this is slightly evil, because regex is normally not a suitable tool for dealing with structured data.  But if you don&#39;t care about the structure...\n\n\n",
            "excerpt": "If you are certain that you will only ever need the hashes, you can actually use a <span class=\"highlight\">regex</span> to get all the hashes from this file. &hellip; Yes, this is slightly <span class=\"highlight\">evil</span>, because <span class=\"highlight\">regex</span> is normally not a suitable tool for dealing with structured data.  But if you don&#39;t care about the structure... &hellip; ",
            "title": "obtain values to json file"
        },
        {
            "tags": [
                "python",
                "django",
                "eval"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 31598076,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1437685732,
            "creation_date": 1437685732,
            "body": "Eval is evil, rm -rf /,  etc etc... \n\nbut lets say for some silly reason I actually want to leverage the power of eval to do basic computations and conditionals.\n\nI want to get an idea of what the potential risks are for even having an eval block sitting around in my server side code, and what I can do in order to mitigate them.\n\nFor starters, eval will actually be run against user input... even scarier I know. These are super users, who, in theory can be trusted, but disgruntled former employees and the like is always a thing.\n\nThe intended use of the input is to provide a formula used to do calculations against a spreadsheet that is parsed. So for example, an intended input would be something like:\n\n\n\nA regex engine is then run on this value to replace all curly bracket values with appropriate column values, to turn the statement into something like:\n\n\n\nHowever, left alone, I recognize they could do something like:\n\n\n\nSo, the idea is to come up with clean method that will allow for:\n1) String values to be valid\n2) Anything within brackets to be valid since it won&#39;t be eval&#39;d\n3) Nothing else containing alphanumeric characters to be valid.\n\nWhat I&#39;ve got so far is:\n\n\n\nWhich gets run on the model save method, disallowing any arbitrary alphanumeric commands hanging around.\n\nAre there any flaws/other risks I&#39;m missing with this approach?\n",
            "excerpt": "Eval is <span class=\"highlight\">evil</span>, rm -rf /,  etc etc... \n\nbut lets say for some silly reason I actually want to leverage the power of eval to do basic computations <span class=\"highlight\">and</span> conditionals. &hellip; So for example, an intended input would be something like:\n\n({{Column A}} + {{Column B}}) * {{Column C}}\n\n\nA <span class=\"highlight\">regex</span> engine is then run on this value to replace all curly bracket values with appropriate &hellip; ",
            "title": "Using an eval() server side in a Python/Django application"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "node.js"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 31228720,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1436087500,
            "creation_date": 1436086803,
            "body": "I&#39;m looking for a more elegant way to use regexes in a control structure. I want to be able to perform operations using a match without declaring the regex outside of where it is needed or having to perform a the match operation twice. \n\nHere is my code edited for brevity:\n\n\n\nI am away this is very nit-picky, but I will accept it if it is a necessary evil. \n",
            "excerpt": "I want to be able to perform operations using a match without declaring the <span class=\"highlight\">regex</span> outside of where it is needed or having to perform a the match operation twice. &hellip; */\n    var youtubeMatch = regexYoutube.exec(content);\n    return &quot;http://img.youtube.com/vi/&quot;+youtubeMatch[4]+&quot;/0.jpg&quot;;\n}\n\n\nI am away this is very nit-picky, but I will accept it if it is a necessary <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Elegant Regex Use in Control Structure"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "node.js"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 31228797,
            "is_answered": false,
            "question_id": 31228720,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1436087500,
            "creation_date": 1436087500,
            "body": "I&#39;d modify the  function to be something else, such as , and return the value of the .exec. Then instead of declaring the regex outside the , declare it inside the function.\n\nThen you can replace  with a call to  and checking if it returned anything, and replace the exec call you use elsewhere with a use of the same function.\n\nThis is a sort of evil in its own way since it uses the side effect of a function for something else (the return value for a simple is check). But it is an alternative to defining the regex in a place it is not used.\n\nWhich as mentioned in a comment, is not really all that evil. Keep your scopes small and it won&#39;t get too confusing - the code is pretty readable to me as is.\n",
            "excerpt": "Then instead of declaring the <span class=\"highlight\">regex</span> outside the execYouTubeRegex, declare it inside the function. &hellip; But it is an alternative to defining the <span class=\"highlight\">regex</span> in a place it is not used.\n\nWhich as mentioned in a comment, is not really all that <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Elegant Regex Use in Control Structure"
        },
        {
            "tags": [
                "regex",
                "perl",
                "substitution"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 30812890,
            "is_answered": false,
            "question_id": 30812582,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1434147547,
            "creation_date": 1434146976,
            "body": "Something like this using eval  (untested).\n\n\n\nUsing the eval flag in the  form means to evaluate the replacement\nside as a line of code that returns a value.  \n\nIn this case it executes a ternary conditional in the replacement code.  \n\nIt&#39;s sort of like an inline regex callback.\nIt&#39;s much more complicated though since it can be like  so\nbetter to refer to the docs.  \n\nRemember, eval is really evil, misspelled !!\n",
            "excerpt": "It&#39;s sort of like an inline <span class=\"highlight\">regex</span> callback.\nIt&#39;s much more complicated though since it can be like s///eeg so\nbetter to refer to the docs.  \n\nRemember, eval is really <span class=\"highlight\">evil</span>, misspelled !! &hellip; ",
            "title": "perl: substitute pattern with pattern of different size"
        },
        {
            "tags": [
                "java",
                "text",
                "split",
                "bufferedreader",
                "stringbuilder"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 30346438,
            "is_answered": false,
            "question_id": 30345816,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1432194325,
            "creation_date": 1432116177,
            "body": "You want to find the lines which match &quot;I n&quot;.\n\nThe regex you need is : \n\n\n indicates the beginning of the line. Hence, if there are some whitespaces or text before , the line will not match the regex.\n indicates any digit. For the sake of simplicty, I allow only one digit in this regex.\n indicates the end of the line. Hence, if there are some characters after the digit, the line will not match the expression.\n\n\nNow, you need to read the file line by line and keep a reference to the file in which you write the current line.\n\nReading a file line by line is much easier in Java 8 with \n\n\n\nNote : In order to extract the digit, I use a raw  which I consider as evil but it is easier to understand. You can do it in a better way with a  and a   : \n\nWith this regex : &quot;&quot;. (The same as before but with parenthesis which indicates what you will want to capture). Then : \n\n\n",
            "excerpt": "Path path = Paths.get(&quot;path/to/your/input/file.txt&quot;);\n  Files.lines(path).forEach(line -&gt; {\n    if(line.matches(<span class=\"highlight\">REGEX</span>)) {\n      //Extract the digit <span class=\"highlight\">and</span> update currentFile\n      currentFile = &quot;File DOC_ID &hellip; You can do it in a better way with a Pattern <span class=\"highlight\">and</span> a Matcher  : \n\nWith this <span class=\"highlight\">regex</span> : &quot;.I (\\\\d)&quot;. (The same as before but with parenthesis which indicates what you will want to capture). &hellip; ",
            "title": "Splitting a text file into multiple files by specific character sequence"
        },
        {
            "tags": [
                "notepad++",
                "wildcard"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 30292359,
            "is_answered": false,
            "question_id": 30292050,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1431898285,
            "creation_date": 1431898285,
            "body": "Just try this regex substitution using perl\n\n\n\nIf you see &quot;OK&quot;, it just works\n\nI assumed the evil code is enclosed in some sort of opening/closing tags in HEX representation.\n\nIMPORTANT!! Please, do a BACK UP before giving it a try!!\n",
            "excerpt": "Just try this <span class=\"highlight\">regex</span> substitution using perl\n\nperl -0777 -pe &#39;s/#([0-9a-f]{6})#.+? &hellip; #\\/\\1#/OK/s&#39; &lt; test.txt\n\n\nIf you see &quot;OK&quot;, it just works\n\nI assumed the <span class=\"highlight\">evil</span> code is enclosed in some sort of opening/closing tags in HEX representation.\n\nIMPORTANT!! &hellip; ",
            "title": "Notepad++ erase anything in between.. without REGEX?"
        },
        {
            "tags": [
                "python",
                "regex"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 30004823,
            "is_answered": false,
            "question_id": 29997723,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1430584829,
            "creation_date": 1430584829,
            "body": "I&#39;d take a different approach, just to be different. Rather than listing out all the compounds in one big regex, it might be faster to make them a set, grab everything that might be a compound, and filter it after the fact.\n\n\n\nThis should be faster if you have tons of strings to search, since testing set membership is much faster than a regex parse. If you just have a few, the cost of building the set might outweigh the speed in parsing the strings. The golden rule is to profile your code and remember that premature optimization is the root of all evil\n",
            "excerpt": "Rather than listing out all the compounds in one big <span class=\"highlight\">regex</span>, it might be faster to make them a set, grab everything that might be a compound, <span class=\"highlight\">and</span> filter it after the fact. &hellip; The golden rule is to profile your code <span class=\"highlight\">and</span> remember that premature optimization is the root of all <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Maximize substring match in regular expression"
        },
        {
            "tags": [
                "java",
                "regex",
                "string",
                "parsing"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 29979517,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1430507939,
            "creation_date": 1430436744,
            "body": "I am scraping information from a log that I need 3 elements. Another added difficulty is that I am parsing the log via  in my java program aka one(1) line at a time. (If there is a possibility to read multiple lines when parsing let me know :) ) NOTE: I have no control over the log output format.\n\nThere are 2 possibilities of what I must extract. Either the log is nice and gives the following\n\nNICE FORMAT\n\n\n\nwhere I must grab  ,  , and \n\nNow the not so nice case: If the name is too long, it bumps everything else to the next line like is below, now the only thing after the first element is one blank space followed by a newline (\\n) which gets clobbered by  anyway.\n\nEVIL FORMAT : Note each line is in a separate arraylist entry.\n\n\n\nTherefore what the regex actually sees is:\n\n\n\nCORNER CASE FORMAT that also occurs within the log but I DO NOT want\n\n\n\nFinally below is my Pattern line I am currently using for the first line and  is what is used on the next line when group 2 of the first line is empty.\n\nUPDATE: The pattern below works for the NICE FORMAT and EVIL FORMAT But now pattern  has no matches, even though on regex101.com it is correct. Link: https://regex101.com/r/vS7vZ3/9\n\nUPDATE2: I fixed it, I forgot to add  once I compiled the second line with Pattern pline2. Corrected code is below.\n\n\n\nTo give a little background I am first matching the name  to  followed by the address  to   and finally the size  to . This is all assuming the log is in the NICE format. If it is in the EVIL format I see that group(2) is empty and therefore readin the next line of the log to a temp buffer and apply the second pattern  to new line. \n\nCan someone help me with the regex?\nIs there a way I can make sure my current line (or even better, just the second grouping) is either the NICE FORMAT or is empty?\n\nAs requested my java code:\n\n\n\nAn Aside, The output I currently get:\n\n\n",
            "excerpt": "UPDATE: The pattern below works for the NICE FORMAT <span class=\"highlight\">and</span> <span class=\"highlight\">EVIL</span> FORMAT But now pattern pline2 has no matches, even though on regex101.com it is correct. &hellip; If it is in the <span class=\"highlight\">EVIL</span> format I see that group(2) is empty <span class=\"highlight\">and</span> therefore readin the next line of the log to a temp buffer <span class=\"highlight\">and</span> apply the second pattern pline2 to new line. &hellip; ",
            "title": "Regex expression for multiple patterns in 1 line"
        },
        {
            "tags": [
                "ruby"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 29954906,
            "is_answered": false,
            "question_id": 29948276,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1430342779,
            "creation_date": 1430342779,
            "body": "Parsing the data with JSON is a safe and effective approach when the data is known to be well formed and parsable:\n\n\n\nOtherwise a gsub solution using either regex or simple method chaining can be employed, but this sort of naive approach may remove quotation marks and brackets from the inner elements of the array string being parsed, potentially mangling the data you meant to extract. \n\n\n\nNotice how the gsub approach has a different result than the JSON parse method.  \n\nIn theory, Ruby&#39;s eval could also be used to parse the string data into an array and then join it, but eval is meant for interpreting strings and running them as ruby code, and as such should only be used when it is important to run arbitrary ruby code that has been encoded as a string.  The method name &#39;eval&#39; actually comes from the word &#39;evaluate&#39;, not evil.  Despite this, however, evaluation is not an objective in this scenario; parsing is.  \n\nAnother reason why people are hesitant to recommend eval for trivial tasks like data parsing is that the worst case scenario of JSON#parse is that it fails to parse.  Whereas the worst case scenario of eval is that you&#39;ve completely deleted your file system by parsing a string that you didn&#39;t expect to be there when you first designed your code.  \n",
            "excerpt": "keep\\&quot;, \\&quot;Char4\\&quot;]&quot;\nrequire &#39;json&#39;\nJSON.parse(str).join(&#39;, &#39;)\n =&gt; &quot;This is a word ect, Char2, This Element uses a (\\&quot;) symbol that is important to keep, Char4&quot;\n\n\nOtherwise a gsub solution using either <span class=\"highlight\">regex</span> &hellip; The method name &#39;eval&#39; actually comes from the word &#39;evaluate&#39;, not <span class=\"highlight\">evil</span>.  Despite this, however, evaluation is not an objective in this scenario; parsing is. &hellip; ",
            "title": "gsub for removing brackets and \\ from string"
        },
        {
            "tags": [
                "python",
                "flask"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 29763456,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1429596366,
            "creation_date": 1429593169,
            "body": "Consider this string\n\n\n\nbecause it&#39;s a regex, I have to escape the dot to &#39;.&#39;, and in POST request I receive &quot;\\\\.&quot;. The result is \n\n\n\nPython3 unicode_escape this string to\n\n\n\nReplace string doesn&#39;t help\n\n\n\nast.literal_eval also doesn&#39;t work\n\n\n\nLet&#39;s try to add quote to the string:\n\n\n\neval is evil, but still the same output as literal_eval\nSo, is there anyway for me to receive the original string? The only I&#39;m thinking of is using print\n",
            "excerpt": "\\r\\n&#39;\n\n\nbecause it&#39;s a <span class=\"highlight\">regex</span>, I have to escape the dot to &#39;.&#39;, <span class=\"highlight\">and</span> in POST request I receive &quot;\\\\.&quot;. The result is \n\nt = &#39;\\\\. &hellip; \\r\\n&#39;\n\n\neval is <span class=\"highlight\">evil</span>, but still the same output as literal_eval\nSo, is there anyway for me to receive the original string? The only I&#39;m thinking of is using print &hellip; ",
            "title": "Python escape dot character after POST"
        },
        {
            "tags": [
                "c#",
                "regex",
                "split"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 29438152,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1428092224,
            "creation_date": 1428087703,
            "body": "I want to get a regex that will split text into sentences, leaving in the punctuation (breaking on the space after the punctuation but not breaking on titles. \n\nI&#39;m almost there. \n\n\n\nsplits on the space, but also splits on the title.\n\n\n\nwon&#39;t split on titles but wipes out the punctuation.\n\nAny suggestions on combining the two expressions so that the regex will split on space after the punctuation but not split on titles?\n\nExample Text:\n\n\n  Shirking and sharking in all their many varieties have been sown broadcast by the\n      ill-fated cause; and even those who have contemplated its history\n      from the outermost circle of such evil have been insensibly tempted\n      into a loose way of letting bad things alone to take their own bad\n      course, and a loose belief that if the world go wrong it was in some\n      off-hand manner never meant to go right.\n  \n  Thus, in the midst of the mud and at the heart of the fog, sits the\n  Lord High Chancellor in his High Court of Chancery.\n  \n  &quot;Mr. Tangle,&quot; says the Lord High Chancellor, latterly something\n      restless under the eloquence of that learned gentleman.\n  \n  &quot;Mlud,&quot; says Mr. Tangle. Mr. Tangle knows more of Jarndyce and\n      Jarndyce than anybody. He is famous for it--supposed never to have\n      read anything else since he left school.\n  \n  &quot;Have you nearly concluded your argument?&quot;\n  \n  &quot;Mlud, no--variety of points--feel it my duty tsubmit--ludship,&quot; is\n      the reply that slides out of Mr. Tangle.\n  \n  &quot;Several members of the bar are still to be heard, I believe?&quot; says\n      the Chancellor with a slight smile.\n\n",
            "excerpt": "Any suggestions on combining the two expressions so that the <span class=\"highlight\">regex</span> will split on space after the punctuation but not split on titles? &hellip; of such <span class=\"highlight\">evil</span> have been insensibly tempted\n      into a loose way of letting bad things alone to take their own bad\n      course, <span class=\"highlight\">and</span> a loose belief that if the world go wrong it was in some\n      off-hand &hellip; ",
            "title": "Regex to split out sentences including their punctuation, but not on titles (Mr., Mrs., etc.)"
        },
        {
            "tags": [
                "asp.net",
                "jquery-file-upload"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 28838365,
            "is_answered": false,
            "question_id": 28837605,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1425406011,
            "creation_date": 1425404557,
            "body": "One method, and perhaps the most simple solution, is to just use the  control, and hide it from view. Then again, although this works well if you want the user to choose the files they&#39;re uploading, it might not be the best solution if you want to implement some kind of HTML5 drag&#39;n&#39;drop solution, etc. \n\nCoincidentally, I spent pretty much all of last week studying how to upload files via javascript to ASP.NET web forms. I developed a drag and drop interface that uses HTML5, and also developed a fail-over method with which the user could choose and upload their files via the  control.\n\nDue to the feature being low-priority, we only fully developed the  control, but I&#39;m happy to share that feature with you here:\n\nHTML\n\nWe&#39;re going to create an ASP file upload control, and hide certain parts of it. The rest of it, we can add styles to (or do whatever in javascript and CSS) to make it look fancy and customized. The CONTINUE BUTTON\n\n\n\n\n\nJavascript\n\n\n\n\n\nCODE-BEHIND\n\nNow we just need to add the VB.NET (or C#) to handle the click-event for the continue button.\n\n\n\n\n\nOther Caveats\n\nWe did a couple things in the above code that I did not explain, such as the &quot;FolderPath&quot; application setting (we used this in CODE-BEHIND section to determine where the file should be saved). If you&#39;ve never used application settings in the web.config, it&#39;s very simple. For the sake of the above example, we would add the following snippet between our  tags:\n\n\n\nI can then access the value of this appSetting using \n\n\n\nor\n\n\n\nAlso, I stopped with the function to &quot;getExcelSheets&quot; because that&#39;s more specific to my application, and probably beyond the scope of this tutorial.\n\n\n\nAdditional Resources\n\nI have a good habit of methodically saving useful bookmarks. Here is what I have from my &quot;File Uploader&quot; section...\n\n\nCodeProject.com - File Upload with ASP.NET\nReading files in Javascript using File APIs\nStack Overflow - jQuery Ajax File Upload to ASP.NET web service with\nJSON response\nDrag and Drop Asynchronous File Upload &lt;-- DEFINITELY THE    MOST\nUSEFUL\n\n",
            "excerpt": "(xlsx|xls)$/i; // set the <span class=\"highlight\">regex</span> to test for accepted file extensions.\n\n    if (f.length &amp;&amp; ! &hellip; stuff with it that kind of made it a necessary <span class=\"highlight\">evil</span> :)\n        deactivateChooseFilesCancelButton(); // if nothing selected, disable <span class=\"highlight\">and</span> hide cancel button &lt;-- these functions just do some fluffy stuff &hellip; ",
            "title": "How can i upload a file to server (asp.net web form) with ajax?"
        },
        {
            "tags": [
                "xml",
                "parsing",
                "bash",
                "sh"
            ],
            "question_score": 18,
            "is_accepted": false,
            "answer_id": 6873226,
            "is_answered": false,
            "question_id": 6873070,
            "item_type": "answer",
            "score": 12,
            "last_activity_date": 1424503036,
            "creation_date": 1311943239,
            "body": "You can use the  command (from package  on Debian-based distros) with the following XSLT sheet:\n\n\n\nThen use the command:\n\n\n\nOr you could also use regexes, but modifying XML through regexes is pure evil :)\n",
            "excerpt": "xsltproc --stringparam tagReplacement polop \\\n         --stringparam tag1Replacement palap \\\n         transform.xsl input.xml\n\n\nOr you could also use regexes, but modifying XML through regexes is pure <span class=\"highlight\">evil</span> &hellip; ",
            "title": "how to edit XML using bash script?"
        },
        {
            "tags": [
                "xml",
                "xpath",
                "openxml",
                "docx",
                "phpdocx"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 28282467,
            "is_answered": false,
            "question_id": 28223112,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1422895323,
            "creation_date": 1422895323,
            "body": "OK, I found it out. The parantheses are actually not a problem at all, I just didn&#39;t realize how PHPDocx handles the block substitution.\n\nThere&#39;s a sneaky, but evil Regex which just replaces everything from the variable until the next occurrence of the variable, just like . So every occurrence of XML and stuff is stripped away and replaced with a single occurrence of $VARIABLE$.\n\nIn the next step, it searches for the occurrence of the variable via XPath and deletes the parent paragraph node.\n",
            "excerpt": "There&#39;s a sneaky, but <span class=\"highlight\">evil</span> <span class=\"highlight\">Regex</span> which just replaces everything from the variable until the next occurrence of the variable, just like \\$BLOCK_VARIABLE\\$.+?\\$BLOCK_VARIABLE\\$. &hellip; So every occurrence of XML <span class=\"highlight\">and</span> stuff is stripped away <span class=\"highlight\">and</span> replaced with a single occurrence of $VARIABLE$. &hellip; ",
            "title": "Xpath in docx, having parentheses as contains attribute"
        },
        {
            "tags": [
                "javascript",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 27865682,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1420825537,
            "creation_date": 1420823435,
            "body": "I am looking for an effective way to create array contain all matches contains regex groups matches.\n\ne.g. Regex  string  expected result \n\nMy current code looks like this:\n\n\n\nIt works, however I don&#39;t like the way how it does.\n\nThe first thing is that I actually don&#39;t know how many groups I will have in my regex variable  so I need to define a lot unnecessary variables .\n\nThe second problem Is that I decided to use evil  to prevent pushing this variables &#39;manually&#39; one by one to array, maybe there is a better solution?\n\nAnd one more thing - I did try use  but unfortunately when I have pattern  it will return me array  so it&#39;s not what I want to achieve.\n\nThanks!\n\nEDIT\n\nOk I found something which looks better\n\n\n",
            "excerpt": "The second problem Is that I decided to use <span class=\"highlight\">evil</span> eval to prevent pushing this variables &#39;manually&#39; one by one to array, maybe there is a better solution? &hellip; <span class=\"highlight\">And</span> one more thing - I did try use match() but unfortunately when I have pattern /(1)(2)(3)/g it will return me array [&#39;123&#39;] so it&#39;s not what I want to achieve.\n\nThanks! &hellip; ",
            "title": "Effective solution for create array containing all groups in regex matches"
        },
        {
            "tags": [
                "regex",
                "vb.net",
                "csv",
                "replace",
                "substring"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 27451004,
            "is_answered": false,
            "question_id": 27450102,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1418478489,
            "creation_date": 1418413537,
            "body": "Bullet proof way.  \n\n\n\nBenchmarks  \n\nSince @TheBlueDog posted a Benchmark (&#39;Edit 2&#39;), I thought I would post a\nbenchmark as well.  \n\nIts based on his input, and the intent is to demonstrate the evils of using\n&#39;to-the-end-of-string&#39; lookahead as a validation technique\n(ie. this -&gt; )  \n\nBlue Dog&#39;s regex replace method is hampered a bit with an unnecessary callback, so I\nimagine that accounts for some of his bad numbers.  \n\nDon&#39;t know Vb.net so this is done in Perl. The machine speed and language are factored out\nbecause its a relative test.\n\nSummary:   \n\n\n\nThis represents a 5 fold difference.   \n\nBenchmark in Perl, 150K line (167MB file):  \n\n\n\nOutput:  \n\n\n",
            "excerpt": "Its based on his input, <span class=\"highlight\">and</span> the intent is to demonstrate the evils of using\n&#39;to-the-end-of-string&#39; lookahead as a validation technique\n(ie. this -&gt; ^[^&quot;]*(? &hellip; :&quot;[^&quot;]*&quot;[^&quot;]*)*$)  \n\nBlue Dog&#39;s <span class=\"highlight\">regex</span> replace method is hampered a bit with an unnecessary callback, so I\nimagine that accounts for some of his bad numbers. &hellip; ",
            "title": "How to convert comma-delimited file to pipe-delimited in vb.net"
        },
        {
            "tags": [
                "emacs",
                "evil-mode"
            ],
            "question_score": 6,
            "is_accepted": false,
            "answer_id": 25719360,
            "is_answered": false,
            "question_id": 25463369,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1417604579,
            "creation_date": 1410161616,
            "body": "When reading the mailing list someone mentioned it is better to put keybindings in  instead of hooks, so here it is:\n\n\n\nAs for defining new text objects, I must recommend this function from @gordon-gustafson:\n\n\n\nSo the  part would become:\n\n\n",
            "excerpt": "end type)\n        (<span class=\"highlight\">evil</span>-select-paren ,start-<span class=\"highlight\">regex</span> ,end-<span class=\"highlight\">regex</span> beg end type count t))\n      (<span class=\"highlight\">evil</span>-define-text-object ,outer-name (count &amp;optional beg end type)\n        (<span class=\"highlight\">evil</span>-select-paren ,start-<span class=\"highlight\">regex</span> ,end-<span class=\"highlight\">regex</span> &hellip; &gt; part would become:\n\n(define-<span class=\"highlight\">and</span>-bind-text-object &quot;&lt;key&gt;&quot; &quot;&lt;start-<span class=\"highlight\">regex</span>&gt;&quot; &quot;&lt;end-<span class=\"highlight\">regex</span>&gt;&quot;) &hellip; ",
            "title": "Mode-specific or buffer-local text objects in evil?"
        },
        {
            "tags": [
                "c#",
                "html",
                "regex",
                "vb.net",
                "strip"
            ],
            "question_score": 3,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 26991134,
            "item_type": "question",
            "score": 3,
            "last_activity_date": 1416309300,
            "creation_date": 1416304028,
            "body": "There is a tough nut to crack.\n\nI have a HTML which needs to be stripped of some tags, attributes AND properties.\n\nBasically there are three different approaches which are to be considered:\n\n\nString Operations: Iterate through the HTML string and strip it via string operations &#39;manually&#39;\nRegex: Parsing HTML with RegEx is evil. Is stripping HTML evil too?\nUsing a library to strip it (e.g. HTML Agility Pack)\n\n\nMy wish is that I have lists for:\n\n\nacceptedTags (e.g. SPAN, DIV, OL, LI)\nacceptedAttributes (e.g. STYLE, SRC)\nacceptedProperties (e.g. TEXT-ALIGN, FONT-WEIGHT, COLOR, BACKGROUND-COLOR)\n\n\nWhich I can pass to this function which strips the HTML.\n\nExample Input:\n\n\n\nExample Output (with parameter lists from above):\n\n\n\n\nthe entire tag Body is stripped (not accepted tag)\nproperties margin, font-family and font-size are stripped from DIV-Tag\nproperties font-family and font-size are stripped from SPAN-Tag.\n\n\nWhat have I tried?\n\nRegex seemed to be the best approach at the first glance. But I couldn&#39;t get it working properly.\nArticles on Stackoverflow I had a look at:\n\n\nRegular expression to remove HTML tags\nHow to clean HTML tags using C#\n\n\n...and many more.\n\nI tried the following regex:\n\n\n\nHowever, this is only removing tags and no attributes or properties!\n\nI&#39;m definitely not looking for someone who&#39;s doing the whole job. Rather for someone, who points me to the right direction.\n\nI&#39;m happy with either C# or VB.NET as answers.\n",
            "excerpt": "Basically there are three different approaches which are to be considered:\n\n\nString Operations: Iterate through the HTML string <span class=\"highlight\">and</span> strip it via string operations &#39;manually&#39;\n<span class=\"highlight\">Regex</span>: Parsing HTML with <span class=\"highlight\">RegEx</span> &hellip; is <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "HTML Strip Function"
        },
        {
            "tags": [
                "emacs"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 26866228,
            "is_answered": false,
            "question_id": 26856800,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1415713130,
            "creation_date": 1415713130,
            "body": "An Evil mode solution would be to use this command:\n\n\n\nWhich means:\n\n\n - On any line containing the regex (which matches two quoted strings)\n - In normal mode\n - go to the third , move one character right, and change the text until the next  to &quot;replaced&quot;\n\n\nIt also takes ranges, so you can use it on a subset of lines if you want to.\n",
            "excerpt": "An <span class=\"highlight\">Evil</span> mode solution would be to use this command:\n\n:g/&quot;.*&quot;.*&quot;. &hellip; .*&quot; - On any line containing the <span class=\"highlight\">regex</span> (which matches two quoted strings)\nnorm - In normal mode\n3f&quot;lct&quot;replaced - go to the third &quot;, move one character right, <span class=\"highlight\">and</span> change the text until the next &quot; to &quot;replaced &hellip; ",
            "title": "how to replace the second occurrent in emacs evil?"
        },
        {
            "tags": [
                "vba",
                "ms-word",
                "vsto"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 26383799,
            "is_answered": false,
            "question_id": 26380163,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1413405396,
            "creation_date": 1413379600,
            "body": "It&#39;s not really pretty but you can try to remove the unwanted characters by Regex. For example to remove the  letters (it has code 7):\n\n\n\nNow you have to identify the other &#39;evil&#39; characters and add them to the char array. If it works you will get a string whose length corresponds with the number of  in your document. Probably you have to adapt this code by experimenting. (I was not sure which language you are using - I supposed C#.)\n\nUpdate\nAnother idea (if it is applicable to your analyzer tool):\n\nBreak your problem down to single paragraphs:\n\n\n\nWith this paragraph range objects and the contained text strings you do the same as you tried to do with the whole document object and its text - just paragraph by paragraph. All these paragraphs are &#39;addressable&#39; by ranges and Move operations as you already do it. I suppose that the problematic characters are outside or at the end of the paragraphs so they don&#39;t influence the character counting inside these paragraphs. \n\nAs I can&#39;t reproduce what you call endpaper I can&#39;t validate it. Besides I don&#39;t know if special text ranges as page headers and tables of content are covered by paragraphs. But at least you can reduce your problem to smaller ranges. I think it is worth trying.\n",
            "excerpt": "It&#39;s not really pretty but you can try to remove the unwanted characters by <span class=\"highlight\">Regex</span>. &hellip; &#39; characters <span class=\"highlight\">and</span> add them to the char array. &hellip; ",
            "title": "Word.Range : Move Range index in the formatted text that corresponds to the plain text"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 26165379,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1412269700,
            "creation_date": 1412267800,
            "body": "I&#39;m writing a function that will take in an object and modify a field within the object (could be a nested field). For instance, modifyObj(obj, &#39;nested.nested&#39;, 2) will essentially do obj.nested.nested = 2. The most straightforward way seems to be to use eval, but the consensus seems to be using eval is evil? http://jsfiddle.net/zntf6bfw/\n\n\n\nThe alternative is to use regex to determine if the passed in field is nested, and if so, to use a loop to get a nested object and modify it (which will modify the overall object). However, this seems unnecessarily complicated, and would this count as a valid use case for eval?\n\n\n",
            "excerpt": "The most straightforward way seems to be to use eval, but the consensus seems to be using eval is <span class=\"highlight\">evil</span>? &hellip; .&#39; + field + &#39;=&#39; + val;\n    eval(str);\n}\n\n\nThe alternative is to use <span class=\"highlight\">regex</span> to determine if the passed in field is nested, <span class=\"highlight\">and</span> if so, to use a loop to get a nested object <span class=\"highlight\">and</span> modify it (which will modify &hellip; ",
            "title": "Is using eval appropriate when setting deeply nested properties in an object?"
        },
        {
            "tags": [
                "php",
                "arrays",
                "regex"
            ],
            "question_score": 8,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 25737133,
            "item_type": "question",
            "score": 8,
            "last_activity_date": 1410242201,
            "creation_date": 1410239931,
            "body": "In PHP, is there a function or anything else that will remove all elements in an array that do not match a regex.\n\nMy regex is this: \n\nMy array&#39;s come in like this, from a form (they&#39;re tags actually)\n\nOriginal array from form. Note: evil tags\n\n\n\nCleaned array. Note, no evil tags\n\n\n\nI currently do like this, but is there a better way? Without the loop maybe?\n\n\n",
            "excerpt": "In PHP, is there a function or anything else that will remove all elements in an array that do not match a <span class=\"highlight\">regex</span>. &hellip; Note: <span class=\"highlight\">evil</span> tags\n\n$arr = array (\n    &quot;french-cuisine&quot;,\n    &quot;french-fries&quot;,\n    &quot;snack-food&quot;,\n    &quot;<span class=\"highlight\">evil</span>*tag!!&quot;,\n    &quot;fast-food&quot;,\n    &quot;more~<span class=\"highlight\">evil</span>*tags&quot;\n);\n\n\nCleaned array. &hellip; ",
            "title": "Remove elements from an array that do not match a regex"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 25480175,
            "is_answered": false,
            "question_id": 25235854,
            "item_type": "answer",
            "score": 8,
            "last_activity_date": 1408949004,
            "creation_date": 1408948368,
            "body": "Your program has likely encountered what&#39;s called catastrophic backtracking.\nIf you have a bit of time, let&#39;s look at how your regex works...\nQuick refresher: How regex works: The state machine always reads from left to right, backtracking where necessary.\nOn the left hand side, we have our pattern:\n\nAnd here&#39;s the String to match:\n\nFrom the regex101 debugger, your regex took 78540 steps to fail. This is because you used quantifiers that are greedy and not possessive (backtracking).\n\n... Long story short, because the input string fails to match, every quantifier within your regex causes indefinite backtracking - Every character is released from  and then  and then both and then a group is released from  to backtrack more.\nHere&#39;s a few solutions you should follow:\nAvoid abundant quantifiers!\nIf you revise your expression, you&#39;ll see that the pattern is logically same as:\n\nThis uses a step of logical induction to reduce the regex upstairs to match far quicker, now at 97 steps!\n\nUse possessive quantifiers while you can!\nAs I mentioned,  is evil because it backtracks in a terrible manner. We&#39;re in Java, what can we do?\nThis solution works only because  and  matches distinct items. We can use a possessive group!\n\nThese simple &quot;&quot; denotes &quot;We&#39;re not backtracking if we fail the match from here&quot;. This is an extremely effective solution, and cuts off any need for backtracking. Whenever you have two distinct groups with a quantifier in between, use them. And if you need some proof on the effectiveness, here&#39;s our scorecard:\n\nRead also:\n\nThe Stack Overflow Regex Reference\nReDoS - Wikipedia\n\nOnline Demos:\n\nRegEx demo 1\nRegEx demo 2\n\n",
            "excerpt": "As I mentioned, /^([a-zA-Z]+ *)+$/ is <span class=\"highlight\">evil</span> because it backtracks in a terrible manner. We&#39;re in Java, what can we do?\nThis solution works only because [a-zA-Z] <span class=\"highlight\">and</span>   matches distinct items. &hellip; <span class=\"highlight\">And</span> if you need some proof on the effectiveness, here&#39;s our scorecard:\n\nRead also:\n\nThe Stack Overflow <span class=\"highlight\">Regex</span> Reference\nReDoS - Wikipedia\n\nOnline Demos:\n\n<span class=\"highlight\">RegEx</span> demo 1\n<span class=\"highlight\">RegEx</span> demo 2 &hellip; ",
            "title": "Program run forever when matching regex"
        },
        {
            "tags": [
                "python",
                "html",
                "regex",
                "parsing",
                "python-3.x"
            ],
            "question_score": 4,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 25121165,
            "item_type": "question",
            "score": 4,
            "last_activity_date": 1407174661,
            "creation_date": 1407162894,
            "body": "I have the following HTML and I need to remove the script tags and any script related attributes in the HTML. By script related attributes I mean any attribute that starts with on. \n\n\n\nMy first thought was to use BeautifulSoup to remove the tags and attributes. Unfortunately, I am unable to use BeautifulSoup. Seeing that BeautifulSoup is off the table I can see two options for doing this. The first option I see is splitting the strings and parsing based on index. This seems like a bad solution to me.\n\nThe other option is to use Regular Expressions. However, we know that isn&#39;t a good solution either (Cthulhu Parsing).\n\nNow with that in mind, I personally feel it is alright to use regular expressions to strip the attributes. After all, with those it is still simple string manipulation. \n\nSo for removing the attributes I have:\n\n\n\nAs I&#39;ve said before, I personally think the above perfectly acceptable use of Regular Expression with HTML. But still I would like to get some opinions on the above usage. \n\nThen there is the question of the script tags. I&#39;m very tempted to go with Regular Expressions for this because I know them and I know what I need is pretty simple. Something like:\n\n\n\nThe above would start to get me close to what I need. And yes I realize the above RegEx will grab everything starting at the first opening script tag until the last closing script tag, but it&#39;s a starting example. \n\nI&#39;m very tempted to use Regular Expressions as I&#39;m familiar with them (more so than Python) and I know that is the quickest way to achieve the results I want, at least for me it is. \n\nSo I need help to go against my nature and not be evil. I want to be evil and use RegEx so somebody please show me the light and guide me to the promised land on non-Regular Expressions.\n\nThanks\n\nUpdate:\n\nIt looks like I wasn&#39;t very clear about what my question actually is, I apologize for that. My question is how can I parse the HTML using pure Python without Regular Expressions? \n\n\n\nAs for the above code example, it&#39;s wrong. I know it is wrong, I was using it as an example of a starting point. \n\nI hope this clears up my question some\n\nUpdate 2\n\nI just wanted to add a few more notes about what I am  doing. \n\nI am crawling a web site to get the data I need.\n\nOnce we have the page that contains the data we need it is saved to the database.\n\nThen the saved web page is displayed to the user.\n\nThe issue I am trying to solve happens here. The application throws a script error when you attempt to interact with the page that forces the user to click on a confirmation box. The application is not a web browser but uses the web browser DLL in Windows (I cannot remember the name at the moment).\n\nThe error in question only happens in this one page for this one web site.\n\nUpdate 3\n\nAfter adding the update I realized I was over thinking the problem, I was looking for a more generic solution. However, in this case that isn&#39;t what is needed. \n\nThe page is dynamically generated, however the script tags will stay static. With that in mind the solution becomes much simpler. With that I no longer need to treat it like HTML but as static strings.\n\nSo the solution I&#39;m looking at is\n\n\n\nI would like to avoid Regular Expression however, since I&#39;m limited to only using the standard library regular expressions seems like the best solution in this case. Which means @skamazin&#39;s answer is correct. \n",
            "excerpt": "<span class=\"highlight\">And</span> yes I realize the above <span class=\"highlight\">RegEx</span> will grab everything starting at the first opening script tag until the last closing script tag, but it&#39;s a starting example. &hellip; So I need help to go against my nature <span class=\"highlight\">and</span> not be <span class=\"highlight\">evil</span>. I want to be <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> use <span class=\"highlight\">RegEx</span> so somebody please show me the light <span class=\"highlight\">and</span> guide me to the promised land on non-Regular Expressions. &hellip; ",
            "title": "Remove Script tag and on attributes from HTML"
        },
        {
            "tags": [
                "php",
                "mysql"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 22251076,
            "is_answered": false,
            "question_id": 22249833,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1405667886,
            "creation_date": 1394198034,
            "body": "Eval is Evil\nFirst of all: don&#39;t use   unless there is a good reason. And there is never a good reason.\nin the worst case  makes your application vulnerable to injection attacks and also it&#39;s very slow. A bit of research reveals plenty of reasons why eval is a big no-no.\nDon&#39;t save your calculation code into the database\nIf you do so and you would like to switch from PHP to another language you would still have PHP code in your database. It makes it really hard to migrate languages. You should always strive to make as many parts of your application as independent as possible.\nIn this case you would tight-couple the language you use, to the database. That&#39;s a bad practice.\nAlso the only possibilities to run your calculations from the database would be to eval them (which is bad, see above) or to disassemble the string with string operations or regex which causes unnecessary effort.\nIt&#39;s all about Strategy\nIn order to solve your problem you must execute code dependent of which calculation you need. That could be either done with switch-case-statements or if-statements. But that&#39;s also not a very elegant solution. Imagine you would need to execute other operations before calculating in the future, or extend functionality. You would need to update all your cases or if-statements.\nThere is a nice design-pattern which is called Strategy Pattern. The strategy pattern solves problems when one use-case can be handled differently which is probably what you want.\nYou want to calculate something (use-case) and there are different calculation types for it (different strategies)\nHow it works\nTo implement the Strategy pattern you basically need three things.\n\nA class where you inject your strategies. It&#39;s basically a wrapper for your strategy tasks.\nAn interface which will be implemented by your strategies\nYour strategies\n\nYour interface could look like this:\n\nThe interface will make sure that all your strategies provide a method to actually run the calculation. Nothing special.\nNext you may want to have a base class that takes your calculation operators as constructor arguments and stores them into properties.\n\nNow it&#39;s getting serious. We are implementing our strategies.\n\nOf course you could clean this one up a bit, but what I want to point out here is the class declaration.\nWe are extending our  class so that we can pass the arithmetic operations via constructor and we are implementing the  which tells our class: &quot;Hey! You must provide a calculate method, I don&#39;t care whether you want or not.\nWe&#39;ll see later why this is an integral part of the pattern.\nSo we have two concrete classes that contain the actual code for the actual arithmetic operation. If you would ever need to, you could change it easily as you see.\nTo add more operations just add another class.\nNow we will create a class where our strategies can be injected. Later you will instantiate an object of this class and work with it.\nHere is how it looks like:\n\nThe most important part here is the constructor. See how we type-hint our interface here. By doing that we make sure that only an object can be injected (Dependency Injection) whose class implements the interface. We do not need to demand a concrete class here. That&#39;s the crucial point here.\nAlso there&#39;s a calculate method in there. It&#39;s just a wrapper for our strategy to execute it&#39;s calculate method.\nWrapping it up\nSo now we just need to create an object of our  class and pass an object of one of our strategy classes (that contain the code for the arithmetic operations).\n\nTry replacing the string stored in  to  and you see that the operation for calculating the percentage will be executed.\nConclusion\nThe strategy pattern allowed you to create a clean interface for working with dynamic tasks that are only made concrete during runtime. Neither your database needs to know how we calculate things, nor your actual calculator does. The only thing we need to make sure is to code against an interface that provides a method to let us calculate things.\n",
            "excerpt": "Eval is <span class=\"highlight\">Evil</span>\nFirst of all: don&#39;t use  eval() unless there is a good reason. &hellip; <span class=\"highlight\">And</span> there is never a good reason.\nin the worst case eval() makes your application vulnerable to injection attacks <span class=\"highlight\">and</span> also it&#39;s very slow. &hellip; ",
            "title": "Save Calculation in Code or Database?"
        },
        {
            "tags": [
                "c#",
                ".net"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 24476439,
            "is_answered": false,
            "question_id": 24476326,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1404048489,
            "creation_date": 1404048170,
            "body": "The sane way would be to use a HTML parser and querying library. I can suggest CsQuery, which is a jQuery-like library in .NET. You could use a selector like  to match your anchor, then extract the attribute value.\n\nThis is the correct way of doing things.\n\n\n\nBut if you only ever want to get this one attribute and don&#39;t do anything with the HTML source ever again, it might be easier to just use a regex, but beware: parsing HTML with regex is evil.\n\nSo if all you want to do is just extract this one piece of information, as an exceptional measure, for your information, you could use that:\n\n\n\nBut try CsQuery first. It&#39;s a much better approach.\n",
            "excerpt": "The sane way would be to use a HTML parser <span class=\"highlight\">and</span> querying library. I can suggest CsQuery, which is a jQuery-like library in .NET. &hellip; But if you only ever want to get this one attribute <span class=\"highlight\">and</span> don&#39;t do anything with the HTML source ever again, it might be easier to just use a <span class=\"highlight\">regex</span>, but beware: parsing HTML with <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "How can i parse specific string using indexof and substring?"
        },
        {
            "tags": [
                "filter",
                "footable"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 24253543,
            "is_answered": false,
            "question_id": 22739211,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1402962206,
            "creation_date": 1402960281,
            "body": "When Footable filters, it uses the entire text from the whole row and it uses indexof() to test.  You can see this in footable.filter.js in the filterFunction function.\n\nI had to do 3 things to solve the problem.\n\n\nReplace window.footable.options.filter.filterFunction with my own function\nDo a per column match instead of the whole row.  Depending on the HTML in your row, the spaces between the columns could be lost causing the first word of a column to concatenate with the last word of the previous column.\nUse a regex match instead of indexof().  This allows you to match a whole word.  As an example, if you us indexof() for &quot;be&quot; in &quot;Don&#39;t be evil, because that&#39;s not good&quot; will return 6 and 15 even though 15 is the beginning of a completely different word.\n\n\nHere&#39;s the function: (I&#39;m sure there are loads of improvements.  Feel free to edit...)\n\n\n\nYou can find a plunk here: http://plnkr.co/edit/P2DWDtyHP3xmoUIcvgDe\n",
            "excerpt": "Use a <span class=\"highlight\">regex</span> match instead of indexof().  This allows you to match a whole word. &hellip; As an example, if you us indexof() for &quot;be&quot; in &quot;Don&#39;t be <span class=\"highlight\">evil</span>, because that&#39;s not good&quot; will return 6 <span class=\"highlight\">and</span> 15 even though 15 is the beginning of a completely different word. &hellip; ",
            "title": "Footable fine filtering"
        },
        {
            "tags": [
                "php",
                ".htaccess",
                "translation"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 20446396,
            "is_answered": false,
            "question_id": 20446273,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1400707466,
            "creation_date": 1386449037,
            "body": "The HTTP permanent redirect status code (301) is exactly for your case. All links to your site will still work, and additionally any bookmarks will be updated to your new url path construct.\n\nYou can set it up in Apache using mod_rewrite:\n\n\n\nThis will redirect every url path, which does not start with either , , , ,  to the  (default) sub path.\n\nEdit to comments:\n\nThe solution above would enable for all your links to work (old and new ones).\n\nIf you additionally want to change all the links on your page, so that search engines will see them, then your only option is to rewrite them in your PHP/HTML code (using JavaScript for this is a bad idea for many reasons).\n\nThe best option in this case is to write a helper function, which generates the links for you depending on current language. This way you will have a single point, where you can change your links, should they change once again in the future.\n\nUnfortunately, you won&#39;t be able to change all of your links at once. If you have thousands of them, and no common code which generates all of them, then you have to do this one by one. Good news is, that you are not the first one with this problem, and the developers of professional IDE&#39;s already implement tools to aid you. My personal choice is a commercial software, but other open sourced IDE&#39;s also have a pretty good find/replace options. You can for instance write a regex, which will find your links and replace them accordingly to the rules you provide. To write a good regex replacer might prove to be very beneficial as opposed to reviewing all links one by one.\n\nThis is one of the possible implementation of the url helper:\n\n\n\nNow you have to find all places where links are outputed and use the helper:\n\n\n\nNote that this is just an example of how it could work. I actually don&#39;t recommend to implement the helper as a static method, because static is pure evil. For your real implementation you might consider a helper object instead of helper method.\n",
            "excerpt": "You can for instance write a <span class=\"highlight\">regex</span>, which will find your links <span class=\"highlight\">and</span> replace them accordingly to the rules you provide. &hellip; To write a good <span class=\"highlight\">regex</span> replacer might prove to be very beneficial as opposed to reviewing all links one by one. &hellip; ",
            "title": "Smart way to add language to all website URLS?"
        },
        {
            "tags": [
                "python",
                "markdown"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 23530430,
            "is_answered": false,
            "question_id": 23530142,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1399506827,
            "creation_date": 1399506827,
            "body": "As I said in a comment,  or  are evil, a better alternative is to use the code module as in the following example. Also, you may prefer to compile the regex, in order to only perform the matching at each iteration over the input instead of building the automaton at each iteration.\n\n\n\nThough that example will output the results on  so you may want to use instead an overloaded class such as the one in this example.\n",
            "excerpt": "As I said in a comment, eval or exec are <span class=\"highlight\">evil</span>, a better alternative is to use the code module as in the following example. &hellip; Also, you may prefer to compile the <span class=\"highlight\">regex</span>, in order to only perform the matching at each iteration over the input instead of building the automaton at each iteration. &hellip; ",
            "title": "Literate Python"
        },
        {
            "tags": [
                "php",
                "arrays",
                "function",
                "parsing",
                "dom"
            ],
            "question_score": 5,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 23262987,
            "item_type": "question",
            "score": 5,
            "last_activity_date": 1398336364,
            "creation_date": 1398325912,
            "body": "I have a variable that looks like this:\n\n\n\nand I want to extract the data-tpl-attributes in a way so I end up with a resulting array that looks like this:\n\n\n\nThe number of &quot;data-tpl-&quot; attributes varies, and it&#39;s not always an  element. Other than that, it always follows the same format: .\n\nHow can I retrieve those attributes and store them in an array, without using regex? I say without regex since everywhere I look it seems like parsing html using regex is an evil practice, or is it ok in this case?\n",
            "excerpt": "How can I retrieve those attributes <span class=\"highlight\">and</span> store them in an array, without using <span class=\"highlight\">regex</span>? &hellip; I say without <span class=\"highlight\">regex</span> since everywhere I look it seems like parsing html using <span class=\"highlight\">regex</span> is an <span class=\"highlight\">evil</span> practice, or is it ok in this case? &hellip; ",
            "title": "Extract html attributes from string in PHP"
        },
        {
            "tags": [
                "python",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 22206107,
            "is_answered": false,
            "question_id": 22205972,
            "item_type": "answer",
            "score": 6,
            "last_activity_date": 1394044405,
            "creation_date": 1394043978,
            "body": "Yep, you&#39;ve got yourself a case of catastrophic backtracking, also known as an &quot;evil regex&quot;, here:\n\n\n\nHere:\n\n\n\nAnd here:\n\n\n\nReplacing  with  should do the trick.\n\nFor more information about what an evil regex is and why it&#39;s evil, check out this question:\nHow can I recognize an evil regex?\n",
            "excerpt": "Yep, you&#39;ve got yourself a case of catastrophic backtracking, also known as an &quot;<span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>&quot;, here:\n\n\\s*\n(?P&lt;q_r&gt;.*?)\n\\s*\n\n\nHere:\n\n\\s*\n(?P&lt;flag_char_code&gt;.*?)\n\\s*\n\n\n<span class=\"highlight\">And</span> here:\n\n\\s*\n\\.(?P&lt;domain&gt;.*)\\. &hellip; For more information about what an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> is <span class=\"highlight\">and</span> why it&#39;s <span class=\"highlight\">evil</span>, check out this question:\nHow can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>? &hellip; ",
            "title": "Python Regex takes so long in some cases"
        },
        {
            "tags": [
                "html",
                "regex",
                "notepad++"
            ],
            "question_score": 4,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 20942621,
            "item_type": "question",
            "score": 4,
            "last_activity_date": 1388988854,
            "creation_date": 1388979824,
            "body": "Solved (see first comment by &quot;justhalf&quot;)\n\n**\n\nI know, using RegEx for messing with HTML is evil.\n\nHowever, my means and know-how are restricted, and I don&#39;t know what else to do.\n\nThe situation is as follows:\n\nI have a website containing some 5000 pages.\n\nThere are some errors I would like to fix:\n\nThings like this:\n\n\nThe error in this example is that the value for the HTML attribute &quot;alt&quot; is enclosed in apostrophes, yet the text contains an apostrophe as well.\nThere should be many errors of this type. I want to find them all and correct them.\n\nI tried it with this pattern: :\n\nThat is: a space, followed by the name of the HTML attribute , followed by = and the attribute&#39;s value . Up until here, this should match a valid HTML attribute.\nFor a valid HTML attribute, what would follow now from here would be either a space followed by the next attribute, or the closing bracket &gt; for the HTML tag.\nSo, in order to match erroneous HTML attributes as described above, I continue the search pattern with , that is, a string which does not contain = or &gt;, followed by a &#39;. In other words, the next apostrophe is expected before any = or &gt; sign.\n\nAccording to my understanding, this should exclude valid HTML attributes, which are followed by the next HTML attribute or the closing &gt; for the HTML tag. But somehow it does not really work like that.\n\nWith this search pattern, for example, I find things like this:\n\n\n\nSo... valid HTML attributes, followed by the next.\n\nBut I thought these things should be excluded by \n\nVery confused.\n",
            "excerpt": "Solved (see first comment by &quot;justhalf&quot;)\n\n**\n\nI know, using <span class=\"highlight\">RegEx</span> for messing with HTML is <span class=\"highlight\">evil</span>.\n\nHowever, my means <span class=\"highlight\">and</span> know-how are restricted, <span class=\"highlight\">and</span> I don&#39;t know what else to do. &hellip; , followed by = <span class=\"highlight\">and</span> the attribute&#39;s value (=&#39;[^&#39;].*?&#39;). Up until here, this should match a valid HTML attribute. &hellip; ",
            "title": "find html attributes containing apostrophes using regex (notepad++)"
        },
        {
            "tags": [
                "javascript",
                "php",
                "regex",
                "perl"
            ],
            "question_score": 6,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 20928677,
            "item_type": "question",
            "score": 6,
            "last_activity_date": 1388905476,
            "creation_date": 1388882923,
            "body": "Are there any security concerns if I run a user defined regular expression on my server with a user defined input string? I&#39;m not asking about a single language, but any language really, with PHP as one of the main language I would like to know about.\n\nFor example, if I have the code below:\n\n\n\nProviding this is not a controlled environment (i.e. the user can&#39;t be trusted), what are the risks of the above code? If a similar code is written for other languages, are there risks in these other languages? If so, which languages consist of threats?\n\nI already found out about &#39;evil regular expressions&#39;, however, no matter what I try on my computer, they seem to work fine, see below.\n\nPHP\n\n\n\nJavaScript\n\n\n\nThis leads me to believe that PHP and JavaScript have a fail-safe mechanism for evil regexes. Based on that, I would have that other languages have similar features.\n\nIs this a correct assumption?\n\nFinally, for any or all of the languages that may be harmful, are there any ways to make sure the regular expressions doesn&#39;t cause damage?\n",
            "excerpt": "php\n\nif(isset($_POST[&#39;<span class=\"highlight\">regex</span>&#39;])) {\n    preg_match($_POST[&#39;<span class=\"highlight\">regex</span>&#39;], $_POST[&#39;match&#39;], $matches);\n    var_dump($matches);\n}\n\n? &hellip; JavaScript have a fail-safe mechanism for <span class=\"highlight\">evil</span> regexes. &hellip; ",
            "title": "User defined regular expression security concerns"
        },
        {
            "tags": [
                "java",
                "javascript",
                "emacs",
                "intellij-idea"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 20913196,
            "is_answered": false,
            "question_id": 20911127,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1388884827,
            "creation_date": 1388785355,
            "body": "I&#39;m hardly an Emacs veteran, but I do have an emacs obsession.\n\nFor Java:\n\n\nsemantic-mode doesn&#39;t seem to work in practice, but can theoretically jump-to-definition\nevil-mode (a bit overkill...) can jump to definitions just fine with evil-goto-definition\n\nthis works very well, and I&#39;d even suggest porting it to a non-evil environment if possible\n\nimenu (this uses a regex engine to find definitions)\n\nis already used as a fallback in semantic-ia-fast-jump\ndoesn&#39;t seem to work well on variables\n\n\n\nFor Javascript: Javascript has some very complicated scope styles, and, unfortunately, such styles are commonplace so regex based solutions can and will jump to the wrong definition at times.\n\n\nsemantic-mode doesn&#39;t work at all\nevil-goto-definition (uses a regex engine) works great as always\nimenu (uses a regex engine)\n\ndoesn&#39;t seem to work well on variables\n\nTern is a battery of (alien) semantic analysers which seems to integrate well with Emacs\n\n\nIn general, I&#39;d really recommend using evil if you can, it&#39;s superb. If you think of evil as being, well, evil, then:\n\n\nFor variables use semantic-ia for jumps in Java, and tern for jumps in JS\nFor functions use imenu. It works well on both Java and JS.\n\n\nAnd finally, here&#39;s some code that I use for almost all of my jumping. It lets you choose any function to jump to and uses imenu, so you can jump to things other than the current symbol-at-point.\n\n\n",
            "excerpt": "very well, <span class=\"highlight\">and</span> I&#39;d even suggest porting it to a non-<span class=\"highlight\">evil</span> environment if possible\n\nimenu (this uses a <span class=\"highlight\">regex</span> engine to find definitions)\n\nis already used as a fallback in semantic-ia-fast-jump\ndoesn&#39;t seem &hellip; semantic-mode doesn&#39;t work at all\n<span class=\"highlight\">evil</span>-goto-definition (uses a <span class=\"highlight\">regex</span> engine) works great as always\nimenu (uses a <span class=\"highlight\">regex</span> engine)\n\ndoesn&#39;t seem to work well on variables\n\nTern is a battery of (alien) semantic &hellip; ",
            "title": "How can one &#39;Go to definition&#39; in Java and JavaScript using Emacs?"
        },
        {
            "tags": [
                "php",
                "mysql",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 20245412,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1385564061,
            "creation_date": 1385563410,
            "body": "I have: \n\n\n\nOr I have:\n\n\n\nOr I have:\n\n\n\nAn so on...\n\nHow do I split this into a first part (SELECT-Part, FROM-Part, WHERE-Part, ...) and in a second part with evertything after the first part. \n\nI know, doing regex on SQL ist evil. It&#39;s better not to do this. Nevertheless I would like to see the regex, which can solve that. \n",
            "excerpt": "How do I split this into a first part (SELECT-Part, FROM-Part, WHERE-Part, ...) <span class=\"highlight\">and</span> in a second part with evertything after the first part. \n\nI know, doing <span class=\"highlight\">regex</span> on SQL ist <span class=\"highlight\">evil</span>. &hellip; Nevertheless I would like to see the <span class=\"highlight\">regex</span>, which can solve that. &hellip; ",
            "title": "PHP MySql query: Split into parts with regex"
        },
        {
            "tags": [
                "javascript",
                "html",
                "regex"
            ],
            "question_score": 72,
            "is_accepted": false,
            "answer_id": 6660315,
            "is_answered": false,
            "question_id": 6659351,
            "item_type": "answer",
            "score": 127,
            "last_activity_date": 1384800733,
            "creation_date": 1310452191,
            "body": "jQuery uses a regex to remove script tags in some cases and I&#39;m pretty sure its devs had a damn good reason to do so. Probably some browser does execute scripts when inserting them using .\n\nHere&#39;s the regex:\n\n\n\nAnd before people start crying &quot;but regexes for HTML are evil&quot;: Yes, they are - but for script tags they are safe because of the special behaviour - a  section may not contain  at all unless it should end at this position. So matching it with a regex is easily possible. However, from a quick look the regex above does not account for trailing whitespace inside the closing tag so you&#39;d have to test if  etc. will still work.\n",
            "excerpt": "jQuery uses a <span class=\"highlight\">regex</span> to remove script tags in some cases <span class=\"highlight\">and</span> I&#39;m pretty sure its devs had a damn good reason to do so. Probably some browser does execute scripts when inserting them using innerHTML. &hellip; &lt;\\/script&gt;)&lt;[^&lt;]*)*&lt;\\/script&gt;/gi\n\n\n<span class=\"highlight\">And</span> before people start crying &quot;but regexes for HTML are <span class=\"highlight\">evil</span>&quot;: Yes, they are - but for script tags they are safe because of the special behaviour - a &lt;script&gt; section &hellip; ",
            "title": "Removing all script tags from html with JS Regular Expression"
        },
        {
            "tags": [
                "javascript",
                "django"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 12118596,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1382983266,
            "creation_date": 1345860472,
            "body": "I have this string being stored in a cookie \n\n\n\nAKA\n\n\n\n(for pasting into a console)\n\nbut I can&#39;t parse it with JSON.parse. However, it works with eval (which is evil). The error is .\n\nOf note are the escaped commas. This was generated with the Django messaging API.\n\nDoes anyone know a good regex or other technique that can do this instead?\n\nI first need to unescape the string, (because it&#39;s a proper javascript string) and then I need the array after the dollar (  ).\n",
            "excerpt": "Does anyone know a good <span class=\"highlight\">regex</span> or other technique that can do this instead? &hellip; I first need to unescape the string, (because it&#39;s a proper javascript string) <span class=\"highlight\">and</span> then I need the array after the dollar ( s.substring(s.indexOf(&quot;$&quot;)+1) ). &hellip; ",
            "title": "JSON.parse throws &quot;SyntaxError: Unexpected Number&quot; when trying to parse a single string stored in a cookie"
        },
        {
            "tags": [
                "php",
                "regex",
                "html-parsing"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 19310606,
            "is_answered": false,
            "question_id": 18893680,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1381469196,
            "creation_date": 1381467995,
            "body": "For what it&#39;s worth, this is the regex that you&#39;re looking for:\n\nRaw Match Pattern:\n\n\n\nRaw Replace Pattern:\n\n\n\nThe PHP code is:\n\n\n\nThat being said, be forewarned -- to Andy Lester&#39;s point, this regex is not reliable. Though in my opinion, the issue is not quite &quot;the nature of HTML&quot;, or at least not simply that. The point being made in this admittedly-great resource -- http://htmlparsing.com/regexes -- is that you&#39;re attempting to re-invent the wheel on a very bumpy road. The broader concern is &quot;not that regular expressions are evil, per se, but that overuse of regular expressions is evil.&quot; That quote is by Jeff Atwood, from an exceptional elaboration on the joy and terror of regular expressions here: Regular Expressions: Now You Have Two Problems (He also has an article specifically warning against using regular expressions to parse HTML -- Parsing Html The Cthulhu Way.)\n\nSpecifically in the case of my &quot;solution&quot; above, for instance -- the following input (with line returns) will not be matched, despite being valid HTML:\n\n\n\nThe following inputs, however, are handled as desired:\n\n\n\nbecomes:\n\n\n\nA great resource for explaining the full breakdown of the regex is here: http://www.myregextester.com/index.php\n\nTo replicate the test on that tool:\n\n\nselect the &quot;replace&quot; operation\nput your regex into &quot;match pattern&quot;\nput the replacment into &quot;replace pattern&quot;\nselect the &quot;i&quot; flag checkbox\nselect the &quot;explain&quot; checkbox\nselect the &quot;PHP&quot; checkbox\nput your target content into &quot;source text&quot;\nclick &quot;Submit&quot;\n\n\nFor convenience and posterity, I&#39;ve included the full explanation provided by that tool below, but two of the conceptual highlights are:\n\n\nLookaheads and negative lookaheads -- eg  http://php.net/manual/en/regexp.reference.assertions.php\nNon-capturing subpatterns -- eg  or the outer part of  http://php.net/manual/en/regexp.reference.subpatterns.php\n\n\nMatch Pattern Explanation:\n\n\n",
            "excerpt": "&lt;\\/a&gt;/i&#39;,&#39;&lt;a $1href=&quot;http://$2&quot;$3&gt;$4&lt;/a&gt;&#39;,$content);\n\n\nThat being said, be forewarned -- to Andy Lester&#39;s point, this <span class=\"highlight\">regex</span> is not reliable. &hellip; The broader concern is &quot;not that regular expressions are <span class=\"highlight\">evil</span>, per se, but that overuse of regular expressions is <span class=\"highlight\">evil</span>.&quot; &hellip; ",
            "title": "Replace protocol in links that don&#39;t match a given domain"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 19126447,
            "is_answered": false,
            "question_id": 19126096,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1380670064,
            "creation_date": 1380663629,
            "body": "It looks like what you&#39;ve got is an &quot;evil regex&quot;, which is not uncommon when you try to construct a complicated regex to match one thing (src) within another thing (img).  In particular, evil regexs usually happen when you try to apply repetition to a complex subexpression, which you are doing with .\n\nA better approach would be to use two regexes; one to match all  tags, and then another to match the  attribute within it.\n\nMy Java&#39;s rusty, so I&#39;ll just give you the pseudocode solution:\n\n\n\nNote the use of a backreference to match the appropriate type of closing quote (i.e., this will match  and .  Also note that the quantifiers are lazy here ( instead of just ); this is necessary to prevent too much from being consumed.\n\nEDIT: even though my Java&#39;s rusty, I was able to crank out an example.  Here&#39;s the solution in Java:\n\n\n",
            "excerpt": "It looks like what you&#39;ve got is an &quot;<span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>&quot;, which is not uncommon when you try to construct a complicated <span class=\"highlight\">regex</span> to match one thing (src) within another thing (img). &hellip; the appropriate type of closing quote (i.e., this will match src=&#39;abc&#39; <span class=\"highlight\">and</span> src=&quot;abc&quot;. &hellip; ",
            "title": "attributes pattern matcher takes a long time"
        },
        {
            "tags": [
                "c#",
                "regex",
                "out-of-memory",
                "large-files"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 18923039,
            "is_answered": false,
            "question_id": 18920911,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1379700045,
            "creation_date": 1379700045,
            "body": "You have what&#39;s called &quot;catastrophic backtracking&quot;.\n\nBasically, when you have a variable-length expression (, , etc.) followed by an &quot;overlapping&quot; (that is, both expression could match on the same set of characters) variable length expression, you can get into a tug of war between the two expressions. This usually only happens when the entire expression fails and .NET regex enginge attempts to shift the input text between the overlapping expressions, so often it&#39;s missed in testing.\n\nYour expression has many sub-expressions which could cause this, but here&#39;s an example:\n\n\n\nThe first part, , can match zero or more whitespace characters. The second, , can also match zero or more whitespace characters (in addition to non-whitespace characters). This will cause catastrophic backtracking in the event that your input fails on the first try and there are multiple whitespace characters to match.\n\nI wrote a bit about this issue here as well:\nHow can I recognize an evil regex?\n",
            "excerpt": "This usually only happens when the entire expression fails <span class=\"highlight\">and</span> .NET <span class=\"highlight\">regex</span> enginge attempts to shift the input text between the overlapping expressions, so often it&#39;s missed in testing. &hellip; I wrote a bit about this issue here as well:\nHow can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>? &hellip; ",
            "title": "A long Regex for a large string"
        },
        {
            "tags": [
                "iphone",
                "ios",
                "objective-c",
                "string",
                "nsstring"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 18385622,
            "is_answered": false,
            "question_id": 18385500,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1377187510,
            "creation_date": 1377187510,
            "body": "\n  it strikes me that with longer sets of strings, this may become inefficient and slow.\n\n\nSo, have you benchmarked it? If not, then you don&#39;t have the right to judge it as &quot;inefficient&quot; and &quot;slow&quot;. Premature optimization is evil. Just stick with those nice and simple for loops and the  method.\n\n\n\nBut: to actually answer your question, it&#39;s not impossible to avoid the manual looping. If you use  with a regex like , then you can find all occurrences in one pass. The use of regular expressions would probably be slower than a simple string search, though.\n",
            "excerpt": "Premature optimization is <span class=\"highlight\">evil</span>. Just stick with those nice <span class=\"highlight\">and</span> simple for loops <span class=\"highlight\">and</span> the - [NSString rangeOfString:] method. &hellip; If you use NSRegularExpression with a <span class=\"highlight\">regex</span> like good|great|awesome, then you can find all occurrences in one pass. &hellip; ",
            "title": "Searching for multiple strings in an NSString"
        },
        {
            "tags": [
                "c#",
                "list",
                "ienumerable"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 18238735,
            "is_answered": false,
            "question_id": 4257081,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1376502486,
            "creation_date": 1376502486,
            "body": "By now, I&#39;m sure you&#39;ll see that you&#39;re trying to optimize prematurely, which is, according to many, the root of all evil.\n\nHowever, if you REALLY want to speed this up, regular expressions seem an expensive way to do it.  Everytime you do a Regex.Match(), you&#39;re scanning the string again, which results in at least as many scans as you have tokens.\n\nIf you know the boundaries that define a token (&#39;{&#39; and &#39;}&#39;, for example), you could scan the string once to build the enumerable of tokens (with yield, or list, I don&#39;t think that&#39;ll make much difference).  The caller can then rebuild the string, looking up the values to replace the tokens with.\n\nOf course, this would only work with simple &quot;search and replace&quot; type tokens.  More complex ones would require something more sophisticated, such as a regex.  Perhaps you could extend the TokenDefinition to specify whether the match is a simple one or a regex one.  This would cut down the number of regular expressions performed, but still keep the flexibility required.\n",
            "excerpt": "By now, I&#39;m sure you&#39;ll see that you&#39;re trying to optimize prematurely, which is, according to many, the root of all <span class=\"highlight\">evil</span>. &hellip; Of course, this would only work with simple &quot;search <span class=\"highlight\">and</span> replace&quot; type tokens.  More complex ones would require something more sophisticated, such as a <span class=\"highlight\">regex</span>. &hellip; ",
            "title": "IEnumerable&lt;T&gt; and &quot;yield return&quot; performance question"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 17780324,
            "is_answered": false,
            "question_id": 17780248,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1374469797,
            "creation_date": 1374469797,
            "body": "While I can&#39;t remember any other reason, sending headers earlier than the normal course may have far reaching consequences. Below are just a few of them that happened to come to my mind at the moment:\n\n\nWhile current PHP releases may have output buffering on, the actual production servers you will be deploying your code on are far more important than any development or testing machines. And they do not always tend to follow latest PHP trends immediately.\nBy sending headers inadvertently, you might have introduced a security vulnerability: say, you are doing a redirection, but hence the headers are already sent, the redirection does not work and the rest of the page might be output, thus the visitor may see what she was not supposed to see. While this can be mitigated by using exit, you know the story, only if every one of us utilize good programming habits every time.\nEven if letting the visitor stay in the wrong page does not have a security implication, by breaking a session behavior, or in some other ways I&#39;ve encountered over years, the security and/or session cycle might have taken some sort of blow in the end.\nIf not security, you may have headaches over inexplicable functionality loss. Say, you are implementing some kind payment gateway, and redirect user to a specific URL after successful confirmation by the payment processor. If some kind of PHP error, even a warning, or an excess line ending happens, the payment may remain unprocessed and the user may still seem unbilled. This is also one of the reasons why needless redirection is evil and if redirection is to be used, it must be used with caution.\nYou may get &quot;Page loading canceled&quot; type of errors in Internet Explorer, even in the most recent versions. This is because an AJAX response/json include contains something that it shouldn&#39;t contain, because of the excess line endings in some PHP files, just as I&#39;ve encountered a few days ago.\nIf you have some file downloads in your app, they can break too, because of this. And you may not notice it, even after years, since the specific breaking habit of a download depends on the server, the browser, the type and content of the file (and possibly some other factors I don&#39;t want to bore you with).\n\n\nBonus: a few gotchas (actually currently one) related to these 2 characters:\n\n\nEven some well-known libraries may contain excess line endings after ?&gt;. An example is Smarty, even the most recent versions of both 2.* and 3.* branch have this. So, as always, watch for third party code. Bonus in bonus: A regex for deleting needless PHP endings: replace (\\s*\\?&gt;\\s*)$ with empty text in all files that contain PHP code.\n\n",
            "excerpt": "This is also one of the reasons why needless redirection is <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> if redirection is to be used, it must be used with caution. &hellip; Bonus in bonus: A <span class=\"highlight\">regex</span> for deleting needless PHP endings: replace (\\s*\\?&gt;\\s*)$ with empty text in all files that contain PHP code. &hellip; ",
            "title": "How does the PHP code execute even without closing the ?&gt; PHP tag?"
        },
        {
            "tags": [
                "python",
                "regex",
                "unicode"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 17719039,
            "is_answered": false,
            "question_id": 17712730,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1374138164,
            "creation_date": 1374138164,
            "body": "\n  \\b\n\n\nThere isn&#39;t a word boundary between the letter  and the number —they are both alphanumerics. When Unicode-aware regex is being used this is correctly handled, hence no match. If you don&#39;t want to treat katakana and other non-ASCII letters as being alphanums, remove the  flag which controls this behaviour.\n\nWhen you send a byte string to a regex that was compiled from a Unicode string, it is automatically decoded. For some reason it seems to be decoded as ISO-8859-1 (rather than, say, )... don&#39;t know why that is, but implicit encode/decode is in general evil to be avoided.\n\nThe UTF-8 byte sequence for , when mis-decoded as ISO-8859-1, comes out as . The degree sign is not an alphanum so you get a match.\n",
            "excerpt": "\\b\n\n\nThere isn&#39;t a word boundary between the letter グ <span class=\"highlight\">and</span> the number 1—they are both alphanumerics. When Unicode-aware <span class=\"highlight\">regex</span> is being used this is correctly handled, hence no match. &hellip; When you send a byte string to a <span class=\"highlight\">regex</span> that was compiled from a Unicode string, it is automatically decoded. &hellip; ",
            "title": "python regex not matching decoded unicode string"
        },
        {
            "tags": [
                "c++",
                "regex",
                "c++11",
                "stack-overflow",
                "standard-library"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 17636892,
            "is_answered": false,
            "question_id": 17634817,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1373780960,
            "creation_date": 1373780960,
            "body": "The problem is the back reference (). Back references are evil, or at least very difficult to implement in the general case, and it&#39;s not easy to recognize not-general cases.\n\nIn your case, the problem is that the regex&#39;s first match will be from the first  to the last . That&#39;s not what you intended, but it is the way regexes work. (The &quot;longest left-most rule&quot;.) In theory, it&#39;s still possible to match the regex without killing the stack, but I doubt whether the regex library you&#39;re using is clever enough to make that optimization.\n\nYou can fix the regex to match what you want it to match by making the data part () non-greedy: change it to . That might also fix the stack blow-up problem, because it will cause the regex to match much earlier, before it blows up the stack. But I don&#39;t know if it will work in general; I really don&#39;t know anything about the MS implementation.\n\nIn my opinion, you should avoid back references, even though it means complicating your code a bit. What I would do is to first match:\n\n\n\nand then create the terminating string:\n\n\n\nand then  the terminating string. That means you can no longer use the regex library&#39;s iterator, which is unfortunate, but the loop is still pretty straight-forward.\n\nBy the way, I find it odd that you only recognize the start delimiter if it is at the end of a line, and the end delimiter if it is at the start of a line. My inclination would have been to require both of them to be full lines. If you replace the regex-with-back-reference with my two-step approach, it&#39;s relatively easy to accomplish that. That might be considered another hint that the regex-with-back-reference is not really the right approach.\n",
            "excerpt": "Back references are <span class=\"highlight\">evil</span>, or at least very difficult to implement in the general case, <span class=\"highlight\">and</span> it&#39;s not easy to recognize not-general cases. &hellip; What I would do is to first match:\n\n === ([^=]+) ===\\n\n\n\n<span class=\"highlight\">and</span> then create the terminating string:\n\n &quot;\\n=== END &quot; + match[1].str() + &quot; ===&quot;\n\n\n<span class=\"highlight\">and</span> then find() the terminating string. &hellip; ",
            "title": "Microsoft&#39;s implementation of std::regex"
        },
        {
            "tags": [
                "ruby",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 17500341,
            "is_answered": false,
            "question_id": 17497179,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1373092011,
            "creation_date": 1373092011,
            "body": "If you can always find a string that matches the regex you are given, then it suffices to match it against the regex, and look at the match data length. However, determining whether a regexp has a string that it matches is np-hard[1]. This is only feasible if you know in advance what kind of regexes you&#39;ll be getting.\n\nThe next best best method in the  class is  or . However, we need to parse the regex if we do this.\n\nI can&#39;t speak for the future, but as of Ruby 2.0, there is no better method in the  core class.\n\nA left parenthesis denotes a literal left parenthesis, if preceded by an unescaped backslash. A backslash is unescaped unless an unescaped backslash precedes. So, a character is escaped iff preceded by an odd number of backslashes. \n\nAn unescaped left parenthesis denotes a capturing group iff not followed by a question mark. With a question mark, it can mean various things:  and  denote a named capturing group. Named and unnamed capturing groups cannot coexist in the same regex, however[2].  denote non-capturing groups. This is a special case of .  denote atomic groups. , ,  and  denote lookaround.  denote comments.\n\nRuby regexp engine supports comments in regexes. Considering them in the main regex would be very difficult. We can try to strip them if we really want to support these, but supporting them fully will get messy due to the possibility of inline flags turning extended mode (and thus line comments) on and off in ways that a regular expression cannot capture. I will go ahead and not support unescaped parentheses in regex comments[3].\n\nWe want to count:\n\n\nthe number of left parentheses \nthat are not escaped by a backslash  (read: not preceded by an odd number of backslashes that are not preceded by yet another backslash) and \nthat are not followed by a question mark \n\n\nRuby doesn&#39;t support unbounded lookbehind, but if we reverse the source first, we can rewrite the first assertion slightly: . The second assertion becomes a lookbehind: . \n\nthe whole solution\n\n\n\n\n\n[1]: we can show the NP-hardness by converting the satisfiability problem to it:\n\n\nAND:  ( must be an assertion)\nOR: \nNOT: \natoms: , , , ..., , ...\n\n\nexample(XOR): \n\nthis extends to NP-completeness for any class of regexes that can be tested in polynomial time. This includes any regex with no nested repetition (or repeated backreferences to repetition or recursion) and with bounded nesting depth of optional matches.\n\n[2]:  returns , indicating that unnamed capturing groups are ignored when named capturing groups are present. Tested in Ruby 1.9.3\n\n[3]: Inline comments start with  and end with . They cannot contain an unescaped right parenthesis, but they can contain an unescaped left parenthesis. These can be stripped easily (even though we have to sprinkle the &quot;unescaped&quot; regex everywhere), are the lesser evil, but they&#39;re also less likely to contain anunescaped left parenthesis.\n\nLine comments start with  and end with a newline. These are only treated as comments in the extended mode. Outside the extended mode, they match the literal  and newline. This is still easy, even if we have to consider escaping again. Determining if the regex has the extended flag set is not too difficult, but the flag modifier groups are a different beast entirely.\n\nEven with Ruby&#39;s awesome recursive regexes, merely determining if a previously-open group modifying the extended mode is already closed would yield a very nasty regex (even if you replace one by one and don&#39;t have to skip comments, you have to account for escaping). It wouldn&#39;t be pretty (even with interpolation) and it wouldn&#39;t be fast. \n",
            "excerpt": "If you can always find a string that matches the <span class=\"highlight\">regex</span> you are given, then it suffices to match it against the <span class=\"highlight\">regex</span>, <span class=\"highlight\">and</span> look at the match data length. &hellip; These can be stripped easily (even though we have to sprinkle the &quot;unescaped&quot; <span class=\"highlight\">regex</span> everywhere), are the lesser <span class=\"highlight\">evil</span>, but they&#39;re also less likely to contain anunescaped left parenthesis. &hellip; ",
            "title": "How to check how many variables (masks) declared in Regexp (ruby)?"
        },
        {
            "tags": [
                "nginx",
                "reverse-proxy"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 17391446,
            "is_answered": false,
            "question_id": 17300163,
            "item_type": "answer",
            "score": 8,
            "last_activity_date": 1372624729,
            "creation_date": 1372602919,
            "body": "The 1st way that I know of is using a regex against the $args parameter like so:\n\n\n\nOr the 2nd way is to use the convenient $is_args like so:\n\n\n\nRemember that in both styles you need to put a space between the if and the opening parenthesis; &quot;if (&quot; not &quot;if(&quot; as well as a space after the closing parenthesis and the opening brace; &quot;) {&quot; rather than &quot;){&quot;.\n\nFull example using the 1st style above, nginx.conf:\n\n\n\nFull example using the 2nd style above, nginx.conf:\n\n\n\nNote that the proxy.conf include goes outside of the if statement.\n\nVersion:\n\n\n\nAnd some info on the $args and $is_args variables:\n\nhttp://nginx.org/en/docs/http/ngx_http_core_module.html\n\nReading the docs is always useful, I just discovered that $query_string is the same as $args, so where I have $args above, you could also use $query_string according to the docs.\n\nIMPORTANT\n\nIt is important to note however, that If can be Evil!\n\nAnd therefore either test thoroughly or use the recommendation provided in the link above to change the URL inside location statement in a way similar to the example provided there, something like:\n\n\n",
            "excerpt": "The 1st way that I know of is using a <span class=\"highlight\">regex</span> against the $args parameter like so:\n\n    if ($args ~ &quot;^(\\w+)=&quot;) { \n\n\nOr the 2nd way is to use the convenient $is_args like so:\n\n    if ($is_args ! &hellip; IMPORTANT\n\nIt is important to note however, that If can be <span class=\"highlight\">Evil</span>! &hellip; ",
            "title": "Nginx proxy pass and url rewriting"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "google-chrome"
            ],
            "question_score": 9,
            "is_accepted": true,
            "answer_id": 17116720,
            "is_answered": false,
            "question_id": 17116675,
            "item_type": "answer",
            "score": 17,
            "last_activity_date": 1371241890,
            "creation_date": 1371241494,
            "body": "Because you have catastrophic backtracking:\n\n\n\nThis expression should be modified to remove one of the stars ():\n\n\n\nNote that catastrophic backtracking typically only rears its ugly head when a match cannot be made. That&#39;s why the first example you gave executes without any issues.\n\nYour second example exits before it hits the , so there is no opportunity for the backtracking to take effect.\n\nFor a more thorough explanation of catastrophic backtracking, see my answer to this question:\nHow can I recognize an evil regex?\n",
            "excerpt": "For a more thorough explanation of catastrophic backtracking, see my answer to this question:\nHow can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>? &hellip; ",
            "title": "Why does this regex make Chrome hang?"
        },
        {
            "tags": [
                "javascript",
                "html",
                "user-input"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 17036018,
            "is_answered": false,
            "question_id": 17035884,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1370920829,
            "creation_date": 1370920829,
            "body": "Here&#39;s simple calculator using  and regex:\n\nHTML:\n\n\n\nJavaScript:\n\n\n\nDemo: http://jsbin.com/utujas/1/edit\n\nSome say  is evil, but it&#39;s fine for a simple calculator, otherwise you&#39;d have to resort to something like this: javascript calculator: plus sign alternatives\n",
            "excerpt": "Here&#39;s simple calculator using eval <span class=\"highlight\">and</span> <span class=\"highlight\">regex</span>:\n\nHTML:\n\n&lt;input type=&quot;text&quot; id=&quot;calc&quot;&gt;\n&lt;button id=&quot;calculate&quot;&gt;Calculate&lt;/button&gt;\n\n\nJavaScript:\n\nvar input = document.querySelector(&#39;#calc&#39;)\n  , button = document.querySelector &hellip; +\\-/*]+/.test(key)) e.preventDefault();\n});\n\nbutton.addEventListener(&#39;click&#39;, function() {\n  alert(input.value +&#39; = &#39;+ eval(input.value));\n});\n\n\nDemo: http://jsbin.com/utujas/1/edit\n\nSome say eval is <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Good HTML5 object for mathematical input?"
        },
        {
            "tags": [
                "asp.net",
                "vb.net",
                "string"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 16848466,
            "is_answered": false,
            "question_id": 16848457,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1369967685,
            "creation_date": 1369963819,
            "body": "\n\nThe VB.NET version might look like:\n\n\n\nEdit\n\nIt sounds as if you are trying to parse some Html and then do work on it. I would recommend using the Html Agility Pack for that and read about the evils of attempting to use RegEx to parse your Html.\n",
            "excerpt": "someValueWithLineBreaks.TrimStart( &#39;\\n&#39; );\n\n\nThe VB.NET version might look like:\n\nDim cleanedFieldValue = someValueWithLineBreaks.TrimStart(ControlChars.Lf)\n\n\nEdit\n\nIt sounds as if you are trying to parse some Html <span class=\"highlight\">and</span> &hellip; I would recommend using the Html Agility Pack for that <span class=\"highlight\">and</span> read about the evils of attempting to use <span class=\"highlight\">RegEx</span> to parse your Html. &hellip; ",
            "title": "Removing a &#39;New Line&#39; in ASP"
        },
        {
            "tags": [
                "java",
                "regex",
                "matching",
                "replaceall"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 16618130,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1368827032,
            "creation_date": 1368825798,
            "body": "I&#39;m not understanding something about how Java&#39;s regex matching for \\s works. In the simple class below, \\s seems to match [at least] $ and *, which is worrisome. When I don&#39;t include \\s, the last char of each word gets chopped. And, neither regex seems to catch the ending &quot; in the string. Would somebody please explain what&#39;s going on? Or point me to a useful resource? Thanks. \n\n\n",
            "excerpt": "This is  <span class=\"highlight\">Evil</span> !@#$ Wicked %^&amp;* _ Mean ()+&lt;&gt; <span class=\"highlight\">and</span> ;:&#39; - Nasty. \\\\  =\\&quot;&quot;;\n                String t = &quot;123. ... This is  <span class=\"highlight\">Evil</span> ! &hellip; This is <span class=\"highlight\">Evil</span> $ Wicked * _ Mean <span class=\"highlight\">and</span> Nasty . &quot;\n// t: 123 .. Thi i Evi Wicke Mea an Nast &quot; &hellip; ",
            "title": "Java regex space matches $ and * ??"
        },
        {
            "tags": [
                "python",
                "object",
                "dictionary",
                "valuestack"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 16100306,
            "is_answered": false,
            "question_id": 16100204,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1366376813,
            "creation_date": 1366359663,
            "body": "\n\nor since regex is evil I would recommend:\n\n\n\nAlternatively you could make things much easier and more readable by making  return a dictionary:\n\n\n\nActually we could make this even better using \n\n\n",
            "excerpt": "334&#39;: &#39;|Hatt| |59| |0|   |0|&#39;, &#39;324&#39;: &#39;|Skor| |250| |0| |0|&#39;, &#39;234&#39;: &#39;|Tr&#246;ja| |300| |0| |0|&#39;, &#39;543&#39;: &#39;|Jacka| |400| |0| |0|&#39;}\n&gt;&gt;&gt; def parts(s):\n        return re.findall(r&#39;\\|([^\\|]+)\\|&#39;, s)\n\n\nor since <span class=\"highlight\">regex</span> &hellip; is <span class=\"highlight\">evil</span> I would recommend:\n\n&gt;&gt;&gt; def parts(s):\n        return [x.strip(&#39;|&#39;) for x in s.split()]    \n\n&gt;&gt;&gt; parts(d[&#39;153&#39;])\n[&#39;T-shirt&#39;, &#39;200&#39;, &#39;0&#39;, &#39;0&#39;]\n&gt;&gt;&gt; parts(d[&#39;153&#39;])[1]\n&#39;200&#39;\n\n\nAlternatively you could &hellip; ",
            "title": "Accessing specific value in a list of values"
        },
        {
            "tags": [
                "php",
                "javascript",
                "html",
                "security",
                "xss"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 15906990,
            "is_answered": false,
            "question_id": 15906938,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1365528277,
            "creation_date": 1365523585,
            "body": "I suggest that you use  (with ) to load said HTML, remove every kind of tag and every attribute you don&#39;t want to see, and save back the HTML (using  or ). You can do that by recursively iterating over the children of the document&#39;s root, and replacing tags you don&#39;t want by their inner contents. Since  loads code in a similar way browsers do, it&#39;s a much safer way to do it than using regular expressions.\n\nEDIT Here&#39;s a &quot;purifying&quot; function I made:\n\n\n\nYou would call  with an unsafe HTML string and a predefined whitelist of tags and attributes. The whitelist format is &#39;tag&#39; =&gt; array(&#39;attribute&#39; =&gt; &#39;regex&#39;). Tags that don&#39;t exist in the whitelist are stripped, with their contents inlined in the parent tag. Attributes that don&#39;t exist for a given tag in the whitelist are removed as well; and attributes that exist in the whitelist, but that don&#39;t match the regex, are removed as well.\n\nHere&#39;s an example:\n\n\n\nThe result is:\n\n\n\nObviously, you don&#39;t want to allow any  attribute, and I would advise against  because of weird proprietary properties like . Make sure all URL attributes are validated with a decent regex that matches the full string ().\n",
            "excerpt": "&gt;\n\n\nYou would call purifyHTML with an unsafe HTML string <span class=\"highlight\">and</span> a predefined whitelist of tags <span class=\"highlight\">and</span> attributes. The whitelist format is &#39;tag&#39; =&gt; array(&#39;attribute&#39; =&gt; &#39;<span class=\"highlight\">regex</span>&#39;). &hellip; Attributes that don&#39;t exist for a given tag in the whitelist are removed as well; <span class=\"highlight\">and</span> attributes that exist in the whitelist, but that don&#39;t match the <span class=\"highlight\">regex</span>, are removed as well. &hellip; ",
            "title": "How i can find 100% sure a JS inside of HTML tag?"
        },
        {
            "tags": [
                "javascript",
                "string",
                "parsing",
                "recursion"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 15737691,
            "is_answered": false,
            "question_id": 15737675,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1364791581,
            "creation_date": 1364791084,
            "body": "You need to at least declare all your variables in the function as local variables by adding  in front of their first use.  \n\n\n\nBy not using , your variables are global and each invocation of  will be sharing the same copies of variables which will mess up the recursion as recursive calls will mess up the state of the higher levels calls.  If the variables are all local variables, then each function invocation has it&#39;s own set of variables and one recursive call does not mess up the others.\n\nPlus, it is generally always a good idea to limit the scope of your variables to as local a scope as practical and avoid globals whenever possible.  Implicit globals variables like you have here are particular evil because they can easily lead to accidental misuse.\n\nAs Kolink suggested, you might just want to do a single global  operation using a regex search/replace.  You would need to make sure that any regex special characters in the search string were properly escaped though.\n",
            "excerpt": "Implicit globals variables like you have here are particular <span class=\"highlight\">evil</span> because they can easily lead to accidental misuse. &hellip; You would need to make sure that any <span class=\"highlight\">regex</span> special characters in the search string were properly escaped though. &hellip; ",
            "title": "program with recursive function"
        },
        {
            "tags": [
                "perl",
                "apache"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 15627826,
            "is_answered": false,
            "question_id": 15626447,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1364261681,
            "creation_date": 1364261681,
            "body": "I spent an hour fiddling with regexes, wrapping my head around s and  horrors, even some C code. Then, I did something crucial:\n\n\n\nI profiled the code (with Devel::NYTProf). The non-suprise: Parsing the string took very little time. The regex application in  took ~ 144ms in total. However, the date parsing amassed whopping 3.39s in . That is nearly a 1:25 relation!\n\nConclusion:\n\n\n  Premature optimization is the root of all evil. – D. Knuth\n\n\nUse a nice, readable regex, like\n\n\n\nThis executes about as fast as your (r)index/substr horrors, but is self-documenting to a certain degree, and certainly easier to debug. This is in line with the experience that clean, idiomatic Perl is likely to be the fastest Perl.\n\nThen, you have a choice to either accept that  is slow, or try to optimize it. If you manage a provable speedup, you might want to consider sending a patch upstream. You can also experiment with other libraries, or write your own  function that is optimized for your special use-case. \n",
            "excerpt": "I spent an hour fiddling with regexes, wrapping my head around splices <span class=\"highlight\">and</span> substr horrors, even some C code. &hellip; Conclusion:\n\n\n  Premature optimization is the root of all <span class=\"highlight\">evil</span>. – D. Knuth\n\n\nUse a nice, readable <span class=\"highlight\">regex</span>, like\n\nmy $split1_1_regex = qr/\\A\n        (\\d+)\\.(\\d+)\\.(\\d+)\\. &hellip; ",
            "title": "comon log format splitting"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 15603847,
            "is_answered": false,
            "question_id": 15603786,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1364158625,
            "creation_date": 1364158280,
            "body": "This might be what you want, but I expect evil &#39;regex in HTML&#39;-links in the comments :P. It&#39;s also dependent on the fact if the  only has text and spans in it or also many other (sub)children Dom-Nodes.\n\n\n\nIf you update the question I can give you a more precise answer to narrow down the collisions that can happen with RegEx.\n",
            "excerpt": "This might be what you want, but I expect <span class=\"highlight\">evil</span> &#39;<span class=\"highlight\">regex</span> in HTML&#39;-links in the comments :P. &hellip; It&#39;s also dependent on the fact if the &lt;div&gt; only has text <span class=\"highlight\">and</span> spans in it or also many other (sub)children Dom-Nodes. &hellip; ",
            "title": "How to unwrap text from a span in text block?"
        },
        {
            "tags": [
                "url-rewriting",
                "nginx",
                "subdomain"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 15593378,
            "is_answered": false,
            "question_id": 15589903,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1364082216,
            "creation_date": 1364082216,
            "body": "\nYou need http://wiki.nginx.org/HttpFastcgiModule to setup CodeIgniter.\nUsing 2 server blocks is better than using if block for redirect. See IF is Evil. \nDon&#39;t use $host because that variable value is obtained from the request&#39;s HOST header, and can be easily faked. Always set a server_name directive and use that name instead.\nUsing &quot;return 301&quot; directive is better than a rewrite. Saving cpu time (regex is slow) and easy to follow. Note that a 302 redirect (rewrite...redirect) has side effect because 302 will turn all POST requests to GET requests, which is not good in your case.\nYou don&#39;t need try_files in the main site because the main site just serves static files. But you can use &#39;expires&#39; directive to allow browser to cache the static files.\n\n\n\n\n\n",
            "excerpt": "See IF is <span class=\"highlight\">Evil</span>. \nDon&#39;t use $host because that variable value is obtained from the request&#39;s HOST header, <span class=\"highlight\">and</span> can be easily faked. Always set a server_name directive <span class=\"highlight\">and</span> use that name instead. &hellip; Saving cpu time (<span class=\"highlight\">regex</span> is slow) <span class=\"highlight\">and</span> easy to follow. &hellip; ",
            "title": "nginx config files redirecting to subfolder"
        },
        {
            "tags": [
                "javascript",
                "node.js",
                "socket.io",
                "serverside-javascript"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 15577271,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1363978063,
            "creation_date": 1363976300,
            "body": "So i&#39;m developing a socket.io real-time web-app.\nThe first concern of mine was &quot;What if some evil-minded user tries to inject some code via Dev Tools or Firebug?&quot; and i&#39;ve got my answer here on SO. My next concern is: &quot;What if some evil-minded user tries to inject some code via chat and/or other form of string inputs?&quot; and I&#39;ve came to the conclusion that I can&#39;t figure this out by myself. I know that I can use regex to find if the user is trying to inject code but once the code is sent to server and stored to a string it is executed. (ex: ; [ where the user sent string is the one between * ] ). So my question is: How can i prevent this? in other words How do I sanitize the user input?\n",
            "excerpt": "My next concern is: &quot;What if some <span class=\"highlight\">evil</span>-minded user tries to inject some code via chat <span class=\"highlight\">and</span>/or other form of string inputs?&quot; <span class=\"highlight\">and</span> I&#39;ve came to the conclusion that I can&#39;t figure this out by myself. &hellip; I know that I can use <span class=\"highlight\">regex</span> to find if the user is trying to inject code but once the code is sent to server <span class=\"highlight\">and</span> stored to a string it is executed. &hellip; ",
            "title": "How to secure socket.io from code injection?"
        },
        {
            "tags": [
                "javascript",
                "jquery-ui",
                "jquery"
            ],
            "question_score": -1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 15544572,
            "item_type": "question",
            "score": -1,
            "last_activity_date": 1363862567,
            "creation_date": 1363860680,
            "body": "I have a JSON file with objects containing the file path to an image.  I&#39;m trying to replace the src attr of an image tag using jQuery but no matter what i do, by the time I try to change the source, the file path has quotes around it which ends up leaving encoding around the path and thus fails.\n\nI&#39;ve tried:\n\n\ndecodeURIcomponent\nregex\n\n\nNeither has worked but I am more than willing to accept that they did not work due my error.\n\nHere&#39;s the code as I have it now:\n\n\n\nThe problem portion is this part here:\n\n\n\nNote the two console.logs: the first one for &#39;pic&#39; prints a clean (i.e.w/out quotes) file path.  Oddly enough, the console.log for &#39;image&#39; prints out the same file path but now with the evil double quotes which is the final product that fails.  The regex seen appears to have no effect.\n\nHere&#39;s the JSON returned that I&#39;m working with:\n\n\n\n}\n\nThanks for the help.\n",
            "excerpt": "I&#39;ve tried:\n\n\ndecodeURIcomponent\n<span class=\"highlight\">regex</span>\n\n\nNeither has worked but I am more than willing to accept that they did not work due my error. &hellip; Oddly enough, the console.log for &#39;image&#39; prints out the same file path but now with the <span class=\"highlight\">evil</span> double quotes which is the final product that fails.  The <span class=\"highlight\">regex</span> seen appears to have no effect. &hellip; ",
            "title": "Can&#39;t remove double quotes from image path after JSON.stringify"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "json",
                "syntax-error"
            ],
            "question_score": 40,
            "is_accepted": true,
            "answer_id": 15296279,
            "is_answered": false,
            "question_id": 15296196,
            "item_type": "answer",
            "score": 70,
            "last_activity_date": 1363096816,
            "creation_date": 1362752921,
            "body": "A number can&#39;t start with a not significative .\n\nThis is invalid : \n\nFrom JSON.org : \n\n\n\nYou should fix it at the source but if you can&#39;t, assuming your JSON is always similar to this one (no numbers in strings), then you might probably fix it with a regex :\n\n\n\nYou can&#39;t even here use the evil  because  would be parsed as a octal :\n\n\n\noutputs\n\n\n\nThis probably explains why it was considered safer to forbid numbers starting with non significative  in JSON.\n",
            "excerpt": "&quot;ti&quot;: 0000011410\n\nFrom JSON.org : \n\n\n\nYou should fix it at the source but if you can&#39;t, assuming your JSON is always similar to this one (no numbers in strings), then you might probably fix it with a <span class=\"highlight\">regex</span> &hellip; [\\. }])/g, &#39; &#39;));\n\n\nYou can&#39;t even here use the <span class=\"highlight\">evil</span> eval because &quot;0000011410&quot; would be parsed as a octal :\n\nconsole.log(eval(&#39;({&quot;ti&quot;: 0000011410})&#39;));\n\n\noutputs\n\n{ti: 4872}\n\n\nThis probably explains why &hellip; ",
            "title": "JSON syntax error: &#39;unexpected number&#39; or &#39;JSON.parse: expected &#39;,&#39; or &#39;}&#39; after property value in object&#39;"
        },
        {
            "tags": [
                "html",
                "url",
                "encoding"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 14807731,
            "is_answered": false,
            "question_id": 14806794,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1360568039,
            "creation_date": 1360568039,
            "body": "OWASP provides a list of regular expressions for validating user input, one of which is used for validating URLs. This is as close as you&#39;re going to get to a language-neutral, canonical solution. \n\nMore likely you&#39;ll rely on the URL parsing library of the programming language in use. Or, use a URL parsing regex. \n\nThe workflow would be something like: \n\n\nVerify the supplied string is a well-formed URL.\nProvide a default protocol such as  when no protocol is specified. \nMaintain a whitelist of acceptable protocols (, , , , etc.)   \n\n\nThe whitelist will be application-specific. For an address-book app the  protocol would be indispensable. It&#39;s hard to imagine a use case for the  and  protocols. \n\nEnforce a maximum URL length - ensures cross-browser URLs and prevents attackers from polluting the page with megabyte-length strings. With any luck your URL-parsing library will do this for you. \nEncode a URL string for the usage context. (Escaped for HTML output, escaped for use in an SQL query, etc.). \n\n\n\n  Forbid malicious URLs such as javascript: stuff or links or evil domain names.\n\n\nYou can utilize the Google Safe Browsing API to check a domain for spyware, spam or other &quot;evilness&quot;. \n",
            "excerpt": "It&#39;s hard to imagine a use case for the javascript: <span class=\"highlight\">and</span> data: protocols. &hellip; Forbid malicious URLs such as javascript: stuff or links or <span class=\"highlight\">evil</span> domain names.\n\n\nYou can utilize the Google Safe Browsing API to check a domain for spyware, spam or other &quot;evilness&quot;. &hellip; ",
            "title": "How can I safely add user-supplied URLs to my HTML page?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "replace"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 14599815,
            "is_answered": false,
            "question_id": 14599611,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1359535456,
            "creation_date": 1359535456,
            "body": "It can be done if they are not local variables using  (although I would call this evil):\n\n\n\nPut them in an object with the string matches as the keys and the replacements as values if you can.\n\nI recommend this regex:\n\n\n\nhttp://jsfiddle.net/p4uvW/\n",
            "excerpt": "It can be done if they are not local variables using window (although I would call this <span class=\"highlight\">evil</span>):\n\nstring.replace(<span class=\"highlight\">regex</span>, function (match, group) {\n    return window[group];\n});\n\n\nPut them in an object with &hellip; the string matches as the keys <span class=\"highlight\">and</span> the replacements as values if you can. &hellip; ",
            "title": "Replace word depending on the regex search result"
        },
        {
            "tags": [
                ".net",
                "regex"
            ],
            "question_score": 5,
            "is_accepted": true,
            "answer_id": 14570729,
            "is_answered": false,
            "question_id": 14570615,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1359408854,
            "creation_date": 1359405288,
            "body": "QUESTION 1\n\nThis is causing catastrophic backtracking:\n\n\n\nAnd:\n\n\n\nI&#39;m guessing you meant:\n\n\n\nAnd:\n\n\n\nYour regex does not currently match URLs with equal signs, which is why the catastrophic backtracking happens in the first place:\n\n\n\ndoes not match &#39;?a = 1&#39; because  does not include &#39;=&#39;. You can fix this pretty easily:\n\n\n\n(I threw &#39;%&#39; in there too)\n\nAlso, your regex is matching the whitespace before and after your URL. You may prefer lookarounds to  as this will match a position before or after whitespace rather than the whitespace itself:\n\n\n\nQUESTION 2\n\nThere&#39;s nothing you can do to detect or recover from a catastrophically backtracking regular expression. The best you could try is spinning the regex off into an independent thread and then terminating the thread after a certain timeout. Exactly how to do that would be an entirely different question, but it&#39;s not difficult to find tutorials online for .NET.\n\nSee:\n\n\nMultithreaded Applications (C# and Visual Basic)\nHow can I recognize an evil regex?\n\n",
            "excerpt": ":[\\w=%]*)\n\n\n(I threw &#39;%&#39; in there too)\n\nAlso, your <span class=\"highlight\">regex</span> is matching the whitespace before <span class=\"highlight\">and</span> after your URL. &hellip; See:\n\n\nMultithreaded Applications (C# <span class=\"highlight\">and</span> Visual Basic)\nHow can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>? &hellip; ",
            "title": ".Net Regex to extract Urls from text never returns"
        },
        {
            "tags": [
                "regex",
                "perl",
                "html-parsing",
                "screen-scraping"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 13812884,
            "is_answered": false,
            "question_id": 13812791,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1355194616,
            "creation_date": 1355194189,
            "body": "The code behaves exactly as you told it to. This is what happens:\n\nYou matched the regex exactly once. It did match, and populated the  variable with the value of the first (and only!) capture buffer. The match returns &quot;true&quot;, and the code in the if-branch is executed.\n\nYou want to do two things:\n\n\nMatch with the  modifier. This matches globally, and tries to return every match in the string, not just the first one.\nExecute the regex in list context, so you can save the capture buffers to an array\n\n\nThis would lead to the following code:\n\n\n\nDo also note that parsing HTML with regexes is evil, and you should search CPAN for a module you like that does that for you.\n",
            "excerpt": "This is what happens:\n\nYou matched the <span class=\"highlight\">regex</span> exactly once. It did match, <span class=\"highlight\">and</span> populated the $1 variable with the value of the first (<span class=\"highlight\">and</span> only!) capture buffer. &hellip; @matches) {\n    print &quot;$i: $matches[$i-1]\\n&quot;;\n  }\n}\n\n\nDo also note that parsing HTML with regexes is <span class=\"highlight\">evil</span>, <span class=\"highlight\">and</span> you should search CPAN for a module you like that does that for you. &hellip; ",
            "title": "perl regex multiple groups"
        },
        {
            "tags": [
                "php",
                "html",
                "whitelist"
            ],
            "question_score": 3,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 9897214,
            "item_type": "question",
            "score": 3,
            "last_activity_date": 1354217338,
            "creation_date": 1332880200,
            "body": "Here&#39;s the deal, I&#39;m making a project to help teach HTML to people. Naturally, I&#39;m afraid of that Scumbag Steve (see figure 1).\n\nSo I wanted to block ALL HTML tags, except those approved on a very specific whitelist.\n\nOut of those approved HTML tags, I want to remove harmful attributes as well. Such as  and . Also, according to a whitelist.\n\nI&#39;ve thought of regex, but I&#39;m pretty sure it&#39;s evil and not very helpful for the job.\n\nCould anyone give me a nudge in the right direction?\n\nThanks in advance.\n\n\n\nFig 1.\n\n\n",
            "excerpt": "Such as onload <span class=\"highlight\">and</span> onmouseover. Also, according to a whitelist.\n\nI&#39;ve thought of <span class=\"highlight\">regex</span>, but I&#39;m pretty sure it&#39;s <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> not very helpful for the job. &hellip; ",
            "title": "How to strip specific tags and specific attributes from a string?"
        },
        {
            "tags": [
                "php",
                "regex",
                "html-parsing"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 13370112,
            "is_answered": false,
            "question_id": 13370003,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1352846255,
            "creation_date": 1352846255,
            "body": "Regex is evil for such case. Better you work on the generated html. Here&#39;s how you do it.\n\nEnable output buffering. On the ob_start function add your own callback. Process the generated html with DOMDocument inside the handler. Something like this,\n\n\n",
            "excerpt": "<span class=\"highlight\">Regex</span> is <span class=\"highlight\">evil</span> for such case. Better you work on the generated html. Here&#39;s how you do it.\n\nEnable output buffering. On the ob_start function add your own callback. &hellip; Something like this,\n\nfunction my_handler($contents){\n     $doc = DOMDocument::loadHTML ($contents);\n     // change your document here <span class=\"highlight\">and</span> return it later\n     return $doc-&gt;saveHTML();\n}\nob_start(&#39;my_handler &hellip; ",
            "title": "replace html of tags with php regex"
        },
        {
            "tags": [
                "ruby",
                "regex",
                "ruby-on-rails-3.2"
            ],
            "question_score": -5,
            "is_accepted": false,
            "answer_id": 13202501,
            "is_answered": false,
            "question_id": 13202282,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1351887646,
            "creation_date": 1351887646,
            "body": "The first one is HTML so you should parse it with HTML and another is JSON, so you could use some JSON library. Don&#39;t use regex. It&#39;s evil.\n",
            "excerpt": "The first one is HTML so you should parse it with HTML <span class=\"highlight\">and</span> another is JSON, so you could use some JSON library. Don&#39;t use <span class=\"highlight\">regex</span>. It&#39;s <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Regex html help needed"
        },
        {
            "tags": [
                "javascript",
                "security",
                "eval"
            ],
            "question_score": 7,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 13167403,
            "item_type": "question",
            "score": 7,
            "last_activity_date": 1351718910,
            "creation_date": 1351717486,
            "body": "\n  Possible Duplicate:\n  When is JavaScript’s eval() not evil?  \n\n\n\n\nI am writing a script in which users have to write in a currency amount, some examples could be (user input &gt;&gt; converts to), with USD as default currency:\n\n\n\nI want to make this as smooth as possible, therefore I want to use JavaScript (it&#39;s a web app based on PHP/MySql + JavaScript). I want to use regex to filter the input, run it through  and return it.\n\nIs this a bad idea? I&#39;ve read some topics about  being a security issue. I just don&#39;t see how. A user can easily run JavaScript anyway?\n\nKeep in mind that I will validate all input server-side with PHP at a later stage.\n",
            "excerpt": "Possible Duplicate:\n  When is JavaScript’s eval() not <span class=\"highlight\">evil</span>? &hellip; I want to use <span class=\"highlight\">regex</span> to filter the input, run it through eval() <span class=\"highlight\">and</span> return it.\n\nIs this a bad idea? I&#39;ve read some topics about eval() being a security issue. I just don&#39;t see how. &hellip; ",
            "title": "Is Javascript eval() so dangerous?"
        },
        {
            "tags": [
                "python",
                "string",
                "parsing",
                "substring"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 13167564,
            "is_answered": false,
            "question_id": 13167508,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1351718229,
            "creation_date": 1351718229,
            "body": "Obligatory &quot;don&#39;t parse HTML with regex&quot; warning: https://stackoverflow.com/a/1732454/505154\n\nEvil regex solution:\n\n\n\nThis will return a list with the  attribute for every  tag that only contains a  attribute (since you said you only want to match the first one).\n",
            "excerpt": "Obligatory &quot;don&#39;t parse HTML with <span class=\"highlight\">regex</span>&quot; warning: https://stackoverflow.com/a/1732454/505154\n\n<span class=\"highlight\">Evil</span> <span class=\"highlight\">regex</span> solution:\n\nimport re\nre.findall(r&#39;&lt;img\\s*src=&quot;([^&quot;]*)&quot;\\s*/&gt;&#39;, text)\n\n\nThis will return a list with &hellip; ",
            "title": "python : easy substring/parsing"
        },
        {
            "tags": [
                "java",
                "regex",
                "string",
                "parsing",
                "text"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 12558488,
            "is_answered": false,
            "question_id": 12557081,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1348559042,
            "creation_date": 1348457392,
            "body": "Your second regex is correct, but you don&#39;t need all those brackets.  This will do:\n\n\n\nThis will be much more efficient than @ruakh&#39;s suggestion, , which has to perform two tests at each position.  That&#39;s exactly the problem the Java devs were trying to solve with the intersection operator .  The Unicode Consortium has since endorsed the idea, along with other set operations.\n\nI don&#39;t know what you were trying for with that first regex, but the  and  will both be treated as literal characters, making it equivalent to , which doesn&#39;t sound like what you want.\n\n\n\nEDIT: Don&#39;t get me wrong though, efficiency is not the only reason to prefer this approach. It&#39;s not even the most important one. Premature optimization is as evil in regexes as it is anywhere else.  Concentrate on keeping your regexes as simple and clear as you can, and you shouldn&#39;t have to worry about performance.  My regex is both simpler (in that it only performs one kind of operation) and clearer (more readable) than the lookahead version (but not by much; that  syntax still looks hideous to me).\n",
            "excerpt": "Premature optimization is as <span class=\"highlight\">evil</span> in regexes as it is anywhere else.  Concentrate on keeping your regexes as simple <span class=\"highlight\">and</span> clear as you can, <span class=\"highlight\">and</span> you shouldn&#39;t have to worry about performance. &hellip; My <span class=\"highlight\">regex</span> is both simpler (in that it only performs one kind of operation) <span class=\"highlight\">and</span> clearer (more readable) than the lookahead version (but not by much; that &amp;&amp; syntax still looks hideous to me). &hellip; ",
            "title": "metacharacters in regular expressions"
        },
        {
            "tags": [
                "php",
                "preg-replace",
                "preg-match",
                "preg-match-all"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 12551251,
            "is_answered": false,
            "question_id": 12551081,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1348395899,
            "creation_date": 1348393277,
            "body": "You&#39;re sort of close. You can  the string with  but with spaces included around the . Then the first element would be the function name, in this case  and the second element would be the array but as a string. You&#39;ll need to  that one so that it&#39;ll be a proper array data type.\n\n\n\nAs an alternative, you can also modify the regex so that you don&#39;t have to call .\n\n\n\nEither way, you&#39;ll want to make sure that you sanitize the user input because  can be evil.\n",
            "excerpt": "Then the first element would be the function name, in this case diggin <span class=\"highlight\">and</span> the second element would be the array but as a string. &hellip; =\\s*(.*)\\]/i&#39;, $s, $matches);\n\n\nEither way, you&#39;ll want to make sure that you sanitize the user input because eval can be <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Replace [diggin] with HTML code or PHP code"
        },
        {
            "tags": [
                "c#",
                "regex"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 12112807,
            "is_answered": false,
            "question_id": 12112603,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1346141794,
            "creation_date": 1345823843,
            "body": "Don&#39;t use regex to parse html, it&#39;s evil. \n\nYou could use the HTML Agility Pack, it even has a nice NuGet Package.\n\nAlternatively, you could do this on the client side with a single line of jQuery:\n\n\n\nThis is making use of the Attribute Contains Selector.\n\nIf you want to find the docid in your click function, you could write something like this in your click function:\n\n\n\nNote that this assumes there&#39;s only ever one query string value, if you wanted to make this more robust you could do something like in this answer: https://stackoverflow.com/a/1171731/21200 \n",
            "excerpt": "Don&#39;t use <span class=\"highlight\">regex</span> to parse html, it&#39;s <span class=\"highlight\">evil</span>. \n\nYou could use the HTML Agility Pack, it even has a nice NuGet Package. &hellip; ",
            "title": "Regular expression to find anchor link with special href?"
        },
        {
            "tags": [
                "php",
                "javascript",
                "regex",
                "pattern-matching",
                "web-scraping"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 12152946,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1346138734,
            "creation_date": 1346129419,
            "body": "This is a fun little one I&#39;ve been working on.  I&#39;ve found many solutions, but none are really the right match.  The goal is this &quot;Match p tags only if there are 3 or more in a row&quot;\n\nSo I feel like this should be right, but it&#39;s not.\n\n\n\nBasically in my words this says:  \n\n\nMatch a p tag with anything inside the tag\nMatch anything until you see a closing P tag\nONLY match the preceding (above 2 lines) iff followed by\n\na whitespace char (maybe) and then a &lt; p\nIf that occurs 3 or more times\n\n\n\nThe issue is that this works well in Javascript but not in PHP. PHP says \n\n\n\nI&#39;ve tried different rounds of parens to give it that &quot;nothing to repeat&quot; but that causes false regex.\n\nAnd yes, this is for web scraping but no I&#39;m doing research not doing evil things.\n\nAny ideas maybe?\nthanks!\n",
            "excerpt": "PHP says \n\nCompilation failed: nothing to repeat at offset 28\n\n\nI&#39;ve tried different rounds of parens to give it that &quot;nothing to repeat&quot; but that causes false <span class=\"highlight\">regex</span>. &hellip; <span class=\"highlight\">And</span> yes, this is for web scraping but no I&#39;m doing research not doing <span class=\"highlight\">evil</span> things.\n\nAny ideas maybe?\nthanks! &hellip; ",
            "title": "Regex matching succession of P tags"
        },
        {
            "tags": [
                "php",
                "html",
                "tidy"
            ],
            "question_score": 4,
            "is_accepted": true,
            "answer_id": 11746759,
            "is_answered": false,
            "question_id": 11746455,
            "item_type": "answer",
            "score": 8,
            "last_activity_date": 1344547155,
            "creation_date": 1343759800,
            "body": "DISCLAIMER:\n\nI don&#39;t think my answer is very... neat. It&#39;s more of a hakish way to use HTMLTidy with HTML5 (which currently it does not support). To accomplish that I use regex to parse HTML, which, according to most, is the the root of all evil or the cthulhu way. If someone knows a better way, please enlighten us, since I don&#39;t feel very secure in using regex to parse html. I&#39;ve tested it with many examples but I&#39;m quite sure it&#39;s not bullet proof. \n\nIntro\n\nThe menu tag was deprecated in HTML4 and XHTML1, being replaced by ul (unordered list). It was, however, redefined in HTML5 and hence is a valid tag according to HTML5 specifications. SinceHTMLTidy does not support HTML5 and uses XHTML or HTML specifications, as the OP pointed, it replaces the then deprecated tag menu to ul (or adds the ul tag), even when you specifically tell it not to.\n\nMy suggestion\n\nThis function replaces the menu tag with a custom tag prior to parsing it with tidy. It then replaces the custom tag with menu again. \n\n\n\nTEST:\n\n\n\nOUTPUT:\n\n\n",
            "excerpt": "To accomplish that I use <span class=\"highlight\">regex</span> to parse HTML, which, according to most, is the the root of all <span class=\"highlight\">evil</span> or the cthulhu way. &hellip; Intro\n\nThe menu tag was deprecated in HTML4 <span class=\"highlight\">and</span> XHTML1, being replaced by ul (unordered list). It was, however, redefined in HTML5 <span class=\"highlight\">and</span> hence is a valid tag according to HTML5 specifications. &hellip; ",
            "title": "PHP Tidy removes valid tags"
        },
        {
            "tags": [
                "php",
                "regex",
                "arrays"
            ],
            "question_score": 11,
            "is_accepted": false,
            "answer_id": 11856742,
            "is_answered": false,
            "question_id": 11838359,
            "item_type": "answer",
            "score": 6,
            "last_activity_date": 1344391862,
            "creation_date": 1344391862,
            "body": "First of all, it is a bit debatable, but if you can easily avoid it, just pass  as an argument to the function as most people believe global variables are evil!\n\nNext, for the getting the &quot;s&quot;, I generally do something like this:\n\n\n\nThen just do something like this:\n\n\n\nIt&#39;s essentially the same thing as doing an if/else block, but less lines of code and you only have to write the text once.\n\nAs for the other part, I am STILL confused about what you&#39;re trying to do, but I believe you are looking for some sort of way to convert\n\n\n\ninto:\n\n\n\nThe easiest way is to try to use a combination of  and regex to then get it to do something like I have above.\n",
            "excerpt": "First of all, it is a bit debatable, but if you can easily avoid it, just pass $num_dogs as an argument to the function as most people believe global variables are <span class=\"highlight\">evil</span>! &hellip; return &#39;dogs called fred <span class=\"highlight\">and</span> harry&#39;;\n        break;\n    case 3:\n        return &#39;dogs called fred, harry <span class=\"highlight\">and</span> buster&#39;;\n        break;\n}\n\n\nThe easiest way is to try to use a combination of explode() <span class=\"highlight\">and</span> <span class=\"highlight\">regex</span> &hellip; ",
            "title": "Parsing plain text in such a way that will recognise a custom if statement"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "html",
                "regex"
            ],
            "question_score": 5,
            "is_accepted": true,
            "answer_id": 11661508,
            "is_answered": false,
            "question_id": 11661408,
            "item_type": "answer",
            "score": 8,
            "last_activity_date": 1343272233,
            "creation_date": 1343270147,
            "body": "Try filtering the &#39;s  by nodeType to get only the Text Nodes, then replace them with jQuery-generated anchor elements (any extra text in these nodes will be kept as Text Node):\n\n\n\nFiddle\n\nAs you know, most often it&#39;s not a good idea to parse HTML with Regex (look out for the ponies, they are evil), but if you isolate a part of the HTML you want to parse and it follows a relatively simple pattern, it is a viable option.\n\nedit: Included the  flag (global modifier) in your Regex to allow for matching multiple anchors inside a single Text Node.\n",
            "excerpt": "(look out for the ponies, they are <span class=\"highlight\">evil</span>), but if you isolate a part of the HTML you want to parse <span class=\"highlight\">and</span> it follows a relatively simple pattern, it is a viable option. &hellip; edit: Included the g flag (global modifier) in your <span class=\"highlight\">Regex</span> to allow for matching multiple anchors inside a single Text Node. &hellip; ",
            "title": "jQuery: How to wrap RegEx matched plain text in an anchor tag?"
        },
        {
            "tags": [
                "html",
                "ruby",
                "nokogiri"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 6308348,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1342728203,
            "creation_date": 1307718794,
            "body": "I imagine this is common enough that it&#39;s a solved problem, but being a bit of a newbie with Loofah and Nokogiri I haven&#39;t found the solution yet.\n\nI&#39;m using Loofah, a HTML scrubber library that wraps Nokogiri, to scrub some HTML text for display. However, that text sometimes happen to things like e-mail addresses and such between  and  characters, for example, . Loofah is considering that as an HTML or XML tag, and is stripping it away from the text.\n\nIs there a way to prevent this from happening while still doing a good job of scrubbing away the actual tags?\n\nEdit: Here&#39;s a failing test case:\n\n\n\nWe&#39;re currently using some pretty evil regex hackery to try and accomplish this, but as the comment above states, it doesn&#39;t work for tags &quot;nested&quot; inside non-tags. And we actually want to preserve the  elements as well.\n\nThe sample below isn&#39;t using Loofah, but the application itself does in other places so it wouldn&#39;t be hard to add it here. We&#39;re just not sure of what configuration options we should use, if any.\n",
            "excerpt": "However, that text sometimes happen to things like e-mail addresses <span class=\"highlight\">and</span> such between &lt; <span class=\"highlight\">and</span> &gt; characters, for example, &lt; foo@domain.com &gt;. &hellip; Test::Unit::UI::Console::TestRunner.run(HTMLTest)\n\n\nWe&#39;re currently using some pretty <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> hackery to try <span class=\"highlight\">and</span> accomplish this, but as the comment above states, it doesn&#39;t work for tags &quot;nested&quot; inside &hellip; ",
            "title": "Stripping HTML from text containing &lt; and &gt; characters with Loofah and Nokogiri"
        },
        {
            "tags": [
                "javascript",
                "html"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 11304351,
            "is_answered": false,
            "question_id": 11304090,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1341288741,
            "creation_date": 1341288741,
            "body": "Here&#39;s a simple regex example to parse addition:\n\n\n\nSee JSFiddle\n\nIt&#39;ll still let a lot of nonsense through, but it&#39;s better than the alternative.\n\nDon&#39;t use evil.\n",
            "excerpt": "Here&#39;s a simple <span class=\"highlight\">regex</span> example to parse addition:\n\nfunction parseAdditionString(s) {\n  var arr = s.match(/(\\d+)\\+(\\d+)/);\n  if (arr &amp;&amp; arr.length === 3) {\n    alert(&quot;Sum = &quot; + (Number(arr[1]) + Number(arr &hellip; Don&#39;t use <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "how can i automatically calculate an expression from a text field"
        },
        {
            "tags": [
                "php",
                "javascript",
                "asp.net",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 11219100,
            "is_answered": false,
            "question_id": 11206223,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1340768575,
            "creation_date": 1340768575,
            "body": "Disclaimer:\n\nAs others will or have already pointed out, using regex to parse non-regular languages is fraught with peril! It is best to use a dedicated parser specifically designed for the job, especially when parsing the tag soup that is HTML.\n\nThat said...\n\nIf you insist on using a regular expression, here is a tested PHP script implementing a regex solution that does a &quot;pretty good&quot; job:\n\n\n\n\n\nThis function strips the start and matching end tags for all HTML 4.01 Anchor elements (i.e.  tags) which do NOT have the specific, (case-sensitive)  attribute value containing: . The  value may contain any number of values, but one of them must be exactly: . The Anchor tag names and the CLASS attribute name are matched case insensitively.\n\nExample input ():\n\n\n\nExample output ():\n\n\n\nThe reader wishing to advanced their regex-fu would do well to study this (rather long and complex) regex. It is carefully handcrafted for both accuracy and speed and implements several advanced efficiency techniques. It is, of course, fully commented to allow readability by mere humans. This example clearly demonstrates that &quot;REGULAR EXPRESSIONS&quot; have evolved into a rich,  (non-REGULAR) programming language. \n\nNote that there will always be edge cases where this solution will fail. e.g. Evil strings within CDATA sections, comments, scripts, styles and tag attribute values can trip this up. (See disclaimer above.) That said, this solution will do a pretty good job for many cases (but will never be 100% reliable!)\n",
            "excerpt": "&lt;/p&gt;\n\n\nThe reader wishing to advanced their <span class=\"highlight\">regex</span>-fu would do well to study this (rather long <span class=\"highlight\">and</span> complex) <span class=\"highlight\">regex</span>. &hellip; <span class=\"highlight\">Evil</span> strings within CDATA sections, comments, scripts, styles <span class=\"highlight\">and</span> tag attribute values can trip this up. (See disclaimer above.) &hellip; ",
            "title": "Get all links except with specified class name with regex"
        },
        {
            "tags": [
                "php",
                "security",
                "eval",
                "formula",
                "equation"
            ],
            "question_score": 4,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 11068246,
            "item_type": "question",
            "score": 4,
            "last_activity_date": 1339969624,
            "creation_date": 1339896155,
            "body": "I&#39;m wondering what sorts of things should be checked when using eval() in PHP to parse a formula that is entered by a user filling out a form. I&#39;ve seen lots of answers about eval(), but not all of them seem to agree.\n\nHere&#39;s what I&#39;ve gathered:\n\n\nDon&#39;t use eval for strings (this could be a problem, since it is a formula I need to parse)\nStrip the input coming from the form (I&#39;m not entirely sure what things I need to strip)\nEval may or may not be evil, and is a security risk (are there alternatives for parsing an equation in a string?)\n\n\nWhat do you folks think I should do?\n\nEDIT: I tried the eval method, and while it does work, the sanitation I used did not support more than two operands. Since I really don&#39;t feel like writing my own (possibly insecure) sanitation regex, I&#39;m just going to find and use a pre-written math class instead. Thanks to everyone for the suggestions!\n",
            "excerpt": ", <span class=\"highlight\">and</span> is a security risk (are there alternatives for parsing an equation in a string?) &hellip; Since I really don&#39;t feel like writing my own (possibly insecure) sanitation <span class=\"highlight\">regex</span>, I&#39;m just going to find <span class=\"highlight\">and</span> use a pre-written math class instead. Thanks to everyone for the suggestions! &hellip; ",
            "title": "Safest way to use eval to parse equations entered by a form"
        },
        {
            "tags": [
                "python",
                "string"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 10967667,
            "is_answered": false,
            "question_id": 10964106,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1339321033,
            "creation_date": 1339321033,
            "body": "Assuming default ascii encoding, we can do this quite nicely in one line, without evil regex ;), by iterating over the string and removing values based on their encoding value using , or whatever specification we choose:\n\n\n\nOr we could specify a string of allowed characters and use &#39;in&#39;, like this using the builtin \n :\n\n\n\nThis removes punctuation too (but we could easily avoid that by adding those characters back into a string check definition if we want, )\n",
            "excerpt": "Assuming default ascii encoding, we can do this quite nicely in one line, without <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> ;), by iterating over the string <span class=\"highlight\">and</span> removing values based on their encoding value using ord(i) &lt; 128, or whatever &hellip; in mystring]).split())\n#Output:\nApple - Wikipedia, the free encyclopedia Language:English Aragon sAsturianuAz rbaycanca B n-l m-g Basa Banyumasan\n\n\nOr we could specify a string of allowed characters <span class=\"highlight\">and</span> &hellip; ",
            "title": "Removing certain characters from a long string in python"
        },
        {
            "tags": [
                "php",
                "url",
                "escaping",
                "file-get-contents",
                "sanitize"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 10102189,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1334133192,
            "creation_date": 1334131788,
            "body": "I have simple question. User supplies URL to my PHP script where I fetch the page from the URL and parse it and show some snippet to user. Now I want to sanitize or better escape the URL so it is safe for me to fetch it by using file_get_contents().\n\nMy simplified code looks like this:\n\n\n\nFirst thing what came to my mind is to use regex for catching evil URL, but I don&#39;t think it is efficient and better would be escape the whole URL. But what PHP function can I use for escaping URL for use in file_get_contents() function ? \n",
            "excerpt": "User supplies URL to my PHP script where I fetch the page from the URL <span class=\"highlight\">and</span> parse it <span class=\"highlight\">and</span> show some snippet to user. &hellip; My simplified code looks like this:\n\n$url = $_POST[&#39;url&#39;];\n$html = file_get_contents($url);\n\n\nFirst thing what came to my mind is to use <span class=\"highlight\">regex</span> for catching <span class=\"highlight\">evil</span> URL, but I don&#39;t think it is efficient <span class=\"highlight\">and</span> &hellip; ",
            "title": "How to safely escape URL from user input to be used in file_get_contents?"
        },
        {
            "tags": [
                "asp.net",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 9979816,
            "is_answered": false,
            "question_id": 9979673,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1333382885,
            "creation_date": 1333382885,
            "body": "You don&#39;t need to use regex to search for a specific word. Instead, just do a plain substring search for that specific word.\n\nIn Python, this would look like:\n\n\n\nNote that case folding (converting a string to upper or lowercase) is evil when done to a Unicode string. Don&#39;t do that.\n",
            "excerpt": "You don&#39;t need to use <span class=\"highlight\">regex</span> to search for a specific word. Instead, just do a plain substring search for that specific word. &hellip; Note that case folding (converting a string to upper or lowercase) is <span class=\"highlight\">evil</span> when done to a Unicode string. Don&#39;t do that. &hellip; ",
            "title": "Regex to check if a word doesn&#39;t exist"
        },
        {
            "tags": [
                "php",
                "mysql",
                "regex",
                "search-engine"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 9884287,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1333040629,
            "creation_date": 1332829070,
            "body": "I&#39;m developing a search engine for a CCG. I want the user to be able to find cards based on a query like,  or . There are many variables to search for: brigades (purple, blue), types (heroes, evil characters [ec&#39;s]), special abilities (discard), and identifiers (kings of israel). I&#39;m thinking about regexing to find common search parameters. I know this won&#39;t be easy, and it will take a long time to fine tune, but can someone point me in the right direction? Is regex even a recommend solution? I don&#39;t know if it&#39;s important, but I&#39;m using php and mysql.\n",
            "excerpt": "There are many variables to search for: brigades (purple, blue), types (heroes, <span class=\"highlight\">evil</span> characters [ec&#39;s]), special abilities (discard), <span class=\"highlight\">and</span> identifiers (kings of israel). &hellip; I know this won&#39;t be easy, <span class=\"highlight\">and</span> it will take a long time to fine tune, but can someone point me in the right direction? Is <span class=\"highlight\">regex</span> even a recommend solution? &hellip; ",
            "title": "how to break apart a search query"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 9897478,
            "is_answered": false,
            "question_id": 9897258,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1332881320,
            "creation_date": 1332881320,
            "body": "The reason REGEX for HTML is considered evil, is because it can (usually) easily be broken, forcing you to repeatedly rethink your pattern. If for instance you&#39;re matching\n\n\n\nIt could be broken easily with\n\n\n\nIf you use\n\n\n\nIt can also be easily broken with\n\n\n\nThere&#39;s no end for this. If you can&#39;t use any of the methods you&#39;ve stated, you could try , but it takes a whitelist as a parameter, not a blacklist, meaning you&#39;ll need to manually allow every single tag you want to allow.\n\nIf all else fail, you could resort to RegEx, what I came up with is this\n\n\n\nBut I bet someone around here could probably come and break that too.\n",
            "excerpt": "The reason <span class=\"highlight\">REGEX</span> for HTML is considered <span class=\"highlight\">evil</span>, is because it can (usually) easily be broken, forcing you to repeatedly rethink your pattern. If for instance you&#39;re matching\n\n&lt;script&gt;. &hellip; If all else fail, you could resort to <span class=\"highlight\">RegEx</span>, what I came up with is this\n\n&lt;\\s*script.*/script&gt;\n\n\nBut I bet someone around here could probably come <span class=\"highlight\">and</span> break that too. &hellip; ",
            "title": "Remove tag and content in between using REGEX/PHP"
        },
        {
            "tags": [
                "php",
                "security",
                "upload"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 9749219,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1331980906,
            "creation_date": 1331980124,
            "body": "I&#39;m trying to make a plugin system and the plugin contain PHP code.\nI think if someone evil reach the area that upload this plugin he can upload evil code\nso I want to limit the functions used in plugin file such as if there is eval() or  function the upload should fail.\n\nI think this will be done by the regex, but I have no experiance with it.\n\nSo I want something like that\n\n\n\nsee this example\n\n\n\ni want one like this but for making a white list and not for use functions, but for the function it self &quot; i mean  not \n",
            "excerpt": "I&#39;m trying to make a plugin system <span class=\"highlight\">and</span> the plugin contain PHP code. &hellip; I think this will be done by the <span class=\"highlight\">regex</span>, but I have no experiance with it.\n\nSo I want something like that\n\n&lt;? &hellip; ",
            "title": "How can I limit used functions in uploaded PHP file?"
        },
        {
            "tags": [
                "regex",
                "xpath",
                "xml-parsing",
                "file-search"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 9534160,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1330698997,
            "creation_date": 1330695145,
            "body": "So we have 1500 xhtml pages in lets say 100 subfolders of /myfolder. I want to find evil constellations of\n\n\n\nIn my current case, it is only allowed to have \n\n\n\nand not 2 evil Tags within a good Tag. This is just an example though. Sometimes I must search for something like\n\n\n\nI&#39;ve been browsing for a while now and could not find a tool which would help me to do so.\nWhat free ware / open source solutions are availble in windows?\n\nWhat are the xhtml files like? basically they are web pages created for JSF. We use our own tags and keep doing changes to them and thus, have to keep a good eye on bad constellation who haven&#39;t been thought of\n\nI&#39;m basically asking because I finally ended up doing it with regex, which makes people around here going nuts. \n",
            "excerpt": "&lt;/goodTag&gt;\n\n\n<span class=\"highlight\">and</span> not 2 <span class=\"highlight\">evil</span> Tags within a good Tag. This is just an example though. Sometimes I must search for something like\n\n&lt;outter&gt;\n....\n&lt;someTag someAttribute=&quot;iDoEvil&quot; /&gt;\n... &hellip; We use our own tags <span class=\"highlight\">and</span> keep doing changes to them <span class=\"highlight\">and</span> thus, have to keep a good eye on bad constellation who haven&#39;t been thought of\n\nI&#39;m basically asking because I finally ended up doing it with <span class=\"highlight\">regex</span> &hellip; ",
            "title": "Xpath find files for windows? xml parser to find files in windows"
        },
        {
            "tags": [
                "apache",
                ".htaccess",
                "redirect",
                "http-status-code-404"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 9195658,
            "is_answered": false,
            "question_id": 9195518,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1328712772,
            "creation_date": 1328712772,
            "body": "\n\nThe somewhat cumbersome regex on  ensures, only URLs of the  scheme will be redirected (as opposed to ).\n\nNote the use of  instead of  (the latter is evil and should be avoided).\n",
            "excerpt": "%{SERVER_NAME} [R]\n\n\nThe somewhat cumbersome <span class=\"highlight\">regex</span> on REQUEST_URI ensures, only URLs of the http://example.com/user1 scheme will be redirected (as opposed to /user1/foo/bar). &hellip; Note the use of SERVER_NAME instead of HTTP_HOST (the latter is <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> should be avoided). &hellip; ",
            "title": "Apache .htaccess redirect if folder not present"
        },
        {
            "tags": [
                "php",
                "regex",
                "nested",
                "hierarchy",
                "preg-match-all"
            ],
            "question_score": 4,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 8855975,
            "item_type": "question",
            "score": 4,
            "last_activity_date": 1327905157,
            "creation_date": 1326482259,
            "body": "UPDATE\n\nSo I am still messing with this, and have gotten as far as finding all the instances of tags, though I&#39;d rather JUST find the deepest stacked instance, as life would be easier that way.. Anyway here is what I got..\n\n\n\nAre there ANY regexp guru&#39;s out there that could give me some pointers or a regexp that mimics what I need? Which is only getting the deepest stacked instance of a {{tag}} that ends like this {{//tag}}\n\nORIGINAL\n\nOk, so I have an issue I have seen others have, but with a different approach to it.. Or so I thought.. So I am curious if anyone else can help me solve this issue further..\n\nI have a database full of templates that I need to work with in PHP, these templates are made and used by another system, and so there for can not be changed. With that said, these templates have hierarchy style tags added to them. What I need to do, is get these templates from the database, and then programmatically find these tags, their function name (or tag name), and their inner contents, as well as anything following the function (tag) name within the brackets.. An example of one of these tags is, {{FunctionName some (otherStuff) !Here}} Some content sits inside and it ends {{/FunctionName}}\n\nThis is where it gets more fun, the templates have another random tag, which I am guessing are the &quot;variable&quot; style of these tags, as they are always generally the same syntax. Which looks like this, ${RandomTag}, but also there are times that the function style one is there but without an ending tag, like so.. {{RandomLoner}}\n\nExample Template...\n\n\n\nOk so in no way is this a real template, but it follows all the rules that I have seen thus far.\n\nNow I have tried different things with regex and preg_match_all to pull out the matches, and get each of these into a nice array. So far what I have got is this (used it on the example template to make sure its working still)\n\n\n\nI have tried a couple approaches, (that took me nearly 8 hours to get to)\n\n\n\nIn no way am I a guru with regexp, I actually just learned it over the last day or so, trying to get this to work. I have googled for this, and realize that regexp is not designed for nested stuff, but the (?R) seems to do the trick on simple bracket examples Ive seen on the internets, but they always only take into account of the stuff between the { and } or ( and ) or &lt; and &gt;. After reading nearly the whole regex info website, and playing, I came up with these 2 versions.\n\nSo what I NEED to do (I think), would have a regexp work from the DEEPEST hierarchy tag first, and work its way out (if I can do that with help from php, thats fine with me). I was thinking finding the Deepest layer, get its data, and work backwards til all the contents are in 1 fat array. I assumed that was what the ($R) was going to do for me, but it didn&#39;t.\n\nSo any help on what I am missing would be great, also take into note that mine seems to have issues with {{}} that DONT have an ending version of it. So like my {{Random}} example, was removed for the sake of me parsing the array example. I feel these tags, along with the ${} tags can be left alone (if I knew how to do that with regexp), and just remain in the text where they are. I am more or less interested in the functions and getting their data into a multidimensional array for me to work with further.\n\nSorry for the long post, I just have been banging me head all night with this. I started with the assumption that it was going to be a bit easier.. Til I realized the tags where nested :/\n\nAny help is appreciated! Thanks!\n",
            "excerpt": "Now I have tried different things with <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> preg_match_all to pull out the matches, <span class=\"highlight\">and</span> get each of these into a nice array. &hellip; After reading nearly the whole <span class=\"highlight\">regex</span> info website, <span class=\"highlight\">and</span> playing, I came up with these 2 versions. &hellip; ",
            "title": "regex, php, and the evil nested (?R)"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 9058571,
            "is_answered": false,
            "question_id": 9058565,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1327889108,
            "creation_date": 1327889108,
            "body": "\n\nEval is evil, and parsing code with regexes is more evil.\n\n\n\nYou can even add varargs support:\n\n\n",
            "excerpt": "function concat(a, b) {\n    return function() { \n        a.call(this, arguments); \n        b.call(this, arguments); \n    };\n}\n\n\nEval is <span class=\"highlight\">evil</span>, <span class=\"highlight\">and</span> parsing code with regexes is more <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Is it possible to combine the functions easier?"
        },
        {
            "tags": [
                "javascript",
                "greasemonkey"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 9049963,
            "is_answered": false,
            "question_id": 9049858,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1327798024,
            "creation_date": 1327798024,
            "body": "Several things:\n\n\nDon&#39;t inject JS if you don&#39;t have to (On the Evil Overlord list next to &quot;Don&#39;t turn into a snake; it never helps&quot;).\nDon&#39;t futz with  if you don&#39;t have to.  It busts things and leads to the temptation of trying to regex HTML.\nUse DOM methods to add things, with rare exceptions.\nI&#39;m not sure that a script node, created thus, will be parsed anyway.\nMight as well start using jQuery.  It makes things simpler and more robust.\n\n\nPutting it all together, your script would become something like: \n\n\n",
            "excerpt": "It busts things <span class=\"highlight\">and</span> leads to the temptation of trying to <span class=\"highlight\">regex</span> HTML.\nUse DOM methods to add things, with rare exceptions.\nI&#39;m not sure that a script node, created thus, will be parsed anyway. &hellip; It makes things simpler <span class=\"highlight\">and</span> more robust. &hellip; ",
            "title": "Add my own onclick function with Greasemonkey"
        },
        {
            "tags": [
                "regex",
                "algorithm",
                "named-entity-extraction"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 8706499,
            "is_answered": false,
            "question_id": 8697456,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1325548055,
            "creation_date": 1325548055,
            "body": "A slightly smarter implementation than running every regex on every file:\n\n\n\nBut I don&#39;t know of any programs that do this already - you&#39;d have to code it yourself. This also implies you have the ram to keep the regex state around, and that you don&#39;t have any evil regexes\n",
            "excerpt": "A slightly smarter implementation than running every <span class=\"highlight\">regex</span> on every file:\n\nFor each <span class=\"highlight\">regex</span>:\n    load <span class=\"highlight\">regex</span> into a <span class=\"highlight\">regex</span> engine\n    assemble a list of <span class=\"highlight\">regex</span> engines\nFor each byte in the file:\n    insert &hellip; This also implies you have the ram to keep the <span class=\"highlight\">regex</span> state around, <span class=\"highlight\">and</span> that you don&#39;t have any <span class=\"highlight\">evil</span> regexes &hellip; ",
            "title": "Fast algorithm to extract thousands of simple patterns out of large amounts of text"
        },
        {
            "tags": [
                "php",
                "regex",
                "bbcode",
                "recursive-regex"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 3613401,
            "is_answered": false,
            "question_id": 3613121,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1324417202,
            "creation_date": 1283290505,
            "body": "Your regex, especially the zero-width assertions (lookaround) cause the regex engine to  backtrack catastrophically. Moral of the story: Regex can&#39;t shouldn&#39;t be used to parse languages that are not regular. If you have nested structures, that&#39;s not a regular language.\n\nIn fact, I think BBCode is evil. BBCode is a markup language invented by lazy programmers who didn&#39;t want to filter HTML the proper way. As a result, we now have a loose &quot;standard&quot; that&#39;s hard to implement. Filter your HTML the right way:\n\nhttp://htmlpurifier.org/\n",
            "excerpt": "Your <span class=\"highlight\">regex</span>, especially the zero-width assertions (lookaround) cause the <span class=\"highlight\">regex</span> engine to  backtrack catastrophically. &hellip; Moral of the story: <span class=\"highlight\">Regex</span> can&#39;t shouldn&#39;t be used to parse languages that are not regular. If you have nested structures, that&#39;s not a regular language.\n\nIn fact, I think BBCode is <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Regular expression crashes Apache due to PCRE limitations"
        },
        {
            "tags": [
                "c#",
                "html",
                "regex"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 8049311,
            "is_answered": false,
            "question_id": 8048951,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1320749779,
            "creation_date": 1320749779,
            "body": "I&#39;ve always read that parsing Html with Regular Expression is the Evil. Ok... it&#39;s surely true...\nBut like the Evil, Regex are so fun :)\nSo I&#39;d give a try to this one:\n\n\n",
            "excerpt": "I&#39;ve always read that parsing Html with Regular Expression is the <span class=\"highlight\">Evil</span>. Ok... it&#39;s surely true...\nBut like the <span class=\"highlight\">Evil</span>, <span class=\"highlight\">Regex</span> are so fun :)\nSo I&#39;d give a try to this one:\n\n<span class=\"highlight\">Regex</span> r = new <span class=\"highlight\">Regex</span>(@&quot;&lt;a.*? &hellip; ",
            "title": "C# Regex: Getting URL and text from multiple &quot;a href&quot;-tags"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 12,
            "is_accepted": true,
            "answer_id": 7898901,
            "is_answered": false,
            "question_id": 7898865,
            "item_type": "answer",
            "score": 19,
            "last_activity_date": 1319664603,
            "creation_date": 1319605645,
            "body": "The pattern you are using is known as an evil regex according to OWASP (they know what they&#39;re talking about most of the time):\n\nhttps://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n\nIt basically matches  OR  or  (since the b is optional by addition of ) \n\nA Regex like this is vulnerable to a ReDoS or Regex Denial of Service Attack.\n\nSo yes, sort out what you want to match.  I suggest in the above example you should simply match , no need for groups, repitition or alternation:\n\n\n\nAlso as someone pointed out, who now deleted his post, you should not use += to append to strings.  You should use a StringBuffer instead:\n\n\n",
            "excerpt": "The pattern you are using is known as an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> according to OWASP (they know what they&#39;re talking about most of the time):\n\nhttps://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS &hellip; A <span class=\"highlight\">Regex</span> like this is vulnerable to a ReDoS or <span class=\"highlight\">Regex</span> Denial of Service Attack.\n\nSo yes, sort out what you want to match. &hellip; ",
            "title": "Java pattern matching going to infinite loop"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 12,
            "is_accepted": false,
            "answer_id": 7898925,
            "is_answered": false,
            "question_id": 7898865,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1319607209,
            "creation_date": 1319605935,
            "body": "The regular expression  is one that takes an especially long time for the regular expression engine to handle.  These are colorfully called evil regexes.  It is similar to the  example at the link.  This particular one is very slow on a string composed entirely of s.\n\nWhat this code does is check the evil regex against increasingly long strings of s, up to length 200, so it certainly ought to take a long time, and it doesn&#39;t print until the loop ends.  I&#39;d be interested to know where the 10^15 years figure came from.\n\nEdit\n\nOK, the 10^15 (and in fact the entire piece of code in the question) comes from this talk, slide 37.  Thanks to zengr for that link.  The most relevant piece of information to the question is that the check for this regex takes time that is exponential in the length of the string.  Specifically it&#39;s O(2^(n/2)), so it takes 2^99 (or so) times longer to check the last string than the first one.\n",
            "excerpt": "What this code does is check the <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> against increasingly long strings of as, up to length 200, so it certainly ought to take a long time, <span class=\"highlight\">and</span> it doesn&#39;t print until the loop ends. &hellip; Edit\n\nOK, the 10^15 (<span class=\"highlight\">and</span> in fact the entire piece of code in the question) comes from this talk, slide 37.  Thanks to zengr for that link. &hellip; ",
            "title": "Java pattern matching going to infinite loop"
        },
        {
            "tags": [
                "c#",
                ".net",
                "regex",
                "regex-greedy"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 3034379,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1319491257,
            "creation_date": 1276473324,
            "body": "I&#39;m writing a regular expression to match data from the IMDb soundtracks data file.  My regexes are mostly working, although they are in places slurping too much text into my named groups.  Take the following regex for example:\n\n\n\nThe performer group includes the string  as well as the performer&#39;s name.  Unfortunately, because the records are not consistently formatted, some performers&#39; names are surrounded by single quotation marks whilst others are not.  This means they are optional as far as the regex is concerned.  \n\nI&#39;ve tried marking the last group as a greedy group using the  group specifier, but this appeared to have no effect on the results.  \n\nI can improve the results by changing the performer group to match a small range of characters, but this reduces my chances of parsing the name out correctly.  Furthermore, if I were to just exclude the apostrophe character, I would then be unable to parse, e.g., band names containing apostrophes, such as Elia&#39;s Lonely Friends Band who performed Run For Your Life featured in Resident Evil: Apocalypse.\n\nUpdate:  Here&#39;s an example input line that the regex should match, as requested.  Other formats are also presented which my existing regex won&#39;t handle.  \n\n\n",
            "excerpt": "just exclude the apostrophe character, I would then be unable to parse, e.g., band names containing apostrophes, such as Elia&#39;s Lonely Friends Band who performed Run For Your Life featured in Resident <span class=\"highlight\">Evil</span> &hellip; Update:  Here&#39;s an example input line that the <span class=\"highlight\">regex</span> should match, as requested.  Other formats are also presented which my existing <span class=\"highlight\">regex</span> won&#39;t handle.  \n\n&quot;  Performed by &#39;Carmen Silvera&#39; (qv)&quot; &hellip; ",
            "title": "Regex expression is too greedy"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 8,
            "is_accepted": false,
            "answer_id": 7854263,
            "is_answered": false,
            "question_id": 7854063,
            "item_type": "answer",
            "score": 8,
            "last_activity_date": 1319323694,
            "creation_date": 1319224822,
            "body": "Ginormous regexes can be quite slow and memory hungry. I know, because I have created one. It can tokenize what shouldn&#39;t be tokenized by a regex. :-) if you want a link... Now... I haven&#39;t ever benchmarked &quot;small&quot; regexes so I don&#39;t know their speed. They surely are compact to write.\n\nAh I was forgetting, regexes are The Evil. Their main problem is that they are like an hammer and when you have them, you try to make all the problems be like a nail. So their main problem is in the user (the programmer).\n\nFirst &quot;big&quot; limitation: Javascript implements only a subset of them, with no Unicode support. Normally the language you use server side has a more complete implementation, so you get limited by js. Even quite complete implementations like the .NET one have big limits: no support for surrogate pairs and no support for &quot;composed&quot; characters (characters that use combining mark). But, as always, the problem is in the programmer. How many programmers that know Unicode know the intricacies of Unicode, of the various sets of digits, of the diacritics?\n\nSecond &quot;big&quot; limitation: maintainability. They are complex and unreadable when they are written. But months later? They get worse! And if you have to train a new programmer, now he has to learn one more language: regex.\n\nThird &quot;big&quot; limitation: they hide too much. You see . What does it means? a digit a space and a digit? Surely. But both  and  in the .NET Regexes &quot;hide&quot; a microworld.  &quot;matches&quot; any non-european digit (and there are many many ones in Unicode).  &quot;matches&quot; so many esoteric spaces of which I don&#39;t even know the name... I don&#39;t even want to think about it. They are like icebergs. Only 1/8 is out of the water, while 7/8 is hidden. But it&#39;s that 7/8 that will probably kill you.\n",
            "excerpt": "Ah I was forgetting, regexes are The <span class=\"highlight\">Evil</span>. Their main problem is that they are like an hammer <span class=\"highlight\">and</span> when you have them, you try to make all the problems be like a nail. &hellip; They are complex <span class=\"highlight\">and</span> unreadable when they are written. But months later? They get worse! <span class=\"highlight\">And</span> if you have to train a new programmer, now he has to learn one more language: <span class=\"highlight\">regex</span>. &hellip; ",
            "title": "Limitations of Regular Expressions?"
        },
        {
            "tags": [
                "regex",
                "preg-replace"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 7727498,
            "is_answered": false,
            "question_id": 7726379,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1318342599,
            "creation_date": 1318342599,
            "body": "Disclaimer:\n\nIt is always best to use a dedicated parser when working with (X)HTML. There are certainly files containing markup that can cause this regex solution to fail. Evil edge case strings placed inside comments, CDATA sections, scripts, styles and/or attribute values can trip it up. (Although these should be very rare.)\n\nThat said...\n\nMany here will tell you to NEVER use regex with HTML. However, this question involves a very specific target string, and a carefully crafted regex solution can work pretty well for this one-shot task at hand. Here is how I would do it:\n\n\n\nThis will replace the target URL only when inside the  attribute of  link tags (with the value wrapped in either single or double quotes). It will also strip any path/query/fragment that may be appended to the old target URLs. It allows any number of other tag attributes to appear before the  attribute.\n",
            "excerpt": "<span class=\"highlight\">Evil</span> edge case strings placed inside comments, CDATA sections, scripts, styles <span class=\"highlight\">and</span>/or attribute values can trip it up. (Although these should be very rare.)\n\nThat said... &hellip; However, this question involves a very specific target string, <span class=\"highlight\">and</span> a carefully crafted <span class=\"highlight\">regex</span> solution can work pretty well for this one-shot task at hand. &hellip; ",
            "title": "replace urls in string preg_replace regex php"
        },
        {
            "tags": [
                "c#",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 7716310,
            "is_answered": false,
            "question_id": 7715506,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1318277295,
            "creation_date": 1318266996,
            "body": "Disclaimer:\n\nAs others have pointed out, using regex to parse non-regular languages is fraught with peril! It is best to use a dedicated parser specifically designed for the job, especially when parsing the tag soup that is HTML.\n\nThat said...\n\nIf you insist on using a regular expression, here is a regex solution that will do a pretty good job:\n\n\n\nExample input:\n\n\n\n\n\n  \n\nExample output:\n\n\n\n\n\n  \n\nNote that there will always be edge cases where this solution will fail. e.g. Evil strings within CDATA sections, comments, scripts, styles and tag attribute values can trip this up. (See disclaimer above.) That said, this solution will do a pretty good job for many cases (but will never be 100% reliable!)\n\nEdit: 2011-10-10 14:00 MDT Streamlined overal answer. Removed first regex solution. Modified to correctly ignore classes having similar names like:  and .\n",
            "excerpt": "<span class=\"highlight\">Evil</span> strings within CDATA sections, comments, scripts, styles <span class=\"highlight\">and</span> tag attribute values can trip this up. (See disclaimer above.) &hellip; Removed first <span class=\"highlight\">regex</span> solution. Modified to correctly ignore classes having similar names like: abc-123 <span class=\"highlight\">and</span> 123-abc. &hellip; ",
            "title": "Replace a class by another in an html string"
        },
        {
            "tags": [
                "javascript",
                ".net",
                "asp.net",
                "visual-studio"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 7645200,
            "is_answered": false,
            "question_id": 7645043,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1317719022,
            "creation_date": 1317717248,
            "body": "The mistake that you are making is that  interprets xx/xx/xxxx formatted strings as U.S. style dates with the month first.   is taken as April 10, not October 4.\n\nHere is a transcript:\n\n\n\nIMHO you should avoid ambiguous date formats like this.  If date strings are to be used, force users to enter ISO8601 (yyyy/MM/dd) formatted text.\n\nThere is decent support for ISO8601 in ECMAScript 5 browsers.  Also see the Date.js library.  Or also this SO question for more info.\n\nADDENDUM\n\nThe built-in  function is documented here.  You can see it does not support DD/MM/YYYY.  While an evil programmer could accept a string in the form DD/MM/YYYY and use  and  (or regexes) to rewrite in an acceptable format for , I&#39;ll assume you are not an evil programmer.\n\nThe proper solution is to use a date parser that accepts format strings.  For JavaScript, one such library is Date.js.  It will allow you to write the following:\n\n\n\nand get the date object corresponding to April 20, 2011.\n",
            "excerpt": "While an <span class=\"highlight\">evil</span> programmer could accept a string in the form DD/MM/YYYY <span class=\"highlight\">and</span> use substring <span class=\"highlight\">and</span> concat (or regexes) to rewrite in an acceptable format for Date.parse, I&#39;ll assume you are not an <span class=\"highlight\">evil</span> programmer &hellip; It will allow you to write the following:\n\nDate.parseExact(&quot;20/04/2011&quot;, &quot;dd/MM/yyyy&quot;);\n\n\n<span class=\"highlight\">and</span> get the date object corresponding to April 20, 2011. &hellip; ",
            "title": "javascript validation for dates takes string for comparison"
        },
        {
            "tags": [
                "php",
                "url",
                "tags",
                "file-get-contents"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 7168934,
            "is_answered": false,
            "question_id": 7168918,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1314144009,
            "creation_date": 1314144009,
            "body": "Try the following regex (taken from the jQuery sourcecode).\n\n\n\nAnd before somebody is going to tell me that Regexes+HTML are an evil combination: You are right, but in this specific case it&#39;s perfecly valid since script tags have some specific behaviour such as that the first  will close the script tag; no matter if it&#39;s inside quotes etc.\n\nHowever, if you plan to do anything else with the HTML data, use a HTML parser!\n",
            "excerpt": "Try the following <span class=\"highlight\">regex</span> (taken from the jQuery sourcecode).\n\n$data = preg_replace(&#39;/&lt;script\\b[^&lt;]*(?:(?! &hellip; &lt;\\/script&gt;)&lt;[^&lt;]*)*&lt;\\/script&gt;/gi&#39;, &#39;&#39;, $data);\n\n\n<span class=\"highlight\">And</span> before somebody is going to tell me that Regexes+HTML are an <span class=\"highlight\">evil</span> combination: You are right, but in this specific case it&#39;s perfecly valid since script &hellip; ",
            "title": "PHP How do I remove script tags from URL?"
        },
        {
            "tags": [
                "python",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 7139593,
            "is_answered": false,
            "question_id": 7138560,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1313946174,
            "creation_date": 1313944837,
            "body": "\n  Python violates the Principle of Least Surprise here: they&#39;ve chosen a\n  word with an established meaning and warped it into meaning something\n  different from that. This isn&#39;t quite evil and wrong, but it is\n  certainly stupid and wrong. – tchrist @tchrist\n\n\nI don&#39;t agree. In fact, I think exactly the contrary, it isn&#39;t stupid\n\nIf I say :\n\n\n  a regex&#39;s pattern  matches the string &#39;145caba&#39;\n\n\neverybody will agree with this assertion.\n\nIf I say :\n\n\n  a regex&#39;s pattern  matches the string &#39;ref/ 789lomono\n  145abaca ubulutatouti&#39;\n\n\n80 % of people will agree\nand the other rigorous 20 % of people, in which I am, will be unsatisfied by the wording and will reclaim that the expression be changed to :  \n\n\n   matches SOMEWHERE in the string &#39;ref/ 789lomono\n  145abaca ubulutatouti&#39;\n\n\nThat&#39;s why I find justified to call an action that consists to search if and where a pattern matches in a string:   \n\nand to call the action to verify if a match occurs from the beginning:     \n\nFor me it&#39;s very much logical, not surprising\n\n.\n\nPS \n\nA former answer of mine have been deleted. As I don&#39;t know how to write to the author of the deletion to ask him the reason why he judged my former answer being a rant (!!!?), I re-post what seems to me absolutely impossible to be qualified so\n",
            "excerpt": "This isn&#39;t quite <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> wrong, but it is\n  certainly stupid <span class=\"highlight\">and</span> wrong. – tchrist @tchrist\n\n\nI don&#39;t agree. &hellip; that consists to search if <span class=\"highlight\">and</span> where a pattern matches in a string: search()  \n\n<span class=\"highlight\">and</span> to call the action to verify if a match occurs from the beginning: match()    \n\nFor me it&#39;s very much logical, not surprising &hellip; ",
            "title": "Why doesn&#39;t this regexp match?"
        },
        {
            "tags": [
                "php",
                "string",
                "wordpress"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 5045388,
            "is_answered": false,
            "question_id": 5031682,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1313773051,
            "creation_date": 1298055439,
            "body": "Never, ever use RegEx for HTML, ok? Just accept this. Or read the numerous posts on here why not.\n\nDOMDocument is ugly and evil. Use simple_html_dom instead, it&#39;s much simpler:\n\n\n",
            "excerpt": "Never, ever use <span class=\"highlight\">RegEx</span> for HTML, ok? Just accept this. Or read the numerous posts on here why not.\n\nDOMDocument is ugly <span class=\"highlight\">and</span> <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Find H2 tag in a string and give it a ID"
        },
        {
            "tags": [
                "c#",
                "asp.net-mvc",
                "asp.net-mvc-3",
                ".net-4.0",
                "routes"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 7102404,
            "is_answered": false,
            "question_id": 7043957,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1313641901,
            "creation_date": 1313641901,
            "body": "i think your problem is that you are either not using a constraint to define what location and stage should look like and it is giving you false positives and reading things in where they are not supposed to or you have your route definitions in the wrong order  \n\nmake sure you have the default mvc defined last and if you have multiple custom routes constrain the either using a regex or custom constraint class to define what locations are valid and they should look like    \n\neg http://site.com/ny/test/server/123456     \n\n\nis ny a valid location - make a custom constraint that defines what a\nvalid location is validate it against a database or a list of valid\nlocations\nis test a valid stage - regex could be sufficient but i always try to avoid regex whenever possible as it is evil and hard to maintain. again i would write a custom constraint to define what stages are valid likely validating against a list is sufficient is the case as you shouldnt  have very many stages \nalso to be noted with using stages the way you are in your url you can also add authentication rules in a constraint so that for exaple only people that are ..say.. admin or stakeholder roles be mached to the route and regular or non authenticated users would simply fall through to the next route or can simply give a 404 \n\n\nwriting routes can be tricky so it is advised to contrain your input data as much as you can especially if you are accepting string data \n\nstephen walther has a good post on writing route constraint at his blog \n",
            "excerpt": "to or you have your route definitions in the wrong order  \n\nmake sure you have the default mvc defined last <span class=\"highlight\">and</span> if you have multiple custom routes constrain the either using a <span class=\"highlight\">regex</span> or custom constraint &hellip; is validate it against a database or a list of valid\nlocations\nis test a valid stage - <span class=\"highlight\">regex</span> could be sufficient but i always try to avoid <span class=\"highlight\">regex</span> whenever possible as it is <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> hard to maintain. again &hellip; ",
            "title": "Help with MVC 3 Routes"
        },
        {
            "tags": [
                "php",
                "mysql"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 6838520,
            "is_answered": false,
            "question_id": 6838494,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1311730861,
            "creation_date": 1311730469,
            "body": "You can use prepared statements/PDO to ensure that no malicious queries can be injected into your code.\n\nLinks:\n\n\nPDO::Prepare\nPDOStatement::Execute\n\n\nYou should still validate your inputs with regex so your users can&#39;t just make whatever they want as their username. Say for example, I make my username . I could then run my evil code on all your pages with my username, unless you sanitized either input or output.\n",
            "excerpt": "Links:\n\n\nPDO::Prepare\nPDOStatement::Execute\n\n\nYou should still validate your inputs with <span class=\"highlight\">regex</span> so your users can&#39;t just make whatever they want as their username. &hellip; I could then run my <span class=\"highlight\">evil</span> code on all your pages with my username, unless you sanitized either input or output. &hellip; ",
            "title": "creating a login more securely in phpmysql how other than mysql real escape?"
        },
        {
            "tags": [
                "php",
                "mysql",
                "mysql-real-escape-string"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 6639946,
            "is_answered": false,
            "question_id": 6639909,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1310284843,
            "creation_date": 1310284843,
            "body": "Always assume the client is an evil genius, and smarter than you. \n\nTo avoid SQL injection, always escape client-side data with mysql_real_escape_string, or better yet, use a database wrapper which does it for you.\n\nYour first regex is still useful though, but not for SQL injection. What you might be preventing there is HTML injection - if you ever displayed the input verbatim on a web page, you can prevent anything nefarious like some rogue javascript.\n",
            "excerpt": "Always assume the client is an <span class=\"highlight\">evil</span> genius, <span class=\"highlight\">and</span> smarter than you. &hellip; Your first <span class=\"highlight\">regex</span> is still useful though, but not for SQL injection. &hellip; ",
            "title": "Performing a mysql_real_escape_string on checkboxes, radio buttons or drop-down menus?"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 6536081,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1309446087,
            "creation_date": 1309442966,
            "body": "the mighty Google apparently makes up its own URLS now to try to locate pages. We have spent allot of time making sure our URL navigation is spot on, but &quot;dont be evil&quot; is being evil and claiming that allot of our pages are duplicates.....\n\neg:\n\n/properties/2531/812/\n\n/properties/2531/812/bisto-prego-Monmouth-Monmouthshire-United Kingdom/\n\n/properties/2531/812/bisto-prego-monmouth-monmouthshire-united-kingdom/\n\n/properties/2531/812/bisto-prego-monmouth-monmouthshire-united-kingdom\n\nyou guessed it, the page is actually found at /properties/2531/812/, the rest is simply there for SEO effort.\n\nSo because google is trying it on, we are now seeing loads of duplicate content reports in our webmaster tools.\n\nEasy enough to handle, we will just make our index.php script allot stricter and run a 303 redirect if the url is not as well formed as we would like. That should sort the sheriff out!\n\n\n\nWe can easiliy detect if the seo part of the URI is present, but still having trouble detecting the ? and if there is a trailing slash....\nSo regex question: first off, how to detect presence of ?query=string etc in the url, and secondly how to detect if a trailing slash is present...\n",
            "excerpt": "We have spent allot of time making sure our URL navigation is spot on, but &quot;dont be <span class=\"highlight\">evil</span>&quot; is being <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> claiming that allot of our pages are duplicates..... &hellip; <span class=\"highlight\">and</span> if there is a trailing slash....\nSo <span class=\"highlight\">regex</span> question: first off, how to detect presence of ?query=string etc in the url, <span class=\"highlight\">and</span> secondly how to detect if a trailing slash is present... &hellip; ",
            "title": "more regex: need to setup some redirects to handle duplicate URL reports by big brother (goog)"
        },
        {
            "tags": [
                "java",
                "casting",
                "dynamic-cast"
            ],
            "question_score": 101,
            "is_accepted": false,
            "answer_id": 6496273,
            "is_answered": false,
            "question_id": 2127318,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1309193964,
            "creation_date": 1309193964,
            "body": "For what it is worth, most scripting languages (like Perl) and non-static compile-time languages (like Pick) support automatic run-time dynamic String to (relatively arbitrary) object conversions. This CAN be accomplished in Java as well without losing type-safety and the good stuff statically-typed languages provide WITHOUT the nasty side-effects of some of the other languages that do evil things with dynamic casting. A Perl example that does some questionable math:\n\n\n\nIn Java, this is better accomplished (IMHO) by using a method I call &quot;cross-casting&quot;.\nWith cross-casting, reflection is used in a lazy-loaded cache of constructors and methods that are dynamically discovered via the following static method: \n\n\n\nUnfortunately, no built-in Java methods such as Class.cast() will do this for String to BigDecimal or String to Integer or any other conversion where there is no supporting class hierarchy. For my part, the point is to provide a fully dynamic way to achieve this - for which I don&#39;t think the prior reference is the right approach - having to code every conversion. Simply put, the implementation is just to cast-from-string if it is legal/possible.\n\nSo the solution is simple reflection looking for public Members of either:\n\nSTRING_CLASS_ARRAY = (new Class[] {String.class});\n\na) Member member = targetClass.getMethod(method.getName(),STRING_CLASS_ARRAY);\nb) Member member = targetClass.getConstructor(STRING_CLASS_ARRAY);\n\nYou will find that all of the primitives (Integer, Long, etc) and all of the basics (BigInteger, BigDecimal, etc) and even java.regex.Pattern are all covered via this approach. I have used this with significant success on production projects where there are a huge amount of arbitrary String value inputs where some more strict checking was needed. In this approach, if there is no method or when the method is invoked an exception is thrown (because it is an illegal value such as a non-numeric input to a BigDecimal or illegal RegEx for a Pattern), that provides the checking specific to the target class inherent logic.\n\nThere are some downsides to this:\n\n1) You need to understand reflection well (this is a little complicated and not for novices).\n2) Some of the Java classes and indeed 3rd-party libraries are (surprise) not coded properly. That is, there are methods that take a single string argument as input and return an instance of the target class but it isn&#39;t what you think... Consider the Integer class:\n\n\n\nThe above method really has nothing to do with Integers as objects wrapping primitives ints.\nReflection will find this as a possible candidate for creating an Integer from a String incorrectly versus the decode, valueof and constructor Members - which are all suitable for most arbitrary String conversions where you really don&#39;t have control over your input data but just want to know if it is possible an Integer.\n\nTo remedy the above, looking for methods that throw Exceptions is a good start because invalid input values that create instances of such objects should throw an Exception. Unfortunately, implementations vary as to whether the Exceptions are declared as checked or not. Integer.valueOf(String) throws a checked NumberFormatException for example, but Pattern.compile() exceptions are not found during reflection lookups. Again, not a failing of this dynamic &quot;cross-casting&quot; approach I think so much as a very non-standard implementation for exception declarations in object creation methods.\n\nIf anyone would like more details on how the above was implemented, let me know but I think this solution is much more flexible/extensible and with less code without losing the good parts of type-safety. Of course it is always best to &quot;know thy data&quot; but as many of us find, we are sometimes only recipients of unmanaged content and have to do the best we can to use it properly.\n\nCheers.\n",
            "excerpt": "This CAN be accomplished in Java as well without losing type-safety <span class=\"highlight\">and</span> the good stuff statically-typed languages provide WITHOUT the nasty side-effects of some of the other languages that do <span class=\"highlight\">evil</span> things &hellip; In this approach, if there is no method or when the method is invoked an exception is thrown (because it is an illegal value such as a non-numeric input to a BigDecimal or illegal <span class=\"highlight\">RegEx</span> for a Pattern), &hellip; ",
            "title": "java: How can I do dynamic casting of a variable from one type to another?"
        },
        {
            "tags": [
                "javascript",
                "replace",
                "character",
                "reserved"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 6348948,
            "is_answered": false,
            "question_id": 6348861,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1308079739,
            "creation_date": 1308079739,
            "body": "first of DON&#39;T USE EVAL it&#39;s the most evil function ever and fully unnecessary here\n\n\n\nworks just as well (or use the  constructor)\n\nand when you want to have a  in the regex and a  before the character you want to escape\n\n\n",
            "excerpt": "first of DON&#39;T USE EVAL it&#39;s the most <span class=\"highlight\">evil</span> function ever <span class=\"highlight\">and</span> fully unnecessary here\n\nvar badwords = /foo|bar|baz/ig;\n\n\nworks just as well (or use the new RegExp(&quot;foo|bar|baz&quot;,&quot;ig&quot;); constructor)\n\n<span class=\"highlight\">and</span> when &hellip; you want to have a / in the <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> a \\ before the character you want to escape\n\nvar badwords = /\\/foo|bar|baz/ig;\n//or\nvar badwords = new RegExp(&quot;\\\\/foo|bar|baz&quot;,&quot;ig&quot;);//double escape to escape the &hellip; ",
            "title": "Javascript replace several character including &#39;/&#39;"
        },
        {
            "tags": [
                "javascript",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 6345216,
            "is_answered": false,
            "question_id": 6345151,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1308062362,
            "creation_date": 1308061974,
            "body": "No regex required:\n\n\n\nActually parsing HTML with regular expressions is evil. Although it might be easy to come up with an expression for your specific case, it might not work well for a different string.\n",
            "excerpt": "No <span class=\"highlight\">regex</span> required:\n\nvar t_ = document.createElement(&#39;div&#39;),\n    a;\nt_.innerHTML = htmlString; // &lt;- string containing your HTML\na = t_.children[0];\n\nvar text = a.textContent || a.innerText; // W3C vs IE &hellip; Actually parsing HTML with regular expressions is <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "How to extract text from Link in Javascript?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "html-entities"
            ],
            "question_score": 3,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 6337459,
            "item_type": "question",
            "score": 3,
            "last_activity_date": 1308008377,
            "creation_date": 1308006618,
            "body": "I&#39;m using regex snippets to parse smileys into images, and encountering problems with the semicolon.  For example, a smiley like ;) turns into a WINK icon, matching against \n\n\n\nand works in most cases.  But text like &quot;) is also matching into &quot;WINK, because the quotation mark is actually an html entity ().\n\nI tried prefixing the regex with a greedy non-capturing match to discard semicolons in entities:\n\n\n\nBut the resulting pattern still matches against the semicolon in  that should be skipped, because it backtracks to satisfy the non-optional latter portion.  I also realized there&#39;d still be problems with other legitimate matches, such as EVIL: .\n\nSo what it appears I really need is the negation of preceding html entities missing a semicolon:\n\n\n\nBut it is still matching and I&#39;m not sure why.\n\nIt would be ideal to still get returned matches that can be replaced wholesale without further inspection, but I&#39;m open to suggestions.  What is not suitable is first parsing out the html entities, because sometimes they&#39;re necessary and/or part of a legitimate smiley (as with EVIL).\n\n\n\nEDIT (some Google food):\n\nI discovered (and Bryan also noted below) that Zero-width positive lookbehind, , would work as desired (not Zero-width negative lookahead ).\n\nAs per regular-expressions.info, the latter &quot;will only succeed if the regex inside the lookahead fails to match&quot; which sounds right, but isn&#39;t when the section is optional anyway.\n\nIn contrast, the former &quot;matches at a position if the pattern inside the lookahead can be matched ending at that position&quot; which isn&#39;t at all clear, but does the trick.  Because the match is using lookbehind, there&#39;s no chance of backtracking to satisfy the latter portion of the regex.\n\nSo a full regex looks like:\n\n\n\nand that matches these:    while failing this:  \nIt does however still match , so more tweaking would be ideal (such as additionally matching semicolons in place of the ampersands, if that doesn&#39;t cause other smileys with entities in them to break).  People typing out html entities in chat isn&#39;t likely to come up much anyway.\n\nEither way would be &quot;good enough&quot;--except that javascript doesn&#39;t support negative lookbehind.  But it&#39;s worth explaining for the sake of other regex implementations.\n",
            "excerpt": "What is not suitable is first parsing out the html entities, because sometimes they&#39;re necessary <span class=\"highlight\">and</span>/or part of a legitimate smiley (as with <span class=\"highlight\">EVIL</span>). &hellip; EDIT (some Google food):\n\nI discovered (<span class=\"highlight\">and</span> Bryan also noted below) that Zero-width positive lookbehind, (?&lt;!<span class=\"highlight\">regex</span>), would work as desired (not Zero-width negative lookahead (?!<span class=\"highlight\">regex</span>)). &hellip; ",
            "title": "Skip preceding html entities in javascript regex"
        },
        {
            "tags": [
                "javascript",
                "if-statement"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 6211401,
            "is_answered": false,
            "question_id": 6211103,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1306997679,
            "creation_date": 1306997679,
            "body": "@Anurag&#39;s answer is great, that&#39;s the best you can do,  is supported by every browser that is around (being buggy in IE 5.5-7 but for getting  it works fine).\n\nI just wanted to add a few things:\n\n\nDon&#39;t use &#39;s string syntax, always pass in a function (you can pass in a closure to run more than one functions), which is considered best practice. The string variation works like , the widely known evil bastard. So your code should look like (same applies to ):\n\n\nOthen than using , which is the best approach, you can also write a regex approach. I only add this for fun and broadening the view, please use @Anurag&#39;s solution.\n\n\n\nThis will try to match in a case-insensitive way, looking for  in the end of the string, having either the beginning of the string or  before it.\n\njsFiddle Demo\n\n",
            "excerpt": "The string variation works like eval(), the widely known <span class=\"highlight\">evil</span> bastard. &hellip; I only add this for fun <span class=\"highlight\">and</span> broadening the view, please use @Anurag&#39;s solution. &hellip; ",
            "title": "Basic Javascript Question"
        },
        {
            "tags": [
                "php",
                "curl"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 6028813,
            "is_answered": false,
            "question_id": 6028705,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1305624318,
            "creation_date": 1305624318,
            "body": "You could grab all the URLs using a regular expression\n\n\n",
            "excerpt": "You could grab all the URLs using a regular expression\n\n// insert general warning about how parsing HTML using <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span> :-)\npreg_match(&#39;/href=&quot;([^&quot;]+)&quot;/&#39;, $html, $matches);\n$urls = array_slice($matches &hellip; , 1);\n\n// Now just loop through the array <span class=\"highlight\">and</span> fetch the URLs with cUrl... &hellip; ",
            "title": "php Curl clicked links"
        },
        {
            "tags": [
                "javascript",
                "html",
                "xpath",
                "hyperlink",
                "selenium"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 5985639,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1305243761,
            "creation_date": 1305242509,
            "body": "I&#39;m using Selenium RC to write test cases for a website that&#39;s at least partially dynamically generated or otherwise dependent on a database. I&#39;d like to be able to tell my Python program making calls to Selenium to do string operations on the target of a specific link, but I can&#39;t be sure what the target (the href=&#39;&#39; field) will be at &quot;compile time&quot; (or, well, whatever the Python equivalent is. Can someone help me out there?).  \n\nNow, I am sure what the xpath of that link is going to be; &quot;//table[@id=&#39;search-results&#39;]/tbody/tr[2]/td[3]/a/img&quot; . And I am running Selenium, which has an eval() function (the root of all evil) that runs arbitrary lines of javascript. Is there any way I can get the target of this link from the xpath and Selenium, or do I have to find some way to download the entire page source (how do I do this? There was supposed to be a Selenium command to download the entire page source, but I got an &quot;element doesn&#39;t exist&quot; error when I tried running it) and then break out regexes to mess with the entire page source?\n",
            "excerpt": "<span class=\"highlight\">And</span> I am running Selenium, which has an eval() function (the root of all <span class=\"highlight\">evil</span>) that runs arbitrary lines of javascript. &hellip; Is there any way I can get the target of this link from the xpath <span class=\"highlight\">and</span> Selenium, or do I have to find some way to download the entire page source (how do I do this? &hellip; ",
            "title": "Is there a way to get a link&#39;s destination in JavaScript from the xpath of the link?"
        },
        {
            "tags": [
                "php",
                "validation",
                "filter",
                "profanity"
            ],
            "question_score": 6,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 5780721,
            "item_type": "question",
            "score": 6,
            "last_activity_date": 1304573985,
            "creation_date": 1303750375,
            "body": "Last year I was working on a Christmas project which allowed customers to send emails to each other with a 256 character free-text field for their Christmas request. The project worked by searching the (very-large) product database for suggest products that matched the text field, but offered a free text option for those customers that could not find the product in question.\n\nOne obvious concern was the opportunity for customers to send rather explicit requests to some unsuspecting customer with the company&#39;s branding sitting around it.\n\nThe project did not go ahead in the end, for various reasons, the profanity aspect being one.\n\nHowever, I&#39;ve come back to thinking about the project and wondering what kinds of validation could be used here. I&#39;m aware of clbuttic which I know is the standard response to any question of this nature.\n\nThe solutions that I considered were:\n\n\nRun it through something like WebPurify\nUse MechanicalTurk\nWrite a regex pattern which looks for the word in the list. A more complicated version of this would consider plurals and past tenses of the word as well.\nWrite an array of suspicious words, and score each one. If the submission goes above a score, the validation fails.\n\n\nSo there are two questions:\n\n\nIf the submission fails, how do you handle it from a UI perspective?\nWhat are the pros and cons of these solutions, or any others that you can suggest?\n\n\nNB - answers like &quot;profanity filters are evil&quot; are irrelevant. In this semi-hypothetical situation, I haven&#39;t decided to implement a profanity filter or been given the choice of whether or not to implement one. I just have to do the best I can with my programming skills (which should be on a LAMP stack if possible).\n",
            "excerpt": "The solutions that I considered were:\n\n\nRun it through something like WebPurify\nUse MechanicalTurk\nWrite a <span class=\"highlight\">regex</span> pattern which looks for the word in the list. &hellip; What are the pros <span class=\"highlight\">and</span> cons of these solutions, or any others that you can suggest?\n\n\nNB - answers like &quot;profanity filters are <span class=\"highlight\">evil</span>&quot; are irrelevant. &hellip; ",
            "title": "Design pattern for blocking undesirable content"
        },
        {
            "tags": [
                "nginx"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 5706046,
            "is_answered": false,
            "question_id": 5409413,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1303144739,
            "creation_date": 1303144739,
            "body": "You want to use try_files to check for the existence of files instead of if statements here (because If&#39;s are Evil in Nginx).\n\nTo to a single directory, it would be like:\n\n\n\nWhat this does is try the uri as a file first. If that doesn&#39;t work, it&#39;ll try as a directory. If neither work, it&#39;ll default to index.php of /xxx/. The extra index line is to keep it from showing a blank page if you go directly to whatever.com/xxx\n\nUsing regex, we can expand this rule to work with more than one directory:\n\n\n\nThis should grab the full directory structure and rout it to the appropriate index.\n\n\nabc.com/yyy/nonexistant.php ==&gt; abc.com/yyy/index.php\nabc.com/yyy/zzz/nonexistant.php ==&gt; abc.com/yyy/zzz/index.php\n\n\nIf you only wanted the second example to go to yyy/index.php, use this regex in the location instead:\n\n\n",
            "excerpt": "You want to use try_files to check for the existence of files instead of if statements here (because If&#39;s are <span class=\"highlight\">Evil</span> in Nginx). &hellip; $uri&amp;$args;\n   index index.php\n}\n\n\nThis should grab the full directory structure <span class=\"highlight\">and</span> rout it to the appropriate index. &hellip; ",
            "title": "rewrite rule nginx"
        },
        {
            "tags": [
                "python",
                "regex"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 5683634,
            "is_answered": false,
            "question_id": 5682772,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1302913961,
            "creation_date": 1302913961,
            "body": "Most people are giving you answers often qualified with &quot;Don&#39;t use regex! Regex is evil and comes from Perl! We Python users have trancended mere text manipulation!&quot; but no one is explaining why you&#39;re experiencing this problem.\n\nYour regex is working. It takes any alphabet, whitespace, or hyphen character and turns it into the number . The problem is that it thinks the negative sign in  is &quot;evil text&quot; to turn into a number.\n\nOne way to approach this is to provide an anchor for your regex - Make it match the commas (or beginning/ending of the string) surrounding the text. So it would see  and turn it into  but would see  and know that it&#39;s not text.\n\nAnother approach is to filter based on &quot;does it not contain digits&quot; instead of &quot;does it contain these things I need&quot; - because what if, later, you need to filter out other punctuation marks? Using  would match &quot;things that aren&#39;t digits or commas&quot;, which would turn  into  but keep  the same.\n\nA third approach is to split the string on commas, then test and change each individual segment - probably to see if it contains digits - and then join them back together.\n\nIf you choose the first or second approaches, I leave it up to you to write a regex that either matches a leading comma or the beginning of a string (and a trailing comma or the end of the string - both are similar). It&#39;s not terribly difficult.\n",
            "excerpt": "Most people are giving you answers &lt;snark&gt;often qualified with &quot;Don&#39;t use <span class=\"highlight\">regex</span>! <span class=\"highlight\">Regex</span> is <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> comes from Perl! We Python users have trancended mere text manipulation!&quot; &hellip; Your <span class=\"highlight\">regex</span> is working. It takes any alphabet, whitespace, or hyphen character <span class=\"highlight\">and</span> turns it into the number 1. &hellip; ",
            "title": "Regular Expressions Using Python&#39;s Re"
        },
        {
            "tags": [
                "asp.net",
                "regex"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 5676823,
            "is_answered": false,
            "question_id": 5676533,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1302880244,
            "creation_date": 1302871017,
            "body": "In your previous question, you mentioned you wanted from 0 to 50 characters. If that&#39;s still the case, here&#39;s what you want:\n\n\n\nAs of right now, I think these are the only regexes posted that allow for less than one letter with the first pattern, and less than two letters with the second pattern.\n\nRegexes are not a &quot;bad&quot; thing, they&#39;re just a specialized tool that isn&#39;t suited for every task. If you&#39;re trying to validate input in ASP.NET, I would definitely use a RegularExpressionValidator for this particular pattern, because otherwise you&#39;ll have to waste your time writing a CustomValidator for a pretty meager performance boost. See my answer to this other question for a little guidance on when and when not to use regex. \n\nIn this case, the reason I&#39;d use a regex validator has less to do with the pattern itself and more to do with ASP.NET. A RegularExpressionValidator can just be dragged and dropped into your ASPX code, and all you&#39;d have to write would be 10-21 characters of regex. With a CustomValidator, you&#39;d have to write custom validation functions, both in the codebehind and the JavaScript. You might squeeze a little more performance out of it, but think about when validation comes into play: only once per postback. The performance difference is going to be less than a millisecond. It&#39;s simply not worth your time as a developer -- to you or your employer. Remember: Hardware is cheap, programmers are expensive, and premature optimization is the root of all evil.\n",
            "excerpt": "See my answer to this other question for a little guidance on when <span class=\"highlight\">and</span> when not to use <span class=\"highlight\">regex</span>. &hellip; Remember: Hardware is cheap, programmers are expensive, <span class=\"highlight\">and</span> premature optimization is the root of all <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "What&#39;s the best way to constraint validation to not allow any spaces in ASP.NET"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "dom"
            ],
            "question_score": 14,
            "is_accepted": false,
            "answer_id": 5550805,
            "is_answered": false,
            "question_id": 5550633,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1302003325,
            "creation_date": 1302001442,
            "body": "\nYou should remove the  elements:\n\n\n\n\n\nSecond attempt:\n\nnode-validator can be used in the browser:\nhttps://github.com/chriso/node-validator\n\n\n\nAlternatively, PHPJS has a strip_tags function (regex/evil based):\nhttp://phpjs.org/functions/strip_tags:535\n",
            "excerpt": "Second attempt:\n\nnode-validator can be used in the browser:\nhttps://github.com/chriso/node-validator\n\nvar str = sanitize(large_input_str).xss();\n\n\nAlternatively, PHPJS has a strip_tags function (<span class=\"highlight\">regex</span> &hellip; /<span class=\"highlight\">evil</span> based):\nhttp://phpjs.org/functions/strip_tags:535 &hellip; ",
            "title": "Append html to jQuery element without running scripts inside the html"
        },
        {
            "tags": [
                "regex",
                "perl"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 5399585,
            "is_answered": false,
            "question_id": 5399457,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1300841038,
            "creation_date": 1300840683,
            "body": "The regex you gave matches a single character after  (which will probably be a newline) and immediately expects to see .  Also, from the looks of it, you&#39;re using &quot;blah&quot; as a wildcard for &quot;anything&quot;?\n\n\n\nNote that a regex is not going to handle nested s properly (this is a simpler version of why you shouldn&#39;t try to parse HTML with a regex).  You can force it to work for this simple case with some evil, but it&#39;s still getting rather too close to the Old Ones for comfort.  Best for that case is to use a real parser.\n\nOr you can eschew reinventing the wheel and use unifdef.\n",
            "excerpt": "The <span class=\"highlight\">regex</span> you gave matches a single character after #ifdef blah (which will probably be a newline) <span class=\"highlight\">and</span> immediately expects to see ^#else. &hellip; HTML with a <span class=\"highlight\">regex</span>). &hellip; ",
            "title": "Perl regex multiline zero or more occurrences"
        },
        {
            "tags": [
                "java",
                "regex",
                "multiline"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 5329330,
            "is_answered": false,
            "question_id": 5329046,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1300297812,
            "creation_date": 1300296898,
            "body": "Parsing HTML or XML with regex is evil and error-prone.\n\nUse an XML parser and things will work much better.\nHere&#39;s a solution for your problem using Dom4J:\n\n\n\n\n\nApart from that you are also making a mistake (see my comments):\n\n\n\nYour regex might or might not work if you read the entire file to a String, but it can&#39;t work if you apply it on individual lines.\n",
            "excerpt": "Parsing HTML or XML with <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> error-prone.\n\nUse an XML parser <span class=\"highlight\">and</span> things will work much better. &hellip; = null) {\n     n.reset(aLine);\n     // yet you want to replace a multi-line pattern\n     String result = n.replaceAll(&quot;&quot;);\n     out.write(result);\n     out.newLine();\n}\n\n\nYour <span class=\"highlight\">regex</span> might or might not &hellip; ",
            "title": "Java Multi-line regex to replace multiple instances in a file"
        },
        {
            "tags": [
                "algorithm",
                "language-agnostic",
                "reflection",
                "java"
            ],
            "question_score": 11,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 5,
            "is_answered": true,
            "question_id": 5285306,
            "item_type": "question",
            "score": 11,
            "last_activity_date": 1300057254,
            "creation_date": 1299961842,
            "body": "I am aware that by default Java does not have the so-called  (what I pronounce as &quot;evil&quot;) method.  This sounds like a bad thing—knowing you do not have something which so many others do.  But even worse seems being notified that you can&#39;t have it.  \n\nMy question is: What is solid reasoning behind it?  I mean, Google&#39;ing this just returns a massive amount of old data and bogus reasons—even if there is an answer that I&#39;m looking for, I can&#39;t filter it from people who are just throwing generic tag-words around. \n\nI&#39;m not interested in answers that are telling me how to get around that; I can do that myself: \n\nUsing Bean Scripting Framework (BSF)\n\nFile  (in  folder) contents:\n\n\n\nAnd Java code:\n\n\n\nUsing designed bridges like JLink\n\n\n\nThis is equivalent to:\n\n\n\nOther methods\n\n\nUsing Dijkstras shunting-yard algorithm or alike and writing an expression evaluator from scratch. \nUsing complex regex and string manipulations with delegates and HashMultimaps.\nUsing Java Expressions Library\nUsing Java Expression Language\nUsing JRE compliant scripting language like BeanShell.\nUsing the Java Assembler and approach below or direct bytecode manipulation like Javaassist.\nUsing the Java Compiler API and reflections.\nUsing  as root \n\n",
            "excerpt": "I am aware that by default Java does not have the so-called eval (what I pronounce as &quot;<span class=\"highlight\">evil</span>&quot;) method.  This sounds like a bad thing—knowing you do not have something which so many others do. &hellip; Using complex <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> string manipulations with delegates <span class=\"highlight\">and</span> HashMultimaps.\nUsing Java Expressions Library\nUsing Java Expression Language\nUsing JRE compliant scripting language like BeanShell. &hellip; ",
            "title": "Why do people say that Java can&#39;t have an expression evaluator?"
        },
        {
            "tags": [
                "python",
                "elementtree",
                "celementtree"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 5162766,
            "is_answered": false,
            "question_id": 5160965,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1299105233,
            "creation_date": 1299032786,
            "body": "&quot;simple string methods&quot; are the root [pun intended] of all evil -- see examples below.\n\nUpdate 2 Code and output now show that proposed regexes also don&#39;t work very well.\n\nUse ElementTree. The function that you are looking for is . Enable &quot;start&quot; events. Bale out on the first iteration.\n\nCode:\n\n\n\nAbove ElementTree-related code works with Python 2.5 to 2.7. Will work with Python 2.2 to 2.4; you just need to get ElementTree and cElementTree from effbot.org and do some conditional importing. Should work with any lxml version.\n\nOutput:\n\n\n\nUpdate 1 The above was demonstration code. Below is more like implementation code... just add exception handling. Tested with Python 2.7 and 2.2.\n\n\n",
            "excerpt": "&quot;simple string methods&quot; are the root [pun intended] of all <span class=\"highlight\">evil</span> -- see examples below.\n\nUpdate 2 Code <span class=\"highlight\">and</span> output now show that proposed regexes also don&#39;t work very well.\n\nUse ElementTree. &hellip; Tested with Python 2.7 <span class=\"highlight\">and</span> 2.2. &hellip; ",
            "title": "How to obtain the root of a tree without parsing the entire file?"
        },
        {
            "tags": [
                "javascript",
                "asp.net",
                "datetime",
                "epoch"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 4928906,
            "is_answered": false,
            "question_id": 4928809,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1297130576,
            "creation_date": 1297130576,
            "body": "You can do it with regex and Date constructor.\n\nNot sure if it better, but it is safer. Eval can be evil sometimes...\n\nSo, you could do something like this:\n\n\n\nYou could also do the regex with replace:\n\n\n",
            "excerpt": "You can do it with <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> Date constructor.\n\nNot sure if it better, but it is safer. Eval can be <span class=\"highlight\">evil</span> sometimes... &hellip; So, you could do something like this:\n\nvar millisecs = signupDate.match(/\\d+/)[0];\nvar date = new Date(parseInt(millisecs));\n\n\nYou could also do the <span class=\"highlight\">regex</span> with replace:\n\nvar millisecs = signupDate.replace &hellip; ",
            "title": "Invoking javascript time &quot;object&quot;"
        },
        {
            "tags": [
                "java",
                "optimization",
                "if-statement"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 4830992,
            "is_answered": false,
            "question_id": 4830592,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1296234458,
            "creation_date": 1296234458,
            "body": "Interesting question. Like many people here, micro optimization causes more evil than good. But without throwing any design patten at you or idea for optimization, this is what  I would do.\n\nI will create am Enum for all operations. I will also create a member function in this enum that takes a var args parameter and a operation enum and iteratively apply the enum operation on the arguements.\n\nI will also create an String utility class (for input processing), that Iterates thro all the operation enum values and performs a regular expression check on input string to identify the operation specified by a given string ( regex because I want to make sure of Postfix notation).  Once it identifies the operation, then it delegates to the enum&#39;s member function to perform the operation.\n",
            "excerpt": "Like many people here, micro optimization causes more <span class=\"highlight\">evil</span> than good. But without throwing any design patten at you or idea for optimization, this is what  I would do. &hellip; by a given string ( <span class=\"highlight\">regex</span> because I want to make sure of Postfix notation). &hellip; ",
            "title": "Is an if-else tree the best way to go in the following case?"
        },
        {
            "tags": [
                "python",
                "html",
                "regex",
                "search",
                "variables"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 4581788,
            "is_answered": false,
            "question_id": 4581620,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1294095390,
            "creation_date": 1294023284,
            "body": "Parsing html by regex is nasty, error-prone, and generally evil.\n\n\n\nreturns something like\n\n\n\nNow we are dealing with plain strings and should use regex,\n\n\n\nresults in\n\n\n",
            "excerpt": "Parsing html by <span class=\"highlight\">regex</span> is nasty, error-prone, <span class=\"highlight\">and</span> generally <span class=\"highlight\">evil</span>. &hellip; should use <span class=\"highlight\">regex</span>,\n\nimport re\n\ndef getPrice(s):\n    res =  re.search(r&#39;\\d+\\. &hellip; ",
            "title": "Get parts of html code as a new string in python"
        },
        {
            "tags": [
                "php",
                "html",
                "regex",
                "string"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 4488636,
            "is_answered": false,
            "question_id": 4488573,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1292840018,
            "creation_date": 1292840018,
            "body": "This is one case where I have to agree with the dreaded regex are evil meme. For straightforward extraction purposes, regular expressions are often suitable. But if you want to process malformed and or nested HTML, it&#39;s not an option without significant fuss.\n\nHence I&#39;d recommend using phpQuery or QueryPath for such occasions. It&#39;s also pretty simple:\n\n\n",
            "excerpt": "This is one case where I have to agree with the dreaded <span class=\"highlight\">regex</span> are <span class=\"highlight\">evil</span> meme. For straightforward extraction purposes, regular expressions are often suitable. &hellip; But if you want to process malformed <span class=\"highlight\">and</span> or nested HTML, it&#39;s not an option without significant fuss.\n\nHence I&#39;d recommend using phpQuery or QueryPath for such occasions. &hellip; ",
            "title": "Regex match HTML wrapped around HTML"
        },
        {
            "tags": [
                "javascript",
                "asp.net",
                "validation"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 4445662,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1292381566,
            "creation_date": 1292372938,
            "body": "I&#39;m looking for a way to use custom ASP.NET validators to validate input, without using UpdatePanels, and without a full postback.\n\nThe validators do several things - not just length/regex, but some other non-standard stuff as well.\n\nJavascript is required for our users, so I don&#39;t have to worry about normal users who have javascript turned off.\n\nI see several options, but none are ideal:\n\n1) Suck it up and use UpdatePanels. I&#39;m in the &quot;UpdatePanels are evil&quot; group, so I&#39;d prefer not to do this.\n\n2) Without using validation controls, manually validate the fields by passing the values to a PageMethod static method, via jQuery or any other AJAX framework. This would require client and server coding each time I needed to use a validator.\n\n3) Use jQuery (or any other javascript framework) validation for client validation, then if they somehow get by that, have server-code validation controls for full postback. This would require all of the validation rules to be written in javascript as well as C#. I don&#39;t care about the full failed postback at this point, because the javascript validation would catch real users who weren&#39;t trying to screw me over.\n\nIs there alternative out there for using real CustomValidator controls, with partial postback, C# code only, for validating input without UpdatePanels and without a lot of redundant javascript?\n\nThanks\n",
            "excerpt": "The validators do several things - not just length/<span class=\"highlight\">regex</span>, but some other non-standard stuff as well. &hellip; I see several options, but none are ideal:\n\n1) Suck it up <span class=\"highlight\">and</span> use UpdatePanels. &hellip; ",
            "title": "ASP.NET validation using AJAX without update panels"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 4444489,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1292364068,
            "creation_date": 1292362605,
            "body": "I am trying to analyze a piece of text via JavaScript and, reading up, have learned that parsing HTML with Regex is quite evil. I&#39;d like to remove a more sinister part of my text before I analyze it.\n\nIf I&#39;ve got a chunk of text like the item below, how might I (1) slice everything from  to  and (2) store that text in a new var?\n\n\n",
            "excerpt": "I am trying to analyze a piece of text via JavaScript <span class=\"highlight\">and</span>, reading up, have learned that parsing HTML with <span class=\"highlight\">Regex</span> is quite <span class=\"highlight\">evil</span>. &hellip; If I&#39;ve got a chunk of text like the item below, how might I (1) slice everything from [caption] to [/caption] <span class=\"highlight\">and</span> (2) store that text in a new var? &hellip; ",
            "title": "How can I remove a chunk of text from a Javascript string?"
        },
        {
            "tags": [
                "c#",
                "regex",
                "linq"
            ],
            "question_score": 3,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 4329097,
            "item_type": "question",
            "score": 3,
            "last_activity_date": 1291237986,
            "creation_date": 1291237282,
            "body": "I&#39;m looking for the most elegant way to parse this. I&#39;m just hitting a wall when it comes to my regex knowledge and maybe a regex is not even the best answer?\nI have three example sentences to give an example of what I want to do. I want to to parse these into four parts. Attacker, attack-type, damage and target.\n\nGandalfs&#39;s heavenly wrath DISMEMBERS you!\nThe Holy Prelate&#39;s slash wounds Frodo.\nYour divine power decimates the evil Warlock!\n\nAttacker:\nOne or several words that are always first and the words can be identified by either being &quot;Your&quot; or end in &#39;s.\nAttack-type: One or several words that can only be identified by that they are between the &quot;attacker&quot; and the &quot;damage&quot;.\nDamage: One or more (rare but exists) words that are unique and limited. I have a list with possible words. {&quot;wounds&quot;, &quot;decimates&quot; etc}. They do not exists anywhere else so no risk that the attacker is named &quot;wounds&quot; or something like that.\nTarget: One or several words that can be identified that they are all the words after the damage.\n",
            "excerpt": "I&#39;m just hitting a wall when it comes to my <span class=\"highlight\">regex</span> knowledge <span class=\"highlight\">and</span> maybe a <span class=\"highlight\">regex</span> is not even the best answer?\nI have three example sentences to give an example of what I want to do. &hellip; Attacker, attack-type, damage <span class=\"highlight\">and</span> target.\n\nGandalfs&#39;s heavenly wrath DISMEMBERS you!\nThe Holy Prelate&#39;s slash wounds Frodo.\nYour divine power decimates the <span class=\"highlight\">evil</span> Warlock! &hellip; ",
            "title": "How do I parse a log from a game with regex and/or linq?"
        },
        {
            "tags": [
                "regex",
                "pattern-matching"
            ],
            "question_score": 5,
            "is_accepted": false,
            "answer_id": 4219645,
            "is_answered": false,
            "question_id": 4218552,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1290126758,
            "creation_date": 1290114861,
            "body": "\n  Is there a regex to match a string of increasing contiguous numbers, e.g. 123, 56789, etc?\n\n\nBut of course there is, since the answer to all questions beginning, “Is there a (Perl) regex to match…?” is always “Why, certainly there is!” The operative question is always, “What is the Perl regex to match…?”   ☺\n\nShort Answer\n\nThat Perl regular expression is this one:\n\n\n\nIf works by having two different  conditional groups, with recursion on group 1 as the THEN clause of the second of those. That’s what  does. \n\nNifty, eh?  \n\nRecursive patterns like these are awesomely cool and incredibly powerful; it’s up to you to use this power in the service of good, not evil.   ☺\n\nI use a lightly less clever form of it in the program given below. I’ll leave the other one there where it started just so you can see that in Perl  There’s More Than One Way To Do It.  \n\nFull Demo Program\n\nNotice that this works no matter what the string of Unicode digits, including non-ASCII (welcome to the Brave New Millennium) and even way up in the Astral Plane where languages stuck on UCS-2, or sometimes even UTF-16, cannot even think about.\n\nThis output:\n\n\n\nIs produced by this program:\n\n\n\nPS: Some say that the reason that There’s More Than One Way To Do It in Perl is to make up for all those other  languages in which there  are no ways to do it — which is often most of them.   ☻\n",
            "excerpt": "Is there a <span class=\"highlight\">regex</span> to match a string of increasing contiguous numbers, e.g. 123, 56789, etc? &hellip; Recursive patterns like these are awesomely cool <span class=\"highlight\">and</span> incredibly powerful; it’s up to you to use this power in the service of good, not <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Regular expression to match 12345"
        },
        {
            "tags": [
                "jquery",
                "mysql",
                "django",
                "json",
                "filter"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 4196050,
            "is_answered": false,
            "question_id": 4195268,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1289922866,
            "creation_date": 1289922866,
            "body": "Even though users can&#39;t execute any obvious evil queries (deleting or getting secret data), you may have to worry about someone hitting your database often with complex queries (think multiple joins and some regexes or other selects on non-indexed columns) and these can take a long time to answer.\n\nIt also depends on the size of your database how many complex queries it can handle at one time, but this might make your site slower.\n",
            "excerpt": "Even though users can&#39;t execute any obvious <span class=\"highlight\">evil</span> queries (deleting or getting secret data), you may have to worry about someone hitting your database often with complex queries (think multiple joins <span class=\"highlight\">and</span> &hellip; some regexes or other selects on non-indexed columns) <span class=\"highlight\">and</span> these can take a long time to answer. &hellip; ",
            "title": "Escape dangerous code when allowing user MySQL filter creation"
        },
        {
            "tags": [
                "python",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 3908889,
            "is_answered": false,
            "question_id": 3908727,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1286821323,
            "creation_date": 1286821323,
            "body": "Since I think regex is evil...\n\n\n\n...I advocate simply parsing the filename.\n",
            "excerpt": "Since I think <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span>...\n\ndef return_extension(filename):\n    &#39;&#39;&#39;(This functions assumes that filenames such as `.foo` have extension\n    `foo`.)\n    &#39;&#39;&#39;\n    tokens = filename.split(&#39;.&#39;) &hellip; ",
            "title": "python regex question"
        },
        {
            "tags": [
                "php",
                "parsing",
                "dom"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 3808746,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1285632827,
            "creation_date": 1285631743,
            "body": "\n  Possible Duplicate:\n  Dynamically replace the “src” attributes of all &lt;img&gt; tags  \n\n\n\n\nFunny story: I posted this very question a short time ago, but instead of getting something I could, you know, use, all I got was a lot of dogma about the evils of using regex to parse HTML. So here goes again.\n\nI have some HTML and want to replace the &quot;src&quot; attributes of all the img tags so that they point to copies of the identical images (although with different file names) on another host.\n\nFor instance, given these three tags\n\n\n\nI would like them replaced with\n\n\n\nI am trying to use PHP Simple HTML DOM Parser, but I&#39;m not getting it. \n\n\n\nWhat do I do next?\n",
            "excerpt": "attributes of all &lt;img&gt; tags  \n\n\n\n\nFunny story: I posted this very question a short time ago, but instead of getting something I could, you know, use, all I got was a lot of dogma about the evils of using <span class=\"highlight\">regex</span> &hellip; I have some HTML <span class=\"highlight\">and</span> want to replace the &quot;src&quot; attributes of all the img tags so that they point to copies of the identical images (although with different file names) on another host. &hellip; ",
            "title": "Dynamically replace the “src” attributes of all &lt;img&gt; tags (redux)"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 3747677,
            "is_answered": false,
            "question_id": 3747633,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1284966728,
            "creation_date": 1284934178,
            "body": "Looks simple. When you detect a motive like a number inside curly brackets it should be replaced by the square of the number. If no replacement where done you are finished. If some replacement where done you do it again (because what was just replaced may be now inside curly brackets) and so on.\n\nThe first part (replacement) can be done using regex, the second part can be done either recursively either or iteratively.\n\nBelow some code snippet that should help you understand the details (not the full answer, but not far). The goal of the exercice seems to be to help you understand  parameters.\n\n\n\nAs others proposed full solutions, here his mine:\n\n\n\nIf your are preoccupied with compatibility issues (because hardened php installation may forbid use of /e) just use  instead of  like below (use anonymous function available as of PHP 5.2.3, for older php version, you can use ).\n\n\n\nFor curious readers, as someone else suggested a python version, below is a possible perl equivalent:\n\n\n\nThere security mechanisms in Perl to avoid injections because of evil user inputs different than blindly rejecting all evals. For those interested you can have a look here.\n\nAnd two other shorter python versions, recursive:\n\n\n\nand non recursive\n\n\n",
            "excerpt": "The first part (replacement) can be done using <span class=\"highlight\">regex</span>, the second part can be done either recursively either or iteratively. &hellip; \\n&quot; ;\n} \n\n\nThere security mechanisms in Perl to avoid injections because of <span class=\"highlight\">evil</span> user inputs different than blindly rejecting all evals. For those interested you can have a look here. &hellip; ",
            "title": "Recursive Function"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 3601456,
            "is_answered": false,
            "question_id": 3601374,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1283180508,
            "creation_date": 1283179757,
            "body": "Well, it&#39;s because the function was already defined in a prior function call (That&#39;s the danger in declaring a function inside of another function).  There are a few options.\n\nConditionally declaring the function\n\n\n\nDeclaring an anonymous function:\n\nPHP 5.3+ :\n\n\n\nPHP 5.2+ :\n\n\n\nUsing a class:\n\n\n\nAlso, I&#39;d suggest not using the  modifier for the regex (it&#39;s just not necessary, and it&#39;s basically just , which is typically seen as evil).  You should instead just use :\n\nAssuming  is a valid callback:\n\n\n",
            "excerpt": "(it&#39;s just not necessary, <span class=\"highlight\">and</span> it&#39;s basically just eval, which is typically seen as <span class=\"highlight\">evil</span>). &hellip; Do stuff here\n}\n$string = preg_replace_callback($<span class=\"highlight\">regex</span>, $callback, $string); &hellip; ",
            "title": "PHP : Function in preg_replace says that the function was already declared"
        },
        {
            "tags": [
                "javascript",
                "xss"
            ],
            "question_score": 10,
            "is_accepted": false,
            "answer_id": 3571109,
            "is_answered": false,
            "question_id": 3571080,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1282780117,
            "creation_date": 1282780117,
            "body": "Instead of checking for evil things like script includes, I would go for regex-based whitelisting of the few commands you expect to be used.  Then involve a human to authorize and add new acceptable commands to the whitelist.\n",
            "excerpt": "Instead of checking for <span class=\"highlight\">evil</span> things like script includes, I would go for <span class=\"highlight\">regex</span>-based whitelisting of the few commands you expect to be used. &hellip; Then involve a human to authorize <span class=\"highlight\">and</span> add new acceptable commands to the whitelist. &hellip; ",
            "title": "Is it possible to sanitize Javascript code?"
        },
        {
            "tags": [
                ".net",
                "xml",
                "datacontractserializer"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 1469395,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1282030081,
            "creation_date": 1253756150,
            "body": "I&#39;m working on getting some objects serialized through an mvc site and returning things via xml, json, etc and I&#39;m looking for the best way to not send the empty elements.\n\nIn a perfect world, simply attaching EmitDefaultValue:=False to DataMembers in a DataContract would suffice, but in some situations, it just doesn&#39;t fly.\n\nA String default is Nothing, but I don&#39;t want to serialize them if they are Nothing or String.Empty. Same goes for lists and collections. I don&#39;t want them to serialize if they&#39;re Nothing or if they&#39;re empty with a count of 0.\n\nThere seems to be a few not so pretty options.\n\n\nCustom  that buffers itself and drops empty elements\nBefore an object is serialized, cycle through the prop, setting Empty to Nothing, Count-0 to Nothing\nXSLT that drops empty elements\nRegex the output string on the way out\n\n\nAll of these seem some what evil, 1 being the least evil but the leave trivial to do. Is there some other tricks out there?\n",
            "excerpt": "Custom XmlTextWriter that buffers itself <span class=\"highlight\">and</span> drops empty elements\nBefore an object is serialized, cycle through the prop, setting Empty to Nothing, Count-0 to Nothing\nXSLT that drops empty elements\n<span class=\"highlight\">Regex</span> &hellip; the output string on the way out\n\n\nAll of these seem some what <span class=\"highlight\">evil</span>, 1 being the least <span class=\"highlight\">evil</span> but the leave trivial to do. &hellip; ",
            "title": "DataContractSerializer, EmitDefaultValue and empty tags"
        },
        {
            "tags": [
                "java",
                "regex",
                "string",
                "pattern-matching"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 3355051,
            "is_answered": false,
            "question_id": 3354796,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1280334241,
            "creation_date": 1280334241,
            "body": "You are being wilfully evil by trying to parse HTML with Regexes. Don&#39;t.\n\nThat said, you are being extra evil by trying to do everything in one regexp. There is no need for that; it makes your code regex-engine-dependent, unreadable, and quite possibly slow. Instead, simply match tags and then check your first-stage hits again with the trivial regex . Of course, that character string might occur elsewhere in an HTML tag, but see (1)... you have alrady thrown good practice out of the window, so why not at least make things un-obfuscated so everyone can see what you&#39;re doing?\n",
            "excerpt": "There is no need for that; it makes your code <span class=\"highlight\">regex</span>-engine-dependent, unreadable, <span class=\"highlight\">and</span> quite possibly slow. &hellip; Instead, simply match tags <span class=\"highlight\">and</span> then check your first-stage hits again with the trivial <span class=\"highlight\">regex</span> /target=/. &hellip; ",
            "title": "Regex exclusion behavior"
        },
        {
            "tags": [
                "php",
                "html",
                "eval",
                "custom-tags"
            ],
            "question_score": 5,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 3326446,
            "item_type": "question",
            "score": 5,
            "last_activity_date": 1280000702,
            "creation_date": 1279998197,
            "body": "Overview\n\nAround the end of 2009, I wrote a simple templating system for PHP/HTML to be used in-house by our designers for brochure-ware type websites. The goal of the system is to allow templating in otherwise pure HTML via custom tags that are processed by PHP. For example, a templated page might look like this:\n\n\n\nThe template itself might look something like this:\n\n\n\nBesides the Page and Content/Container tags, there are a few other tags included in the core for stuff like flow control, iterating over a collection, outputting dynamic values, etc. The framework is designed so it&#39;s very easy to add your own set of tags registered under another prefix and namespace.\n\nCustom Tags to PHP\n\nHow do we parse these custom tags? Since the&#39;re no guarantee that the HTML file is well-formed XML, solutions like XSLT/XPATH won&#39;t be reliable. Instead, we use a regex to look for tags with registered prefixes, and replace those with PHP code. The PHP code is a stack-based design... upon encountering an opening tag, an object representing the tag is created pushed onto the stack, and its &quot;initialization function&quot; (if any) runs. Whenever a registered closing tag is encountered, the most recent object is popped off the stack, and its &quot;rendering function&quot; runs.\n\nSo, after the framework replaces the templating tags with PHP, our example page might look something like this (in realty it&#39;s a bit uglier):\n\n\n\nThe good, the bad, and \n\nNow, how to execute our newly-generated PHP code? I can think of a few options here. The easiest is to simply  the string, and that works well enough. However, any programmer will tell you &quot;eval is evil, don&#39;t use it...&quot; so the question is, is there anything more appropriate than  that we can use here? \n\nI&#39;ve considered using a temporary or cached file, using  output streams, etc, but as far as I can see these don&#39;t offer any real advantage over . Caching could speed things up, but in practice all the sites we have on this thing are already blazingly fast, so I see no need to make speed optimizations at this point.\n\nQuestions\n\nFor each of the things on this list: is it a good idea? Can you think of a better alternative?\n\n\nthe whole idea in general (custom tags for html / php)\nconverting tags to php code instead of processing directly\nthe stack-based approach \nthe use of  (or similar)\n\n\nThanks for reading and TIA for any advice. :)\n",
            "excerpt": "Instead, we use a <span class=\"highlight\">regex</span> to look for tags with registered prefixes, <span class=\"highlight\">and</span> replace those with PHP code. &hellip; However, any programmer will tell you &quot;eval is <span class=\"highlight\">evil</span>, don&#39;t use it...&quot; so the question is, is there anything more appropriate than eval that we can use here? &hellip; ",
            "title": "PHP - templating with custom tags - is this a legit use of eval?"
        },
        {
            "tags": [
                "php",
                "string",
                "if-statement"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 3192041,
            "is_answered": false,
            "question_id": 3191911,
            "item_type": "answer",
            "score": -1,
            "last_activity_date": 1278478931,
            "creation_date": 1278478931,
            "body": "OK, you could use evil Eval. But if your condition is actually as simple as you propose, you could just use a regex to test the condition... No eval necessary.\n",
            "excerpt": "OK, you could use <span class=\"highlight\">evil</span> Eval. But if your condition is actually as simple as you propose, you could just use a <span class=\"highlight\">regex</span> to test the condition... No eval necessary. &hellip; ",
            "title": "PHP - if condition inside string"
        },
        {
            "tags": [
                "php",
                "preg-replace"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 3079882,
            "is_answered": false,
            "question_id": 3079874,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1277049669,
            "creation_date": 1277049669,
            "body": "Escape the slash in the second expression (). If your query becomes more complex, you might have to use a capturing group as well (parentheses).\n\nOh and parsing html with regex is evil. In before the XHTML Regex bandwagon storms this post. :)\n",
            "excerpt": "Oh <span class=\"highlight\">and</span> parsing html with <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span>. In before the XHTML <span class=\"highlight\">Regex</span> bandwagon storms this post. :) &hellip; ",
            "title": "Php preg_replace"
        },
        {
            "tags": [
                "c#",
                "regex",
                "email",
                "multipart"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 4,
            "is_answered": true,
            "question_id": 3072288,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1276888788,
            "creation_date": 1276886615,
            "body": "Before you guys go telling me that Regex is the epitome of all evil... I already know. If I had more hair it would be ripped out already.\n\nSo onto the question. I have made a parser using regex that strips out the desired parts of an html email. Why on earth would I want to do that? Because I&#39;m still a beginner programmer ok, if you can suggest a better way then by all means... do. The parser works perfectly on normal html parts of an email, however if someone sends me and email with just one attachment (or more)...\n\nALL HELL BREAKS LOOSE!\n\nInstead of getting what a normal html email looks like, I get the plain text version with the html version concatenated onto the end like so:\n\n\n\nSo my question is... How can I separate the html version from the text version using regex (or by easier means)?\n",
            "excerpt": "Before you guys go telling me that <span class=\"highlight\">Regex</span> is the epitome of all <span class=\"highlight\">evil</span>... I already know. If I had more hair it would be ripped out already.\n\nSo onto the question. &hellip; Search=2C chat <span class=\"highlight\">and</span> e-mail from your inbox=\n..\nhttp://www.windowslive.com/campaign/thenewbusy? &hellip; ",
            "title": "Using regex to separate a multipart email"
        },
        {
            "tags": [
                "php",
                "html",
                "arrays"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 2930663,
            "is_answered": false,
            "question_id": 2930532,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1275063799,
            "creation_date": 1275063288,
            "body": "eval() is evil(). And there are some faster options to avoid it in this case.\n\nIf you just want to convert the syntax, then I have a regex:  \n\n\n\nIf your input string not only contains the path, but also an value (attach a dummy value if you must), then you can just use parse_str() to extract the array names into a real PHP array:\n\n\n\nTell something more about your input data.\n\n\n\nOkay, just figured out what you mean. You want to submerge in the $_POST array. Then use step-wise references like so:\n\n\n",
            "excerpt": "eval() is <span class=\"highlight\">evil</span>(). <span class=\"highlight\">And</span> there are some faster options to avoid it in this case. &hellip; If you just want to convert the syntax, then I have a <span class=\"highlight\">regex</span>:  \n\n  $name = &#39;$&#39; . preg_replace(&quot;/\\[([^\\]]+)\\]/&quot;, &#39;[&quot;$1&quot;]&#39;, $path);\n\n\nIf your input string not only contains the path, but also an value (attach &hellip; ",
            "title": "get the array with html array path"
        },
        {
            "tags": [
                "security",
                "clojure",
                "keyword"
            ],
            "question_score": 8,
            "is_accepted": true,
            "answer_id": 2883569,
            "is_answered": false,
            "question_id": 2869371,
            "item_type": "answer",
            "score": 7,
            "last_activity_date": 1274457067,
            "creation_date": 1274457067,
            "body": "Per http://clojure.org/reader, there are rules for which characters are valid in symbols and keywords.  (For now, alphanumeric characters and , , , , , and .)  You should never create a symbol containing any other characters.  However, right now, these rules are completely unenforced by the compiler.\n\nAt best you could end up with invalid keywords.  At worst you could end up with evil/dangerous ones, as \nMichał Marczyk said.  Keep in mind that  can be used to run arbitrary code at read-time, so you don&#39;t even have to evaluate a string for bad things to happen, you only have to read it.\n\n\n\n(See  for how to disable this behavior, but read-eval is enabled by default.)\n\nI think general rules for sanitizing user input apply here.  Define precisely what you want to allow, and disallow everything else by default.  Maybe allow something like the regex , with possibly other alphanumerics depending on the language you speak.\n",
            "excerpt": "At worst you could end up with <span class=\"highlight\">evil</span>/dangerous ones, as \nMichał Marczyk said. &hellip; Define precisely what you want to allow, <span class=\"highlight\">and</span> disallow everything else by default.  Maybe allow something like the <span class=\"highlight\">regex</span> #&quot;[a-zA-Z0-9*+!-_?] &hellip; ",
            "title": "Security implications of Clojure keyword creation from user data?"
        },
        {
            "tags": [
                "javascript",
                "html",
                "xhtml",
                "custom-attribute"
            ],
            "question_score": 261,
            "is_accepted": false,
            "answer_id": 2819608,
            "is_answered": false,
            "question_id": 992115,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1273673799,
            "creation_date": 1273673799,
            "body": "We&#39;ve made a web-based editor that understands a subset of HTML - a very strict subset (that understood nearly universally by mail clients).  We need to express things like  in the database, but we can&#39;t have that in the DOM, otherwise the browser where the editor runs, freaks out (or is more likely to freak out than it is likely to freak out over custom attributes).  We wanted drag-and-drop, so putting it purely in the DOM was out, as was jquery&#39;s  (the extra data didn&#39;t get copied properly).  We probably also needed the extra data to come along for the ride in .  In the end we settled on using  during the editing process, and then when we POST it all, we remove  and do a regex search-and-destroy .\n\nAt first the guy writing most of this was the validation-nazi on this issue and tried everything to avoid our custom attribute, but in the end acquiesced when nothing else seemed to work for ALL our requirements.  It helped when he realized that the custom attribute would never appear in an email We did consider encoding our extra data in , but decided that would be the greater of two evils.\n\nPersonally, I prefer to have things clean and passing validators etc., but as a company employee I have to remember that my primary responsibility is advancing the company&#39;s cause (making as much money as quickly as possible), not that of my egotistical desire for technical purity.  Tools should work for us; not us for them.\n",
            "excerpt": "We wanted drag-<span class=\"highlight\">and</span>-drop, so putting it purely in the DOM was out, as was jquery&#39;s .data() (the extra data didn&#39;t get copied properly). &hellip; In the end we settled on using &lt;td width=&quot;1234&quot; rs-width=&quot;@INSWIDTH_42@&quot;&gt; during the editing process, <span class=\"highlight\">and</span> then when we POST it all, we remove width <span class=\"highlight\">and</span> do a <span class=\"highlight\">regex</span> search-<span class=\"highlight\">and</span>-destroy s/rs-width=/width=/ &hellip; ",
            "title": "Custom attributes - Yea or nay?"
        },
        {
            "tags": [
                "regex",
                "perl",
                "security"
            ],
            "question_score": 12,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 5,
            "is_answered": true,
            "question_id": 242118,
            "item_type": "question",
            "score": 12,
            "last_activity_date": 1273651677,
            "creation_date": 1225163047,
            "body": "Assuming a Perl script that allows users to specify several text filter expressions in a config file, is there a safe way to let them enter regular expressions as well, without the possibility of unintended side effects or code execution? Without actually parsing the regexes and checking them for problematic constructs, that is. There won&#39;t be any substitution, only matching.\n\nAs an aside, is there a way to test if the specified regex is valid before actually using it? I&#39;d like to issue warnings if something like  was entered.\n\nThanks, Z.\n\n\nEDIT:\nThanks for the very interesting answers. I&#39;ve since found out that the following dangerous constructs will only be evaluated in regexes if the  pragma is used:\n\n\n\nThe default is ; so unless I&#39;m missing something, it should be safe to read regular expressions from a file, with the only check being the eval/catch posted by Axeman. At least I haven&#39;t been able to hide anything evil in them in my tests.\n\nThanks again. Z.\n",
            "excerpt": "Without actually parsing the regexes <span class=\"highlight\">and</span> checking them for problematic constructs, that is. There won&#39;t be any substitution, only matching. &hellip; At least I haven&#39;t been able to hide anything <span class=\"highlight\">evil</span> in them in my tests.\n\nThanks again. Z. &hellip; ",
            "title": "Is it safe to read regular expressions from a file?"
        },
        {
            "tags": [
                "java"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 2685040,
            "is_answered": false,
            "question_id": 2684517,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1271870062,
            "creation_date": 1271870062,
            "body": "Asides from the regex suggestion (which is a good one), it would seem to make more sense to deal with arrays of characters rather than single-char Strings.\n\nIn particular, the  call (shudder) could/should be replaced by .  This lets you iterate over each individual character, which more clearly indicates your intent, is less prone to bugs as you know you&#39;re treating each character at once, and is more efficient*.  Likewise your valid character sets should also be characters.\n\nYour logic is pretty strangely expressed; you&#39;re not even referencing the specialChars set at all, and the looping logic once you&#39;ve found a match seems odd.  I think this is your bug; the matching seems to be the wrong way round in that if the character matches the first valid char, you set flag to  and continue round the current loop; so it will definitely not match the next valid char and hence you break out of the loop with a  flag.  Always.\n\nI would have thought something like this would be more intuitive:\n\n\n\nThis doesn&#39;t take sequences into account (e.g. the strings &quot;--------**  &quot; and &quot;1&quot; would be valid because all individual characters are valid) but then neither does your original code.  A regex is better because it lets you specify the pattern, I supply the above snippet as an example of a clearer way of iterating through the characters.\n\n*Yes, premature optimization is the root of all evil, but when better, cleaner code also happens to be faster that&#39;s an extra win for free.\n",
            "excerpt": "Asides from the <span class=\"highlight\">regex</span> suggestion (which is a good one), it would seem to make more sense to deal with arrays of characters rather than single-char Strings. &hellip; *Yes, premature optimization is the root of all <span class=\"highlight\">evil</span>, but when better, cleaner code also happens to be faster that&#39;s an extra win for free. &hellip; ",
            "title": "How to validate phone number(US format) in Java?"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 2444576,
            "is_answered": false,
            "question_id": 2444565,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1269332442,
            "creation_date": 1268616360,
            "body": "You could use some regex parsing to check that there&#39;s nothing evil in the string, then just .\n\nWith just simple arithmetic operations, a safe regex would be:\n\n\n\nNote this won&#39;t validate that the expression is balanced in terms of operands and operators (i.e. it would okay &quot;+2*&quot;), but it will stop any weird code injections.\n",
            "excerpt": "You could use some <span class=\"highlight\">regex</span> parsing to check that there&#39;s nothing <span class=\"highlight\">evil</span> in the string, then just eval. &hellip; With just simple arithmetic operations, a safe <span class=\"highlight\">regex</span> would be:\n\ns.match(/^[-*/+0-9]+$/)\n\n\nNote this won&#39;t validate that the expression is balanced in terms of operands <span class=\"highlight\">and</span> operators (i.e. it would okay &hellip; ",
            "title": "Can I get an arithmetic expression as a string computed with the JavaScript Math object?"
        },
        {
            "tags": [
                "c#",
                "asterisk",
                "telephony"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 2380275,
            "is_answered": false,
            "question_id": 2375885,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1267715193,
            "creation_date": 1267715193,
            "body": "I do have an idea but you will probably not like the answer :)\n\nWe tried to do this and failed so we did something evil :)\n\nWhat we did were to write agi scripts and them call them using the Manager interface and then scrape the command line.\n\nStuff like core show channels concise etc, its ikky but it works.. we used regex to parse the string output and then grabbed the info from there, the only issue with doing stuff like that is that you have to watch every time you patch as the output from the command line tends to change patch to patch.\n\nIf you do discover a way doing this using the c# api and not using agi i&#39;d be very interested but we just couldn&#39;t do what we wanted with the api without resorting to agi scripts in the end.\n",
            "excerpt": "I do have an idea but you will probably not like the answer :)\n\nWe tried to do this <span class=\"highlight\">and</span> failed so we did something <span class=\"highlight\">evil</span> :)\n\nWhat we did were to write agi scripts <span class=\"highlight\">and</span> them call them using the Manager interface &hellip; Stuff like core show channels concise etc, its ikky but it works.. we used <span class=\"highlight\">regex</span> to parse the string output <span class=\"highlight\">and</span> then grabbed the info from there, the only issue with doing stuff like that is that you have &hellip; ",
            "title": "Detect incoming call with Asterisk and who the call is going to"
        },
        {
            "tags": [
                "php",
                "javascript"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 2146181,
            "is_answered": false,
            "question_id": 2145847,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1264589458,
            "creation_date": 1264589458,
            "body": "Bit of a mine-field as MS word counts are considered wrong and unreliable by profesionals who depend on word counts -- journalists, translators, and, lawers who are often involved in legal procedures where motions and submisions must be less than a specific number fo words.\n\nHaving said that this article-\nhttp://dotnetperls.com/word-count\n\ndescribes a pretty good regex algorithm implemented in C# -- but should be faily easy to transalate into php.\n\nI think his small inaccuracies are based on two factors -- MS Word misses out words not conatined in &quot;regular paragraphs&quot; so footnotes, text box and table wrapped words may or may not be counted. Also I think the EVIL smart quotes feature messing with hypens may affect the results. So it may be worth changing all the &#39;el-dash&#39; and &#39;em-dash&#39; characters back to the normal minus sign.    \n",
            "excerpt": "Having said that this article-\nhttp://dotnetperls.com/word-count\n\ndescribes a pretty good <span class=\"highlight\">regex</span> algorithm implemented in C# -- but should be faily easy to transalate into php. &hellip; Also I think the <span class=\"highlight\">EVIL</span> smart quotes feature messing with hypens may affect the results. So it may be worth changing all the &#39;el-dash&#39; <span class=\"highlight\">and</span> &#39;em-dash&#39; characters back to the normal minus sign. &hellip; ",
            "title": "Count words like Microsoft Word does"
        },
        {
            "tags": [
                "python",
                "python-exec"
            ],
            "question_score": 46,
            "is_accepted": false,
            "answer_id": 1933723,
            "is_answered": false,
            "question_id": 1933451,
            "item_type": "answer",
            "score": 17,
            "last_activity_date": 1261246830,
            "creation_date": 1261246830,
            "body": "When you need exec and eval, yeah, you really do need them.\n\nBut, the majority of the in-the-wild usage of these functions (and the similar constructs in other scripting languages) is totally inappropriate and could be replaced with other simpler constructs that are faster, more secure and have fewer bugs.\n\nYou can, with proper escaping and filtering, use exec and eval safely. But the kind of coder who goes straight for exec/eval to solve a problem (because they don&#39;t understand the other facilities the language makes available) isn&#39;t the kind of coder that&#39;s going to be able to get that processing right; it&#39;s going to be someone who doesn&#39;t understand string processing and just blindly concatenates substrings, resulting in fragile insecure code.\n\nIt&#39;s the Lure Of Strings. Throwing string segments around looks easy and fools na&#239;ve coders into thinking they understand what they&#39;re doing. But experience shows the results are almost always wrong in some corner (or not-so-corner) case, often with potential security implications. This is why we say eval is evil. This is why we say regex-for-HTML is evil. This is why we push SQL parameterisation. Yes, you can get all these things right with manual string processing... but unless you already understand why we say those things, chances are you won&#39;t.\n",
            "excerpt": "You can, with proper escaping <span class=\"highlight\">and</span> filtering, use exec <span class=\"highlight\">and</span> eval safely. &hellip; This is why we say eval is <span class=\"highlight\">evil</span>. This is why we say <span class=\"highlight\">regex</span>-for-HTML is <span class=\"highlight\">evil</span>. This is why we push SQL parameterisation. &hellip; ",
            "title": "Why should exec() and eval() be avoided?"
        },
        {
            "tags": [
                "c#",
                "string"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 1564322,
            "is_answered": false,
            "question_id": 1564296,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1255498139,
            "creation_date": 1255496739,
            "body": "Since you give an xml example, just use an xml parser:\n\n\n\n\n\nxml is not a simple text format, and  isn&#39;t really a very good fit; using an appropriate tool will protect you from a range of evils... for example, the following is identical as xml:\n\n\n\nIt also means that when the requirement changes, you have a simple tweak to make to the code, rather than trying to unpick a regex and put it back together again (which can be tricky if you are access a non-trivial node). Equally, xpath might be an option; so in your data the xpath:\n\n\n\nis all you need.\n\nIf you haven&#39;t got .NET 3.5:\n\n\n",
            "excerpt": "Since you give an xml example, just use an xml parser:\n\n\n\nstring s = (string) XElement.Parse(xml).Attribute(&quot;content&quot;);\n\n\nxml is not a simple text format, <span class=\"highlight\">and</span> <span class=\"highlight\">Regex</span> isn&#39;t really a very good fit; using &hellip; <span class=\"highlight\">and</span> put it back together again (which can be tricky if you are access a non-trivial node). &hellip; ",
            "title": "Using String methods instead of Regex"
        },
        {
            "tags": [
                "jquery",
                "events",
                "focus",
                "blur",
                "setting"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 1560340,
            "is_answered": false,
            "question_id": 1560251,
            "item_type": "answer",
            "score": 6,
            "last_activity_date": 1255441248,
            "creation_date": 1255441248,
            "body": "Using regular expressions in Javascript to prevent SQL injection is the mother of all (or at least most) evil.  DO NOT DO THIS!!!  Instead, use parameters in your server side code.  If you don&#39;t know how, ask us.  If you try to prevent SQL Injection the way you&#39;re doing it it will not work and you are liable to lose data, or worse.  All your enemy needs to do is disable Javascript (or craft his own HTTP request) and your filter will be useless.  In addition, I don&#39;t think it&#39;s possible to fully block SQL injection with a single regex.\n\n\n\nTo answer the question, try writing  or  in the handler.  However, it won&#39;t work perfectly; it is not possible to fully control focus like this in Javascript.\n",
            "excerpt": "Using regular expressions in Javascript to prevent SQL injection is the mother of all (or at least most) <span class=\"highlight\">evil</span>.  DO NOT DO THIS!!!  Instead, use parameters in your server side code. &hellip; All your enemy needs to do is disable Javascript (or craft his own HTTP request) <span class=\"highlight\">and</span> your filter will be useless. &hellip; ",
            "title": "Stopping the jQuery blur event within the blur function"
        },
        {
            "tags": [
                "linq-to-sql"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 1418013,
            "is_answered": false,
            "question_id": 1417961,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1252856135,
            "creation_date": 1252856135,
            "body": "This is probably a problem with your data architecture.  This is why we keep the data clean in the tables all of the time -- so you don&#39;t have to do evil things like this.\n\nYou have a couple of options here:\n\n\nClean up your actual data and add protections on the data layer to keep your phone numbers pure.\nCreate a view or computed column in your data which cleans up the phone number on the data layer, then map to that clean phone number and query off of that column instead.\nCall ToList() on a subset of your rows before running your regex-based query and then use Linq to Objects to run the regex against those rows.  This may be prohibitive if you can&#39;t narrow down your rows enough before using Linq to Objects.\n\n",
            "excerpt": "This is why we keep the data clean in the tables all of the time -- so you don&#39;t have to do <span class=\"highlight\">evil</span> things like this. &hellip; Call ToList() on a subset of your rows before running your <span class=\"highlight\">regex</span>-based query <span class=\"highlight\">and</span> then use Linq to Objects to run the <span class=\"highlight\">regex</span> against those rows. &hellip; ",
            "title": "LINQ Dynamic WHERE but Clean Special Chars first"
        },
        {
            "tags": [
                "java",
                "regex",
                "string",
                "rawstring"
            ],
            "question_score": 92,
            "is_accepted": false,
            "answer_id": 1257633,
            "is_answered": false,
            "question_id": 1256667,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1249943980,
            "creation_date": 1249943980,
            "body": "I personally consider regex strings data and not code, so I don&#39;t like them in my code--but I realize that&#39;s impractical and unpopular (Yes, I realize it, you don&#39;t have to yell at me).\n\nGiven that there is no native way to do this, I can come up with two possibilities (well, three but the third is, umm, unnatural).\n\nSo my personal preference would be to just parse a file into strings.  You could name each entry in the file and load them all into a hash table for easy access from your code.\n\nSecond choice, create a file that will be pre-processed into a java interface; it could escape the regex as it does so.  Personally I hate code generation, but if the java file is 100% never human edited, it&#39;s not too bad (the real evil is generated files that you are expected to edit!)\n\nThird (tricky and probably a bad idea): You might be able to create a custom doclet that will extract strings from your comments into a text file or a header file at compile time, then use one of the other two methods above.  This keeps your strings in the same file in which they are being used.  This could be really hard to do correctly, and the penalties of failure are extreme, so I wouldn&#39;t even consider it unless I had an overwhelming need and some pretty impressive talent.\n\nI only suggest this because comments are free-form and things within a &quot;pre&quot; tag are pretty safe from formatters and other system uglies.  The doclet could extract this before printing the javadocs, and could even add some of the generated javadocs indicating your use of regex strings.\n\nBefore downvoting and telling me this is a stupid idea--I KNOW, I just thought I&#39;d suggest it because it&#39;s interesting, but my preference as I stated above is a simple text file...\n",
            "excerpt": "I personally consider <span class=\"highlight\">regex</span> strings data <span class=\"highlight\">and</span> not code, so I don&#39;t like them in my code--but I realize that&#39;s impractical <span class=\"highlight\">and</span> unpopular (Yes, I realize it, you don&#39;t have to yell at me). &hellip; The doclet could extract this before printing the javadocs, <span class=\"highlight\">and</span> could even add some of the generated javadocs indicating your use of <span class=\"highlight\">regex</span> strings. &hellip; ",
            "title": "Raw Strings in Java - for regex in particular. Multiline strings"
        },
        {
            "tags": [
                "database",
                "linq-to-sql",
                "validation"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 1093668,
            "is_answered": false,
            "question_id": 1093595,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1246987755,
            "creation_date": 1246987755,
            "body": "IMHO, validation is best done at multiple levels. I do not see a problem with performing a different type of validation in the UI layer, Business logic layer and lastly the Database itself.\n\nIn my mind, the ideal scenario would be one where the UI layer validates user submitted data for possible malicious input, illegal values, Regex pattern matches and required fields. The second layer would validate the type of data and whether it meshes together to form concrete updatable objects that can be propagated to the data store. The database would impose basic constraints such as the one you mentioned for all operations.\n\nAlso, the level of validation required would decrease with each level... starting from rigorous in the UI layer to basic in the database layer.\n\nI believe in one rule - &quot;All input is evil until proven otherwise.&quot; \n",
            "excerpt": "In my mind, the ideal scenario would be one where the UI layer validates user submitted data for possible malicious input, illegal values, <span class=\"highlight\">Regex</span> pattern matches <span class=\"highlight\">and</span> required fields. &hellip; I believe in one rule - &quot;All input is <span class=\"highlight\">evil</span> until proven otherwise.&quot; &hellip; ",
            "title": "Validation: do it in the class, or in the database?"
        },
        {
            "tags": [
                "parsing",
                "legacy-code"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 473076,
            "is_answered": false,
            "question_id": 473027,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1232727850,
            "creation_date": 1232720962,
            "body": "I would select from information_schema.tables and save the results to file to build a table list and then use a bat file or command line regex tool to use the table list as a source for comparisons against the files in the source code directory. You could output what files had a hit, and what table names were hit (what line the hit was on if you&#39;re interested). I&#39;m not a grep whiz, but I think that would be the right sort of tool to use. \n\nEDIT\nDepending on how the data access was handled, you might want to expand the search list to include stored procs from information_schema.routines\n\nEdit 2 Approach using finstr, a cursor, and maybe the dark side\n\nPlease note that while the below should work, if pointed at the wrong directory, it could cause havoc. Also, it will only work if the source code is accessible from the server and xp_cmdshell is enabled. Maybe the whole idea is evil, I don&#39;t know.\n\n\n",
            "excerpt": "I would select from information_schema.tables <span class=\"highlight\">and</span> save the results to file to build a table list <span class=\"highlight\">and</span> then use a bat file or command line <span class=\"highlight\">regex</span> tool to use the table list as a source for comparisons against &hellip; Also, it will only work if the source code is accessible from the server <span class=\"highlight\">and</span> xp_cmdshell is enabled. Maybe the whole idea is <span class=\"highlight\">evil</span>, I don&#39;t know. &hellip; ",
            "title": "Search a codebase for references to table names"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 76947953,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1692647902,
            "creation_date": 1692643259,
            "body": "Starting with Java 9, the regex engine began supporting variable-length lookbehind. I guess that&#39;s great and all if you want it, but that&#39;s a really good way to make a regex that is vulnerable to ReDOS attacks, or just being accidentally ReDOSsed by ordinary user input.\nFor reasons that are beyond the scope of this question, I am unable to police the regexes that my application is using to the extent that I&#39;d like. We&#39;ve had problems with regexes that wouldn&#39;t even have compiled in ancient versions of Java, but instead are causing application hangs (when a clean failure would have been much preferred).\nI&#39;m guessing the answer is &quot;no&quot;, but is there any way to get like legacy behavior on the Java regex engine, or to otherwise enable stricter checking, so that pathological regexes like this won&#39;t even be compiled by the engine? It would be much better to just fail these regexes, than for it to work most of the time but then if you give it just the right input it hangs.\nEdit to add: So there&#39;s stuff like this open source project that would maybe be something to look at if I decide I need to analyze any new regexes to make sure they aren&#39;t Evil. It would be nice if there was just a &quot;strict&quot; setting on the regex engine or something tho...\n",
            "excerpt": "Starting with Java 9, the <span class=\"highlight\">regex</span> engine began supporting variable-length lookbehind. &hellip; Edit to add: So there&#39;s stuff like this open source project that would maybe be something to look at if I decide I need to analyze any new regexes to make sure they aren&#39;t <span class=\"highlight\">Evil</span>. &hellip; ",
            "title": "Can Java&#39;s regex engine be made to forbid variable length lookbehind?"
        },
        {
            "tags": [
                "perl",
                "for-loop",
                "numbers",
                "primes"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 33919970,
            "is_answered": false,
            "question_id": 27134252,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1691198495,
            "creation_date": 1448464224,
            "body": "One of Abigail&#39;s .sigs has a regex (!) that determines whether a number is prime:\n\nThat takes about 15 seconds on my system. Of course, as evil-otto points out, there are faster solutions.\nThere is a very good explanation of how the regex works on Neil Kandalgaonkar&#39;s excellent blog1. The workings of Abigail&#39;s marvelous brain are left unexplained.\n\n1). See: Abigail&#39;s regex to test for prime numbers.\nLink uses WayBack which is required. Original reference:\nhttp://neilk.net/blog/2000/06/01/abigails-regex-to-test-for-prime-numbers/\n",
            "excerpt": "Of course, as <span class=\"highlight\">evil</span>-otto points out, there are faster solutions.\nThere is a very good explanation of how the <span class=\"highlight\">regex</span> works on Neil Kandalgaonkar&#39;s excellent blog1. &hellip; See: Abigail&#39;s <span class=\"highlight\">regex</span> to test for prime numbers.\nLink uses WayBack which is required. Original reference:\nhttp://neilk.net/blog/2000/06/01/abigails-<span class=\"highlight\">regex</span>-to-test-for-prime-numbers/ &hellip; ",
            "title": "Prime numbers in perl"
        },
        {
            "tags": [
                "linux",
                "bash",
                "posix"
            ],
            "question_score": 840,
            "is_accepted": false,
            "answer_id": 30515012,
            "is_answered": false,
            "question_id": 8987037,
            "item_type": "answer",
            "score": 262,
            "last_activity_date": 1684502850,
            "creation_date": 1432839590,
            "body": "Kill all processes matching the string &quot;myProcessName&quot;:\n\nSource: http://www.commandlinefu.com/commands/view/1138/ps-ef-grep-process-grep-v-grep-awk-print-2-xargs-kill-9\nWhy &quot;ps pipe kill&quot; from terminal is evil:\nThe Piping of integers you scraped from  to  is bad, and you should feel bad, doubly so if you&#39;re root or a user with elevated privileges, because it doesn&#39;t give your process a chance to cleanly shut down socket connections, clean up temp files, inform its children that it is going away or reset its terminal characteristics.\nInstead send 15, and wait a second or two, and if that doesn&#39;t\nwork, send 2, and if that doesn&#39;t work, send 1.  If that doesn&#39;t,\nREMOVE THE BINARY because the program is badly behaved.\nAs a general principle we don&#39;t use Unix Railgun to trim the hedges.  https://porkmail.org/era/unix/award.html#kill\nExplanation of above command:\n produces a list of process id&#39;s on the computer visible to this user.  The pipe grep filters that down for rows containing that string.  The  says don&#39;t match on the process itself doing the grepping.  The pipe awk print says split the rows on default delimiter whitespace and filter to the second column which is our process id.  The pipe xargs spins up a new process to send all those pid&#39;s to , ending them all.\nWhy  is bad, dangerous, ugly and hackish:\n\nThere&#39;s a small possibility that you will accidentally end the operating system or cause undefined behavior in an unrelated process, leading to whole system instability because  lists thousands of processes, and you can&#39;t be sure some 3rd party process shares your process name, or that in the time between read and execute kill -9, the processid had changed to something else, and now you&#39;ve ended some random necessary process unrelated to yours.\n\nIf the code being force-ended is doing any database ops or secure transactions with low probability race conditions, some fraction of a percent of the time, atomicity of that transaction will be wrecked, producing undefined behavior.  kill -9 takes no prisoners.  If your code is sensitive to this, try replacing the  part with a transmitted flag that requests a graceful shutdown, and only if that request is denied, last-resort to \n\n\nBut, if you understand all the risks and control for them with unique names, and you&#39;re ok with a few dropped transactions or occasional corruption, then 99.9% of the time yer gonna be fine. If there&#39;s a problem, reboot the computer, make sure there aren&#39;t any process collisions.  It&#39;s because of code like this that makes the tech support script: &quot;Have you tried restarting your computer&quot; a level 5 meme.  &quot;A Rogue Robot scraped  to find integers and sent those to , so reboot the computer to clear the problem.\nWhy not just use  which is easier?\nThe above gives me manual control because , , ,  and  are multi-platform standard.  It gives full control to which regex engine to use, which part of the process name to match, handling case sensitivity and exception management.\n\nDoes the same thing for me, but see  has different behaviors, flags and regex engines between variants of Linux, Mac, Zune-Bash and my opensource router.  So yes, put your 35000 Watt Unix-Railgun into the capable hands of pkill to trim the hedges.  See what happens.\nGrepping once\nYou can substitute the  with square brackets around the first letter of the command to kill, which does the same thing and prevents grep from grepping itself, for example:\n\nWhy that works:\nhttps://askubuntu.com/questions/153419/how-does-this-tricky-bracket-expression-in-grep-work\n",
            "excerpt": "grep -v grep | awk &#39;{print $2}&#39; | xargs -r kill -9\n\nSource: http://www.commandlinefu.com/commands/view/1138/ps-ef-grep-process-grep-v-grep-awk-print-2-xargs-kill-9\nWhy &quot;ps pipe kill&quot; from terminal is <span class=\"highlight\">evil</span> &hellip; , but see man pkill has different behaviors, flags and <span class=\"highlight\">regex</span> engines between variants of Linux, Mac, Zune-Bash and my opensource router. &hellip; ",
            "title": "How to kill all processes with a given partial name?"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 16,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 288800,
            "item_type": "question",
            "score": 16,
            "last_activity_date": 1682102164,
            "creation_date": 1226620185,
            "body": "I have this naive regex &quot;&lt;([\\s]|[^&lt;])+?&gt;&quot; (excluding the quotation marks). It seems so\nstraightforward but it is indeed evil when it works against the below HTML text. It sends the Java regular expression engine to an infinite loop.\nI have another regex (&quot;&lt;.+?&gt;&quot;), which does somewhat the same thing, but it doesn&#39;t kill anything. Do you know why this happens?\n\nit even keeps looping with an online Java regex tool (such as www.fileformat.info/tool/regex.htm) or a utility like RegexBuddy.\n",
            "excerpt": "I have this naive <span class=\"highlight\">regex</span> &quot;&lt;([\\s]|[^&lt;])+?&gt;&quot; (excluding the quotation marks). It seems so\nstraightforward but it is indeed <span class=\"highlight\">evil</span> when it works against the below HTML text. &hellip; I have another <span class=\"highlight\">regex</span> (&quot;&lt;.+?&gt;&quot;), which does somewhat the same thing, but it doesn&#39;t kill anything. Do you know why this happens? &hellip; ",
            "title": "Why does this regular expression kill the Java regex engine?"
        },
        {
            "tags": [
                "html",
                "email",
                "jvm",
                "jsoup",
                "conditional-comments"
            ],
            "question_score": 4,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 54694473,
            "item_type": "question",
            "score": 4,
            "last_activity_date": 1679529462,
            "creation_date": 1550160068,
            "body": "I know how terribly wrong it is to (attempt to) parse HTML with Regex, which is why I&#39;m trying really, really hard to avoid it.\n\nI have an app that generates HTML emails. We&#39;re using a big fancy WYSIWYG drop in email editor that takes care of generating responsive emails and also generates the abysmal markup for clients like MS Outlook. It does that last bit using conditional comments, which look something like the following. Note that the  has an  attribute, and wraps the  tag that non-mso clients will see.\n\n\n\nOf course, this is just one of dozens (possibly hundreds?) of possible formattings that we need to work with.\n\nPrior to the introduction of this editor, we asked our customers to generate their own HTML emails with a more rudimentary WYSIWYG HMTL editor; but it was incumbent on them to make responsive templates and test their content in various clients. From their perspective, this new editor is a huge win.\n\nAs we&#39;re sending emails, it&#39;s important to track the link clicks via a tracking link that redirects through to the originally-intended link.\n\nTo date, we&#39;ve used jSoup to parse the email content, looking for any anchor tags and replace their href attribute contents. Because regex html parsing is evil, right?\n\nConditional comments have thrown a wrench in those gears.\n\nBecause they are comments, jSoup ignores them, and clicks from MS Outlook and other clients that handle the  markup haven&#39;t been transformed to go through our link tracker, so the clicks don&#39;t get tracked. This is a problem for us.\n\n\n\nFirst idea: replace the conditional comments with a custom tag\n\nAt first I was hopeful to pre-process the message body before letting jSoup have it. I would replace  with  and  with . This was simple enough to do, even for complex forms of the conditions inside the comments. I used a regex to make some simple replacements:\n\n\n became \n became  \netc\n\n\nNotice that I url-encoded the original comment in its entirety. url-encoding it made sure that I could easily use regex to find my marker comments and transform them back (so that I didn&#39;t have to worry about  inside the &quot;orig&quot; attribute content...\n\nThis started to break down when I realized there were multiple possible ways the comments could be closed. I spent a little bit of time working on a similar approach for the closing tags.\n\n\n became \nsame approach for  and \n\n\nI don&#39;t know if you can have attributes on a closing tag. I never tested it because I had another realization before I got to that point. The realization was that using  wasn&#39;t going to produce desirable output from jSoup because the resulting INPUT would often look like:\n\n\n\nThis is not tidy HTML and jSoup will try to correct it, changing the order of tags to make something that it thinks is more correct. When I realized that, I stopped what I was doing and started thinking about the problem again.\n\n\n\nSecond idea: the same thing, but with comments\n\nIf the (new) problem was that jSoup didn&#39;t like my tag nesting, what if I could expose the HTML from inside the conditional comments as if it weren&#39;t commented out, but keep some markers in as comments that I can later transform back into comments? The goal was to aim at making this:\n\n\n\nThis should parse as fairly tidy HTML, right? So I made the code modifications and gave it a shot.\n\nSadly, the documents that we&#39;re working with are far more complex than the simple example I started from above. Here&#39;s the first few lines of an actual sample document:\n\n\n\nAfter the comment conversion, we&#39;ve effectively dropped an  block into the  block, of which jSoup is decidedly not a fan. This is what I get back for the above input, after converting the conditional comments into my plain marked comments, parsing with jSoup, and then converting my markers back to their conditional comments:\n\n\n\nThere are some big problems here. The  block gets basically immediately closed. The  tag moves up to before the  block, and everything that came after it moved down into the body. This isn&#39;t going to work.\n\n\n\nNow what?\n\nI feel like we&#39;re basically out of options. \n\n\nDo nothing and just don&#39;t count the clicks from MS Outlook/etc clients. In some cases we might be able to detect a click anyway via a downstream conversion on that email. (Even if we don&#39;t have record of you clicking the link, if you made a payment then we know you got there...)\nWe could let our mail provider do the link tracking for us (experimentation required; not positive they would track the  links either). Historically we started this system with a provider that didn&#39;t offer link tracking so we had to roll our own. Current provider offers it, but we&#39;ve got years of existing code and processes that would have to be updated to support this change. We&#39;re keeping it in our back pocket if we can&#39;t figure something else out, but the prospect of changing ships mid-stream is ... not appealing.\nOr lastly... maybe... regex? (/me ducks) We could let jSoup do its thing for the normal HTML, and then use regex to replace any links that remain. This becomes a game of whack-a-mole with current and future markup. What might we run into aside from a  in the future? &#175;\\_(ツ)_/&#175; And we won&#39;t know what we&#39;re missing without regular manual reviews.\n\n\nUnless there&#39;s another option that we haven&#39;t explored yet. So... are we stuck with nothing/regex?\n\nWe&#39;re on the JVM so anything Java is within reach, I guess.\n",
            "excerpt": "Because <span class=\"highlight\">regex</span> html parsing is <span class=\"highlight\">evil</span>, right?\n\nConditional comments have thrown a wrench in those gears. &hellip; Or lastly... maybe... <span class=\"highlight\">regex</span>? (/me ducks) We could let jSoup do its thing for the normal HTML, and then use <span class=\"highlight\">regex</span> to replace any links that remain. &hellip; ",
            "title": "Parsing HTML Email content inside of conditional comments (trying to avoid regex!)"
        },
        {
            "tags": [
                "python",
                "regex",
                "replace"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 75746343,
            "is_answered": false,
            "question_id": 75746210,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1678891654,
            "creation_date": 1678891654,
            "body": "Disclaimer: It is generally evil and a menace to use regex to clean up XML content, which task should be delegated to a proper parser.  Given that you have no nested tags, you may try using the following replacement logic:\n\nThis prints:\n\nThe regex pattern used here matches:\n\n An XML tag\n OR\n any intermediate content, up to, but not including,\nthe next XML tag or the end of the string\n\nWe do a lambda replacement, which selectively strips spaces only from the intermediate content, but not from the tags themselves.\n",
            "excerpt": "Disclaimer: It is generally <span class=\"highlight\">evil</span> and a menace to use <span class=\"highlight\">regex</span> to clean up XML content, which task should be delegated to a proper parser. &hellip; PDCSCO&gt;210201&lt;/PDCSCO&gt;&lt;CODMAG&gt;01&lt;/CODMAG&gt;&lt;CAUMAG&gt;202&lt;/CAUMAG&gt;&lt;CODPAG&gt;B001&lt;/CODPAG&gt;&lt;CODVET&gt;025&lt;/CODVET&gt;&lt;CODPOR&gt;001&lt;/CODPOR&gt;&lt;CODTRA&gt;001&lt;/CODTRA&gt;&lt;ASPETTO&gt;Pallet&lt;/ASPETTO&gt;&lt;PESO&gt;150&lt;/PESO&gt;&lt;COLLI&gt;1&lt;/COLLI&gt;\n\nThe <span class=\"highlight\">regex</span> &hellip; ",
            "title": "Python: Using sub() tu replace string matched by regex"
        },
        {
            "tags": [
                "perl"
            ],
            "question_score": 13,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 4,
            "is_answered": true,
            "question_id": 167238,
            "item_type": "question",
            "score": 13,
            "last_activity_date": 1677726740,
            "creation_date": 1223045253,
            "body": "The question is not how to tell in a oneliner. If you&#39;re writing the code in a one-liner, you know you are. But how does a module, included by  know that it all started from a oneliner. \n\nThis is mine. It&#39;s non-portable though and relies on UNIX standard commands (although, it can be made portable more or less.)\n\n\n\nAnd if you have a snazzier regex, feel free to improve upon mine. \n\n\n\nA couple of people have asked why I would want to do this. brian correctly guessed that I wanted to change export behavior based on whether it&#39;s a script, which we can assume has had some amount of design, or whether it&#39;s a oneliner where the user is trying to do as much as possible in a single command line. \n\nThis sounds bad, because there&#39;s this credo that exporters should respect other packages--sometimes known as &quot; is EVIL!&quot; But it seems to me that it&#39;s a foolish consistency when applied to oneliners. After all perl itself goes out of it&#39;s way to violate the structure of its language and give you easy loops if you ask for them on the command line, I simply want to extend that idea for my operational/business domain. I even want to apply source filters (gasp!) if it helps. \n\nBut this question also suggests that I might want to be a good citizen of Perl as well, because I only to break the community guidelines in certain cases. It is quite awesome to be able to create major business-level actions just by changing the command line in a batch scheduler rather than writing a whole new module. The test cycle is much compressed. \n",
            "excerpt": "\\s+-[^\\P{IsLower}e]*e[^\\P{IsLower}e]*\\s+/m\n    ;\n\n\nAnd if you have a snazzier <span class=\"highlight\">regex</span>, feel free to improve upon mine. &hellip; This sounds bad, because there&#39;s this credo that exporters should respect other packages--sometimes known as &quot;@EXPORT is <span class=\"highlight\">EVIL</span>!&quot; &hellip; ",
            "title": "What&#39;s the best way to tell if your perl&#39;s running on -e?"
        },
        {
            "tags": [
                "python",
                "web-scraping",
                "cloudflare"
            ],
            "question_score": 16,
            "is_accepted": false,
            "answer_id": 75312785,
            "is_answered": false,
            "question_id": 65604551,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1675266696,
            "creation_date": 1675266696,
            "body": "I can suggest such workflow to &quot;try&quot; to avoid Cloudflare WAF/bot mitigation:\n\ndon&#39;t cycle user agents, proxies or weird tunnels to surf\ndon&#39;t use fixed ip addresses, better leased lines like xDSL, home links and 4G/LTE\ntry to appear as mobile instead of a desktop/tablet\ntry to reproduce pointer movements like never before AKA record your mouse moves and migrate them 1:1 while scraping (yes u need JS enabled and some headless browser able to make up as &quot;common&quot; one)\ndon&#39;t cycle against different Cloudflare protected entities otherwise the attacker ip will be greylisted in a minute (AKA build your own targets blacklist, never touch such entities or you will go in the CF blacklist flawlessy)\ntry to reproduce a real life navigation in all aspects, including errors, waitings and more\ncheck your used ip after any scrape against popular blacklists otherwise bad errors will shortly appears (crowdsec is a good starting point)\nthe usual scrape is a googlebot scrape, a single regex WAF rule on CLoudflare will block 99,99% of the tries then.. avoid to fake as google and try to be LESS evil instead (ex: asking webmasters for APIs or data export if any).\n\nSource: I use Cloudflare with hundreds of domains and thousands of records (Enterprise) from the beginning of the company.\nThat way you will be closer to the point (and you will help them increasing  the overall security).\n",
            "excerpt": "and more\ncheck your used ip after any scrape against popular blacklists otherwise bad errors will shortly appears (crowdsec is a good starting point)\nthe usual scrape is a googlebot scrape, a single <span class=\"highlight\">regex</span> &hellip; WAF rule on CLoudflare will block 99,99% of the tries then.. avoid to fake as google and try to be LESS <span class=\"highlight\">evil</span> instead (ex: asking webmasters for APIs or data export if any). &hellip; ",
            "title": "Can&#39;t bypass cloudflare with python cloudscraper"
        },
        {
            "tags": [
                "php",
                "xml"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 74974224,
            "is_answered": false,
            "question_id": 74971941,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1672583947,
            "creation_date": 1672570651,
            "body": " is a commonly cited expression - a  to parse XML is not, in my opinion, the  The task of presenting the contents of an XML file in table form can best be accomplished with XSL Transformations\nGiven the original XML, saved as  a simple XSL stylesheet can be used to generate the entire HTML Table with the content drawn directly from the XML.\ncatalog.xsl\n\nTo use the XSL within PHP:\n\nThis yields:\n\nTo display the  and the content - again using XSLT the  file needs to be modified slightly. Within the  loop you also want to add the tagName like this perhaps:\n\nThis modification yields:\n\n\nTo process the XML with DOMDocument only and store the tag&amp;value as a string and the value also as string you could do like this:\n\nWhich yields output like this:\n\n",
            "excerpt": "&quot;The Right tool for the right job&quot; is a commonly cited expression - a <span class=\"highlight\">Regex</span> to parse XML is not, in my opinion, the &quot;Right Tool!&quot; &hellip; [7] =&gt; 5.95\n            [8] =&gt; &lt;publish_date&gt;2000-12-16&lt;/publish_date&gt;\n            [9] =&gt; 2000-12-16\n            [10] =&gt; &lt;description&gt;A former architect battles corporate zombies, \n      an <span class=\"highlight\">evil</span> &hellip; ",
            "title": "How to take and display the content and tags of the xml file?"
        },
        {
            "tags": [
                "html",
                "nginx"
            ],
            "question_score": 44,
            "is_accepted": true,
            "answer_id": 38238001,
            "is_answered": false,
            "question_id": 38228393,
            "item_type": "answer",
            "score": 150,
            "last_activity_date": 1667677988,
            "creation_date": 1467868828,
            "body": "The &quot;Holy Grail&quot; Solution for Removing &quot;.html&quot; in NGINX:\nUPDATED ANSWER: This question piqued my curiosity, and I went on another, more in-depth search for a &quot;holy grail&quot; solution for  redirects in NGINX. Here is the link to the answer I found, since I didn&#39;t come up with it myself: https://stackoverflow.com/a/32966347/4175718\nHowever, I&#39;ll give an example and explain how it works. Here is the code:\n\nWhat&#39;s happening here is a pretty ingenious use of the  directive. NGINX runs a regex on the  portion of incoming requests. The regex checks if the URI has an .html extension and then stores the extension-less portion of the URI in the built-in variable .\nFrom the docs, since it took me a while to figure out where the  came from:\n\nRegular expressions can contain captures that are made available for later reuse in the $1..$9 variables.\n\nThe regex both checks for the existence of unwanted .html requests and effectively sanitizes the URI so that it does not include the extension. Then, using a simple  statement, the request is redirected to the sanitized URI that is now stored in .\nThe best part about this, as original author cnst explains, is that\n\nDue to the fact that $request_uri is always constant per request, and is not affected by other rewrites, it won&#39;t, in fact, form any infinite loops.\n\nUnlike the rewrites, which operate on any  request (including the invisible internal redirect to ), this solution only operates on external URIs that are visible to the user.\nWhat does &quot;try_files&quot; do?\nYou will still need the  directive, as otherwise NGINX will have no idea what to do with the newly sanitized extension-less URIs. The  directive shown above will first try the new URL by itself, then try it with the &quot;.html&quot; extension, then try it as a directory name.\nThe NGINX docs also explain how the default  directive works. The default  directive is ordered differently than the example above so the explanation below does not perfectly line up:\n\nNGINX will first append  to the end of the URI and try to serve it. If it finds an appropriate  file, it will return that file and will maintain the extension-less URI. If it cannot find an appropriate  file, it will try the URI without any extension, then the URI as a directory, and then finally return a 404 error.\n\nUPDATE: What does the regex do?\nThe above answer touches on the use of regular expressions, but here is a more specific explanation for those who are still curious. The following regular expression (regex) is used:\n\nThis breaks down as:\n: indicates beginning of line.\n: match the character &quot;/&quot; literally. Forward slashes do NOT need to be escaped in NGINX.\n: capturing group: match any character an unlimited number of times\n: match the character &quot;.&quot; literally. This must be escaped with a backslash.\n: match the string &quot;html&quot; literally.\n: match a literal &quot;?&quot; or the end of the string. This is done to avoid mishandling file names with something after &quot;.html&quot;.\nThe capturing group  is what contains the non-&quot;.html&quot; portion of the URL. This can later be referenced with the variable . NGINX is then configured to re-try the request () and the  directive internally re-appends the &quot;.html&quot; extension so the file can be located.\nUPDATE: Retaining the query string\nTo retain query strings and arguments passed to a  page, the  statement can be changed to:\n\nThis should allow requests such as  to redirect to  instead of just .\n\nNote that this is considered safe usage of the `if` directive.\nFrom the NGINX page If Is Evil:\n\nThe only 100% safe things which may be done inside if in a location context are:\nreturn ...;\nrewrite ... last;\n\n\nAlso, note that you may swap out the &#39;302&#39; redirect for a &#39;301&#39;.\nA  redirect is permanent, and is cached by web browsers and search engines. If your goal is to permanently remove the  extension from pages that are already indexed by a search engine, you will want to use a  redirect. However, if you are testing on a live site, it is best practice to start with a  and only move to a  when you are absolutely confident your configuration is working correctly.\n",
            "excerpt": "NGINX runs a <span class=\"highlight\">regex</span> on the $request_uri portion of incoming requests. &hellip; From the NGINX page If Is <span class=\"highlight\">Evil</span>:\n\nThe only 100% safe things which may be done inside if in a location context are:\nreturn ...;\nrewrite ... last;\n\n\nAlso, note that you may swap out the &#39;302&#39; redirect for &hellip; ",
            "title": "NGINX remove .html extension"
        },
        {
            "tags": [
                "c++",
                "visual-studio",
                "cmake"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 73698691,
            "is_answered": false,
            "question_id": 69564143,
            "item_type": "answer",
            "score": -1,
            "last_activity_date": 1666511775,
            "creation_date": 1663052354,
            "body": "Your first solution can be simplified by using  option of  instead of  option.\nThis will also get rid of the evil  command.\n\nSee CMake Regex Specification.\n\nAs for the  option, your solution is pretty good.\nWith the following minor modification, I can get the filtering behaviour as you desire, where files are filtered according to their folder name, and the ones at the root folder has no filter instead of being listed under &quot;Source Files&quot;.\n\n\nNote that it is sometimes necessary to run CMake command in a clean build environment for VS filters to take effect.\nI suspect that was the reason you had to apply a workaround to the  solution.\n",
            "excerpt": "This will also get rid of the <span class=\"highlight\">evil</span> GLOB command.\nsource_group(&quot;benchmark&quot; REGULAR_EXPRESSION &quot;benchmark/.+\\.(h|cpp)&quot;)\nsource_group(&quot;builder&quot; REGULAR_EXPRESSION &quot;builder/.+\\.(h|cpp)&quot;)\n... &hellip; See CMake <span class=\"highlight\">Regex</span> Specification.\n\nAs for the TREE option, your solution is pretty good. &hellip; ",
            "title": "How can I cleanly place files in the &quot;root&quot; filter in Visual Studio using CMake?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "string"
            ],
            "question_score": -2,
            "is_accepted": true,
            "answer_id": 73871703,
            "is_answered": false,
            "question_id": 73871509,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1664300209,
            "creation_date": 1664300209,
            "body": "The regex is pretty simple and can be almost identical to your string. Where you want to pick out some words use the match syntax  - the period is &quot;any character&quot;, and the  is &quot;one or more&quot;.\nUse  on the string with the expression to return an array of matches which you can then destructure into a number of variables (I&#39;ve called them   and  here).\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "The <span class=\"highlight\">regex</span> is pretty simple and can be almost identical to your string. Where you want to pick out some words use the match syntax (.+) - the period is &quot;any character&quot;, and the + is &quot;one or more&quot;. &hellip; thrown a (.+) in (.+)\\.$/;\nconst str = &#39;[Alert] Trump has thrown a tantrum in his <span class=\"highlight\">Evil</span> Lair.&#39; &hellip; ",
            "title": "Take key values from a string in Javascript"
        },
        {
            "tags": [
                "java",
                "regex",
                "string"
            ],
            "question_score": -3,
            "is_accepted": false,
            "answer_id": 73704934,
            "is_answered": false,
            "question_id": 73688734,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1663080094,
            "creation_date": 1663080094,
            "body": "The OWASP page describes evil regexes as those that contain\n\n\nGrouping with repetition\nInside the repeated group:\n\nRepetition\nAlternation with overlapping\n\n\n\n\nwhich is not always right. Their examples are good, but the rules are too generic and even good and safe patterns can be trigger the vulnerability\nYou can actually remove the first  to stop the warning from showing:\n\nThis way, only one  is used.\n",
            "excerpt": "The OWASP page describes <span class=\"highlight\">evil</span> regexes as those that contain\n\n\nGrouping with repetition\nInside the repeated group:\n\nRepetition\nAlternation with overlapping\n\n\n\n\nwhich is not always right. &hellip; ",
            "title": "Will these two regex give me the same desired output?"
        },
        {
            "tags": [
                "regex",
                "floating-point",
                "integer",
                "numbers"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 73137567,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1658925492,
            "creation_date": 1658923322,
            "body": "I have this regex to test if the user input is valid:\n\nThe main point is in the regex: . However sonarcloud is feeling it as a security hotspot saying:\nMake sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.\nI guess it&#39;s because of the double digit test, but I couldn&#39;t find a way to avoid it. Is it a security threat, or harmless?\n",
            "excerpt": "I have this <span class=\"highlight\">regex</span> to test if the user input is valid:\nvalue.length === 0 ||\nvalue === &#39;-&#39; ||\n(!isNaN(parseFloat(value)) &amp;&amp; /^-?\\d+\\.?\\d*$/.test(value))\n\nThe main point is in the <span class=\"highlight\">regex</span>: /^-?\\d+\\.? &hellip; However sonarcloud is feeling it as a security hotspot saying:\nMake sure the <span class=\"highlight\">regex</span> used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service. &hellip; ",
            "title": "Match negative/positive float/int regex - is it evil?"
        },
        {
            "tags": [
                "regex",
                "scala",
                "unapply"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 72964888,
            "is_answered": false,
            "question_id": 72961975,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1657708679,
            "creation_date": 1657708679,
            "body": "I am not sure why you would expect it to not compile.  is valid syntax, and matches the extractor definition.\nFor example, this returns true:\n\nI guess, what you are really asking is why extractor does not throw a run-time error if number of parameters does not match the number of capturing groups in the regex ...\nThe answer to that is &quot;that&#39;s just how it is implemented&quot;.\nIt is not really obvious at all that throwing in this case would be a better solution than simply failing the match. Runtime errors are generally considered evil in scala (and in functional programming in general), and are only used in cases, when there is no other viable alternative.\n",
            "excerpt": "For example, this returns true:\nval <span class=\"highlight\">regex</span> = &quot;(a.*)&quot;.r\ndef matchRegex(str: String): Boolean = str match {\n  case <span class=\"highlight\">regex</span>(&quot;abc&quot;) =&gt; true\n  case _            =&gt; false\n}\n\nmatchRegex(&quot;abc&quot;)\n\nI guess, what you &hellip; Runtime errors are generally considered <span class=\"highlight\">evil</span> in scala (and in functional programming in general), and are only used in cases, when there is no other viable alternative. &hellip; ",
            "title": "Why does this compile? (Scala Regex unapplySeq)"
        },
        {
            "tags": [
                "javascript",
                "arrays"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 72888945,
            "is_answered": false,
            "question_id": 72888846,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1657135820,
            "creation_date": 1657135820,
            "body": "You can use a simple regex that matches the character that you want to match with while iterating over the array items.\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "You can use a simple <span class=\"highlight\">regex</span> that matches the character that you want to match with while iterating over the array items. &hellip; microverse&quot;, &quot;the menagerie&quot;, &quot;earth (k-83)&quot;, &quot;hideout planet&quot;, &quot;unity&#39;s planet&quot;, &quot;dorian 5&quot;, &quot;earth (unknown dimension)&quot;, &quot;earth (j19ζ7)&quot;, &quot;roy: a life well lived&quot;, &quot;eric stoltz mask earth&quot;, &quot;earth (<span class=\"highlight\">evil</span> &hellip; ",
            "title": "Find how many times a char is included into an array of names"
        },
        {
            "tags": [
                "c#",
                "asp.net-core",
                "xss"
            ],
            "question_score": 19,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 5,
            "is_answered": true,
            "question_id": 52239262,
            "item_type": "question",
            "score": 19,
            "last_activity_date": 1656876401,
            "creation_date": 1536439438,
            "body": "In ASP.NET we had Request Validation but in ASP.NET Core there is no such thing.\nHow can we protect an ASP.NET Core app against XSS in the best way?\nRequest validation gone:\nhttps://nvisium.com/resources/blog/2017/08/08/dude-wheres-my-request-validation.html\n\nthis guy recommmends RegEx on  like:\n[RegularExpression(@&quot;^[a-zA-Z0-9 -&#39;]*$&quot;, ErrorMessage = &quot;Invalid characters detected&quot;)]\npublic string Name { get; set; }\n\n\n...but that does not work for globalization/internationalization, i.e. non-latin characters like &#230;, &#248; &#229; 汉字.\nX-XSS to do &gt;limited&lt; XSS-protection: https://dotnetcoretutorials.com/2017/01/10/set-x-xss-protection-asp-net-core/ Like this but there is only limited support afaik:\n\nThe documentation from Microsoft is two years old: https://learn.microsoft.com/en-us/aspnet/core/security/cross-site-scripting?view=aspnetcore-2.1 and does not really cover it.\nI am thinking to do something simple like:\n\n\non all data submission - but it seems kind of wonky.\n\nI have asked the same question for Microsoft but I am interested to hear how people are solving this problem in real-life applications.\nUpdate: what we are trying to accomplish:\nIn our application, we have webforms where people can input names, email, content and similar. The data is stored in a database and will be viewed on a frontend system and possibly other systems in the future (like RSS feeds, JSON, whatever). Some forms contain rich-text editors (TinyMCE) and allow users to markup their texts. Malicious users could enter  in the fields. What is the best way to strip the evil characters in ASP.NET Core before it reaches the database - I prefer evil scripts not to be stored in the database at all.\nI figured something like this could work:\n\n",
            "excerpt": "Malicious users could enter &lt;script&gt;alert(&#39;<span class=\"highlight\">evil</span> stuff&#39;);&lt;/script&gt; in the fields. &hellip; What is the best way to strip the <span class=\"highlight\">evil</span> characters in ASP.NET Core before it reaches the database - I prefer <span class=\"highlight\">evil</span> scripts not to be stored in the database at all. &hellip; ",
            "title": "How to protect against XSS in ASP.NET Core?"
        },
        {
            "tags": [
                "awk",
                "text-processing",
                "unix-text-processing"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 72695200,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1655830113,
            "creation_date": 1655784098,
            "body": "Given the following example URLs:\nurls.txt\n\nI&#39;m using this command:\n\nTo produce this desired output:\n\nBut it yields this output:\n\nWhy is it printing a semblance of the original URL before the correct output?\n\nHere is the above code formatted legibly with :\n\n",
            "excerpt": "Pihole-Rules/raw/master/Fara-Xiaomi-info\nhttps://github.com/farrokhi/adblock-iran/raw/master/filter.txt\nhttps://github.com/fskreuz/blocklists/raw/dev/domains.txt\nhttps://github.com/ftpmorph/ftprivacy/raw/master/<span class=\"highlight\">regex</span>-blocklists &hellip; /smartphone-and-general-ads-analytics-<span class=\"highlight\">regex</span>-blocklist-ftprivacy.txt\nhttps://github.com/hell-sh/<span class=\"highlight\">Evil</span>-Domains/raw/master/<span class=\"highlight\">evil</span>-domains.txt\nhttps://github.com/hosts-file/BulgarianHostsFile/raw/master/bhf.txt &hellip; ",
            "title": "Issue converting github.com/*/raw/* URLs to raw.githubusercontent.com URLS using AWK"
        },
        {
            "tags": [
                "awk",
                "text-processing",
                "unix-text-processing"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 72704220,
            "is_answered": false,
            "question_id": 72695200,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1655830113,
            "creation_date": 1655828910,
            "body": "Your only real problem is that awk fields, arrays, and strings all start at 1, not 0, so your loop should have started at 1, not 0. As written first time through your loop  is doing .\nHaving said that, I think what you want is the following with a couple of other things tidied up:\n\n\n\nThe only slightly tricky part in that is  which is how you remove a mid-record field in awk - first convert the field to a string that matches RS since that can&#39;t be present in the input (we can use RS directly when it&#39;s a string like  rather than a regexp) so we changed  to  in the 6th field which meant the record now contained  and then removed  thereby removing the 6th field and preceding .\n",
            "excerpt": "https://raw.githubusercontent.com/farrokhi/adblock-iran/master/filter.txt\nhttps://raw.githubusercontent.com/fskreuz/blocklists/dev/domains.txt\nhttps://raw.githubusercontent.com/ftpmorph/ftprivacy/master/<span class=\"highlight\">regex</span>-blocklists &hellip; /smartphone-and-general-ads-analytics-<span class=\"highlight\">regex</span>-blocklist-ftprivacy.txt\nhttps://raw.githubusercontent.com/hell-sh/<span class=\"highlight\">Evil</span>-Domains/master/<span class=\"highlight\">evil</span>-domains.txt\nhttps://raw.githubusercontent.com/hosts-file/BulgarianHostsFile &hellip; ",
            "title": "Issue converting github.com/*/raw/* URLs to raw.githubusercontent.com URLS using AWK"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": -2,
            "is_accepted": false,
            "answer_id": 72498731,
            "is_answered": false,
            "question_id": 72498625,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1654336065,
            "creation_date": 1654336065,
            "body": "I hope this regex can help you :\n\nAlso be carefull about evil regex, each regex is potentially a open door for DDOS attack on you website.\nI tried your regex on :  https://regexr.com/\nIt&#39;s a good tools for testing your regex\n",
            "excerpt": "I hope this <span class=\"highlight\">regex</span> can help you :\n \\/([a-zA-Z]+)(.*)[\\/](more|next|[0-9]+) \n\n \\/([a-zA-Z]+)(.*)[\\/](more|next|[0-9]+){0,1}[\\/]{0,1}   \n\nAlso be carefull about <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>, each <span class=\"highlight\">regex</span> is potentially a open &hellip; I tried your <span class=\"highlight\">regex</span> on :  https://regexr.com/\nIt&#39;s a good tools for testing your <span class=\"highlight\">regex</span> &hellip; ",
            "title": "regex route filters some /string after slug url"
        },
        {
            "tags": [
                "nginx",
                "nginx-location"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 72173828,
            "is_answered": false,
            "question_id": 72056975,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1652107251,
            "creation_date": 1652107251,
            "body": "Nginx takes a  location modifier as an exact match (docs are here). If you want to make a location that will catch every URI containing  substring (obviously including ), you can use a regex one:\n\nThe  modifier makes the location block in @user973254 answer (original answer version, already fixed) a prefix one with the greater priority than any regex locations, so it will overtake only the URIs starting with  (obviously not including  from your example).\nHowever if your web backend requires an additional URI processing (which is a most common case nowadays), you&#39;ll need at least to replicate your main location behavior with this new location. Fortunately, there is a way to avoid such a problems, and can be easily applied to an arbitrary number of sites as you ask for in your original question. You can check required conditions to make a decision for blocking the request or not using the (very powerful)  block feature. And since we want to match address against a list of subnets, we will use a chain of  and  blocks. To use regexes (PRCE/PCRE2 syntax) for a  block match use a  string prefix ( for case-insensitive match), strings containing some special characters (e.g. curly braces) should be single- or double-qouted. Here is a generic example (you&#39;ll need only the first line of the following  block to fulfill your question requirements):\n\nYou can swap the logic to check the URI first (it can be some performance impact since the regex matching will be performed for every request including requests from the non-restricted networks, however if the majority of requests come from public addresses, there will be no significant difference). That way you can have a common non-restricted subnes list and per-site URI lists:\n\nOf course, you are not limited to use 403 return code using this solution (which is the case when you are using / directives). It also has nothing to do with the famous &quot;If is evil&quot; article since this  is used in  context.\n",
            "excerpt": "containing &#39;/local&#39; substring\n    ~^/private/            1; # <span class=\"highlight\">regex</span> to match any URI starting with &#39;/private&#39;\n    ~*\\.jpe? &hellip; It also has nothing to do with the famous &quot;If is <span class=\"highlight\">evil</span>&quot; article since this if is used in server context. &hellip; ",
            "title": "Nginx deny if location contains"
        },
        {
            "tags": [
                "redirect",
                "google-cloud-platform",
                "load-balancing"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 70526479,
            "is_answered": false,
            "question_id": 70525042,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1640825992,
            "creation_date": 1640825992,
            "body": "Url maps path matcher does not support conditions or regex.\nAs quoted from the documentation, Path matcher has some constraints:\n\nA path rule can only include a wildcard character (*) after a forward slash character (/). For example, /videos/* and /videos/hd/* are valid for path rules, but /videos* and /videos/hd* are not.\n\n\nPath rules do not use regular expression or substring matching. For example, path rules for either /videos/hd or /videos/hd/* do not apply to a URL with the path /video/hd-abcd. However, a path rule for /video/* does apply to that path.\n\n\nPath matchers (and URL maps in general) do not offer features that function like Apache LocationMatch directives. If you have an application that generates dynamic URL paths that have a common prefix, such as /videos/hd-abcd and /videos/hd-pqrs, and you need to send requests made to those paths to different backend services, you might not be able to do that with a URL map. For simple cases containing only a few possible dynamic URLs, you might be able to create a path matcher with a limited set of path rules. For more complex cases, you need to do path-based regular expression matching on your backends.\n\n\nWhat you are looking for can be achieved by setting up  or  webservers as the only backend for your  and configuring this backend to route requests with conditions and/or regex to your services.\nPS: If is Evil... when used in location context\n",
            "excerpt": "Url maps path matcher does not support conditions or <span class=\"highlight\">regex</span>. &hellip; PS: If is <span class=\"highlight\">Evil</span>... when used in location context &hellip; ",
            "title": "Redirect request based on parameter on GCP"
        },
        {
            "tags": [
                "json",
                "bash",
                "large-files",
                "data-extraction"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 70449626,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1640252943,
            "creation_date": 1640178730,
            "body": "I have a fairly large JSON file (~8GB) that has the following format:\n\nI want to extract all the values of the  to a separate file and I want to do it automatically.\nI tried using this  command\n\nbut the process terminated due to large memory usage (it used more than 80% of my ram at some points and the GUI was unresponsive).\nThen I tried to first use the  command to separate the input into 2GB files\n\nand then use the same  command from above, and this time it finished fairly quickly for every chunk, in about 30 seconds.\nThis method where I have to split the input first would be fine for me but the the only problem is automatically checking if the  command splits the file properly, i.e. not in the middle of  key-pair, since that would result in losing some of the important data.\nI&#39;d like to know if there&#39;s a better/more elegant way to do this.\nWhat also interests me is why doesn&#39;t  work on 8GB file but works like a charm on 2GB files. The regex I use for matching doesn&#39;t seem to be evil.\nMy assumption is that it tries to load the whole line first (which uses half of my RAM) and then it uses more memory for it&#39;s internal calculations, which causes the system to start using SWAP memory which in turn causes really slow performance before terminating the program (10+ minutes).\nSome important info specific for this problem:\n\nThe format of objects inside  array will always be the same\nThe input json is minified, it contains no spaces or new lines\nThe input file is static\nI&#39;m obviously interested in extracting all of the important data\n\n",
            "excerpt": "The <span class=\"highlight\">regex</span> I use for matching doesn&#39;t seem to be <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Automating data extraction from large json file (~8GB)"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 70305380,
            "is_answered": false,
            "question_id": 70304831,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1639155444,
            "creation_date": 1639143518,
            "body": "Using  is very unsafe way to solve this problem:\nWhen is eval evil in php?\nOne solution is using  function and find your desired format with regex and replace it with custom function.\n function perform a regular expression search and replace using a callback.\nhttps://www.php.net/manual/en/function.preg-replace-callback.php\nJust need to replace line  with following line:\n\n",
            "excerpt": "Using eval is very unsafe way to solve this problem:\nWhen is eval <span class=\"highlight\">evil</span> in php? &hellip; One solution is using preg_replace_callback function and find your desired format with <span class=\"highlight\">regex</span> and replace it with custom function.\npreg_replace_callback function perform a regular expression search and &hellip; ",
            "title": "How to assign value of json object to variable in form of text values of textarea?"
        },
        {
            "tags": [
                "regex",
                "spring-boot",
                "sonarqube"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 70301405,
            "is_answered": false,
            "question_id": 70300327,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1639123445,
            "creation_date": 1639123445,
            "body": "You can mark it as reviewed and safe to use.\nThe  pattern is equal to .\nFor a regex to be an evil regex, there must be a considerable backtracking possibility that is only possible with , , ,  and  / ? like quantifiers in non-final position inside the pattern.\nYours is an example of a pattern where only the one or two digit pattern can get backtracked into, but there is just two possible ways to match the pattern, which is not problematic and does not present any threat.\n",
            "excerpt": "For a <span class=\"highlight\">regex</span> to be an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>, there must be a considerable backtracking possibility that is only possible with *, *?, +, +? and {x,} / {x,}? &hellip; ",
            "title": "Regular Expressions are marked as Security Hotspot on SonarQube report"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 200,
            "is_accepted": true,
            "answer_id": 12643073,
            "is_answered": false,
            "question_id": 12643009,
            "item_type": "answer",
            "score": 439,
            "last_activity_date": 1635437431,
            "creation_date": 1348846620,
            "body": "TL;DR\nUse  instead of  and  instead of  to avoid escaping issues in some languages (like Java).\nThanks to the nameless one for originally recognizing this.\n\nOne relatively simple pattern for matching a floating point number in a larger string is:\n\nThis will match:\n\n\n\n\n\nSee a working example\nIf you also want to match  (a period with no decimal part), then you&#39;ll need a slightly longer expression:\n\nSee pkeller&#39;s answer for a fuller explanation of this pattern\nIf you want to include a wider spectrum of numbers, including scientific notation and non-decimal numbers such as hex and octal, see my answer to How do I identify if a string is a number?.\nIf you want to validate that an input is a number (rather than finding a number within the input), then you should surround the pattern with  and , like so:\n\nIrregular Regular Expressions\n&quot;Regular expressions&quot;, as implemented in most modern languages, APIs, frameworks, libraries, etc., are based on a concept developed in formal language theory. However, software engineers have added many extensions that take these implementations far beyond the formal definition. So, while most regular expression engines resemble one another, there is actually no standard. For this reason, a lot depends on what language, API, framework or library you are using.\n(Incidentally, to help reduce confusion, many have taken to using &quot;regex&quot; or &quot;regexp&quot; to describe these enhanced matching languages. See Is a Regex the Same as a Regular Expression? at RexEgg.com for more information.)\nThat said, most regex engines (actually, all of them, as far as I know) would accept . Most likely, there&#39;s an issue with escaping.\nThe Trouble with Escaping\nSome languages have built-in support for regexes, such as JavaScript. For those languages that don&#39;t, escaping can be a problem.\nThis is because you are basically coding in a language within a language. Java, for example, uses  as an escape character within it&#39;s strings, so if you want to place a literal backslash character within a string, you must escape it:\n\nHowever, regexes also use the  character for escaping, so if you want to match a literal  character, you must escape it for the regex engine, and then escape it again for Java:\n\nIn your case, you have probably not escaped the backslash character in the language you are programming in:\n\nAll this escaping can get very confusing. If the language you are working with supports raw strings, then you should use those to cut down on the number of backslashes, but not all languages do (most notably: Java). Fortunately, there&#39;s an alternative that will work some of the time:\n\nFor a regex engine,  and  mean exactly the same thing. Note that this doesn&#39;t work in every case, like newline (), open square bracket () and backslash ( or ).\nA Note about Matching Numbers\n(Hint: It&#39;s harder than you think)\nMatching a number is one of those things you&#39;d think is quite easy with regex, but it&#39;s actually pretty tricky. Let&#39;s take a look at your approach, piece by piece:\n\nMatch an optional  or \n\nMatch 0 or more sequential digits\n\nMatch an optional \n\nMatch 0 or more sequential digits\nFirst, we can clean up this expression a bit by using a character class shorthand for the digits (note that this is also susceptible to the escaping issue mentioned above):\n = \nI&#39;m going to use  below, but keep in mind that it means the same thing as . (Well, actually, in some engines  will match digits from all scripts, so it&#39;ll match more than  will, but that&#39;s probably not significant in your case.)\nNow, if you look at this carefully, you&#39;ll realize that every single part of your pattern is optional. This pattern can match a 0-length string; a string composed only of  or ; or, a string composed only of a . This is probably not what you&#39;ve intended.\nTo fix this, it&#39;s helpful to start by &quot;anchoring&quot; your regex with the bare-minimum required string, probably a single digit:\n\nNow we want to add the decimal part, but it doesn&#39;t go where you think it might:\n\nThis will still match values like . Worse, it&#39;s got a tinge of evil about it. The period is optional, meaning that you&#39;ve got two repeated classes side-by-side ( and ). This can actually be dangerous if used in just the wrong way, opening your system up to DoS attacks.\nTo fix this, rather than treating the period as optional, we need to treat it as required (to separate the repeated character classes) and instead make the entire decimal portion optional:\n\nThis is looking better now. We require a period between the first sequence of digits and the second, but there&#39;s a fatal flaw: we can&#39;t match  because a leading digit is now required.\nThis is actually pretty easy to fix. Instead of making the &quot;decimal&quot; portion of the number optional, we need to look at it as a sequence of characters: 1 or more numbers that may be prefixed by a  that may be prefixed by 0 or more numbers:\n\nNow we just add the sign:\n\nOf course, those slashes are pretty annoying in Java, so we can substitute in our long-form character classes:\n\nMatching versus Validating\nThis has come up in the comments a couple times, so I&#39;m adding an addendum on matching versus validating.\nThe goal of matching is to find some content within the input (the &quot;needle in a haystack&quot;). The goal of validating is to ensure that the input is in an expected format.\nRegexes, by their nature, only match text. Given some input, they will either find some matching text or they will not. However, by &quot;snapping&quot; an expression to the beginning and ending of the input with anchor tags ( and ), we can ensure that no match is found unless the entire input matches the expression, effectively using regexes to validate.\nThe regex described above () will match one or more numbers within a target string. So given the input:\n\nThe regex will match , , ,  and .\nTo validate that a given input is a number and nothing but a number, &quot;snap&quot; the expression to the start and end of the input by wrapping it in anchor tags:\n\nThis will only find a match if the entire input is a floating point number, and will not find a match if the input contains additional characters. So, given the input , a match will be found, but given  no matches will be found.\nNote that some regex engines have a ,  or similar function, which essentially does what I&#39;ve described automatically, returning  if a match is found and  if no match is found. Also keep in mind that some engines allow you to set flags which change the definition of  and , matching the beginning/end of a line rather than the beginning/end of the entire input. This is typically not the default, but be on the lookout for these flags.\n",
            "excerpt": "(Incidentally, to help reduce confusion, many have taken to using &quot;<span class=\"highlight\">regex</span>&quot; or &quot;regexp&quot; to describe these enhanced matching languages. See Is a <span class=\"highlight\">Regex</span> the Same as a Regular Expression? &hellip; Worse, it&#39;s got a tinge of <span class=\"highlight\">evil</span> about it. The period is optional, meaning that you&#39;ve got two repeated classes side-by-side (\\d+ and \\d*). &hellip; ",
            "title": "Regular expression for floating point numbers"
        },
        {
            "tags": [
                "php",
                "xml"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 69686634,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1634987324,
            "creation_date": 1634979938,
            "body": "Please help\nI have been finding a code for this but failed\nsource: https://www.singtel.com/etc/singtel/public/tv/epg-parsed-data/23102021.json\nThis is a epg html site\nCould you suggest a way to convert this link contents to XML?\nbtw the link is based on the day\nhttps://www.singtel.com/etc/singtel/public/tv/epg-parsed-data/ddMMyyyy.json\nmaybe this will help\n\r\n\r\n\r\n\r\n\r\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": ",||}\nindex_description.scrub{<span class=\"highlight\">regex</span>||&quot;program&quot;:\\{&quot;description&quot;:&quot;(.*?)&quot; &hellip; epgChannelId&quot;:&quot;(\\d+)&quot;\\}||}\n*index_site_channel.scrub {<span class=\"highlight\">regex</span>()||\\{&quot;title&quot;:&quot;([^&quot;]*)&quot;,&quot;description&quot;.*?&quot; &hellip; ",
            "title": "html epg to xml via php"
        },
        {
            "tags": [
                "c#",
                ".net",
                "mailkit"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 60832412,
            "is_answered": false,
            "question_id": 60825872,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1633166022,
            "creation_date": 1585057872,
            "body": "You can read this blog post that explains what most C# MIME parsers get wrong and why MimeKit can handle multiple charset encodings.\nhttps://jeffreystedfast.blogspot.com/2013/09/time-for-rant-on-mime-parsers.html\nhttps://jeffreystedfast.blogspot.com/2013/08/why-decoding-rfc2047-encoded-headers-is.html\nTime for a rant on mime parsers...\nWarning: Viewer discretion is advised.\nWhere should I begin?\nI guess I should start by saying that I am obsessed with MIME and, in particular, MIME parsers. No, really. I am obsessed. Don&#39;t believe me? I&#39;ve written and/or worked on several MIME parsers at this point. It started off in my college days working on Spruce which had a horrendously bad MIME parser, and so as you read farther along in my rant about shitty MIME parsers, keep in mind: I&#39;ve been there, I&#39;ve written a shitty MIME parser.\nAs a handful of people are aware, I&#39;ve recently started implementing a C# MIME parser called MimeKit. As I work on this, I&#39;ve been searching around on GitHub and Google to see what other MIME parsers exist out there to find out what sort of APIs they provide. I thought perhaps I&#39;ll find one that offers a well-designed API that will inspire me. Perhaps, by some miracle, I&#39;d find one that was actually pretty good that I could just contribute to instead of writing my own from scratch (yea, wishful thinking). Instead, all I have found are poorly designed and implemented MIME parsers, many probably belong on the front page of the Daily WTF.\nI guess I&#39;ll start with some softballs.\nFirst, there&#39;s the fact that every single one of them was written as  parsers. Don&#39;t be fooled by the ones claiming to be &quot;stream parsers&quot;, because all any of those did was to slap a  on top of the byte stream and start using . What&#39;s so bad about that, you ask? For those not familiar with MIME, I&#39;d like for you to take a look at the raw email sources in your inboxes particularly if you have correspondence with anyone outside of the US. Hopefully, most of your friends and colleagues are using more-or-less MIME compliant email clients, but I guarantee you&#39;ll find at least a few emails with raw 8bit text.\nNow, if the language they were using was C or C++, they might be able to get away with doing this because they&#39;d technically be operating on byte arrays, but with Java and C#, a &#39;string&#39; is a unicode string. Tell me: how does one get a unicode string from a raw byte array?\nBingo. You need to know the charset before you can convert those bytes into unicode characters.\nTo be fair, there&#39;s really no good way of handling raw 8bit text in message headers, but by using a  approach, you are really limiting the possibilities.\nNext up is the  approach. One of the 2 early parsers in GMime (pan-mime-parser.c back in the version 0.7 days) used a  approach, so I understand the thinking behind this. And really, there&#39;s nothing wrong with this approach as far as correctness goes, it&#39;s more of a &quot;this can never be fast&quot; complaint. Of the two early parsers in GMime, the pan-mime-parser.c backend was horribly slow compared to the in-memory parser. Of course, that&#39;s not very surprising. More surprising to me at the time was that when I wrote GMime&#39;s current generation of the parser (sometime between v0.7 and v1.0), it was just as fast as the in-memory parser ever was and only ever had up to 4k in a read buffer at any given time. My point is, there are far better approaches than  if you want your parser to be reasonably performant... and why wouldn&#39;t you want that? Your users definitely want that.\nOkay, now come the more serious problems that I encountered in nearly all of the mime parser libraries I found.\nI think that every single mime parser I&#39;ve found so far uses the &quot;String.Split()&quot; approach for parsing address headers and/or for parsing parameter lists on headers such as Content-Type and Content-Disposition.\nHere&#39;s an example from one C# MIME parser:\n\nHere&#39;s how this same parser decodes encoded-word tokens:\n\nWhat?! It completely throws away the charset in each of those encoded-word tokens. In the case of quoted-printable tokens, it assumes they are all ASCII (actually, latin1 may work as well?) and in the case of base64 encoded-word tokens, it assumes they are all in UTF-7!?!? Where in the world did he get that idea? I can&#39;t begin to imagine his code working on any base64 encoded-word tokens in the real world. &#129318;‍♂️\nI&#39;d just like to point out that this is what this project&#39;s description states:\nA small, efficient, and working mime parser library written in c#.\n...\nI&#39;ve used several open-source mime parsers before, but they all either\nfail on one kind of encoding or the other, or miss some crucial\ninformation. That&#39;s why I decided to finally have a go at the problem\nmyself.\nI&#39;ll grant you that his MIME parser is small, but I&#39;d have to take issue with the &quot;efficient&quot; and &quot;working&quot; adjectives. With the heavy use of string allocations and regex matching, it could hardly be considered &quot;efficient&quot;. And as the code pointed out above illustrates, &quot;working&quot; is a bit of an overstatement.\nFolks... this is what you get when you opt for a &quot;lightweight&quot; MIME parser because you think that parsers like GMime are &quot;bloated&quot;.\nOn to parser #2... I like to call this the &quot;Humpty Dumpty&quot; approach:\n\nI&#39;ll give this guy some credit, at least he saw that his  approach was flawed and so tried to compensate by piecing Humpty Dumpty back together again. Of course, with his String.Trim()ing, he just won&#39;t be able to put him back together again with any level of certainty. The white space in those quoted tokens may have significant meaning.\nMany of the C# MIME parsers out there like to use Regex all over the place. Here&#39;s a snippet from one parser that is entirely written in Regex (yea, have fun maintaining that...):\n\nLet&#39;s pretend that the regex pattern strings are correct in their definitions (because they are god-awful to read and I can&#39;t be bothered to double-check them), the replacing of &#39;_&#39; with a space is wrong (it should only be done in the &quot;q&quot; case) and the  is just evil. Not to mention that there could be multiple encoded words per field.Body which this code utterly fails to handle.\nGuys. I know you love regular expressions and that they are very very useful, but they are no substitute for writing a real tokenizer. This is especially true if you want to be lenient in what you accept (and in the case of MIME, you really need to be).\n",
            "excerpt": "Many of the C# MIME parsers out there like to use <span class=\"highlight\">Regex</span> all over the place. &hellip; (because they are god-awful to read and I can&#39;t be bothered to double-check them), the replacing of &#39;_&#39; with a space is wrong (it should only be done in the &quot;q&quot; case) and the Regex.Replace() is just <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Supporting multiple content encoding in .net Framework 4.6.1 using mailkit"
        },
        {
            "tags": [
                "sql",
                "oracle"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 69351237,
            "is_answered": false,
            "question_id": 69347664,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1632765334,
            "creation_date": 1632765334,
            "body": "If data really is that simple, regular expressions make code rather simple. Way simpler than  option. Why don&#39;t you want to use regex? Because it is evil, or ...?\n\nsample data in lines #1 - 4\n: take the 2nd numeric value from the column\n: take the last numeric value from the column\n\n\n\n\nAs of\n\nWhat is the best way to create a new column to show the version without duplicate the line?\n\nI have no idea what that means. &quot;Without duplicate the line&quot;? Which line? Which duplicate?\n",
            "excerpt": "Why don&#39;t you want to use <span class=\"highlight\">regex</span>? Because it is <span class=\"highlight\">evil</span>, or ...? &hellip; ",
            "title": "Oracle SQL - Reading delimiter"
        },
        {
            "tags": [
                "nginx",
                "configuration",
                "nginx-cache"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 69268906,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1632227338,
            "creation_date": 1632227338,
            "body": "I&#39;m looking to improve nginx caching by removing irrelevant query parameters (that could come from web crawlers or similar) from the request. I have come across an unwieldy solution on the internet:\n\nIt works, but it&#39;s not very concise, takes a lot of steps and from what I learned, if is evil.\nI know there are maps, which can do basic regex things but they don&#39;t work in this scenario (because there can be any number of parameters in any order that I need to remove).\nI also found this substitution module which can do regex replace but it&#39;s only made for specific operations and not for setting a variable.\nSo I have two questions:\n\nDoes anyone know whether there is some tooling to set a variable by doing a regex replace operation?\nIs using if in this case really that bad? It&#39;s not inside a location context and I don&#39;t know whether many consecutive regexes are actually worse than one large regex replace.\n\nI would be very thankful if someone with more nginx know-how could weigh in here and help me out. Thanks :)\n",
            "excerpt": "location / {\n  # set $c_uri as cache_key\n  proxy_cache_key $c_uri;\n  ...\n}\n    \n\nIt works, but it&#39;s not very concise, takes a lot of steps and from what I learned, if is <span class=\"highlight\">evil</span>. &hellip; It&#39;s not inside a location context and I don&#39;t know whether many consecutive regexes are actually worse than one large <span class=\"highlight\">regex</span> replace. &hellip; ",
            "title": "NGINX - Setting a variable with regex replace"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 116,
            "is_accepted": true,
            "answer_id": 12846121,
            "is_answered": false,
            "question_id": 12841970,
            "item_type": "answer",
            "score": 116,
            "last_activity_date": 1630933909,
            "creation_date": 1349979734,
            "body": "Why Are Evil Regexes A Problem?\nBecause computers do exactly what you tell them to do, even if it&#39;s not what you meant or is totally unreasonable. If you ask a regex engine to prove that, for some given input, there either is or is not a match for a given pattern, then the engine will attempt to do that no matter how many different combinations must be tested.\nHere is a simple pattern inspired by the first example in the OP&#39;s post:\n\nGiven the input:\n\nabababababababababababab\n\nThe regex engine tries something like  and a match is found on the first try.\nBut then we throw the monkey wrench in:\n\nabababababababababababab a\n\nThe engine will first try  but that fails because of that extra . This causes catastrophic backtracking, because our pattern , in a show of good faith, will release one of its captures (it will &quot;backtrack&quot;) and let the outer pattern try again. For our regex engine, that looks something like this:\n\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n\nThe number of possible combinations scales exponentially with the length of the input and, before you know it, the regex engine is eating up all your system resources trying to solve this thing until, having exhausted every possible combination of terms, it finally gives up and reports &quot;There is no match.&quot; Meanwhile your server has turned into a burning pile of molten metal.\nHow to Spot Evil Regexes\nIt&#39;s actually very tricky. Catastrophic backtracking in modern regex engines is similar in nature to the halting problem which Alan Turing proved was impossible to solve. I have written problematic regexes myself, even though I know what they are and generally how to avoid them. Wrapping everything you can in an atomic group can help to prevent the backtracking issue. It basically tells the regex engine not to revisit a given expression - &quot;lock whatever you matched on the first try&quot;. Note, however, that atomic expressions don&#39;t prevent backtracking within the expression, so  is still dangerous, but  is safe (it&#39;ll match  and then refuse to give up any of it&#39;s matched characters, thus preventing catastrophic backtracking).\nUnfortunately, once it&#39;s written, it&#39;s actually very hard to immediately or quickly find a problem regex. In the end, recognizing a bad regex is like recognizing any other bad code - it takes a lot of time and experience and/or a single catastrophic event.\n\nInterestingly, since this answer was first written, a team at the University of Texas at Austin published a paper describing the development of a tool capable of performing static analysis of regular expressions with the express purpose of finding these &quot;evil&quot; patterns. The tool was developed to analyse Java programs, but I suspect that in the coming years we&#39;ll see more tools developed around analysing and detecting problematic patterns in JavaScript and other languages, especially as the rate of ReDoS attacks continues to climb.\n\nStatic Detection of DoS Vulnerabilities in\nPrograms that use Regular Expressions\nValentin W&#252;stholz, Oswaldo Olivo, Marijn J. H. Heule, and Isil Dillig\nThe University of Texas at Austin\n\n",
            "excerpt": "Why Are <span class=\"highlight\">Evil</span> Regexes A Problem?\nBecause computers do exactly what you tell them to do, even if it&#39;s not what you meant or is totally unreasonable. &hellip; How to Spot <span class=\"highlight\">Evil</span> Regexes\nIt&#39;s actually very tricky. Catastrophic backtracking in modern <span class=\"highlight\">regex</span> engines is similar in nature to the halting problem which Alan Turing proved was impossible to solve. &hellip; ",
            "title": "How can I recognize an evil regex?"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 116,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 8,
            "is_answered": true,
            "question_id": 12841970,
            "item_type": "question",
            "score": 116,
            "last_activity_date": 1630933909,
            "creation_date": 1349965833,
            "body": "I recently became aware of Regular expression Denial of Service attacks, and decided to root out so-called &#39;evil&#39; regex patterns wherever I could find them in my codebase - or at least those that are used on user input. The examples given at the OWASP link above and wikipedia are helpful, but they don&#39;t do a great job of explaining the problem in simple terms.\n\nA description of evil regexes, from wikipedia:\n\n\nthe regular expression applies repetition (&quot;+&quot;, &quot;*&quot;) to a complex subexpression;\nfor the repeated subexpression, there exists a match which is also a suffix of another valid match.\n\n\nWith examples, again from wikipedia:\n\n\n\n\n\n\n for x &gt; 10\n\n\nIs this a problem that just doesn&#39;t have a simpler explanation? I&#39;m looking for something that would make it easier to avoid this problem while writing regexes, or to find them within an existing codebase.\n",
            "excerpt": "I recently became aware of Regular expression Denial of Service attacks, and decided to root out so-called &#39;<span class=\"highlight\">evil</span>&#39; <span class=\"highlight\">regex</span> patterns wherever I could find them in my codebase - or at least those that are used &hellip; A description of <span class=\"highlight\">evil</span> regexes, from wikipedia:\n\n\nthe regular expression applies repetition (&quot;+&quot;, &quot;*&quot;) to a complex subexpression;\nfor the repeated subexpression, there exists a match which is also a suffix &hellip; ",
            "title": "How can I recognize an evil regex?"
        },
        {
            "tags": [
                "regex",
                "emacs",
                "replace"
            ],
            "question_score": 60,
            "is_accepted": false,
            "answer_id": 69066512,
            "is_answered": false,
            "question_id": 677021,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1630869527,
            "creation_date": 1630869527,
            "body": "When using evil, you can simply do \n is responsible for lowercasing all following letters, this should also work for .\nI have not found documentation around Emacs for that, but it seems to match this list: https://www.boost.org/doc/libs/1_44_0/libs/regex/doc/html/boost_regex/format/perl_format.html\n",
            "excerpt": "When using <span class=\"highlight\">evil</span>, you can simply do :%s/&lt;\\([^&gt;]+\\)&gt;/&lt;\\L\\1&gt;\n\\L is responsible for lowercasing all following letters, this should also work for query-replace-regexp. &hellip; I have not found documentation around Emacs for that, but it seems to match this list: https://www.boost.org/doc/libs/1_44_0/libs/<span class=\"highlight\">regex</span>/doc/html/boost_regex/format/perl_format.html &hellip; ",
            "title": "Emacs: regular expression replacing to change case"
        },
        {
            "tags": [
                "javascript",
                "object",
                "properties",
                "evaluation",
                "template-literals"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 68726771,
            "is_answered": false,
            "question_id": 68725756,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1628670602,
            "creation_date": 1628598219,
            "body": "\nI did this. But is it a good approach ?\n\nI can not really tell, but ... Consider this ...\n\r\n\r\n\r\n\r\n\r\n\r\n\nRead on SO about why eval has limited use cases ... why is eval evil\nEdit\nFor a custom template-string evaluation / interpolation I would stick to the syntax of JavaScript Template Literals of cause without enclosing the template string by backticks.\nFor the substitution one needs a regex which targets both the valid substitute template syntax  and a valid object path syntax. Thus variable/property names can start with ,  and upper/lowercase latin letters only, whereas within a variable name the numbers from  to  are allowed. Thus a regex which does capture such a valid object path from a valid template syntax looks like this ...\n\nValue interpolation then is not that complicated anymore. One just does  an object path like  into an array of property names like . The final value can be evaluated via a simple  task which programmatically walks down the property chain of the provided object/type ...\n\r\n\r\n\r\n\r\n\r\n\r\n\nThe above approach based on a less rigid object-path regex like ...  ... then turns into the one beneath ...\n\r\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "important; top: 0; }\r\n\r\n\r\n\nRead on SO about why eval has limited use cases ... why is eval <span class=\"highlight\">evil</span>\nEdit\nFor a custom template-string evaluation / interpolation I would stick to the syntax of JavaScript Template &hellip; For the substitution one needs a <span class=\"highlight\">regex</span> which targets both the valid substitute template syntax ${ foo.bar } and a valid object path syntax. &hellip; ",
            "title": "Function to replace a substring with a function value in javascript"
        },
        {
            "tags": [
                "javascript",
                "if-statement",
                "string-length"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 68704897,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1628458234,
            "creation_date": 1628458057,
            "body": "I am trying to make a search like ctrl+f. I have a function that scrolls to the next keyword when you hit enter. I&#39;m trying to make it to reset the count once you went through all the words, but it just gives me an error. For example if I search &quot;Lorem&quot; it will return 13 matches, so after I hit enter for the 13th time it supposed to reset, but it gives me an error instead. I dont get why (count &lt; elements.length) doesnt work. This is the part where I&#39;m stuck:\nP.S. To avoid the confusion, &quot;mark&quot; is a custom element tag that gets wrapped to the words in the text that matches the input and then highlights it.\n\n\r\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": ") {\n    endRegExp = <span class=\"highlight\">regex</span>;\n    return endRegExp;\n  };\n\n  this.setBreakRegExp = function(<span class=\"highlight\">regex</span>) {\n    breakRegExp = <span class=\"highlight\">regex</span>;\n    return breakRegExp;\n  };\n\n  this.setMatchType = function(type)\n  {\n    switch &hellip; Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good and <span class=\"highlight\">Evil</span>) by Cicero, written in 45 BC. &hellip; ",
            "title": "Javascript (count &lt; elements.length) doesnt work"
        },
        {
            "tags": [
                "javascript",
                "arrays",
                "loops",
                "full-text-search"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 68685495,
            "is_answered": false,
            "question_id": 68685355,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1628271044,
            "creation_date": 1628271044,
            "body": "You can use a variable to store the current index in the search results.\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good and <span class=\"highlight\">Evil</span>) by Cicero, written in 45 BC. &hellip; ) {\n    endRegExp = <span class=\"highlight\">regex</span>;\n    return endRegExp;\n  };\n\n  this.setBreakRegExp = function(<span class=\"highlight\">regex</span>) {\n    breakRegExp = <span class=\"highlight\">regex</span>;\n    return breakRegExp;\n  };\n\n  this.setMatchType = function(type)\n  {\n    switch &hellip; ",
            "title": "How can I make input matches counter on enter press like ctrl+f?"
        },
        {
            "tags": [
                "python",
                "regex",
                "validation",
                "character",
                "alphabet"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 67939520,
            "is_answered": false,
            "question_id": 48074764,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1623425430,
            "creation_date": 1623424614,
            "body": "if u want a solution that&#39;s not dependent on unicode-compliance of the utility app, for the main block of AC00-D7AF, u can use\n\nthat slab expanded out would be\n\nif u need the extra stuff - jamo, compatability jamo, circled form, parenthesized form, and half width form, append this one to the one above\neither\n\nor\n\nif you only need the modern jamo that makes up the 11,172 syllable collection, then it&#39;s a lot cleaner :\n\nor if u prefer it without superfluous brackets :\n\nps : i only formatted like this here for readability. there aren&#39;t any spaces tabs or new line in between those octal codes. it&#39;s one continuous string.\npersonally i&#39;d much rather work with clean modern era regex myself, but using these octals are an necessary evil for myself to bring mawk1.3.4 and mawk2-beta up to full UTF8 compliancy.\n(at least in terms of lengthC() ordC() substrC() and character-level splitting but at the UC13 code-point level, plus hangul-only NFD-to-NFC.\nbut nothing fancy like grapheme clusters or bi-directional texts)\n",
            "excerpt": "only formatted like this here for readability. there aren&#39;t any spaces tabs or new line in between those octal codes. it&#39;s one continuous string.\npersonally i&#39;d much rather work with clean modern era <span class=\"highlight\">regex</span> &hellip; myself, but using these octals are an necessary <span class=\"highlight\">evil</span> for myself to bring mawk1.3.4 and mawk2-beta up to full UTF8 compliancy. &hellip; ",
            "title": "Regex to match all Hangul (Korean) characters and syllable blocks"
        },
        {
            "tags": [
                "javascript",
                "uuid",
                "denial-of-service"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 67608989,
            "is_answered": false,
            "question_id": 67608900,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1621449218,
            "creation_date": 1621449218,
            "body": "The OWASP article you linked has your answer. A pattern is considered &quot;Evil&quot; (vulnerable to a ReDOS attack) if it contains repetition inside a repeated group.\n\nEvil Regexes\nA Regex is called “evil” if it can stuck on crafted input.\nEvil Regex pattern contains:\n\nGrouping with repetition\nInside the repeated group:\n\nRepetition\nAlternation with overlapping\n\n\n\n\n\nYour pattern does not have grouping inside of repetition so it is not vulnerable. That said, if you know you expect a UUID inside the first 36 characters of the string you are searching, there is an efficiency benefit to trimming the string  before you attempt to match. I don&#39;t know if the splice is hard enough to read to warrant the extra time searching your string, you&#39;ll have to judge that for yourself.\n",
            "excerpt": "A pattern is considered &quot;<span class=\"highlight\">Evil</span>&quot; (vulnerable to a ReDOS attack) if it contains repetition inside a repeated group.\n\n<span class=\"highlight\">Evil</span> Regexes\nA <span class=\"highlight\">Regex</span> is called “<span class=\"highlight\">evil</span>” if it can stuck on crafted input. &hellip; <span class=\"highlight\">Evil</span> <span class=\"highlight\">Regex</span> pattern contains:\n\nGrouping with repetition\nInside the repeated group:\n\nRepetition\nAlternation with overlapping\n\n\n\n\n\nYour pattern does not have grouping inside of repetition so it is not vulnerable &hellip; ",
            "title": "Is regex uuid validator is safe for untrusted strings"
        },
        {
            "tags": [
                "python",
                "string"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 66864965,
            "is_answered": false,
            "question_id": 66864721,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1617168090,
            "creation_date": 1617079811,
            "body": "Here&#39;s a regex-based approach to the problem. We form a regex from  by adding  between each letter in the word. Then we attempt to match the regex against . Since  is inherently greedy, you will get the longest possible match inside word. You can then compare the length of the matched string to the length of , and if the matched string is longer, then  is a kangaroo word:\n\nOutput:\n\nAlternatively you can take an iterative approach. There are two conditions that need to be true for the input to be a kangaroo word:\n\nthe letters of the lookup word must be present in the word in order\nthere must be at least one extra letter between the letters of the lookup word\n\nThe first condition can be tested by checking each letter in turn to see that there is an occurrence of it after the previous letter in the word. The last condition can be checked by testing that the first occurrence of the first letter is more than the length of the word away from the last occurrence of the last letter. For example:\n\nThe results are the same as the regex version.\n",
            "excerpt": "Here&#39;s a <span class=\"highlight\">regex</span>-based approach to the problem. We form a <span class=\"highlight\">regex</span> from lookup_word by adding .* between each letter in the word. Then we attempt to match the <span class=\"highlight\">regex</span> against word. &hellip; (areAllCharsInWordInOrderFixed(&#39;devil&#39;, &#39;<span class=\"highlight\">evil</span>&#39;)) # False\nprint(areAllCharsInWordInOrderFixed(&#39;devilishly&#39;, &#39;<span class=\"highlight\">evil</span>&#39;)) # True\nprint(areAllCharsInWordInOrderFixed(&#39;encourage&#39;, &#39;nrage&#39;)) # True\nprint(areAllCharsInWordInOrderFixed &hellip; ",
            "title": "Efficiently Detecting Kangaroo Words"
        },
        {
            "tags": [
                "php",
                "nginx",
                "mod-rewrite",
                "url-rewriting"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 66232867,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1613601055,
            "creation_date": 1613513189,
            "body": "From an old project, I got this .htaccess file, which currently handle the apache rewrite rules:\n\nWhat the above snippet basically does, is that it rewrites all requests to index.php by keeping the query part string intact and stop after the first match, unless the file or folder exists.\nSo, in conclusion, by consulting the Nginx docs and by adding some additional security (permit access to sensible folders and files) and performance-related stuff (enable gzip or brotli output compression where it&#39;s possible [depending on the client, which one it is able to process]), I got this:\n\nThe new Nginx configuration above downloads the PHP file instead of bypassing it to the FPM handler. I have found this and this SO questions, but it doesn&#39;t seem to do the trick for me. Also, as mentioned in Nginx documentation,  is evil and we should avoid using it unless we are 100 percent sure what&#39;s going on. So, for my configuration, I avoided using it. Mainly because regex syntax also works with  and is way more securer in that context than . I mean, as far as I know. Please correct me, if I&#39;m wrong.\nThe main  file is dead simple right now:\n\nThe file above is mainly the openSUSE distributor shipped file, with a few changes.\nAnd this is my  file, which defines the FPM proxy handler for nginx (in order to don&#39;t repeat yourself; it&#39;s neccessarily needed anyways):\n\nI&#39;d appreciate any help with that issue.\n",
            "excerpt": "Also, as mentioned in Nginx documentation, if is <span class=\"highlight\">evil</span> and we should avoid using it unless we are 100 percent sure what&#39;s going on. So, for my configuration, I avoided using it. &hellip; Mainly because <span class=\"highlight\">regex</span> syntax also works with location and is way more securer in that context than if. I mean, as far as I know. Please correct me, if I&#39;m wrong. &hellip; ",
            "title": "How to convert a simple index.php redirection from apache to nginx format?"
        },
        {
            "tags": [
                "javascript",
                "google-apps-script",
                "base64",
                "ascii85",
                "base91"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 66096684,
            "is_answered": false,
            "question_id": 66026729,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1612765309,
            "creation_date": 1612764843,
            "body": "This solution works for me. The whole 3Byte is been encoded into 4 characters. I adapted the alphabet for replacing some missleading characters (0,O,i,l,1 etc.).\nThe base64 padding (&#39;=&#39;) is been removed after encoding and will be added before decoding inside the functions. CRC4 is not perfect - better than no CRC :)\nI am happy for any feedback, suggestions further optimisations. Thanks.\nGoogle Sheet frontend:\n\nAnother tab in this documents where you can define the variations/families/recipes:\n\nHere comes the code for the app script (special credits to @Kamil Kiełczewski for his base64 snippert):\n\nThe result can be tried/decoded with following HTML/JS snippet. Its quick and dirty.\nJust enter for example:\n\nPneumatic Connector  #Xs2a\nCamera #!$cg\nPower Supply 24V #p%qz\n\nYou can try to change manually the base64 code - for testing if the CRC4 works.\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "Techsppoks&quot;,&quot;Mashable&quot;]]},14:{family:[&quot;PC Brands&quot;],types:[[&quot;Asus&quot;,&quot;Intel&quot;,&quot;Dell&quot;,&quot;HP&quot;,&quot;Alienware&quot;,&quot;Microsoft&quot;,&quot;Apple&quot;,&quot;ACer&quot;,&quot;Sony&quot;,&quot;MSI&quot;,&quot;Razer&quot;,&quot;Toshiba&quot;,&quot;Gateway&quot;,&quot;LG&quot;,&quot;Compaq&quot;,&quot;Panasonic&quot;]]},15:{family:[&quot;<span class=\"highlight\">Evil</span> &hellip; Techsppoks&quot;,&quot;Mashable&quot;]]},14:{family:[&quot;PC Brands&quot;],types:[[&quot;Asus&quot;,&quot;Intel&quot;,&quot;Dell&quot;,&quot;HP&quot;,&quot;Alienware&quot;,&quot;Microsoft&quot;,&quot;Apple&quot;,&quot;ACer&quot;,&quot;Sony&quot;,&quot;MSI&quot;,&quot;Razer&quot;,&quot;Toshiba&quot;,&quot;Gateway&quot;,&quot;LG&quot;,&quot;Compaq&quot;,&quot;Panasonic&quot;]]},15:{family:[&quot;<span class=\"highlight\">Evil</span> &hellip; ",
            "title": "Convert Binary/Hex to Base91 / Ascii85 / Base64"
        },
        {
            "tags": [
                "nginx",
                "redirect"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 66016226,
            "is_answered": false,
            "question_id": 66016014,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1612296521,
            "creation_date": 1612293486,
            "body": "\nand\n\n at end of regex will you give trailing &quot;uri path&quot; (after  and before questionmark ) in your capture group .\nUntested.\n\nOK, now I understand your question. LOL. Gimmi a sec.\n\nI know  is evil. But I think I need it.\n\nCheck with  and look for  and .\nUntested.\n\nAnother method comes to mind.\n\nUse only when order of parameters is fixed.\nUntested.\n\nIn general regarding Nginx and Regex:\n\nI like named variables (see ). So no mixup with  in different scopes (http, server, location, deeper location, if, ...).\n will match all characters except of .\nSo  will make sure that you get the whole argument but not more.\n\n",
            "excerpt": "I know if is <span class=\"highlight\">evil</span>. But I think I need it.\nlocation ~ ^/a(/.*$|$)\n{\n    set $target_uri &#39;/b/c&#39;;\n    set $change_target_uri &#39;&#39;;\n    if ($arg_x)  # you can&#39;t have `and` in Nginx `if` condition! &hellip; In general regarding Nginx and <span class=\"highlight\">Regex</span>:\n\nI like named variables (see blubbi). So no mixup with $1 in different scopes (http, server, location, deeper location, if, ...). &hellip; ",
            "title": "How to redirect URLs with changing a path, but maintaining a parameter on Nginx?"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "cross-domain",
                "browser-plugin",
                "firefox-addon-webextensions"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 65368730,
            "is_answered": false,
            "question_id": 40572065,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1608373093,
            "creation_date": 1608373093,
            "body": "I had a similar issue today where my webextension had to call a javascript function that can only be accessed from the context of a specific web page and I was kinda annoyed that I was supposed to do all the script injection and json serialization and whatnot. But there&#39;s actually a pretty simple solution:\n\n will execute whatever code you pass to it in the context of the page instead of your content script.\nyeah, I know eval is evil, but in this context it really makes sense, because what I want to do (execute arbitrary code in the context of a web page) is evil by definition. It&#39;s like parsing HTML with regex; once you&#39;re at that point, you&#39;re tainted. Also, you&#39;re finally free from the burdens of writing code that is considered lawful good. So let&#39;s embrace the eval, just this one time ;)\n",
            "excerpt": ", but in this context it really makes sense, because what I want to do (execute arbitrary code in the context of a web page) is <span class=\"highlight\">evil</span> by definition. &hellip; It&#39;s like parsing HTML with <span class=\"highlight\">regex</span>; once you&#39;re at that point, you&#39;re tainted. Also, you&#39;re finally free from the burdens of writing code that is considered lawful good. &hellip; ",
            "title": "Calling webpage JavaScript methods from browser extension"
        },
        {
            "tags": [
                "php",
                "preg-match",
                "extract",
                "alphanumeric"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 65283534,
            "is_answered": false,
            "question_id": 63154404,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1607919468,
            "creation_date": 1607919468,
            "body": "Unless you are doing hundreds of thousands of iterations of this technique, I don&#39;t think &quot;speed&quot; should factor into as a decision making criteria.\nFor me, I place a high importance on directness then readability.  For this reason, I probably wouldn&#39;t entertain a technique that generated arrays, incorporated a loop, or frankly, made more than one function call.  Regex isn&#39;t evil (I, for one, love it), so unless there is another single-function technique, I opt for regex every time.\nThat said, the only non-regex way (that isn&#39;t terribly convoluted) that I found is as @rid commented with .\n\n has the benefit of being more concise, arguably easier to read, and will not cause headaches if  your project needs to honor multi-byte characters in the future.\n does not generate a temporary array/variable from which the correct value must be extracted, and is very likely to outperform any  call but not to a noticeable/valuable degree.\n\nNotice that in my demo, the &quot;character mask&quot; seems to accept not more than one range of characters.  It would be handy if I could specify , but I was unable to get that to work.\nCode: (Demo)\n\nOutput:\n\nUltimately, I&#39;d go for  because I have used it thousands of times in my career as a php dev.  Conversely, I&#39;ve probably used  a maximum of 1 time in my career (outside of playing around on Stack Overflow) -- so there is a lack of familiarity / intuitive-ness.\n",
            "excerpt": "<span class=\"highlight\">Regex</span> isn&#39;t <span class=\"highlight\">evil</span> (I, for one, love it), so unless there is another single-function technique, I opt for <span class=\"highlight\">regex</span> every time. &hellip; That said, the only non-<span class=\"highlight\">regex</span> way (that isn&#39;t terribly convoluted) that I found is as @rid commented with strcspn(). &hellip; ",
            "title": "Get the first letter/number of string that is not a special character"
        },
        {
            "tags": [
                "java",
                "date",
                "dateformatter"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 65018928,
            "is_answered": false,
            "question_id": 65017630,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1606381554,
            "creation_date": 1606381554,
            "body": "After looking at the documentation, there seems to be no way to see which of the optional formats succeeded. So the easy way out is to build a collection of formatters to try, and to use them in order until one succeeds. However, this is ugly: you are using exceptions for flow-control\n\nAn existing question on SO deals with this problem. My suggested answer goes along the lines of one of its answers.\nA cleaner option may be to use your formats both as regular expressions (to only examine likely candidates) and as actual date formats (to parse only the good candidates). This comes at a cost in readability, and will still throw exceptions when parsing ambiguous formats, because the format-to-regex code is very simplistic:\n\nThe initial code could now be written as:\n\nBefore complicating this further, I would probably just go with ugly exceptions-as-control-flow (1st code snippet) as a lesser evil to re-implementing a time-parsing library.\ndisclaimer: above code is un-tested and may not compile and/or perform as expected\n",
            "excerpt": "This comes at a cost in readability, and will still throw exceptions when parsing ambiguous formats, because the format-to-<span class=\"highlight\">regex</span> code is very simplistic:\nenum FormatCandidate {\n    YMD(&quot;yyyyMMdd&quot;), &hellip; saying that date does not match this particular\n    // expected output\n}\n\nBefore complicating this further, I would probably just go with ugly exceptions-as-control-flow (1st code snippet) as a lesser <span class=\"highlight\">evil</span> &hellip; ",
            "title": "How to get date pattern for a date in Java"
        },
        {
            "tags": [
                "ruby",
                "string",
                "methods",
                "startswith"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 64953628,
            "is_answered": false,
            "question_id": 64951639,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1606044583,
            "creation_date": 1606044583,
            "body": "As a general rule, you should never ever blindly execute inputs from untrusted sources.\nInterpolating untrusted input into a  is not quite as bad as interpolating it into, say, , because the worst thing an attacker can do with a  is to construct an Evil Regex to conduct a Regular expression Denial of Service (ReDoS) attack (see also the section on Performance in the  documentation), whereas with , they could execute arbitrary code, including but not limited to, deleting the entire file system, scanning memory for unencrypted passwords / credit card information / PII and exfiltrate that via the network, etc.\nHowever, it is still a bad idea. For example, when I say &quot;the worst thing that happen is a ReDoS&quot;, that assumes that there are no bugs in the  implementation (Onigmo in the case of YARV, Joni in the case of JRuby and TruffleRuby, etc.) Ruby&#39;s s are quite powerful and thus Onigmo, Joni and co. are large and complex pieces of code, and may very well have their own security holes that could be used by a specially crafted .\nYou should properly sanitize and escape the user input before constructing the . Thankfully, the Ruby core library already contains a method which does exactly that: . So, you could do something like this:\n\nThe reason why your attempt at using  didn&#39;t work, is that  is for representing a  the same way you would have to write it as a  literal, i.e. it is escaping  metacharacters, not  metacharacters and it is including the quote characters around the  that you need to have it recognized as a  literal. You can easily see that when you simply try it out:\n\nSo, that means that \n\nincludes the quotes (which you don&#39;t want),\nescapes characters that don&#39;t need escaping in  just because they need escaping in s (e.g.  or ), and\ndoesn&#39;t escape characters that don&#39;t need escaping in s (e.g. , , , , , , ).\n\n",
            "excerpt": "Interpolating untrusted input into a Regexp is not quite as bad as interpolating it into, say, Kernel#eval, because the worst thing an attacker can do with a Regexp is to construct an <span class=\"highlight\">Evil</span> <span class=\"highlight\">Regex</span> to conduct &hellip; ",
            "title": "Get the same results from string.start_with? and string[ ]"
        },
        {
            "tags": [
                "javascript",
                "greasemonkey"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 9699686,
            "is_answered": false,
            "question_id": 7120626,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1605975876,
            "creation_date": 1331719298,
            "body": "This works splendidly with the new Greasemonkey @run-at directive!\nHere is an example userscript:\nhttp://userscripts.org/scripts/show/125936\nImportant quote:\n\nThis user script will run right at the document beginning, as for\nScriptish, it even runs before getting any HTTP response ( which is\nexcellent for redirecting ).\n\nIt shows how to remove malicious JS from a website.\nHere is the full script example:\n\n",
            "excerpt": "=document.getElementsByTagName(&quot;script&quot;)[0]){\n            changed++;\n            e.stopPropagation();\n            e.preventDefault();\n            //todo\n        }\n        //tips: you could also run a <span class=\"highlight\">regex</span> &hellip; * only without the <span class=\"highlight\">evil</span> thing. \n             */\n    }\n}; &hellip; ",
            "title": "Greasemonkey script that removes or blocks select JavaScripts"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 64651494,
            "is_answered": false,
            "question_id": 64650569,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1604345077,
            "creation_date": 1604342766,
            "body": "Are you sure you have to do that? If you have only a limited number of possible functions, the safest thing to do is to simply map them, and then separate the wanted function and the arguments in the variable, using an array instead. More on that later.\nIf you wanted to provide a generic means for calling functions, you could for example:\n\nI&#39;m using  here, since  is a language statement and not a function, and therefore wouldn&#39;t work like this. If you had to echo here, you&#39;d have to make your own echo wrapper function, like , and call that instead.\nOr, for more readable code, you could list the array as:\n\nIf you needed multiple arguments, you could use this structure:\n\nWhere the arguments listed in the arguments array, unpacked with the splat operator, are in the same order as the target function&#39;s arguments.\nThere are of course only a limited number of useful functions that will directly output anything. Therefore, in the above example we capture the result from  instead and then echo; this simply to illustrate the basic use of variable functions and arguments.\nThis approach will however provide unhinged access to any function in your system, and as such shouldn&#39;t be used on anything but data/calls from trusted sources (you). Allowing users to provide any commands will open up your system to a world of mischief and misery.\nTherefore, my initial recommendation of providing a map of functions. You could:\n\nHave an array with a list of allowed core functions,\nHave an array with a list of your custom wrapper functions, or\nCheck for valid wrapper functions named with a prefix\n\nYou could for example implement wrappers as follows:\n\nThis would give you control over what&#39;s executed, and also whether values are returned or output, etc. pre/post-process. And then iterate your variable commands as follows:\n\nFor an additional layer of insulation, create a class with your custom calls as its methods, instead of polluting the global space with more functions. Ciykd use a public router method that handles no-match cases; calling e.g. , where  returns the  methods.\nI often do something like this when I need to map user requests to class public methods that return output; named e.g. ,  etc. and  for a fallback for unmatched requests. Handy for quick prototyping, where  =&gt; .\nIf you&#39;re stuck with receiving a string command (why?), you can use regex to parse it into something you can pass to functions. Or, if you absolutely trust the data,  isn&#39;t inherently and categorically evil, especially where a work-around would make for a more complex but equally wide back-door to your system. It&#39;s just not very elegant and smells of sloppy design.\n",
            "excerpt": ", you can use <span class=\"highlight\">regex</span> to parse it into something you can pass to functions. &hellip; Or, if you absolutely trust the data, eval isn&#39;t inherently and categorically <span class=\"highlight\">evil</span>, especially where a work-around would make for a more complex but equally wide back-door to your system. &hellip; ",
            "title": "Eval alternative to run script from string"
        },
        {
            "tags": [
                "python",
                "regex",
                "pattern-matching",
                "mismatch",
                "fail2ban"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 64324258,
            "is_answered": false,
            "question_id": 62577231,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1602531082,
            "creation_date": 1602531082,
            "body": "According to https://fail2ban.readthedocs.io/en/latest/filters.html#regular-expressions\n\nThat&#39;s it !\n",
            "excerpt": ".&gt; error 1.2.3.4 is <span class=\"highlight\">evil</span>’ then you need to match the &lt; at the start so <span class=\"highlight\">regex</span> should be similar to ‘^&lt;&gt; &lt;HOST&gt; is <span class=\"highlight\">evil</span>$’ using &lt;HOST&gt; where the IP/domain name appears in the log line.\n[...] &hellip; ",
            "title": "fail2ban pattern for non-digit character matches input with digit"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "security",
                "denial-of-service",
                "automaton"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 34042556,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1597852429,
            "creation_date": 1449058629,
            "body": "Is there an algorithm to determine whether a given JavaScript regex is vulnerable to ReDoS? The algorithm doesn&#39;t have to be perfect - some false positives and false negatives are acceptable. (I&#39;m specifically interested in ECMA-262 regexes.)\n",
            "excerpt": "Is there an algorithm to determine whether a given JavaScript <span class=\"highlight\">regex</span> is vulnerable to ReDoS? The algorithm doesn&#39;t have to be perfect - some false positives and false negatives are acceptable. &hellip; ",
            "title": "How can I programmatically identify evil regexes?"
        },
        {
            "tags": [
                "java",
                "regex",
                "multithreading"
            ],
            "question_score": 22,
            "is_accepted": false,
            "answer_id": 63458755,
            "is_answered": false,
            "question_id": 910740,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1597698915,
            "creation_date": 1597698915,
            "body": "What about checking the user-submitted regex for &quot;evil&quot; patterns prior to execution using one or more regex patterns (this could be in to form of a method called prior to conditional execution of the regex):\nThis regex:\n\nWill match:\n\nThis Regex:\n\nWill match:\n\nThis Regex:\n\nWill match:\n\nI may be a bit naive wrt Regex and Regex DoS, but I can&#39;t help but think that a little pre-screening for known &quot;evil&quot; patterns would go a long way toward preventing issues at execution time, especially if the regex in question is an input provided by an end user.  The patterns above are likely not refined enough, since I am far from an expert on regex.  It is just food for thought, since everything else I have found out there seems to indicate it can&#39;t be done, and focuses on either putting a time-out on the regex engine, or limiting the number of iterations it is allowed to execute.\n",
            "excerpt": "What about checking the user-submitted <span class=\"highlight\">regex</span> for &quot;<span class=\"highlight\">evil</span>&quot; patterns prior to execution using one or more <span class=\"highlight\">regex</span> patterns (this could be in to form of a method called prior to conditional execution of the <span class=\"highlight\">regex</span> &hellip; *a){x} for x \\&gt; 10\n\nI may be a bit naive wrt <span class=\"highlight\">Regex</span> and <span class=\"highlight\">Regex</span> DoS, but I can&#39;t help but think that a little pre-screening for known &quot;<span class=\"highlight\">evil</span>&quot; patterns would go a long way toward preventing issues at execution &hellip; ",
            "title": "Cancelling a long running regex match?"
        },
        {
            "tags": [
                "python",
                "python-3.x",
                "python-typing",
                "pep585"
            ],
            "question_score": 18,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 62871524,
            "item_type": "question",
            "score": 18,
            "last_activity_date": 1594748703,
            "creation_date": 1594627137,
            "body": "PEP 585 -- Type Hinting Generics In Standard Collections claims usability under both Python 3.7 and 3.8 with a standard  preamble. Notably:\n\nFor use cases restricted to type annotations, Python files with the  future-import (available since Python 3.7) can parameterize standard collections, including builtins.\n\n\nStarting with Python 3.7, when  is used, function and variable annotations can parameterize standard collections directly. Example:\n\n\nWhile the above toy example does technically parse, that&#39;s about all it does. Attempting to actually use a parametrized builtin collection at runtime under either Python 3.7 or 3.8 invariably raises the dreaded  exception:\n\nNote the  statement is the standard idiom for resolving PEP 563-style postponed annotations at runtime. Don&#39;t even get me started on PEP 563.\nwho you gonna believe: me or your lying PEP?\nThis discourages the devout Pythonista in me. PEP 585 repeatedly claims that it preserves runtime usability:\n\nPreserving the generic type at runtime enables introspection of the type which can be used for API generation or runtime type checking. Such usage is already present in the wild.\n\n\nJust like with the  module today, the parameterized generic types listed in the previous section all preserve their type parameters at runtime:\n\n\nOf course, none of the above works under Python 3.7 or 3.8 – regardless of whether  is enabled or not:\n\nSo PEP 585 blatantly breaks the wild and all existing attempts to introspect generic types at runtime – especially from runtime type checkers. The entire &quot;Parameters to generics are available at runtime&quot; section is a charade.\nAm I missing something painfully obvious or are parametrized builtin collections the poison pill they superficially appear to be? Since evaluating these collections at runtime under Python 3.7 and 3.8 unconditionally raises exceptions, they&#39;re unusable at runtime – rendering them not simply useless but directly harmful for the widespread use case of type introspection and especially runtime type checking.\nbetween a rock and a hard PEP\nAny codebase type-hinting with parametrized builtin collections will be fundamentally incompatible with runtime type checkers under Python 3.7 and 3.8. Codebases preferring runtime to static type checking while preserving backward compatibility with Python &lt; 3.9 (which has yet to even be officially released as of this writing) thus have no choice but to avoid parametrized builtin collections entirely.\nExcept that too is infeasible. Why? Because PEP 585 deprecates the entire hierarchy of  pseudo-containers:\n\nImporting those [e.g., , , ] from  is deprecated. Due to PEP 563 and the intention to minimize the runtime impact of , this deprecation will not generate . Instead, type checkers may warn about such deprecated usage when the target version of the checked program is signalled to be Python 3.9 or newer. It&#39;s recommended to allow for those warnings to be silenced on a project-wide basis.\n\n\nThe deprecated functionality will be removed from the  module in the first Python version released 5 years after the release of Python 3.9.0.\n\nConsider , for example. By 2025 (or shortly thereafter),  and thus  goes away. But  isn&#39;t safely parametrizable under Python 3.7 and 3.8, because doing so renders your project incompatible with anything that introspects types. So  isn&#39;t a viable option, either.\nSo there are no forward- and backward-compatible options. Instead, either:\n\nProhibit type introspection (and thus runtime type checking) entirely by just preferring builtin containers (e.g., ) to  pseudo-containers (e.g., ) or...\nSupport type introspection (and thus runtime type checking) by either:\n\nPreferring  pseudo-containers to builtin containers until 2025. At that time, both the project in question and all downstream projects of that project will need to be refactored as follows:\n\nDrop Python 3.7 and 3.8 support.\nReplace all  pseudo-containers with builtin containers.\n\n\nImmediately dropping Python 3.7 and 3.8 support by preferring builtin containers to  pseudo-containers. This has the distasteful disadvantage of requiring a currently unstable Python interpreter, but... that&#39;s technically an option. Somehow.\n\n\n\nIn 2020, there are no good options – only a spectrum of increasingly horrifying lessers of several malignant evils. One would hope that PEP authors would actually test their implementations at runtime. Yet, here we are, adrift without a paddle in a steaming cesspit of theorycrafted anti-APIs. Welcome to Python.\nbut that&#39;s not all\nThere is technically a third way. It&#39;s even more distasteful – but it should technically work. One awful theorycrafting deserves another, I always say!\nSince PEP 563-driven postponed annotations are merely strings, type introspection could cleverly run a regex-based replacement on each type being introspected. For each type that is a postponed annotation, globally replace each substring referencing a parametrized builtin container (e.g., ) in that annotation string with the corresponding substring referencing a parametrized  pseudo-container (e.g., ).\nThe result? A Python 3.7- and 3.8-compatible postponed annotation string safely evaluatable until 2025, at which point that internal replacement (and Python 3.7 and 3.8 support) could just be quietly dropped.\nThat&#39;s a totally cray-cray ludicrous speed kludge for the stars, but... that would probably work. The core issue, of course, is that one shouldn&#39;t need insane hackery just to comply with core official PEPs. But there&#39;s an even deeper underlying cultural issue underneath that technical issue. No one – neither the author of PEP 585 nor any of the commentators reviewing PEP 585 – actually tested their new hypothetical proposed functionality before deprecating the existing well-tested functionality that actually worked.\nCore official PEPs should just work out of the box. Increasingly, they don&#39;t. And that should concern everyone.\n",
            "excerpt": "Since PEP 563-driven postponed annotations are merely strings, type introspection could cleverly run a <span class=\"highlight\">regex</span>-based replacement on each type being introspected. &hellip; ",
            "title": "Is PEP 585 unusable at runtime under Python 3.7 and 3.8?"
        },
        {
            "tags": [
                "java",
                "double"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 62242174,
            "is_answered": false,
            "question_id": 62240868,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1591515619,
            "creation_date": 1591514948,
            "body": "I assume that &quot;overflow&quot; is talking about a number that is too large to represent.\n\nIf you call  on a &quot;really large number&quot;, you will actually get an INF value ... not an exception1.  So the simple solution2 to numbers that overflow is to use  to test the result of calling .  \n\nIt will be more efficient AND less code to do the conversion and test the result that to (try to) check before doing the test.\n\n\n\n1 - I checked the Java 11 source code.  Look at the code for .  The comments are kind of amusing.\n\n2 - If you are a graduate of the &quot;exceptions are evil&quot; school of thinking, you could use a regex to check the syntax of the string before calling .  My opinion is that it is unnecessary.  Just handle the exception.\n",
            "excerpt": "The comments are kind of amusing.\n\n2 - If you are a graduate of the &quot;exceptions are <span class=\"highlight\">evil</span>&quot; school of thinking, you could use a <span class=\"highlight\">regex</span> to check the syntax of the string before calling parseDouble. &hellip; ",
            "title": "Java Parse String to Double Overflow Check"
        },
        {
            "tags": [
                "regex",
                "apache",
                "nginx",
                "nginx-reverse-proxy"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 62199241,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1591305525,
            "creation_date": 1591286915,
            "body": "guys,\n\nI&#39;m in the process of migrating an application using a front Apache reverse-proxy to a NGinx reverse proxy.\n\nI&#39;m trying to find the right way to convert this rule :\n\n\n\nFrom my understanding, it means &quot;If the requested file name starts with /web, but doesn&#39;t contain the string &#39;-staging/&#39;, then redirect to the same URI without the /web, using a 307 HTTP redirection.\n\nI&#39;ve been trying using locations to get this, then regex, (trying to prevent using evil &quot;if&quot;), but no way, it&#39;s beyond my knowledge.\n\nCould someone help me to figure how to get this properly (the website will have heavy traffic, so, looking for something optimized), please ? Thank you in advance.\n",
            "excerpt": "I&#39;ve been trying using locations to get this, then <span class=\"highlight\">regex</span>, (trying to prevent using <span class=\"highlight\">evil</span> &quot;if&quot;), but no way, it&#39;s beyond my knowledge. &hellip; ",
            "title": "NGinx - Right way to rewrite URI matching a string and not the second"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 6,
            "is_accepted": true,
            "answer_id": 37734685,
            "is_answered": false,
            "question_id": 37734164,
            "item_type": "answer",
            "score": 10,
            "last_activity_date": 1589814973,
            "creation_date": 1465500654,
            "body": " is not a back reference in Java&#39;s regexes, nor in any other flavor I can think of. You only use  when you are replacing something:\n\n\n\nThere is some misinformation about what a back reference is, including the very place I got that snippet from: simple java regex with backreference does not work.\n\n\n\nJava modeled its regex syntax after other existing flavors where the  was already a meta character. It anchors to the end of the string (or line in multi-line mode).\n\nSimilarly, Java uses  for back references. Because regexes are strings, it must be escaped: .\n\nFrom a lexical/syntactic standpoint it is true that  could be used unambiguously (as a bonus it would prevent the need for the &quot;evil escaped escape&quot; when using back references). \n\nTo match a  that comes after the end of a line the regex would need to be :\n\n\n\nIt just makes more sense to use a familiar syntax instead of changing the rules, most of which came from Perl.\n\nThe first version of Perl came out in 1987, which is much earlier than Java, which was released in beta in 1995. \n\nI dug up the man pages for Perl 1, which say:\n\n\n  The bracketing construct  may also be used, in which case  matches the &#39;th substring. (Outside of the pattern, always use  instead of  in front of the digit. The scope of  (and ,  and ) extends to the end of the enclosing BLOCK or eval string, or to the next pattern match with subexpressions. The  notation sometimes works outside the current pattern, but should not be relied upon.) You may have as many parentheses as you wish. If you have more than 9 substrings, the variables , , ... refer to the corresponding substring. Within the pattern, , , etc. refer back to substrings if there have been at least that many left parens before the backreference. Otherwise (for backward compatibilty)  is the same as , a backspace, and  the same as , a tab. And so on. ( through  are always backreferences.)\n\n",
            "excerpt": "Java modeled its <span class=\"highlight\">regex</span> syntax after other existing flavors where the $ was already a meta character. It anchors to the end of the string (or line in multi-line mode). &hellip; From a lexical/syntactic standpoint it is true that $1 could be used unambiguously (as a bonus it would prevent the need for the &quot;<span class=\"highlight\">evil</span> escaped escape&quot; when using back references). &hellip; ",
            "title": "Regex backreferences in Java"
        },
        {
            "tags": [
                "php",
                "string",
                "matching"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 61282294,
            "is_answered": false,
            "question_id": 61282060,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1587165991,
            "creation_date": 1587165991,
            "body": "This sounds more like an algorithms question than a PHP question specifically.  Take a look at What is the fastest substring search algorithm?\n\nWell you can transform this into something like an O(n log n) algorithm, but it depends on the implementation specifics of :\n    \n\n\n\nHere each substring is examined by  exactly once.  Probably a better solution is to compose these strings into a series of regexes.  Internally, the regex engine is able to scan text very efficiently, typically scanning each character only one time:\n\nex.:\n\n\n\nFor your purposes the practical solution is very much dependent upon how many rigs you&#39;ve got an how many substrings per rig.  I suspect that unless you&#39;re dealing with tens of thousands of rigs or unless performance is a critical aspect of this application, a naive O(n^2) solution would probably suffice.  (Remember that premature optimization is the root of all evil!)  A simple benchmark would bear this out.\n\nAn even-better solution -- and potentially faster -- would be to set up an elasticsearch instance, but once again that may be too much effort to go to when a naive approach would suffice in a fraction of the implementation time.\n",
            "excerpt": "Internally, the <span class=\"highlight\">regex</span> engine is able to scan text very efficiently, typically scanning each character only one time:\n\nex.:\n\n&lt;? &hellip; (Remember that premature optimization is the root of all <span class=\"highlight\">evil</span>!)  A simple benchmark would bear this out. &hellip; ",
            "title": "Does a string contain any of a list of substrings in PHP?"
        },
        {
            "tags": [
                "php",
                "regex",
                "bash",
                "awk",
                "sed"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 60476607,
            "is_answered": false,
            "question_id": 23706113,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1583116553,
            "creation_date": 1583076051,
            "body": "Goal:\n\nRemove  from the beginning of every PHP file&#39;s first line using the stream editor, sed.\n\nDiscussion:\n\nThe stream editor has implicit and explicit line addressing. If you omit line addresses (numeric, regular expressions, or a combination of both), then the entire file is processed.\n\nPoint 1:\n\nIf you only want to target the first line, then you should specify it explicitly.\n\n\n\nHowever, since you are trying to rid your files of &quot;evil&quot;, you probably want to remove &quot;evil&quot; anywhere (globally) it is found on the first line.\n\n\n\nPoint 2:\n\nThe &quot;evil&quot; you are dealing with uses non-alpha numeric characters, so you must be wary of using it as input in various contexts. In order to use a regular expression to search for regular expression meta-characters (?, +, *, [, ], ., et al), you must either:\n\n\nEscape the meta-characters with backslashes to avoid pattern\ncollisions (Example: ), or\nChange the regular expression pattern delimiter to avoid a pattern collision, or\nBoth (This is what you should do in this case).\n\n\nIn sed, you can change the regex pattern delimiter by escaping a character before your pattern begins.\n\nExample:\n\n\n\nPoint 3:\n\nYou can search for strings as a  with regular expressions in sed! By definition, the most basic pattern is a sequence of characters. However, you must adhere to point number two above and escape any regex meta-characters, or the default pattern delimiter, /, if necessary.\n\nSolution 1:\n\nYour evil, I mean regex pattern, has regex meta-characters and the default pattern delimiter embedded in it!\n\n\n\nI would prescribe the following. Notice that I am now using double quotes because I want the shell to do variable interpolation before executing . Also, because I changed the regex pattern delimiter to , I did not need to escape the two forward slashes associated with that micro block quote. :-)\n\n\n\nNote: I will go out on a limb and say that anyone that puts white spaces in their file names should consider using the underscore, , instead.\n\nMr. @Ed Morton above is trying to warn against the possibility of word splitting, but  should prevent it if you pass your list into a function like above.\n\nHidden, non-printing characters in file names can be hard to deal with, but this specific solution should work for your problem to a high degree of certainty (99.9999%).\n\nSolution 2:\n\nMore generically:\n\n\n\nSolution 3:\n\nIn the event that it would be better to delete the first line of all the files ...\n\n\n\nFinal Note:\n\nBe sure to execute this solution with enough permissions, or else the  command will return messages to  in the following format.\n\n\n",
            "excerpt": "sed -i &#39;1s/&lt;pattern&gt;/&lt;substitution&gt;/&#39; &lt;filename&gt;\n\n\nHowever, since you are trying to rid your files of &quot;<span class=\"highlight\">evil</span>&quot;, you probably want to remove &quot;<span class=\"highlight\">evil</span>&quot; anywhere (globally) it is found on the first line. &hellip; Solution 1:\n\nYour <span class=\"highlight\">evil</span>, I mean <span class=\"highlight\">regex</span> pattern, has <span class=\"highlight\">regex</span> meta-characters and the default pattern delimiter embedded in it!\n\n&lt;?php /**/ eval(base64_decode(&quot;aWYoZnVuY3Rpb25&quot;));? &hellip; ",
            "title": "sed causing bash script to hang"
        },
        {
            "tags": [
                "python",
                "regex",
                "python-3.x"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 59669445,
            "is_answered": false,
            "question_id": 59668935,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1579918713,
            "creation_date": 1578591452,
            "body": "Your pattern is affected by catastrophic backtracking.\n\nHere is an alternative pattern that should work with your input:\n\n\n\nThis assumes that there must always be at least one non-word character separating the words (otherwise it would just match one long, unbroken word).\n\n(See also: How can I recognize an evil regex?)\n",
            "excerpt": "Here is an alternative pattern that should work with your input:\n\n<span class=\"highlight\">regex</span> = r&quot;preceding[^A-Za-z0-9\\n\\r]+(?:\\w+[^A-Za-z0-9\\n\\r]+)+? &hellip; (See also: How can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>?) &hellip; ",
            "title": "Python RegEx findall not responding"
        },
        {
            "tags": [
                "r"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 59699127,
            "is_answered": false,
            "question_id": 59699094,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1578782303,
            "creation_date": 1578781030,
            "body": "\n\nSince you want to preserve the single , you can use any of the following for more-specific patterns:\n\n\n\n(The exception for  in the second example is not strictly needed here, but provided as an example.)\n\nThe use of a &quot;look-ahead&quot; ( is used because you stated the requirement for a space before and after; if you use a pattern of , then it will miss many of the single letters (due to recursive replacements). If you relax this a little, then you can use word-boundaries, as in\n\n\n\n(While using perl-style regexes can technically have a performance penalty, I suspect that that really only matters if you&#39;re doing a lot and need to improve performance as much as you can. Not strictly required, and early optimization is &quot;the root of all evil&quot; - Donald Knuth)\n\nNote: In this last pattern, I&#39;m also excepting a lower-case  in addition to the upper-case ; if you are confident that you will never see an otherwise-valid , then you can adjust your pattern to use  instead. (Thanks to @jay.sf for highlighting this assumption.)\n",
            "excerpt": "Not strictly required, and early optimization is &quot;the root of all <span class=\"highlight\">evil</span>&quot; - Donald Knuth)\n\nNote: In this last pattern, I&#39;m also excepting a lower-case i in addition to the upper-case I; if you are confident &hellip; ",
            "title": "Remove single alphabetic letters strings"
        },
        {
            "tags": [
                "regex",
                "html-parsing"
            ],
            "question_score": 236,
            "is_accepted": false,
            "answer_id": 44577760,
            "is_answered": false,
            "question_id": 590747,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1576560760,
            "creation_date": 1497564407,
            "body": "HTML/XML is divided into markup and content. \nRegex is only useful doing a lexical tag parse.\nI guess you could deduce the content.\nIt would be a good choice for a SAX parser.\nTags and content could be delivered to a user\ndefined function where nesting/closure of elements\ncan be kept track of.  \n\nAs far as just parsing the tags, it can be done with\nregex and used to strip tags from a document.\n\nOver years of testing, I&#39;ve found the secret to the\nway browsers parse tags, both well and ill formed.  \n\nThe normal elements are parsed with this form:\n\nThe core of these tags use this regex\n\n\n\nYou&#39;ll notice this  as one of the alternations.\nThis will match unbalanced quotes from ill-formed tags.  \n\nIt is also, the single most root of all evil to regular expressions.\nThe way it&#39;s used will trigger a bump-along to satisfy it&#39;s greedy, must-match\nquantified container.  \n\nIf used passively, there is never a problem\nBut, if you force something to match by interspersing it with\na wanted attribute/value pair, and don&#39;t provide adequate protection\nfrom backtracking, it&#39;s an out of control nightmare.\n\nThis is the general form for just plain old tags.\nNotice the   representing the tag name?\nIn reality, the legal characters representing the tag name\nare an incredible list of Unicode characters.  \n\n\n\n\n\nMoving on, we also see that you just can&#39;t search for a specific tag\nwithout parsing ALL tags.\nI mean you could, but it would have to use a combination of\nverbs like (*SKIP)(*FAIL) but still all tags have to be parsed.\n\nThe reason is that tag syntax may be hidden inside other tags, etc.\n\nSo, to passively parse all tags, a regex is needed like the one below.\nThis particular one matches invisible content as well.\n\nAs new HTML or xml or any other develop new constructs, just add it as\none of the alternations. \n\n\n\nWeb page note - I&#39;ve never seen a web page (or xhtml/xml) that this\nhad trouble with. If you find one, let me know.  \n\nPerformance note - It&#39;s quick. This is the fastest tag parser I&#39;ve seen\n(there may be faster, who knows).\nI have several specific versions.  It is also excellent as scraper\n(if you&#39;re the hands-on type).\n\n\n\nComplete raw regex  \n\n  \n\nFormatted look  \n\n\n",
            "excerpt": "As far as just parsing the tags, it can be done with\n<span class=\"highlight\">regex</span> and used to strip tags from a document. &hellip; It is also, the single most root of all <span class=\"highlight\">evil</span> to regular expressions.\nThe way it&#39;s used will trigger a bump-along to satisfy it&#39;s greedy, must-match\nquantified container. &hellip; ",
            "title": "Using regular expressions to parse HTML: why not?"
        },
        {
            "tags": [
                "c++",
                "boost",
                "boost-spirit"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 59200636,
            "is_answered": false,
            "question_id": 59198525,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1575567901,
            "creation_date": 1575567901,
            "body": "The simplest without semantic actions&#185; would be to parse into an AST which you then interpret.\n\nThe more tedious approach would be to use semantic actions to build the result. (Keep in mind this gets problematic with backtracking grammars.)\n\nSimilar answers I have made:\n\n\nParsing comma-separated list of ranges and numbers with semantic actions\nA regex-based approach for range-expressions here method for expand a-z to abc...xyz form\nA competing version that uses C for performance method for expand a-z to abc...xyz form\n\n\nWithout further ado:\n\nUsing an AST Representation\n\nAn example AST:\n\n\n\n\n  The  is a good place where we can do logic asserts like &quot;the number of periods isn&#39;t zero&quot; or &quot;if the number of periods is 1, start and end must coincide&quot;.\n\n\nNow, for our end-result we want to have a translation to just-a-vector-of-V:\n\n\n\nNow that we have the basics down, let&#39;s parse and test:\n\nParsing\n\nFirst, let&#39;s adapt the AST types:\n\n\n\n\n  Note: the &quot;natural grammar order&quot; of the adapted properties makes attribute propagation painless without semantic actions\n\n\nNow let&#39;s roll a grammar:\n\n\n\n\n  Note:\n  \n  \n   enables rule debugging\n  The order of  is important, since  also parses individual numbers (so it would prevent  from being parsed in time.\n  \n\n\nA simple utility to invoke the parser and also  the intermediate representation:\n\n\n\nTesting\n\nThe proof of the pudding is in the eating:\n\nLive On Coliru\n\n\n\nPrinting\n\n\n\nUsing Semantic Actions Instead\n\nThis might be more efficient and I found I actually prefer the expressiveness of this approach.\n\nIt might not scale well as the grammar grows more complicated though.\n\nHere we &quot;invert&quot; the flow:\n\n\n\nHere  and  in the semantic actions are Lazy Actors that basically perform the same operation as  did in the AST-based appraoch, but\n\n\non the fly\nthe first operand is implicit (it is the last value already at the back of the vector)\n\n\nThis makes for a few extra checks (we don&#39;t want UB when the user passes a string that starts with  or ):\n\n\n\nTo avoid tedious  in the semantic actions, let&#39;s adapt as Phoenix Functions:\n\n\n\nParsing\n\nThe  helper became simpler because we have no intermediate representation:\n\n\n\nTesting\n\nAgain, the proof of the pudding is in the eating. The test program with unmodified :\n\nLive On Coliru\n\n\n\nPrinting the same as before:\n\n\n\n\n\n&#185; Boost Spirit: &quot;Semantic actions are evil&quot;?\n",
            "excerpt": "Similar answers I have made:\n\n\nParsing comma-separated list of ranges and numbers with semantic actions\nA <span class=\"highlight\">regex</span>-based approach for range-expressions here method for expand a-z to abc...xyz form\nA competing &hellip; the same as before:\n\n&quot;1 1.5 2 2.5 3 FOR 4 3.5&quot; -&gt; PASSED {  {1, 1.5, 2, 2.5, 3, 3, 3, 3, 3.5, }\n&quot;1 2 3 4 RAMP 3 6 7 8&quot; -&gt; PASSED {  {1, 2, 3, 4, 5, 6, 7, 8, }\n\n\n\n\n&#185; Boost Spirit: &quot;Semantic actions are <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Boost spirit: how to use custom logic when parsing a list of doubles with text specifiers"
        },
        {
            "tags": [
                "regex",
                "bash",
                "scripting",
                "escaping"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 36345272,
            "is_answered": false,
            "question_id": 33744733,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1572984201,
            "creation_date": 1459465280,
            "body": "Just loop until you&#39;ve found a one line fortune:\n\n\n\nThe  loop will keep going until  exits with a nonzero value, which only happens when we&#39;ve found our one-liner.  The  code reads the whole fortune and then, at the end, checks to see if the number of records (, the line count) is one.  If so, print the last (the only) line and exit the  loop.\n\nI assume you had used  as an effort to limit the size, so I expanded it to 80.  Obviously, you can remove it, return it to 65, or change it to another value as you see fit.\n\n\n\nHere&#39;s a variant that accepts one-line quotes (with a second line of attribution) and prints on one line:\n\n\n\nThis adds two conditionals.  First, we track the content of line 1.  Second, if line two has  as its first whitespace-delimited content, decrement the line count and replace the leading whitespace with a single space (altering  causes  to be respaced), and prepend the previous line so the final clause only sees one line.\n\nSo e.g. this quote:\n\n\n\nis now accepted after becoming:\n\n\n\n\n\nTo exclude  (a noble pursuit &#128515;):\n\n\n\nAll I did was say there is no index for &quot;Evil&quot; in the final condition. You could use an extended regex instead with  although note that  regexes do not allow numeric quantifiers (so  is fine but  and  won&#39;t work). If you want case-insensitive, you have to do .\n",
            "excerpt": "index($0, &quot;<span class=\"highlight\">Evil</span>&quot;)) { print; exit 1 } }\n&#39;; do true; done\n\n\nAll I did was say there is no index for &quot;<span class=\"highlight\">Evil</span>&quot; in the final condition. You could use an extended <span class=\"highlight\">regex</span> instead with (NR == 1 &amp;&amp; ! &hellip; /<span class=\"highlight\">Evil</span>/) although note that awk regexes do not allow numeric quantifiers (so /a+/ is fine but /a{1,}/ and /a{1,9}/ won&#39;t work). If you want case-insensitive, you have to do tolower($0) !~ /<span class=\"highlight\">evil</span>/. &hellip; ",
            "title": "Fortune with -m exclude string"
        },
        {
            "tags": [
                "regex",
                "html-parsing"
            ],
            "question_score": 201,
            "is_accepted": false,
            "answer_id": 4234491,
            "is_answered": false,
            "question_id": 4231382,
            "item_type": "answer",
            "score": 726,
            "last_activity_date": 1571920382,
            "creation_date": 1290280762,
            "body": "Oh Yes You Can Use Regexes to Parse HTML!\nFor the task you are attempting, regexes are perfectly fine!\nIt is true that most people underestimate the difficulty of parsing HTML with regular expressions and therefore do so poorly.\nBut this is not some fundamental flaw related to computational theory. That silliness is parroted a lot around here, but don’t you believe them.\nSo while it certainly can be done (this posting serves as an existence proof of this incontrovertible fact), that doesn’t mean it&#160;should&#160;be.\nYou must decide for yourself whether you’re up to the task of writing what amounts to a dedicated, special-purpose HTML parser out of regexes. Most people are not.\nBut I am. ☻\n\nGeneral Regex-Based HTML Parsing Solutions\nFirst I’ll show how easy it is to parse arbitrary HTML with regexes. The full program’s at the end of this posting, but the heart of the parser is:\n\nSee how easy that is to read?\nAs written, it identifies each piece of HTML and tells  where it found that piece. You could easily modify it to do whatever else you want with any given type of piece, or for more particular types than these.\nI have no failing test cases (left :): I’ve successfully run this code on more than 100,000 HTML files — every single one I could quickly and easily get my hands on. Beyond those, I’ve also run it on files specifically constructed to break na&#239;ve parsers.\nThis is not a na&#239;ve parser.\nOh, I’m sure it isn’t perfect, but I haven’t managed to break it yet.  I figure that even if something did, the fix would be easy to fit in because of the program’s clear structure. Even regex-heavy programs should have stucture.\nNow that that’s out of the way, let me address the OP’s question.\nDemo of Solving the OP’s Task Using Regexes\nThe little  program I include below produces the following output, so that you can see that parsing HTML with regexes works just fine for what you wish to do:\n\nParse Input Tags, See No Evil Input\nHere’s the source for the program that produced the output above.\n\nThere you go! Nothing to it! :)\nOnly  you can judge whether your skill with regexes is up to any particular parsing task. Everyone’s level of skill is different, and every new task is different. For jobs where you have a well-defined input set, regexes are obviously the right choice, because it is trivial to put some together when you have a restricted subset of HTML to deal with. Even regex beginners should be handle those jobs with regexes.  Anything else is overkill.\nHowever, once the HTML starts becoming less nailed down, once it starts to ramify in ways you cannot predict but which are perfectly legal, once you have to match more different sorts of things or with more complex dependencies, you will eventually reach a point where you have to work harder to effect a solution that uses regexes than you would have to using a parsing class. Where that break-even point falls  depends again on your own comfort level with regexes.\nSo What Should I Do?\nI’m not going to tell you what you must do or what you cannot do.  I think that’s Wrong. I just want to present you with possibilties, open your eyes a bit. You get to choose what you want to do and how you want to do it. There are no absolutes — and nobody else knows your own situation as well as you yourself do. If something seems like it’s too much work, well, maybe it is.  Programming should be fun, you know. If it isn’t, you may be doing it wrong.\nOne can look at my  program in any number of valid ways.  One such is that you indeed can parse HTML with regular expressions. But another is that it is much, much, much harder than almost anyone ever thinks it is. This can easily lead to the conclusion that my program is a testament to what you should not do, because it really is too hard.\nI won’t disagree with that.  Certainly if everything I do in my program doesn’t make sense to you after some study, then you should not be attempting to use regexes for this kind of task. For specific HTML, regexes are great, but for generic HTML, they’re tantamount to madness. I use parsing classes all the time, especially if it’s HTML I haven’t generated myself.\nRegexes  optimal for small HTML parsing problems,  pessimal for large ones\nEven if my program is taken as  illustrative of why you should not use regexes for parsing general HTML — which is OK, because I kinda meant for it to be that ☺  — it still should be an eye-opener so more people break the terribly common and nasty, nasty habit of writing unreadable, unstructured, and unmaintainable patterns.\nPatterns do not have to be ugly, and they do not have to be hard. If you create ugly patterns, it is a reflection on you, not them.\nPhenomenally Exquisite Regex Language\nI’ve been asked to point out that my proferred solution to your problem has been written in Perl. Are you surprised? Did you not notice? Is this revelation a bombshell?\nIt is true that not all other tools and programming languages are quite as convenient, expressive, and powerful when it comes to regexes as Perl is. There’s a big spectrum out there, with some being more suitable than others.  In general, the languages that have expressed regexes as part of the core language instead of as a library are easier to work with. I’ve done nothing with regexes that you couldn’t do in, say, PCRE, although you would structure the program differently if you were using C.\nEventually other languages will be catch up with where Perl is now in terms of regexes.  I say this because back when Perl started, nobody else had anything like Perl’s regexes. Say anything you like, but this is where Perl clearly won: everybody copied Perl’s regexes albeit at varying stages of their development.  Perl pioneered almost (not quite all, but almost) everything that you have come to rely on in modern patterns today, no matter what tool or language you use.  So eventually the others will catch up.\nBut they’ll only catch up to where Perl was sometime in the past, just as it is now.  Everything advances.  In regexes if nothing else, where Perl leads, others follow. Where will Perl be once everybody else finally catches up to where Perl is now?  I have no idea, but I know we too will have moved. Probably we’ll be closer to Perl₆’s style of crafting patterns.\nIf you like that kind  of thing but would like to use it in Perl₅,  you might be interested in Damian Conway’s wonderful Regexp::Grammars module. It’s completely awesome, and makes what I’ve done here in my program seem just as primitive as mine makes the patterns that people cram together without whitespace or alphabetic identifiers.  Check it out!\n\nSimple HTML Chunker\nHere is the complete source to the parser I showed the centerpiece from at the beginning of this posting.\nI am not suggesting that you should use this over a rigorously tested parsing class. But I am tired of people pretending that nobody can parse HTML with regexes just because they can’t. You clearly can, and this program is proof of that assertion.\nSure,  it isn’t easy, but it is possible!\nAnd trying to do so is a terrible waste of time, because good parsing classes exist which you should use for this task.  The right answer to people trying to parse arbitrary HTML is not that it is impossible.  That is a facile and disingenuous answer.  The correct and honest answer is that they shouldn’t attempt it because it is too much of a bother to figure out from scratch; they should not  break their back striving to re&#239;nvent a wheel that works perfectly well.\nOn the other hand, HTML that falls within a predicable subset is ultra-easy to parse with regexes. It’s no wonder people try to use them, because for small problems, toy problems perhaps, nothing could be easier. That’s why it’s so important to distinguish the two tasks — specific vs generic — as these do not necessarily demand the same approach.\nI hope in the future here to see a more fair and honest treatment of questions about HTML and regexes.\nHere’s my HTML lexer.  It doesn’t try to do a validating parse; it just identifies the lexical elements. You might think of it more as an HTML chunker than an HTML parser. It isn’t very forgiving of broken HTML, although it makes some very small allowances in that direction.\nEven if you never parse full HTML yourself (and why should you? it’s a solved problem!), this program has lots of cool regex bits that I believe a lot of people can learn a lot from.  Enjoy!\n\n",
            "excerpt": "_V192234675_.gif&quot;\n        type =&gt; &quot;image&quot;\n\nParse Input Tags, See No <span class=\"highlight\">Evil</span> Input\nHere’s the source for the program that produced the output above.\n#! &hellip; Even <span class=\"highlight\">regex</span> beginners should be handle those jobs with regexes.  Anything else is overkill. &hellip; ",
            "title": "What to do when a regular expression pattern doesn&#39;t match anywhere in a string?"
        },
        {
            "tags": [
                "nginx"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 58299129,
            "is_answered": false,
            "question_id": 49867809,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1570606365,
            "creation_date": 1570606365,
            "body": "I was also searching how to use Nginx&#39;s  with a concatenated string. I found this question, and a bunch of other articles saying &quot;if is evil&quot;, but not offering a replacement.\n\nAnd then I ran into this question, which led me to a solution that is much more compact and elegant - especially when you need multiple  cases, so I&#39;ll post it for other searchers.\n\n\n\nBasically, this compares the first argument from the first line (the concatenated ) with first arguments from other lines ( literal,  regex case insensitive, or  by default), and assigns the second arguments from corresponding lines ( or  in our case, could be anything) to the variable passed as the second argument on the first line ().\n\nSaving a lot of extra lines of code if you need 10+ ifs\n",
            "excerpt": "I found this question, and a bunch of other articles saying &quot;if is <span class=\"highlight\">evil</span>&quot;, but not offering a replacement. &hellip; example <span class=\"highlight\">regex</span> case insensitive, or default by default), and assigns the second arguments from corresponding lines (1 or 0 in our case, could be anything) to the variable passed as the second argument on &hellip; ",
            "title": "if condition concatenation in nginx conf file"
        },
        {
            "tags": [
                "php",
                "security",
                "http-headers"
            ],
            "question_score": 408,
            "is_accepted": true,
            "answer_id": 4499749,
            "is_answered": false,
            "question_id": 4410704,
            "item_type": "answer",
            "score": 342,
            "last_activity_date": 1564068960,
            "creation_date": 1292938164,
            "body": "Sending headers earlier than the normal course may have far reaching consequences. Below are just a few of them that happened to come to my mind at the moment:\n\n\nWhile current PHP releases may have output buffering on, the actual production servers you will be deploying your code on are far more important than any development or testing machines. And they do not always tend to follow latest PHP trends immediately.\nYou may have headaches over inexplicable functionality loss. Say, you are implementing some kind payment gateway, and redirect user to a specific URL after successful confirmation by the payment processor. If some kind of PHP error, even a warning, or an excess line ending happens, the payment may remain unprocessed and the user may still seem unbilled. This is also one of the reasons why needless redirection is evil and if redirection is to be used, it must be used with caution.\nYou may get &quot;Page loading canceled&quot; type of errors in Internet Explorer, even in the most recent versions. This is because an AJAX response/json include contains something that it shouldn&#39;t contain, because of the excess line endings in some PHP files, just as I&#39;ve encountered a few days ago.\nIf you have some file downloads in your app, they can break too, because of this. And you may not notice it, even after years, since the specific breaking habit of a download depends on the server, the browser, the type and content of the file (and possibly some other factors I don&#39;t want to bore you with).\nFinally, many PHP frameworks including Symfony, Zend and Laravel (there is no mention of this in the coding guidelines but it follows the suit) and the PSR-2 standard (item 2.2) require omission of the closing tag. PHP manual itself (1,2), Wordpress, Drupal and many other PHP software I guess, advise to do so. If you simply make a habit of following the standard (and setup PHP-CS-Fixer for your code) you can forget the issue. Otherwise you will always need to keep the issue in your mind.\n\n\nBonus: a few gotchas (actually currently one) related to these 2 characters:\n\n\nEven some well-known libraries may contain excess line endings after . An example is Smarty, even the most recent versions of both 2.* and 3.* branch have this. So, as always, watch for third party code. Bonus in bonus: A regex for deleting needless PHP endings: replace  with empty text in all files that contain PHP code.\n\n",
            "excerpt": "This is also one of the reasons why needless redirection is <span class=\"highlight\">evil</span> and if redirection is to be used, it must be used with caution. &hellip; Bonus in bonus: A <span class=\"highlight\">regex</span> for deleting needless PHP endings: replace (\\s*\\?&gt;\\s*)$ with empty text in all files that contain PHP code. &hellip; ",
            "title": "Why would one omit the close tag?"
        },
        {
            "tags": [
                "regex",
                "character",
                "filenames"
            ],
            "question_score": -1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 56795736,
            "item_type": "question",
            "score": -1,
            "last_activity_date": 1561659406,
            "creation_date": 1561655015,
            "body": "I&#39;m looking for a Regex that exchanges all illegal filename chars like () space . etc before the filetype ending like .jpg by an - \n\ni got:\n[^a-zA-Z0-9_-]+\nmatches every illegal filename char, but including file extension\nand\n.*(?=.)\nmatching everything until the last occurence of .\n\nhow do i combine these?\n\none of my evil file names is\n(800x800-png)MGC1000-03EPTD-021_RAL7035-5010.tif.png\n\nafter regex replace it should look like\n-800x800-png-MGC1000-03EPTD-021_RAL7035-5010-tif.png\n\nthe regex should be working in libre office / excel search and replace.\n\nthanks for your help!\n",
            "excerpt": "I&#39;m looking for a <span class=\"highlight\">Regex</span> that exchanges all illegal filename chars like () space . etc before the filetype ending like .jpg by an - \n\ni got:\n[^a-zA-Z0-9_-]+\nmatches every illegal filename char, but including &hellip; one of my <span class=\"highlight\">evil</span> file names is\n(800x800-png)MGC1000-03EPTD-021_RAL7035-5010.tif.png\n\nafter <span class=\"highlight\">regex</span> replace it should look like\n-800x800-png-MGC1000-03EPTD-021_RAL7035-5010-tif.png\n\nthe <span class=\"highlight\">regex</span> should be working &hellip; ",
            "title": "Regex for all illegal filename characters before filetype extension"
        },
        {
            "tags": [
                "regex",
                "bash",
                "sed"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 56150580,
            "is_answered": false,
            "question_id": 56150157,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1557926900,
            "creation_date": 1557926900,
            "body": "As the comment by @Tom above alludes, using regex to parse HTML is generally evil.  That being said, if you only have single level (non nested) HTML tags, then regex might work here.  But, Sed&#39;s regex engine is not very powerful, as it does not support lazy dot.  Here is a way to do this using Perl in the Bash:\n\n\n\nThis outputs:\n\n\n",
            "excerpt": "As the comment by @Tom above alludes, using <span class=\"highlight\">regex</span> to parse HTML is generally <span class=\"highlight\">evil</span>.  That being said, if you only have single level (non nested) HTML tags, then <span class=\"highlight\">regex</span> might work here. &hellip; But, Sed&#39;s <span class=\"highlight\">regex</span> engine is not very powerful, as it does not support lazy dot. &hellip; ",
            "title": "Delete string between 2 paterns on more than one line"
        },
        {
            "tags": [
                "php",
                "html",
                "preg-replace",
                "paragraph"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 56123779,
            "is_answered": false,
            "question_id": 56123741,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1557813154,
            "creation_date": 1557813154,
            "body": "Note that it is generally evil and bad practice to use regex to parse HTML.  But, assuming you only have a string with a set of top level HTML  tags, regex might be an option here.\n\n\n\nThis outputs:\n\n\n\nHere is an explanation of the regex:\n\n\n\nThe only perhaps tricky part of the above regex is:\n\n\n\nThis is a tempered dot, and it works by applying a negative lookahead  at each step we match any character.  This is critical, because it ensures that the regex engine will not accidentally cross over multiple  tags to find .\n",
            "excerpt": "Note that it is generally <span class=\"highlight\">evil</span> and bad practice to use <span class=\"highlight\">regex</span> to parse HTML.  But, assuming you only have a string with a set of top level HTML &lt;p&gt; tags, <span class=\"highlight\">regex</span> might be an option here. &hellip; &lt;\\/p&gt;       consume the remainder until the first closing &lt;/p&gt;\n\n\nThe only perhaps tricky part of the above <span class=\"highlight\">regex</span> is:\n\n((?! &hellip; ",
            "title": "How to remove paragraph tag &lt;p&gt; with contains special word in preg_replace?"
        },
        {
            "tags": [
                "reactjs"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 56067658,
            "is_answered": false,
            "question_id": 35754225,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1557516323,
            "creation_date": 1557436392,
            "body": "There doesn&#39;t seem to be a great answer for this, after trying many things.\nIf there is an answer to the question it might be that there&#39;s no good way to do it. I think it doesn&#39;t hurt to look at potential solutions though and the drawbacks of each one.\n\nSolution 1\n\nUse componentWillUpdate. This is deprecated.\n\nSolution 2\n\nValidate state on render - but in your case and in most others, validation may lead to setState, which react tells you never to do in render(), but doesn&#39;t go into any detail about what will actually happen. Of course, you would have to be careful to prevent infinite loops, but if you call setState in render() upon some condition which cannot logically result in an infinite loop, then what unintended side effects could occur? \n\nSolution 3\n\nAs above, make a wrapper function to both validate and set state. But this is no good in my opinion because any state changes done with set state directly cannot be validated. Not only does setState directly not call your validation, but your validation also does not run on the items in the initial state. You might say, why would you give your component an initial state that&#39;s invalid, but I don&#39;t care, if I want to validate state I want it to validate 50000% of the time and no less.\n\nIn a complex form example, there are other issues with this. What if the validity of one field depends on the state of another field? Surely then, a function to re-validate a field when it changes is not enough. Some people will say to test the field being passed in and dispatch multiple events for re-validation, but again, this just isn&#39;t acceptable to me. Its not fullproof, it can lead to bugs, and make things hard to test. \n\nSolution 4\n\nUse componentWillReceiveProps. Not only is this deprecated, but its also static, meaning that you don&#39;t have access to the component instance. For some components this is fine because you can still modify the state that is returned, but if your component has data outside of state and props then you cannot access it, in addition to not being able to use non-static methods, which in my opinion makes this method pretty useless in many situations.\n\nSolution 5\n\nHaven&#39;t tested this one (bear with me, its fairly nuts), but you can override setState function in your component. Insert a callback into every setState instance. Track how many times setState is called and how many times the setState callback is called. Inside the callback, you can check the two counters stored in the object to see if the last callback is currently running, then, if it is, run one function which validates all state. On render, set both of the counters back down to zero. I don&#39;t recommend this by any means. It may work but its a pretty major hack.\n\nSolution 6\n\nYou can use componentDidUpdate, but this is inefficient. You will be blindly setting state with a value that was not validated then letting your component render only to validate it after and possibly call render again. Once again you have to be careful to avoid infinite loop while calling setState in componentDidUpdate. I read elsewhere that at least if you set the state here, the DOM will only re-draw once. In other words, it doesn&#39;t draw immediately after render() but waits until componentDidUpdate is triggered and re-calls render if state changes in there. This seems like maybe its the only solution I know about that react only warns about without telling you explicitely not to do this. In your case, the efficiency does not matter, but what if the state you were trying to validate was a 100 field form with a very expensive render method. Now, on every key down you&#39;ve essentially doubled the amount of work that react has to do to render your components, causing them to first render without being validated, and then filtering and/or validating them for a very likely second render.\n\nAdditional Issues\n\nIn my case, i&#39;m working on a form and not a simple component like you described above. I may go with a mix of solution 3 and 5. Its more complicated then I want though. It involves using one function to filter, generate errors, and set the state for each field (ie. solution 3). And then on componenetDidUpdate I may look for state keys whose values are different from the last value that the field was validated with. The second step here has many ways of doing so, all of which are messy and inefficient. To make it worse, they practically never run under normal circumstances because I always use the first function to update and validate their state, so this makes testing it harder. It&#39;s like leaving some fallback in my app that seems to work but during the entire development process it never triggers except for like the one time that I decided to test it. Seems like a bad idea to me. \n\nThere are additional efficiency concerns I also won&#39;t get into which relates to trying not to re-validate a field if it has the same value it was validated with last time. This is a whole other can of worms, but basically what it boils down to is that you should be able to not only validate a state before render, but you should have access to the previous state as well, so you can save some cpu time and only validate the fields that changed. For example, if you have a very long textarea with some complex regex, it would be nice to not validate that on every component render even if its a separate field that is changing.\n\nAfterthoughts\n\nI&#39;m very thoroughly disappointed that react seems to provide no legitimate option for this. Seeing as you can call setState many times in one operation, and each one will be queued, how is it that they don&#39;t provide us with one callback after all state changes are resolved and we&#39;re about to render? Well if you think about it, the render function itself is this callback, because I think its only ever called after setStates are resolved, but again, its evil to call setState on render, and it would be a million times cleaner to have render() simply receive the correct state, so I don&#39;t see how this is very useful.\n\nDoes anyone know why they decided to get rid of componentWillUpdate?\n",
            "excerpt": "For example, if you have a very long textarea with some complex <span class=\"highlight\">regex</span>, it would be nice to not validate that on every component render even if its a separate field that is changing. &hellip; Well if you think about it, the render function itself is this callback, because I think its only ever called after setStates are resolved, but again, its <span class=\"highlight\">evil</span> to call setState on render, and it would &hellip; ",
            "title": "React state validation"
        },
        {
            "tags": [
                "regex",
                "performance",
                "regex-lookarounds",
                "regex-greedy"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 56048020,
            "is_answered": false,
            "question_id": 56046890,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1557393247,
            "creation_date": 1557344783,
            "body": "An optimized expression for finding the final line of a large input string would be the one that introduces explicit boundaries:\n\n\n\nIn languages like PHP it would be written as  (s are delimiters and  is multiline flag). The caret  makes engine not to go through  (evil) regex if it is not matched. So we have defined a very well known boundary, not only for us to recognize the desired part but also for engines and their builtin optimizations.\n\nThe performance of this regex depends on number of lines of input string. So an input string like yours isn&#39;t a problem at all but something like this would bring some attention.\n\nIn both cases it performs fast and doesn&#39;t come to a failure.\n",
            "excerpt": ".* (<span class=\"highlight\">evil</span>) <span class=\"highlight\">regex</span> if it is not matched. So we have defined a very well known boundary, not only for us to recognize the desired part but also for engines and their builtin optimizations. &hellip; The performance of this <span class=\"highlight\">regex</span> depends on number of lines of input string. So an input string like yours isn&#39;t a problem at all but something like this would bring some attention. &hellip; ",
            "title": "RegEx for matching the last line"
        },
        {
            "tags": [
                "php",
                "regex",
                "search"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 56041600,
            "is_answered": false,
            "question_id": 56041250,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1557332943,
            "creation_date": 1557320940,
            "body": "This tool might help you to design an expression as you wish and test it, maybe something similar to:\n\n\n\nYou can also add more boundaries to it, if you might want to. \n\n here]2]2\n\nGraph\n\nThis graph shows how the expression would work and you can visualize other expressions in this link: \n\nPHP Code\n\nYou could also use  to do so, maybe something similar to: \n\n\n\nTest Script for RegEx\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "So sell side newfile.wav ye in mr <span class=\"highlight\">evil</span>. Longer waited mr of nature seemed. Improving knowledge incommode objection me ye is prevailed playme.wav principle in. &hellip; const <span class=\"highlight\">regex</span> = /([a-z]+\\.wav)/gm;\r\nconst str = `Spoke as as other again ye. &hellip; ",
            "title": "php search text file for any wav file names"
        },
        {
            "tags": [
                "javascript",
                "node.js",
                "web-crawler",
                "puppeteer"
            ],
            "question_score": 4,
            "is_accepted": true,
            "answer_id": 55576899,
            "is_answered": false,
            "question_id": 55567952,
            "item_type": "answer",
            "score": 6,
            "last_activity_date": 1554826054,
            "creation_date": 1554737347,
            "body": "Short answer: Don&#39;t (re)build a parser in Node.js, use the browser instead\n\nI strongly advise against evaluating or parsing crawled data in Node.js if you are anyway using puppeteer for crawling. When you are using puppeteer you already have a browser with a great sandbox for JavaScript code running in another process. Why risk that kind of isolation and &quot;rebuild&quot; a parser in your Node.js script? If your Node.js script breaks, your whole script will fail. In the worst case, you might even expose your machine to serious risks when you try to run untrusted code inside your main thread.\n\nInstead, try to do as much parsing as possible inside the context of the page. You can even do an evil  call there. There worst that could happen? Your browser hangs or crashes.\n\nExample\n\nImagine the following HTML page (very much simplified). You are trying to read the text which is pushed into an array. The only information you have is that there is an additional attribute  which is set to .\n\n\n\nBad code\n\nHere is a simple example what your code might look like right now:\n\n\n\nIn this example, the script extracts the JavaScript code from the page. Now we have the JavaScript code from the page and we &quot;only&quot; need to parse it, right? Well, this is the wrong approach. Don&#39;t try to rebuild a parser inside Node.js. Just use the browser. There are basically two approaches you can take to do that in your case.\n\n\nInject proxy functions into the page and fake some built-in functions (recommended)\nParse the data on the client-side (!) by using , a regex or  (eval only if really necessary)\n\n\n\n\nOption 1: Inject proxy functions into the page\n\nIn this approach you are replacing native browser functions with your own &quot;fake functions&quot;. Example:\n\n\n\nThis code replaces the original  function with our own function. Everything works as normal, but when an item with our target id is pushed into an array, a special condition is triggered. To inject this function into the page, you could use . To receive the data from Node.js you would have to expose a function to the browser via :\n\n\n\nNow it doesn&#39;t really matter how complex the code of the page is, whether it happens inside some asynchronous handler or whether the page changes the surrounding code. As long as the target data is pushing the data into an array, we will get it.\n\nYou can use this approach for a lot of crawling. Check how the data is processed and replace the low level functions processing the data with your own proxy version of it.\n\nOption 2: Parse the data\n\nLet&#39;s assume the first approach does not work for some reason. The data is in some script tag, but you are not able to get it by using fake functions.\n\nThen you should parse the data, but not inside your Node.js environment. Do it inside the page context. You could run a regular expression or use . But do it before returning the data back to Node.js. This approach has the benefit that if your code will crash your environment for some reason, it will not be your main script, but just your browser that crashes.\n\nTo give some example code. Instead of running the code from the original &quot;bad code&quot; sample, we change it to this:\n\n\n\nThis will only return the parts of the code we need, which can then be fruther processed from within Node.js.\n\n\n\nIndependent of which approach you choose, both ways are much better and more secure than running unknown code inside your main thread. If you absolutely have to process the data in your Node.js environment, use a regular expression for it like shown in the answer from trincot. You should never use eval to run untrusted code.\n",
            "excerpt": "You can even do an <span class=\"highlight\">evil</span> eval call there. There worst that could happen? Your browser hangs or crashes.\n\nExample\n\nImagine the following HTML page (very much simplified). &hellip; by using JSON.parse, a <span class=\"highlight\">regex</span> or eval (eval only if really necessary)\n\n\n\n\nOption 1: Inject proxy functions into the page\n\nIn this approach you are replacing native browser functions with your own &quot;fake &hellip; ",
            "title": "How to get JavaScript object in JavaScript code?"
        },
        {
            "tags": [
                "html",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 55127085,
            "is_answered": false,
            "question_id": 55126617,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1552468849,
            "creation_date": 1552410460,
            "body": "As already mentioned in the comments, Regex is not the way to go here.\n\nThat said: I have come up with this (https://regex101.com/r/3OVaO2/2)\n\n\n\nHowever, this will only remove ONE evil attribute. The problem is, that with PCRE, you cannot have variable length lookbehind assertions. If you switch it to ECMAscript, you can do this (https://regex101.com/r/3OVaO2/3)\n\n\n\nThis will probably do, what you want it to do. Nonetheless, this is NOT the holy grail for sanitizing HTML. Be careful with your output, if you don&#39;t consider your input safe.\n\nAlso, the definition of the tags may need some tweaking, since there may be tags like , which are currently not detected by the regular expression.\n",
            "excerpt": "As already mentioned in the comments, <span class=\"highlight\">Regex</span> is not the way to go here.\n\nThat said: I have come up with this (https://regex101.com/r/3OVaO2/2)\n\n(&lt;\\w+\\s*[^&gt;]*)\\s(?!href|title|alt)[\\w\\-\\d]+=(?:([&#39;&quot;]).*? &hellip; \\2|\\w+)\n\n\nHowever, this will only remove ONE <span class=\"highlight\">evil</span> attribute. The problem is, that with PCRE, you cannot have variable length lookbehind assertions. &hellip; ",
            "title": "Remove all inline html attributes, but leave some"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 55102898,
            "is_answered": false,
            "question_id": 55102827,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1552313797,
            "creation_date": 1552310851,
            "body": "First of all, using regex to parse HTML is evil.\n\nNow that this is out of the way, here is a working script:\n\n\n\nHere is an explanation of the pattern :\n\n\n\nAs for your current errors, you have defined  to be a delimiter for the regex pattern.  This means that if you want to use a literal forward slash, you therefore must escape it (as you would a regex metacharacter).\n",
            "excerpt": "First of all, using <span class=\"highlight\">regex</span> to parse HTML is <span class=\"highlight\">evil</span>. &hellip; This means that if you want to use a literal forward slash, you therefore must escape it (as you would a <span class=\"highlight\">regex</span> metacharacter). &hellip; ",
            "title": "PHP preg_match_all(): Unknown modifier &#39;&gt;&#39;"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 116,
            "is_accepted": false,
            "answer_id": 43872595,
            "is_answered": false,
            "question_id": 12841970,
            "item_type": "answer",
            "score": 17,
            "last_activity_date": 1551298425,
            "creation_date": 1494340192,
            "body": "Detecting evil regexes\n\n\nTry Nicolaas Weideman&#39;s RegexStaticAnalysis project.\nTry my ensemble-style vuln-regex-detector which has a CLI for Weideman&#39;s tool and others.\n\n\nRules of thumb\n\nEvil regexes are always due to ambiguity in the corresponding NFA, which you can visualize with tools like regexper.\n\nHere are some forms of ambiguity. Don&#39;t use these in your regexes.\n\n\nNesting quantifiers like  (aka &quot;star height &gt; 1&quot;). This can cause exponential blow-up. See substack&#39;s  tool.\nQuantified Overlapping Disjunctions like . This can cause exponential blow-up.\nAvoid Quantified Overlapping Adjacencies like . This can cause polynomial blow-up.\n\n\nAdditional resources\n\nI wrote this paper on super-linear regexes. It includes loads of references to other regex-related research.\n",
            "excerpt": "Detecting <span class=\"highlight\">evil</span> regexes\n\n\nTry Nicolaas Weideman&#39;s RegexStaticAnalysis project.\nTry my ensemble-style vuln-<span class=\"highlight\">regex</span>-detector which has a CLI for Weideman&#39;s tool and others. &hellip; It includes loads of references to other <span class=\"highlight\">regex</span>-related research. &hellip; ",
            "title": "How can I recognize an evil regex?"
        },
        {
            "tags": [
                "python",
                "json",
                "regex"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 54689474,
            "is_answered": false,
            "question_id": 54689404,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1550144108,
            "creation_date": 1550144108,
            "body": "First, using regex on JSON is evil, almost as bad as killing a kitten.\n\nIf you want to represent  as a valid JSON value, then consider using this structure:\n\n\n\nIf you need the string literal  to behave like a number, then consider just casting it to an integer in your Python script.\n",
            "excerpt": "First, using <span class=\"highlight\">regex</span> on JSON is <span class=\"highlight\">evil</span>, almost as bad as killing a kitten. &hellip; ",
            "title": "Converting string with leading-zero integer to json"
        },
        {
            "tags": [
                "c#",
                ".net-core",
                "asp.net-core-2.0"
            ],
            "question_score": 11,
            "is_accepted": false,
            "answer_id": 54634368,
            "is_answered": false,
            "question_id": 50356774,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1549900565,
            "creation_date": 1549900565,
            "body": "If I should guess, I would blame Regex\n\n\n is not implemented in .NET Core 2.0 (source)\nSome of your 175 patterns may be slightly evil\n\n\nThis may lead to significant performance difference between .NET Framework 4.6 and .NET Core 2.0 which may result in unresponsive application.\n",
            "excerpt": "If I should guess, I would blame <span class=\"highlight\">Regex</span>\n\n\nRegexOptions.Compiled is not implemented in .NET Core 2.0 (source)\nSome of your 175 patterns may be slightly <span class=\"highlight\">evil</span>\n\n\nThis may lead to significant performance difference &hellip; ",
            "title": ".NET Core 2.0 Regex Timeout deadlocking"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 54459445,
            "is_answered": false,
            "question_id": 54459081,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1548933658,
            "creation_date": 1548933658,
            "body": "Here&#39;s my try on this: \nYou can see a working demo here.\nThe expression matches everything you want to remove. It uses lookaheads with arbitrary quantifiers - i hope the regex engine you are using supports this.\nMaybe there&#39;s also a solution without those, but that&#39;s what i can offer for now.\n\nEDIT: I changed the expression so it&#39;s not using the evil  anymore.\n",
            "excerpt": "It uses lookaheads with arbitrary quantifiers - i hope the <span class=\"highlight\">regex</span> engine you are using supports this.\nMaybe there&#39;s also a solution without those, but that&#39;s what i can offer for now. &hellip; EDIT: I changed the expression so it&#39;s not using the <span class=\"highlight\">evil</span> .*? anymore. &hellip; ",
            "title": "Regex to strip email subaddressing (dots and +wildcards)"
        },
        {
            "tags": [
                "nginx",
                "nginx-location"
            ],
            "question_score": 262,
            "is_accepted": false,
            "answer_id": 43595323,
            "is_answered": false,
            "question_id": 35320674,
            "item_type": "answer",
            "score": 71,
            "last_activity_date": 1547240028,
            "creation_date": 1493058660,
            "body": "Both the regex and included files are good methods, and I frequently use those.  But another alternative is to use a &quot;named location&quot;, which is a useful approach in many situations —&#160;especially more complicated ones.  The official &quot;If is Evil&quot; page shows essentially the following as a good way to do things:\n\n\n\nThere are advantages and disadvantages to these various approaches.  One big advantage to a regex is that you can capture parts of the match and use them to modify the response.  Of course, you can usually achieve similar results with the other approaches by either setting a variable in the original block or using .  The downside of the regex approach is that it can get unwieldy if you want to match a variety of locations, plus the low precedence of a regex might just not fit with how you want to match locations —&#160;not to mention that  there are apparently performance impacts from regexes in some cases.\n\nThe main advantage of including files (as far as I can tell) is that it is a little more flexible about exactly what you can include —&#160;it doesn&#39;t have to be a full location block, for example.  But it&#39;s also just subjectively a bit clunkier than named locations.\n\nAlso note that there is a related solution that you may be able to use in similar situations: nested locations.  The idea is that you would start with a very general location, apply some configuration common to several of the possible matches, and then have separate nested locations for the different types of paths that you want to match.  For example, it might be useful to do something like this:\n\n\n",
            "excerpt": "Both the <span class=\"highlight\">regex</span> and included files are good methods, and I frequently use those. &hellip; The official &quot;If is <span class=\"highlight\">Evil</span>&quot; page shows essentially the following as a good way to do things:\n\nerror_page 418 = @common_location;\nlocation /first/location/ {\n    return 418;\n}\nlocation /second/location/ { &hellip; ",
            "title": "How can I have same rule for two locations in NGINX config?"
        },
        {
            "tags": [
                "java",
                "regex",
                "scala"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 53603271,
            "is_answered": false,
            "question_id": 53602965,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1543878182,
            "creation_date": 1543878182,
            "body": "It might be related to RegEx DOS.\n\nJava uses the traditional NFA algorithm [1] to support features such as lazy, backtracking and backreference. NFA &#39;eats in&#39; a character each time and tries to match it with regexp, and &#39;spits&#39; it out if it does not match. It will keep spitting until it can find another match (similar to deep first search), and thus bad expressions might cause the RegEx engine to encounter a RegEx DOS, and specifically in Java, it will finally cause a stack overflow for long strings.\n\nAccording to OWASP, evil regexp expressions contain:\nEvil Regex pattern contains:\n\n\nGrouping with repetition (1)\nInside the repeated group:\n\n\nRepetition\nAlternation with overlapping (2)\n\n\n\nAfter a brief examination of your regexp expression, it seems that you have (1) and (2) since you have  (repetition) and  (overlapping), thus I believe you may have to restructure your RegEx expression to avoid RegEx DOS.\n",
            "excerpt": "According to OWASP, <span class=\"highlight\">evil</span> regexp expressions contain:\n<span class=\"highlight\">Evil</span> <span class=\"highlight\">Regex</span> pattern contains:\n\n\nGrouping with repetition (1)\nInside the repeated group:\n\n\nRepetition\nAlternation with overlapping (2)\n\n\n\nAfter a brief &hellip; to avoid <span class=\"highlight\">RegEx</span> DOS. &hellip; ",
            "title": "Simple regex fails with stackoverflow on big string in Scala/Java"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "regex"
            ],
            "question_score": 13,
            "is_accepted": false,
            "answer_id": 53555186,
            "is_answered": false,
            "question_id": 3890475,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1543571971,
            "creation_date": 1543571971,
            "body": "Unlike the  function, the  function returns  or  and is generally preferred when simply testing if a RegEx matches.  The  modifier for case insensitive matching works with both functions.\n\nExample using  with :\n\n\n\n\n\n\nFiddle with the code:\nhttps://jsfiddle.net/71tg4dkw\n\nNote:\nBe aware of evil links that hide their file extension, like:\n\n\nDocumentation for :\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\n",
            "excerpt": "Unlike the match() function, the test() function returns true or false and is generally preferred when simply testing if a <span class=\"highlight\">RegEx</span> matches. &hellip; :\nBe aware of <span class=\"highlight\">evil</span> links that hide their file extension, like:\nhttps://example.com/evil.exe? &hellip; ",
            "title": "regex case insensitivity"
        },
        {
            "tags": [
                "javascript",
                "node.js",
                "regex"
            ],
            "question_score": -1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 4,
            "is_answered": true,
            "question_id": 47086482,
            "item_type": "question",
            "score": -1,
            "last_activity_date": 1539878787,
            "creation_date": 1509667320,
            "body": "I have a case where I&#39;m using regex to check a string for matches, after a start index and before an end one.\n\nTo set the start point, it is possible to create a  and set it&#39;s index before running .\n\nI can not find a way, though, to limit the depth of its search.  One &quot;obvious&quot; solution might be to use  to get a string that can&#39;t be searched passed a point, but it would have a massive negative impact on performance.  Any solution to setting a limit on regex search depth that includes  will not do, and is IMO embarrassingly inefficient, so please do not post them.\n\nThe three ways I can imagine fixing this are:\n\n\nif there is some way to set a limit, such as  or .  Neither of these work or exist.\nif there was some way to check for a regex match at an index in a string ie , I could iterate through the string myself, checking for matches.\nif there was a non-native implementation of regex, which is capable of doing either of the above.\n\n\nSo far I have not been able to find a good solution.\n\nHow can I check if a Regex has a match in a string before some index, without it searching the entire string?\n\n\nEdit (Not by OP)\n\nTo add further:\n\n\n  If it doesn&#39;t find a match, and I&#39;m only looking 100 chars deep on a 100000 char text, that&#39;s an issue. \n\n\nHow can we search a portion of a given string using RegEx. This portion of string should be determined by parameters indicating a start index and an end index.\n\nExample of Parameters\n\n\n\nThe result should be:\n\n\n  10\n\n",
            "excerpt": "I have a case where I&#39;m using <span class=\"highlight\">regex</span> to check a string for matches, after a start index and before an end one. &hellip; Aquatic subtype attack of opportunity catching on fire charm conjuration deafened evasion <span class=\"highlight\">evil</span> domain fast healing favored class fire domain gaseous form healing subschool incorporeal melee weapon multiplying &hellip; ",
            "title": "How to check if Regex matches before some index without searching entire string, or if regex matches at an index in JavaScript?"
        },
        {
            "tags": [
                "php",
                "mysql",
                "eval",
                "preg-replace-callback"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 52819868,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1539708785,
            "creation_date": 1539616605,
            "body": "For a site content creators maintain HTML lists in the format below which a cronjob (Perl) parses into a mySQL database. PHP pulls the data into paginated indices.\n\n\n\n(Perl extracts text and URL and stores them in the database as header, URL, linktext, footer.)\n\nOccasionally a user function call is inserted into the text, like this:\n\n\n\nThe query returns this string for the first line ($header):\n\n\n\nOf course this is not executed when pulled in a query. Nor would it occur in a fixed place, thus cannot be parsed into a separate field.\n\nI have read a couple threads on using  here, and given that only content creators in the house edit the lists, it should be safe enough. IOW if evil code is injected in either list or database we have bigger problems than unsanitized code inserted by some outside party into a form.\n\nMy other idea is . However, some suggested on SO that essentially it has the same problem as , albeit I think the regex should/could lock this down. Also I don&#39;t see how this could execute arbitrary code, unless by passing it as parameter value to the user function.\n\nWhat would be the better approach? Or is there some other, safer approach? (PHP 7.2, mySQL 5.6)\n\nTIA\n\nEdit\n\nI have implemented the code below using a callback, and no . Applying only to few permitted functions which incidentally all require only one numerical parameter it seems quite locked down.\n\n\n\nThanks for your help.\n",
            "excerpt": "IOW if <span class=\"highlight\">evil</span> code is injected in either list or database we have bigger problems than unsanitized code inserted by some outside party into a form.\n\nMy other idea is preg_replace_callback(). &hellip; However, some suggested on SO that essentially it has the same problem as eval, albeit I think the <span class=\"highlight\">regex</span> should/could lock this down. &hellip; ",
            "title": "Execute PHP User Function within mySQL Query Result"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 52019534,
            "is_answered": false,
            "question_id": 52019513,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1535217612,
            "creation_date": 1535217126,
            "body": "This is a classic example of why the  combination can be evil. Use a negated character set instead:\n\n\n\nYou can try it here.\n\n\n\nCompare the behavior of the two expressions:\n\n\nMatch anything greedily. For the second match, the regex matches anything greedily. It will match anything until it reaches the end of the string, and then has to backtrack until it finds a . As soon as it finds a , it stops, hence you end up with  as a match.\nMatch anything but a . Here the regex is matching anything that is not a , therefore at every step is checks whether the next is a  or not. For the second match, you can see that as soon as it finds a , it stops. \n\n",
            "excerpt": ".+ combination can be <span class=\"highlight\">evil</span>. Use a negated character set instead:\n\n(\\$\\{(\\b[a-zA-Z0-9]+\\b)\\})(\\[([^]]+)\\])\n                              ^^^\n\n\nYou can try it here. &hellip; For the second match, the <span class=\"highlight\">regex</span> matches anything greedily. It will match anything until it reaches the end of the string, and then has to backtrack until it finds a ]. &hellip; ",
            "title": "Regex capturing group not working as intended"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "browser-extension"
            ],
            "question_score": 18,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 24045756,
            "item_type": "question",
            "score": 18,
            "last_activity_date": 1534620836,
            "creation_date": 1401909425,
            "body": "After I read about Hover Zoom being evil (yikes!), two articles made me instantly switch to another one, called Imagus:\n\n\nHoverzoom’s Malware controversy, and Imagus alternative - ghacks.net\nImagus is a Hover Zoom Replacement to Enlarge Images on Mouseover - LifeHacker\n\n\nImagus seems to fit the bill by doing pretty much what Hover Zoom also could, but in addition, it seems to support custom filters (to support more sites), in addition to the huge bunch it already comes packed with.\n\nIn the options page, on Chrome, the filters section looks deliciously hackable:\n\n&#160;&#160;\n\nHowever, at the same time, it seems to be written in what I would call Perl Javascript.\n\n&#160;&#160;\n\nI consider myself well-versed in Javascript, DOM and Regex, but it&#39;s just painful to try to guess what that is doing, so I looked for documentation. It seems like there was an MyOpera blog, and now the website of the project is, for the time being, hosted on Google Docs.\n\nThe page doesn&#39;t mention anything about how to develop &quot;filters&quot; (or &quot;sieves&quot;, as written in that page?)\n\nSo, how can I develop a custom filter? I&#39;m not aware of all the possibilities (it seems to be pretty flexible), but even a simple example like just modifying URLs would be good. (turning  into  or something).\n\nOr even just an explanation of the fields. They seem to be:\n\n\n\n\n\n\n\n &lt;- Probably Comment\n\n",
            "excerpt": "After I read about Hover Zoom being <span class=\"highlight\">evil</span> (yikes!) &hellip; I consider myself well-versed in Javascript, DOM and <span class=\"highlight\">Regex</span>, but it&#39;s just painful to try to guess what that is doing, so I looked for documentation. &hellip; ",
            "title": "How to develop custom filters for the Imagus hover zoom extension?"
        },
        {
            "tags": [
                "python",
                "regex",
                "apache",
                "fail2ban"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 51365716,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1531759972,
            "creation_date": 1531756229,
            "body": "Why does the following regex not match the following text?\n\nRegex:\n\n\n\nTest string:\n\n\n\nThis is a predefined rule from fail2ban and a random apache log entry with changed addresses.\n\nAt first, I thought that the mistake is that the client is logged twice, so I changed the client line: \n\n\n\nBut that didn’t seem to work either.\n\nJust to get things clear:\n\n\n\n(Taken from the fail2ban docs: https://fail2ban.readthedocs.io/en/latest/filters.html) (I wrote this as code because stackoverflow seems to have problems with displaying specific characters in quotes.)\n\nI am more or less new to regular expressions, so thanks for any help.\n",
            "excerpt": "Why does the following <span class=\"highlight\">regex</span> not match the following text?\n\n<span class=\"highlight\">Regex</span>:\n\n\\[\\]\\s\\[(:?error|\\S+:\\S+)\\]( \\[pid \\d+(:\\S+ \\d+)?\\])? \\[client &lt;HOST&gt;(:\\d{1,5})?\\] ModSecurity:\\s+(?:\\[(? &hellip; If the format is like „&lt;date...&gt; error 1.2.3.4 is <span class=\"highlight\">evil</span>“ then you need to match the &lt; at the start so <span class=\"highlight\">regex</span> should be similar to „^&lt;&gt; &lt;HOST&gt; is <span class=\"highlight\">evil</span>$„ using &lt;HOST&gt; where the IP/domain name appears in the &hellip; ",
            "title": "Regular Expression does not match test string"
        },
        {
            "tags": [
                "string",
                "split",
                "kotlin"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 51356593,
            "is_answered": false,
            "question_id": 51356259,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1531725923,
            "creation_date": 1531725923,
            "body": "You can use split overload that accepts regular expressions for that:\n\n\n\nWould print:\n\n\n\nConsider reading this answer on how the regular expression works in this case.\n",
            "excerpt": "You can use split overload that accepts regular expressions for that:\n\nval text = &quot;&quot;&quot;Hi there, &quot;Bananas are, by nature, <span class=\"highlight\">evil</span>.&quot;, Hey there.&quot;&quot;&quot;\nval matchCommaNotInQuotes = <span class=\"highlight\">Regex</span>(&quot;&quot;&quot;\\,(? &hellip; =([^&quot;]*&quot;[^&quot;]*&quot;)*[^&quot;]*$)&quot;&quot;&quot;)\nprintln(text.split(matchCommaNotInQuotes))\n\n\nWould print:\n\n[Hi there,  &quot;Bananas are, by nature, <span class=\"highlight\">evil</span>.&quot;,  Hey there.] &hellip; ",
            "title": "Kotlin String.split, ignore when delimiter is inside a quote"
        },
        {
            "tags": [
                "regex",
                "python-3.6"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 49019340,
            "is_answered": false,
            "question_id": 49019085,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1519773264,
            "creation_date": 1519772474,
            "body": "Much luck with regex, if you just need the result:\n\n\n\nOutput:\n\n\n\nMake sure to read the eval() \nand have a look into:\n\n\nhttps://opensourcehacker.com/2014/10/29/safe-evaluation-of-math-expressions-in-pure-python/\nhttps://softwareengineering.stackexchange.com/questions/311507/why-are-eval-like-features-considered-evil-in-contrast-to-other-possibly-harmfu/311510\nhttps://www.kevinlondon.com/2015/07/26/dangerous-python-functions.html\n\n\n\n\nExample for hundreds of lines:\n\n\n",
            "excerpt": "Much luck with <span class=\"highlight\">regex</span>, if you just need the result:\n\nimport re\n\ns=&quot;[  9]  -21 - ( 12) - (  -5) + ( -26) = ______&quot;\n\ns = s[s.find(&quot;]&quot;)+1:s.find(&quot;=&quot;)]           #  cut away line nr and = ... &hellip; into:\n\n\nhttps://opensourcehacker.com/2014/10/29/safe-evaluation-of-math-expressions-in-pure-python/\nhttps://softwareengineering.stackexchange.com/questions/311507/why-are-eval-like-features-considered-<span class=\"highlight\">evil</span>-in-contrast-to-other-possibly-harmfu &hellip; ",
            "title": "Regex to pull out numbers and operands"
        },
        {
            "tags": [
                "bash",
                "sed",
                "grep",
                "wget"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 48950339,
            "is_answered": false,
            "question_id": 48949846,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1519406511,
            "creation_date": 1519396951,
            "body": "A fully fledged solution using xpath :\n\nCommand :\n\n\n\nOutput :\n\n\n\nNotes :\n\n\nDon&#39;t parse HTML with regex, use a proper XML/HTML parser like we do here. Check: Using regular expressions with HTML tags\nCheck https://github.com/sputnick-dev/saxon-lint (my own project)\n\n\n\n\n if what I wrote bores you and you just want a quick and dirty command even if it&#39;s evil, then use \n",
            "excerpt": "xpath :\n\nCommand :\n\n$ saxon-lint --html --xpath &#39;//div[contains(text(), &quot;hPa&quot;)]/text()&#39; \\\n    &#39;https://www.foreca.de/Deutschland/Berlin/Berlin&#39;\n\n\nOutput :\n\n1026 hPa\n\n\nNotes :\n\n\nDon&#39;t parse HTML with <span class=\"highlight\">regex</span> &hellip; Check: Using regular expressions with HTML tags\nCheck https://github.com/sputnick-dev/saxon-lint (my own project)\n\n\n\n\n if what I wrote bores you and you just want a quick and dirty command even if it&#39;s <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Bash wget filter specific word"
        },
        {
            "tags": [
                "ruby",
                "regex",
                "split",
                "bbcode"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 3792262,
            "is_answered": false,
            "question_id": 3788959,
            "item_type": "answer",
            "score": 46,
            "last_activity_date": 1516881323,
            "creation_date": 1285382957,
            "body": "Please don&#39;t use BBCode. It&#39;s evil.\n\n\n  BBCode came to life when developers\n  were too lazy to parse HTML correctly\n  and decided to invent their own markup\n  language. As with all products of\n  laziness, the result is completely\n  inconsistent, unstandardized, and\n  widely adopted.\n\n\nTry to use a user-friendlier markup language, like Markdown (that&#39;s what Stack Overflow uses) or Textile.\nBoth of them have parsers for Ruby:\n\n\nMaruku for Markdown\nRedCloth for Textile\n\n\n\n\nIf you still don&#39;t want to heed to my advice and choose to go with BBCode, don&#39;t reinvent the wheel and use a BBCode parser. To answer your question directly, there is the least desirable option: use regex.\n\n\n\nAs seen on rubular. Although I would use , so it will extract the contents inside the  tags. Note that this is fairly fragile and will break if there are nested  tags. Hence, the advice to use a parser.\n",
            "excerpt": "It&#39;s <span class=\"highlight\">evil</span>.\n\n\n  BBCode came to life when developers\n  were too lazy to parse HTML correctly\n  and decided to invent their own markup\n  language. &hellip; To answer your question directly, there is the least desirable option: use <span class=\"highlight\">regex</span>.\n\n/\\[img\\].*?\\[\\/img\\]/\n\n\nAs seen on rubular. Although I would use /\\[img\\](.*?) &hellip; ",
            "title": "Regex to split BBCode into pieces"
        },
        {
            "tags": [
                "java",
                "java-stream"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 47893858,
            "is_answered": false,
            "question_id": 47317870,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1513711349,
            "creation_date": 1513711349,
            "body": "The solution by @Bohemian works fine, but the OP asked for an inline RegEx solution as well.  This can be made as follows:\n\n\n\nNote that this will create a new  object for each and every line in your log file.  If you a processing a log file with hundreds of thousand lines, a lot of temporary matcher objects are being created and abandoned to the garbage collector.\n\nIt is possible to reuse a  object by calling the  method, passing in the new subject for the next regex match.  The method returns the matcher object itself, so that the method can be chained, like .  We can abuse this signature to create a  mapping.  Thus, the above could be rewritten as:\n\n\n\nThis may be thought of as a hack, saving the construction of hundreds of thousands of temporary  objects, or the ultimate evil using side-effects in stream pipelines.  Premature optimization is the root of all evil, so only use this technique if it can be shown that this pipeline is actually worth optimizing.\n",
            "excerpt": "The solution by @Bohemian works fine, but the OP asked for an inline <span class=\"highlight\">RegEx</span> solution as well. &hellip; It is possible to reuse a Matcher object by calling the Matcher#reset(String) method, passing in the new subject for the next <span class=\"highlight\">regex</span> match. &hellip; ",
            "title": "Using Regex or StringTokenizer inline with Stream"
        },
        {
            "tags": [
                "python",
                "string",
                "list",
                "file",
                "string-concatenation"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 47858725,
            "is_answered": false,
            "question_id": 47858219,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1513539381,
            "creation_date": 1513539381,
            "body": "You don&#39;t need regex for a simple task like this, you were actually on the right track but you got yourself tangled up in trying to parse everything instead of just streaming the file and deciding where to cut.\n\nBased on your data, you want to cut on the line starting with  (denoting the author) and you want to cut that line from first comma onwards. Presumably, you also want to remove the empty lines, too. Thus, a simple stream modifier would look something like:\n\n\n\nAnd that&#39;s all there is to it. As long as there are no other new lines in the data it will produce exactly the result you want, i.e. for a  file containing:\n\n“The road to hell is paved with works-in-progress.”\n—Philip Roth, WD some other stuff here\n\n“The only thing necessary for the triumph of evil is for good men to do nothing.”\n—Edmund Burke, whatever there is\n\n“You know nothing John Snow.”\n—The wildling Ygritte, &quot;A Dance With Dragons&quot; - George R.R. Martin\n\nIt will produce a  file containing:\n\n“The road to hell is paved with works-in-progress.” —Philip Roth\n“The only thing necessary for the triumph of evil is for good men to do nothing.” —Edmund Burke\n“You know nothing John Snow.” —The wildling Ygritte\n",
            "excerpt": "You don&#39;t need <span class=\"highlight\">regex</span> for a simple task like this, you were actually on the right track but you got yourself tangled up in trying to parse everything instead of just streaming the file and deciding where &hellip; —Philip Roth\n“The only thing necessary for the triumph of <span class=\"highlight\">evil</span> is for good men to do nothing.” —Edmund Burke\n“You know nothing John Snow.” —The wildling Ygritte &hellip; ",
            "title": "Open a file, reformat, and write to a new file in Python 3"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "html",
                "forms",
                "contenteditable"
            ],
            "question_score": 11,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 5,
            "is_answered": true,
            "question_id": 20875775,
            "item_type": "question",
            "score": 11,
            "last_activity_date": 1511979441,
            "creation_date": 1388632585,
            "body": "how can I get the contents of span ?\nI&#39;m looking for a way for all of this to be vanilla, not jQuery\n\njavascript (and a little jQuery)\n\n\n\nhere&#39;s my html\n\n\n\nThank You\n",
            "excerpt": "I&#39;m looking for a way for all of this to be vanilla, not jQuery\n\njavascript (and a little jQuery)\n\nvar swear_words_arr=new Array(&quot;bad&quot;,&quot;<span class=\"highlight\">evil</span>&quot;,&quot;freak&quot;);\nvar <span class=\"highlight\">regex</span> = new RegExp(&#39;\\\\b(&#39; + swear_words_arr.join &hellip; ",
            "title": "Get content of span"
        },
        {
            "tags": [
                "regex",
                "arrays",
                "bash"
            ],
            "question_score": 41,
            "is_accepted": false,
            "answer_id": 30971572,
            "is_answered": false,
            "question_id": 20366609,
            "item_type": "answer",
            "score": 25,
            "last_activity_date": 1508088432,
            "creation_date": 1434942120,
            "body": "Bash brace expansion don&#39;t use regexes. The pattern used is just some shell glob, which you can find in bash manual 3.5.8.1 Pattern Matching.\n\nYour two-step solution is cool, but it needs some quotes for whitespace safety:\n\n\n\nYou can also do it in some evil way:\n\n\n",
            "excerpt": "Your two-step solution is cool, but it needs some quotes for whitespace safety:\n\nARR_PRE=(&quot;${ARRAY[@]/#/prefix_}&quot;)\necho &quot;${ARR_PRE[@]/%/_suffix}&quot;\n\n\nYou can also do it in some <span class=\"highlight\">evil</span> way:\n\neval &quot;something &hellip; ",
            "title": "Prefix and postfix elements of a bash array"
        },
        {
            "tags": [
                "c#",
                ".net",
                "powershell"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 46610211,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1507323427,
            "creation_date": 1507307516,
            "body": "I&#39;m trying to implement a function that displays some ActiveDirectory information onto a webpage, however when I try to display certain information (the user&#39;s manager) for some reason it started throwing the below error at me when it hadn&#39;t done that in the past. Can anyone explain what&#39;s going on here or suggest a fix?\n\nI&#39;m not writing anything to the StringBuilder after disposal during the using() block for the PowerShell, so I have no idea why this is suddenly throwing the exception when the manager_name string is calling the GetManager function, which I know returns the correct value based on VisualStudio&#39;s debugging tool showing the proper value when it rolls into line 752 \n\n\n  PrintADInfo_displayresults.InnerHtml = html_results;\n\n\nwhich is just prior to the disposal of all the objects and return outside the function. What is bizarre is that when setting manager_name to the empty string or just &quot;test&quot;, the code will run fine but using the GetUsersManager function will cause the exception to fire. \n\nBelow you&#39;ll find the methods in question and the error text. \n\nError Text\n\n\n  System.ObjectDisposedException: Cannot write to a closed TextWriter.\n  at System.IO.__Error.WriterClosed() at\n  System.IO.StreamWriter.Flush(Boolean flushStream, Boolean\n  flushEncoder) at System.IO.StreamWriter.Flush() at\n  System.Management.Automation.Host.TranscriptionOption.Dispose() at\n  System.Management.Automation.Host.PSHostUserInterface.StopAllTranscribing()\n  at\n  System.Management.Automation.Runspaces.LocalRunspace.DoCloseHelper()\n  at\n  System.Management.Automation.Runspaces.LocalRunspace.CloseHelper(Boolean\n  syncCall) at\n  System.Management.Automation.Runspaces.RunspaceBase.CoreClose(Boolean\n  syncCall) at\n  System.Management.Automation.Runspaces.LocalRunspace.Close() at\n  System.Management.Automation.Runspaces.LocalRunspace.Dispose(Boolean\n  disposing) at System.Management.Automation.PowerShell.Dispose(Boolean\n  disposing) at System.Management.Automation.PowerShell.Dispose() at\n  _Default.PrintADInfo(String username) in h:\\Visual Studio 2015\\WebSites\\WebSite2\\Default.aspx.cs:line 753\n\n\n\n",
            "excerpt": "ps.Invoke();\n\n            //Add user informtion to StringBuilder for output\n            foreach (PSObject p in psOutput)\n            {\n                sb.Append(p.ToString());\n            }\n\n            //<span class=\"highlight\">Evil</span> &hellip; :[^\\\\&quot;&quot;]|\\\\[,=\\+&lt;&gt;#;\\\\&quot;&quot;]|\\\\[\\dA-Fa-f]{2})*&quot;&quot;))*)*&quot;;\n            <span class=\"highlight\">Regex</span> rgx = new <span class=\"highlight\">Regex</span>(pattern);\n\n            //Replace the user&#39;s manager field that&#39;s normally in CN format to NTID\n            string &hellip; ",
            "title": "Closed TextWriter Exception When Using Certain Strings"
        },
        {
            "tags": [
                "python",
                "regex",
                "parsing"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 46513287,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1506870335,
            "creation_date": 1506867554,
            "body": "I have a text which format resemble this sample : \n\n\n  PAUL: Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo &gt;ligula eget dolor. \n  \n  LEONARD: Aenean massa. Cum sociis natoque penatibus et magnis dis parturient &gt;montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque &gt;eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, &gt;fringilla vel, aliquet nec, vulputate eget, arcu. \n  \n  EVIL NINJA [on the roof]: In enim justo, rhoncus ut, imperdiet a, venenatis &gt;vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. &gt;Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. &gt;Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. \n  \n  PAUL [SCREAMING]: Aliquam lorem ante, dapibus in, viverra quis, feugiat a, &gt;tellus. \n\n\nAnd a regular expression to parse the transcripts into dialogs. \n\n\n\nI am trying to capture all the locutors so that the regular expression matches \n\n\n\nAs you can see here I have not been able to capture all of the locutors. \n\n\n  EVIL NINJA [on the roof]:\n\n\nHow can I capture the above as well ? Is regex even the right way to go for this ? \n\nEdit : All the speakers name are in caps, and ends with a colon. This is the format in which all of the transcripts i&#39;m dealing with is.\n",
            "excerpt": "<span class=\"highlight\">EVIL</span> NINJA [on the roof]: In enim justo, rhoncus ut, imperdiet a, venenatis &gt;vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. &gt;Cras dapibus. Vivamus elementum semper nisi. &hellip; <span class=\"highlight\">EVIL</span> NINJA [on the roof]:\n\n\nHow can I capture the above as well ? Is <span class=\"highlight\">regex</span> even the right way to go for this ? \n\nEdit : All the speakers name are in caps, and ends with a colon. &hellip; ",
            "title": "Parsing transcripts with regular expression"
        },
        {
            "tags": [
                "python",
                "regex",
                "parsing"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 46513472,
            "is_answered": false,
            "question_id": 46513287,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1506870335,
            "creation_date": 1506868827,
            "body": "regex \n\n\n\n\n can be changed to \nFor getting the context  should be changed to \n\n\ncode  \n\n\n\noutput\n\n\n",
            "excerpt": "<span class=\"highlight\">regex</span> \n\n&quot;^([A-Z\\s]+)(?:\\[(?:[\\w ]+)\\])?:(.*?)$&quot;\n\n\n\nA-Z can be changed to \\w\nFor getting the context (?:[\\w ]+) should be changed to ([\\w ]+)\n\n\ncode  \n\nimport re\n\n<span class=\"highlight\">regex</span> = r&quot;^([A-Z\\s]+)(?:\\[(? &hellip; \\n\\n&quot;\n        &quot;<span class=\"highlight\">EVIL</span> NINJA [on the roof]: In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. &hellip; ",
            "title": "Parsing transcripts with regular expression"
        },
        {
            "tags": [
                "python",
                "regex",
                "parsing"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 46513364,
            "is_answered": false,
            "question_id": 46513287,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1506868091,
            "creation_date": 1506868091,
            "body": "The problem with your regex is that it doesn&#39;t allow any whitespace, so it doesn&#39;t match &quot;EVIL NINJA&quot; or &quot;on the roof&quot;.\n\nBut yes, regex is absolutely the right way to do this. You can try this:\n\n\n\nUsage:\n\n\n\nOutput:\n\n\n",
            "excerpt": "The problem with your <span class=\"highlight\">regex</span> is that it doesn&#39;t allow any whitespace, so it doesn&#39;t match &quot;<span class=\"highlight\">EVIL</span> NINJA&quot; or &quot;on the roof&quot;.\n\nBut yes, <span class=\"highlight\">regex</span> is absolutely the right way to do this. &hellip; : <span class=\"highlight\">EVIL</span> NINJA\ncontext: on the roof\n\nperson: PAUL\ncontext: SCREAMING &hellip; ",
            "title": "Parsing transcripts with regular expression"
        },
        {
            "tags": [
                "python",
                "regex",
                "string"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 46430751,
            "is_answered": false,
            "question_id": 46417454,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1506440634,
            "creation_date": 1506440634,
            "body": " Non-regex alternative \n\nI know you tagged regex, but these kinds of problems are not well-suited to regular expressions.  There are many tricky edge cases, and the failure mode for edge cases is often returning incorrect results, when you would prefer an exception raised instead.  \n\nYou have to choose the lesser of two evils: a simple regex which misbehaves on weird inputs, or a monster regex which is incomprehensible to everyone except the regex engine itself.  \n\nIt&#39;s often easier just by writing a little parser that keeps track of whether you&#39;re enclosed in parens or not.  That&#39;s simple to write, and simple to maintain.  \n\nHere&#39;s a parser based solution and a barrage of tests that might trip up any regex based approach.  This will also detect when the problem is poorly constrained (unbalanced parens), and raise if necessary.  \n\n\n",
            "excerpt": "Non-<span class=\"highlight\">regex</span> alternative \n\nI know you tagged <span class=\"highlight\">regex</span>, but these kinds of problems are not well-suited to regular expressions. &hellip; You have to choose the lesser of two evils: a simple <span class=\"highlight\">regex</span> which misbehaves on weird inputs, or a monster <span class=\"highlight\">regex</span> which is incomprehensible to everyone except the <span class=\"highlight\">regex</span> engine itself. &hellip; ",
            "title": "How to split a string has &#39;A/B/C(D/E)&#39; format?"
        },
        {
            "tags": [
                "regex",
                "security",
                "go",
                "glob"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 38689161,
            "is_answered": false,
            "question_id": 38393367,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1506287357,
            "creation_date": 1470006889,
            "body": "By &quot;evil regex&quot; I assume you mean a regex that falls victim to catastrophic backtracking.\n\nFrom what you&#39;re describing, it seems like you&#39;re using a glob library to avoid these &quot;evil regexes&quot;. Globs are essentially a weaker version of regex.\n\nThe thing that you&#39;re missing here is the fact that regexes don&#39;t have to be evil. This can be proven in plain Go, with no external libraries.\n\nTry running this Go program:\n\n\n\nYou might wonder why this code doesn&#39;t measure how much time execution took. It&#39;s because it&#39;s not needed (and also because I don&#39;t know much Go).\n\nThe regex will work in almost all regex flavors. You can try running it in Java, Perl or another similar flavor (I like using PCRE on https://regex101.com/#pcre), but the outcome will be one of two things:\n\n\nA timeout\nYou get fed up with how long it&#39;s taking and stop the program\n\n\nYes, that combination causes catastrophic backtracking in most regex flavors. But not Go. Why?\n\nGo doesn&#39;t use backtracking at all for its regexes, so it&#39;s not even a possibility. According to this site:\n\n\n  In Go, we find an optimized regular expression engine. This runs in linear time, making complex patterns faster. It is located in the regexp package.\n\n\nRead more about the differences between backtracking and non-backtracking engines here.\n\n\n\nConsidering the glob library (according to that GitHub link) appears faster than Go&#39;s regexps, performance shouldn&#39;t be a problem.\n",
            "excerpt": "By &quot;<span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>&quot; I assume you mean a <span class=\"highlight\">regex</span> that falls victim to catastrophic backtracking.\n\nFrom what you&#39;re describing, it seems like you&#39;re using a glob library to avoid these &quot;<span class=\"highlight\">evil</span> regexes&quot;. &hellip; Globs are essentially a weaker version of <span class=\"highlight\">regex</span>.\n\nThe thing that you&#39;re missing here is the fact that regexes don&#39;t have to be <span class=\"highlight\">evil</span>. This can be proven in plain Go, with no external libraries. &hellip; ",
            "title": "Are there evil globs?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "character-class"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 46394020,
            "is_answered": false,
            "question_id": 46393875,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1506282616,
            "creation_date": 1506281438,
            "body": "This should match exactly what you&#39;re looking for. When parsing using this on a non-global level for each line - it will parse off the parenthesis. \n\n\n\nSee below...\n\n\n",
            "excerpt": ":\\))  #Non-Capture Group Parenthesis - for advanced submatching <span class=\"highlight\">regex</span>.\n\n\nSee below... &hellip; :\\))/g)\n)\n\n//CONSOLE OUTPUT\n(3) [&quot;(The Extremes of Good and <span class=\"highlight\">Evil</span>)&quot;, &quot;()&quot;, &quot;( )&quot;]\n0: &quot;(The Extremes of Good and <span class=\"highlight\">Evil</span>)&quot;\n1: &quot;()&quot;\n2: &quot;( )&quot;\nlength: 3 &hellip; ",
            "title": "Match the parentheses with or without a text in it - Regex"
        },
        {
            "tags": [
                "vba",
                "excel",
                "parsing",
                "vbe"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 45745199,
            "is_answered": false,
            "question_id": 45743203,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1503005590,
            "creation_date": 1503005265,
            "body": "As @MatsMug says, parsing VBA with Regex is hard impossible, but line-numbers are a simpler case, and should be findable with regex alone.\n\nFortunately, line numbers can only appear within a procedure body (including before the  statement), so we know they&#39;ll never be the first line of your code.\n\nUnfortunately, you can prefix a line-label with 0 or more line continuations:\n\n\n\nFurthermore, a line number isn&#39;t always followed by a space - it can be followed by an instruction separator, giving the line-number the appearance of a line-label:\n\n\n\nAnd if you&#39;re code is evil, you might encounter a negative line-number (entered by using hex notation - which VBE dutifully pretty prints back to the code-pane with a leading space and a negative number):\n\n\n\nAnd we also need to be able to identify numbers that appear on a continued line, that aren&#39;t line-numbers:\n\n\n\nSo, here&#39;s some evil line-numbering, with a mix of all of those edge-cases:\n\n\n\nAnd here&#39;s some regex that identifies the line-numbers:\n\n\n\nAnd here&#39;s a syntax highlight from regex101:\n\n\n",
            "excerpt": "As @MatsMug says, parsing VBA with <span class=\"highlight\">Regex</span> is hard impossible, but line-numbers are a simpler case, and should be findable with <span class=\"highlight\">regex</span> alone. &hellip; line number isn&#39;t always followed by a space - it can be followed by an instruction separator, giving the line-number the appearance of a line-label:\n\nSub foo()\n10: Beep\nEnd Sub\n\n\nAnd if you&#39;re code is <span class=\"highlight\">evil</span> &hellip; ",
            "title": "VBA - Find all numbered lines in VBE Modules via pattern search"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "regex-negation"
            ],
            "question_score": 5,
            "is_accepted": true,
            "answer_id": 45502614,
            "is_answered": false,
            "question_id": 45501997,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1501863431,
            "creation_date": 1501837505,
            "body": "You can use String match for that\n\nThe regex below simply matches anything that&#39;s not a mustach, optionally surrounded by mustaches.\n\nExample snippet:\n\n\r\n\r\n\r\n\r\n\r\n\n\nBut to make it more precise, the regex pattern becomes a bit more complicated.\nThe regex below matches: \n\n\n&quot;what you want&quot;\n (a word between 2 mustaches on each side)\nOR &quot;what you don&#39;t want followed by what you want&quot;\n(using lazy matching and positive lookahead)\nOR &quot;what remains&quot;\n\n\n\r\n\r\n\r\n\r\n\r\n\n\nAnd last but not least, the evil SM method.\nSplit AND Match on the same regex. And concatinate them into a single array.\nThe downside of this method is that the order is not preserved.\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "You can use String match for that\n\nThe <span class=\"highlight\">regex</span> below simply matches anything that&#39;s not a mustach, optionally surrounded by mustaches.\n\nExample snippet:\n\n\r\n\r\nvar str = &quot;Lazy {{some_animal}} jumps over.. &hellip; +/g;\r\n\r\nvar array = str.match(pattern);\r\n\r\nconsole.log(str);\r\nconsole.log(pattern);\r\nconsole.log(array);\r\n\r\n\r\n\n\nAnd last but not least, the <span class=\"highlight\">evil</span> SM method.\nSplit AND Match on the same <span class=\"highlight\">regex</span>. &hellip; ",
            "title": "Splitting string into matching and non-matching groups in javascript"
        },
        {
            "tags": [
                "javascript",
                "arrays",
                "string"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 44847982,
            "is_answered": false,
            "question_id": 44847727,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1498992513,
            "creation_date": 1498830180,
            "body": "Solution without eval, which is evil, using regex with group:\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "Solution without eval, which is <span class=\"highlight\">evil</span>, using <span class=\"highlight\">regex</span> with group:\n\n\r\n\r\nvar datastatusMonthly = [3];\r\n\r\nvar text = &#39;datastatusMonthly[0]&#39;;\r\nvar <span class=\"highlight\">regex</span> = /(datastatusMonthly)\\[([0-9]+)\\]/g;\r\nvar match = regex.exec &hellip; ",
            "title": "convert String to array in javascript &quot;datastatusMonthly[0]&quot;"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 116,
            "is_accepted": false,
            "answer_id": 44585641,
            "is_answered": false,
            "question_id": 12841970,
            "item_type": "answer",
            "score": 16,
            "last_activity_date": 1497605177,
            "creation_date": 1497605177,
            "body": "What you call an &quot;evil&quot; regex is a regex that exhibits catastrophic backtracking.  The linked page (which I wrote) explains the concept in detail.  Basically, catastrophic backtracking happens when a regex fails to match and different permutations of the same regex can find a partial match.  The regex engine then tries all those permutations.  If you want to go over your code and inspect your regexes these are the 3 key issues to look at:\n\n\nAlternatives must be mutually exclusive.  If multiple alternatives can match the same text then the engine will try both if the remainder of the regex fails.  If the alternatives are in a group that is repeated, you have catastrophic backtracking.  A classic example is  to match any amount of any text when the regex flavor does not have a &quot;dot matches line breaks&quot; mode.  If this is part of a longer regex then a subject string with a sufficiently long run of spaces (matched by both  and ) will break the regex.  The fix is to use  to make the alternatives mutually exclusive or even better to be more specific about which characters are really allowed, such as  for ASCII printables, tabs, and line breaks.\nQuantified tokens that are in sequence must either be mutually exclusive with each other or be mutually exclusive what comes between them.  Otherwise both can match the same text and all combinations of the two quantifiers will be tried when the remainder of the regex fails to match.  A classic example is  to match 3 things with &quot;anything&quot; between them. When  can&#39;t be matched the first  will expand character by character until the end of the line or file.  For each expansion the second  will expand character by character to match the remainder of the line or file.  The fix is to realize that you can&#39;t have &quot;anything&quot; between them.  The first run needs to stop at  and the second run needs to stop at .  With single characters  is an easy solution.  Since we now stop at the delimiter, we can use possessive quantifiers to further increase performance.\nA group that contains a token with a quantifier must not have a quantifier of its own unless the quantified token inside the group can only be matched with something else that is mutually exclusive with it.  That ensures that there is no way that fewer iterations of the outer quantifier with more iterations of the inner quantifier can match the same text as more iterations of the outer quantifier with fewer iterations of the inner quantifier.  This is the problem illustrated in JDB&#39;s answer.\n\n\nWhile I was writing my answer I decided that this merited a full article on my website.  This is now online too.\n",
            "excerpt": "What you call an &quot;<span class=\"highlight\">evil</span>&quot; <span class=\"highlight\">regex</span> is a <span class=\"highlight\">regex</span> that exhibits catastrophic backtracking.  The linked page (which I wrote) explains the concept in detail. &hellip; Basically, catastrophic backtracking happens when a <span class=\"highlight\">regex</span> fails to match and different permutations of the same <span class=\"highlight\">regex</span> can find a partial match.  The <span class=\"highlight\">regex</span> engine then tries all those permutations. &hellip; ",
            "title": "How can I recognize an evil regex?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "camelcasing"
            ],
            "question_score": 291,
            "is_accepted": false,
            "answer_id": 43889080,
            "is_answered": false,
            "question_id": 2970525,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1494410090,
            "creation_date": 1494410090,
            "body": "Upper camel case (&quot;TestString&quot;) to lower camel case (&quot;testString&quot;) without using regex (let&#39;s face it, regex is evil):\n\n\n",
            "excerpt": "Upper camel case (&quot;TestString&quot;) to lower camel case (&quot;testString&quot;) without using <span class=\"highlight\">regex</span> (let&#39;s face it, <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span>):\n\n&#39;TestString&#39;.split(&#39;&#39;).reduce((t, v, k) =&gt; t + (k === 0 ? &hellip; ",
            "title": "Converting any string into camel case"
        },
        {
            "tags": [
                "c++",
                "boost",
                "boost-spirit",
                "boost-phoenix",
                "boost-spirit-lex"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 43102309,
            "is_answered": false,
            "question_id": 43100216,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1490867055,
            "creation_date": 1490815023,
            "body": "I&#39;m going to chant the oft-heard &quot;Why&quot;?\n\nThis time, for good reason.\n\nIn general, avoid semantic actions: Boost Spirit: &quot;Semantic actions are evil&quot;?. \n\nPhoenix Actors are needlessly more complex than the dedicated functor. They have a sweet point (mainly simple assignment or builtin operations). But if the actor is any kind of non-trivial you&#39;ll see the complexity ramp up quickly, not just for the human but also for the compiler. This leads to\n\n\nslow compilation\nsub-optimal emitted code\nharder to maintain source\nnew classes of error (e.g. when the expression templates hold references to locals/temporaries, something that Boost Proto (and hence Phoenix) does not prevent or signal. In fact, it encourages it by assuming all template expressions are ephemeral, but I digress).\n\n\n\n  Interestingly: Spirit X3 dropped Phoenix altogether, even though Phoenix was once the brain child of Spirit&#179;.\n  \n  The new style uses c++14 polymorphic lambdas, that look 90% like the helper function object in the original code, but inline as a lambda.\n\n\nThis specific case\n\nCan&#39;t work. At all.\n\nThe problem is that you&#39;re mixing lazy/deferred actors with direct invocations. That can never work. The type of  isn&#39;t supposed to be . Of course. It is supposed to be a lazy actor&#185; that can be used at some later time to create a . \n\nNow that we know that (and why)  is an actor type, it should become clear why it is completely bogus to call  on it. You might as well say\n\n\n\nAnd wonder why it would not compile.\n\nSummary:\n\nYou should probably just have the dedicated functor. You can of course Phoenix-adapt the regex functions you require, but all it does is shift the complexity tax for some syntactic sugar.\n\nI&#39;d always opt for the more naive approach that is going to be more understandable to a seasoned c++ programmer, and avoids pitfalls that come with high-wire acts&#178;.\n\nNevertheless, here&#39;s a pointer should you be curious:\n\nhttp://www.boost.org/doc/libs/1_63_0/libs/phoenix/doc/html/phoenix/modules/function.html\n\nLive On Coliru\n\n\n\n\n\n&#185; think composed function object that can be invoked at a later time\n\n&#178; the balance might tip if you were designing this as an EDSL for further configuration by non-experts, but then you will have the added responsibility of documenting your EDSL and the constraints in which it can be used\n\n&#179; should we say, spirit-child of a brain?\n",
            "excerpt": "In general, avoid semantic actions: Boost Spirit: &quot;Semantic actions are <span class=\"highlight\">evil</span>&quot;?. \n\nPhoenix Actors are needlessly more complex than the dedicated functor. &hellip; You can of course Phoenix-adapt the <span class=\"highlight\">regex</span> functions you require, but all it does is shift the complexity tax for some syntactic sugar. &hellip; ",
            "title": "Converting a Boost Spirit Lex semantic action to Phoenix - How to access _val?"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 132,
            "is_accepted": false,
            "answer_id": 42824600,
            "is_answered": false,
            "question_id": 22115,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1489633848,
            "creation_date": 1489633848,
            "body": "If you want to generate &quot;critical&quot; strings, you may want to consider:\n\nEGRET http://elarson.pythonanywhere.com/\nthat generates &quot;evil&quot; strings covering your regular expressions\n\nMUTREX http://cs.unibg.it/mutrex/\nthat generates fault-detecting strings by regex mutation\n\nBoth are academic tools (I am one of the authors of the latter) and work reasonably well.\n",
            "excerpt": "If you want to generate &quot;critical&quot; strings, you may want to consider:\n\nEGRET http://elarson.pythonanywhere.com/\nthat generates &quot;<span class=\"highlight\">evil</span>&quot; strings covering your regular expressions\n\nMUTREX http://cs.unibg.it &hellip; /mutrex/\nthat generates fault-detecting strings by <span class=\"highlight\">regex</span> mutation\n\nBoth are academic tools (I am one of the authors of the latter) and work reasonably well. &hellip; ",
            "title": "Using Regex to generate Strings rather than match them"
        },
        {
            "tags": [
                "emacs",
                "elisp"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 42451809,
            "is_answered": false,
            "question_id": 42444969,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1487995273,
            "creation_date": 1487995273,
            "body": "I am running emacs 25 on mac as well. Installed it via the package file.\n\nHere is my init.el file. I am also new to emacs but you can compare this file with yours and hopefully you find what is missing.\n\n\n",
            "excerpt": "wgre\\\np-ag vc-darcs unfill tidy textile-mode tagedit switch-window sql-indent smex smarty-mode slime-company skewer-less session scss-mode scratch sass-mode\\\n ruby-hash-syntax rspec-mode robe rinari <span class=\"highlight\">regex</span>-tool &hellip; org-mac-iCal org-fstree org-<span class=\"highlight\">evil</span> org-clipli\\\nnk nlinum mwe-log-commands multiple-cursors move-dup monokai-theme mmm-mode markdown-mode magit-gh-pulls lua-mode lively less-css-mode ledger-mode jso\\\nn-mode &hellip; ",
            "title": "emacs 26.0.50 list-package error &#39;Invalid version list&#39;"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "angular",
                "ionic2"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 42090266,
            "is_answered": false,
            "question_id": 42088669,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1486471544,
            "creation_date": 1486471544,
            "body": "Regex is an evil beast. Luckily I found this nice little example on regexlib.com\n\nThis seems to be kind-of what you&#39;re looking for. As for why Angular isn&#39;t matching your whitespace, it may potentially be that you have to double-escape your whitespace selector, so  it would look like:\n\n\n\nBut that&#39;s just a guess.\n",
            "excerpt": "<span class=\"highlight\">Regex</span> is an <span class=\"highlight\">evil</span> beast. Luckily I found this nice little example on regexlib.com\n\nThis seems to be kind-of what you&#39;re looking for. &hellip; ",
            "title": "Ionic 2 : Form validator (regex)"
        },
        {
            "tags": [
                "php",
                "arrays",
                "preg-match",
                "strpos",
                "preg-split"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 41905431,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1485566009,
            "creation_date": 1485566009,
            "body": "I’m trying to convert a formula like;\n\n\n\nInto a multi dimensional array structured as such\n\n\n\nSo as it can be processed via a function similar to;\n\n\n\n(doCalculation simply processes the 2 values passed to it with the defined function)\n\nThe formula can have any level of complexity and the key to structuring the array is with position of the brackets (items in brackets are contained in calc)\n\ne.g\n\n100 *((1 + 21) * ((2 * 10) + 90))\n\nwould become;\n\n\narray\n\n\nval: 100\n\narray\n\n\nfunc: *\ncalc\n\n\narray\n\n\ncalc\n\n\narray\n\n\nval:1\n\narray\n\n\nfunc: +\nval: 21\n\n\n\narray\n\n\nfunc: *\ncalc\n\n\narray\n\n\ncalc\n\n\narray\n\n\nval: 2\n\narray\n\n\nfunc: *\nval: 10\n\n\n\narray\n\n\nfunc: +\nval: 90\n\n\n\n\n\n\n\nThe reason for this approach is it gives the script complete control over what functions can be passed, so as advanced custom functions can be used and to avoid the use of eval() which should in all fairness be spelt evil().\n\nThe issue here is also simplified slighly as in the actual application it uses field references rather than actual values.\n\nThe issue I am having is with creating the array with the correct structure.\n\nHow could i convert an equation such as 100 *((1 + 21) * ((2 * 10) + 90)) into a php array in the format above.\n\nSomething like (below) is the best i&#39;ve come up with so far, but it won&#39;t work on more complex functions.\n\n\n\nI&#39;m sure that my current approach is wrong.... the answer is likely with looping through the string and using preg_split to split on each bracket or potentially using a regex... but so far i&#39;ve just been hitting brick walls.\n\nAny help would be greatly appreciated.\n",
            "excerpt": "this approach is it gives the script complete control over what functions can be passed, so as advanced custom functions can be used and to avoid the use of eval() which should in all fairness be spelt <span class=\"highlight\">evil</span> &hellip; return $return;\n\n     }\n\n\nI&#39;m sure that my current approach is wrong.... the answer is likely with looping through the string and using preg_split to split on each bracket or potentially using a <span class=\"highlight\">regex</span> &hellip; ",
            "title": "PHP: Convert a string containing a mathematical formula into a multi dimensional array so is it can be calculated programatically without using eval()"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 41409711,
            "is_answered": false,
            "question_id": 41409588,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1483199961,
            "creation_date": 1483198866,
            "body": "I was about to propose something very basic with regular expressions but I found this here:\n\nhttps://stackoverflow.com/a/7131156/6219628\n\nAfter reading more of the docs, I didn&#39;t found anything to ignore specific tags with just htmlspecialchars(), which doesn&#39;t sound surprising.\n\nEDIT: And since using regex to parse html seems to be evil, you may eventually appreciate reading this bulky answer :)\nhttps://stackoverflow.com/a/1732454/6219628\n",
            "excerpt": "EDIT: And since using <span class=\"highlight\">regex</span> to parse html seems to be <span class=\"highlight\">evil</span>, you may eventually appreciate reading this bulky answer :)\nhttps://stackoverflow.com/a/1732454/6219628 &hellip; ",
            "title": "how to escape only &lt;script&gt; tag using htmlspecialchars() in php"
        },
        {
            "tags": [
                "c++"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 38492825,
            "is_answered": false,
            "question_id": 38487653,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1478273397,
            "creation_date": 1469060115,
            "body": "I can&#39;t explain this in a comment. Please don&#39;t judge this too harshly:\n\n\n\nThis will catch and correctly handle MOST cases. What it can&#39;t deal with is:\n\nStuff like \n\n\n\nComments\n\n\n\nString literals\n\n\n\n[expletive deleted] macros\n\n\n\nAnd really odd stuff like\n\n\n\nTo do this right, you need a non-trivial state machine that can detect and eliminate the above failure cases.\n",
            "excerpt": "<span class=\"highlight\">Regex</span> is not\n           ^ finds a cin right here and starts reversing &lt;&lt;\n\n\nComments\n\n/* cout &gt;&gt; hah ha ha Sucker!!!; */\n\n\nString literals\n\nstd::string fail = &quot;cout &gt;&gt; Got you again!!!&quot; &hellip; ;\n\n\n[expletive deleted] macros\n\n#define <span class=\"highlight\">evil</span> cout &gt;\\\n&gt; &quot;Gotcha!!!&quot;;\n\n\nAnd really odd stuff like\n\ncout &lt;&lt; vector&lt;vector&lt;int&gt;&gt;(42)[0];\n                         ^ Muhuhahahahahaha!!! &hellip; ",
            "title": "A program that will correct a C++ program that has errors in the operator"
        },
        {
            "tags": [
                "python",
                "regex",
                "loops",
                "freeze"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 39992585,
            "is_answered": false,
            "question_id": 39990657,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1476256383,
            "creation_date": 1476256383,
            "body": "Note that by itself, a  pattern will not cause the catastrophic backtracking, it will only be &quot;evil&quot; inside a longer expression and especially when it is placed next to the start of the pattern since in case subsequent subpatterns fail the engine backtracks to this one, and as the 1+ quantifier inside is again quantified with , that creates a huge amount of possible variations to try before failing. You may have a look at your regex demo and click the regex debugger on the left to see example regex engine behavior.\n\nThe current regex can be written as \n\n\n\nSee the regex demo where there will be a match if you remove space and  in the second field.\n\nDetails:\n\n\n - start of string (not necessary with )\n - (Group 1) 1+ letters/digits/underscores\n - a whitespace\n - 3 pipe symbols\n - see above ( creates Group 2)\n - (Group 3) any 0+ characters other than linebreak characters.\n\n",
            "excerpt": "Note that by itself, a r&#39;(\\w+)+&#39; pattern will not cause the catastrophic backtracking, it will only be &quot;<span class=\"highlight\">evil</span>&quot; inside a longer expression and especially when it is placed next to the start of the pattern &hellip; You may have a look at your <span class=\"highlight\">regex</span> demo and click the <span class=\"highlight\">regex</span> debugger on the left to see example <span class=\"highlight\">regex</span> engine behavior. &hellip; ",
            "title": "Regex match (\\w+) to capture single words delimited by |||"
        },
        {
            "tags": [
                "c#",
                "c++",
                "regex",
                "string",
                "scanf"
            ],
            "question_score": -2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 39836420,
            "item_type": "question",
            "score": -2,
            "last_activity_date": 1475515682,
            "creation_date": 1475512899,
            "body": "I have to write an equivalent of this in C++ in C#,\n\n\n\nwhere the  method trims and removes all spaces in .\n\nI have looked around here on SO and most of the similar questions involves strings that contain delimiters such as spaces or commas, but don&#39;t apply to this case. So I turned to RegEx.\n\nSo far, I have this,\n\n\n\nIt works so far, but I was wondering if there is another way to do this? I a bit wary of RegEx, because according the accepted answer on this question, having  instead of  is potentially dangerous because of evil RegEx. But if I include those extra parenthesis, then I have an extra group. This causes  to split something like  into an array with the elements,\n\n\n\nThis way, I can&#39;t be sure that the unit,  in this case, will be in , which is a problem.\n\nI tested this on this .NET RegEx tester. I also tried to break my RegEx pattern, , but it seems to be fine and &quot;evil RegEx safe&quot;. So I&#39;m not sure if I should stick to what I&#39;ve done so far, or find a more elegant solution, if one exist.\n",
            "excerpt": "I a bit wary of <span class=\"highlight\">RegEx</span>, because according the accepted answer on this question, having ([-]?\\d*\\.?\\d+) instead of ([-]?(\\d*\\.)?\\d+) is potentially dangerous because of <span class=\"highlight\">evil</span> <span class=\"highlight\">RegEx</span>. &hellip; I tested this on this .NET <span class=\"highlight\">RegEx</span> tester. I also tried to break my <span class=\"highlight\">RegEx</span> pattern, ([-]?\\d*\\.?\\d+), but it seems to be fine and &quot;<span class=\"highlight\">evil</span> <span class=\"highlight\">RegEx</span> safe&quot;. &hellip; ",
            "title": "Separating number and unit in a string in C#"
        },
        {
            "tags": [
                "javascript",
                "html",
                "tags",
                "strip",
                "trim"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 5,
            "is_answered": false,
            "question_id": 39406901,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1473786733,
            "creation_date": 1473408887,
            "body": "I would like to trimm text from html tags, and paste result to these tags again. It&#39;s not DOM content, only string.\n\n\n\nWanted result is f.e.:\n\n\n\nI found library striptags, but it only gets rid off tags, but I want to keep them.\n\nIf you have any solution please let me know :)\n\nUPDATE:\n\nThanks all of you for advices. There are few things to add from me: 1. I never have information about html tags, because it came from quill text editor, and I need some kind of regex. 2. In my job there is no jQuery, it&#39;s kind of &#39;evil&#39; :P. 3. I&#39;m using react, so any use of &#39;document&#39; or &#39;window&#39; is unwanted here :(.\n",
            "excerpt": "I never have information about html tags, because it came from quill text editor, and I need some kind of <span class=\"highlight\">regex</span>. 2. In my job there is no jQuery, it&#39;s kind of &#39;<span class=\"highlight\">evil</span>&#39; :P. 3. &hellip; ",
            "title": "How to get text from tags, trimm, and paste to tags again in javascript"
        },
        {
            "tags": [
                "regex",
                "perl",
                "regex-greedy"
            ],
            "question_score": 56,
            "is_accepted": true,
            "answer_id": 38495156,
            "is_answered": false,
            "question_id": 38431931,
            "item_type": "answer",
            "score": 20,
            "last_activity_date": 1472093973,
            "creation_date": 1469076879,
            "body": "When there is a &quot;plus&quot; node (e.g. ) at the beginning of a pattern and the node fails to match, the regex engine skips forward to the point of failure and tries again; with , on the other hand, the engine only advances one character at a time.\nYves Orton explains this optimization nicely here:\n\nThe start class optimisation has two modes, &quot;try every valid start position&quot; (doevery) and &quot;flip flop mode&quot; (!doevery) where it trys only the first valid start position in a sequence.\nConsider /(\\d+)X/ and the string &quot;123456Y&quot;, now we know that if we fail to match X after matching &quot;123456&quot; then we will also fail to match after &quot;23456&quot; (assuming no evil tricks are in place, which disable the optimisation anyway), so we know we can skip forward until the check /fails/ and only then start looking for a real match. This is flip-flop mode.\n\n triggers flip-flop mode; , , and  don&#39;t.\nThis optimization can&#39;t be applied to &quot;star&quot; nodes like  because they can match zero characters, so a failure at one point in a sequence isn&#39;t indicative of failure later in the same sequence.\n\nYou can see this in the debug output for each regex. I&#39;ve highlighted the skipped characters with . Compare this (skips four characters at a time):\n\nto this (skips one or two characters at a time):\n\nNote that the optimization isn&#39;t applied to , because  isn&#39;t at the beginning of the pattern. Both  (logically equivalent to ) and  (logically equivalent to ) probably could be optimized, though; it might make sense to ask on perl5-porters whether either would be worth the effort.\n\nIn case you&#39;re interested, &quot;flip-flop mode&quot; is enabled by setting the  flag on a regex when it&#39;s compiled. See the code around lines 7344 and 7405 in regcomp.c and line 1585 in regexec.c in the 5.24.0 source.\n",
            "excerpt": "You can see this in the debug output for each <span class=\"highlight\">regex</span>. I&#39;ve highlighted the skipped characters with ^. &hellip; In case you&#39;re interested, &quot;flip-flop mode&quot; is enabled by setting the PREGf_SKIP flag on a <span class=\"highlight\">regex</span> when it&#39;s compiled. &hellip; ",
            "title": "Why is `\\s+` so much faster than `\\s\\s*` in this Perl regex?"
        },
        {
            "tags": [
                "regex",
                "string"
            ],
            "question_score": -2,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 36092225,
            "item_type": "question",
            "score": -2,
            "last_activity_date": 1471643318,
            "creation_date": 1458327079,
            "body": "For example, look at this email validating regex:\n. If you look carefully, there are three parts: stuff, the  character, and more stuff. So the regex requires an email address to have an , thus the string  will not match.\n\nYet most regex engines will catastrophically backtrack given this combination. (PCRE, which powers Regex101, is smarter than most, but other regex/string combinations can cause catastrophic backtracking.)\n\nWithout needing to know much about Big O, I can tell that combinatorial things are exponential, while searching is linear. So why don&#39;t regex engines ensure the string contains required characters (so they can quit early)?\n\nUnfortunately, most of what I&#39;ve read about catastrophic backtracking puts the blame on the regex writer for writing evil regexes, instead of exploring the possibility that regex engines/compilers need to do better. Although I found several sources that look at regex engines/compilers, they are too technical.\n\n\n\nComing back after getting more experience, I know that regexes are declarative, meaning the execution plan is determined by the computer, not the programmer. Optimization is one of the ways that regex engines differ the most.\n\nWhile PCRE and Perl have challenged the declarative status-quo with the introduction of backtracking control verbs, it is other engines, without the verbs, which are most likely to catastrophically backtrack.\n",
            "excerpt": "Unfortunately, most of what I&#39;ve read about catastrophic backtracking puts the blame on the <span class=\"highlight\">regex</span> writer for writing <span class=\"highlight\">evil</span> regexes, instead of exploring the possibility that <span class=\"highlight\">regex</span> engines/compilers need &hellip; Optimization is one of the ways that <span class=\"highlight\">regex</span> engines differ the most. &hellip; ",
            "title": "Why don&#39;t regex engines ensure all required characters are in the string?"
        },
        {
            "tags": [
                "regex",
                "algorithm",
                "performance-testing",
                "analysis"
            ],
            "question_score": 10,
            "is_accepted": true,
            "answer_id": 38937338,
            "is_answered": false,
            "question_id": 38785589,
            "item_type": "answer",
            "score": 6,
            "last_activity_date": 1471196301,
            "creation_date": 1471125287,
            "body": "The worst input for a regular expression will vary from engine to engine. The same regex and string may take no time at all on one engine, but never finish on another.\n\nDifferences between engines\n\nEngine Type\n\nFor certain engines, the &quot;evilest&quot; regex is still benign, running in linear time (or  time when both the length of the regex and the length of the string may vary.) Of course, the reason for this is the implementation. These engines don&#39;t backtrack; instead they use a finite state machine (FSM).\n\nNote that some backtracking implementations use FSM, but only as an intermediate step. Don&#39;t let this confuse you; they&#39;re not FSM.\n\nMost of the old regex engines (like sed) use FSM matching. There are a few new engines that use this implementation, such as Go. PCRE even has DFA functions (search for &quot;DFA&quot; here) that use this type of matching.\n\nAnother answer of mine also addresses the potential speed difference between the two implementations.\n\nIt would be wise to consider using a FSM implementation if you are really worried about malicious input affecting the speed of your regex. Unfortunately, FSM is not as powerful as the other implementation; it lacks support for some features, such as back references.\n\nOptimizations\n\nEvil is actually a bit subjective. Something evil to one regex engine may not be evil to a different engine. An evil plot can be thwarted if the engine is optimized. Optimizations are particularly important to backtracking engines, given their potential exponential run time.\n\nShort-circuiting\n\nUnder certain conditions, the engine may be able to quickly determine a match is impossible. While running the regex  against the string , Regex101 says:\n\n\n  Your match failed outright. What this means is the engine, due to its internal optimizations, understood that your pattern would never match at any position, and thus did not even attempt to.\n\n\nKeep in mind that Wikipedia says the regex is evil, especially when paired with that string.\n\nOf course, the engine is smart to not need to backtrack to determine the match wouldn&#39;t work. It saw something pretty obvious: the regex needs an  in order to match, but no  was present in the string.\n\nModifiers\n\nI mention this because you might not expect modifiers to be a factor in regex performance. But they are.\n\nEven PCRE, one of the more optimized implementations, may take considerably more steps with both the  and  modifiers enabled. See my question here for more information about this. In the end, I figured out that only certain characters trigger this behavior.\n\nAnalyzing Strings\n\nString length\n\nIn general, a long string will be slower than a short string. In fact, if you find a string of length x that causes catastrophic backtracking, you can make it backtrack a bit more by increasing the length of the string.\n\nGreedy vs. Lazy\n\nCompare the speeds of these regexes:\n\n\n  on \n on \n  on \n on \n\n\nEssentially, greedy matching is best when you think you will need to match a lot. Lazy matching is best when you need to match only a little.\n\nNote that if you change the regex to  or , then the engine may optimize things considerably.\n\nBrute force testing\n\nThere are several frameworks that are specifically designed to try to find vulnerabilities in your regexes. It may be worthwhile to try one out.\n\nThere&#39;s really one thing that I will suggest if you wanted to try making your own algorithm. It&#39;s not practical to try all characters in the dictionary, especially if you want to test long strings.\n\nInstead, look at your regex to determine what characters you should test. If you have  as your regex, there are really only two things that go into the match:  and not . You could really just imagine that there are only two characters:  and  (aka not ) when you generate your strings to brute force with.\n\nSetting timeouts\n\nIt would be fantastic to be able to ensure your regex finishes before the heat death of the universe, right? Some regex engines do have a way to set a time out.\n\n.NET:\n\n\n\n\n\nJava\n\n\n\n\n\nPHP\n\n\n  \n  \n  Set the number of seconds a script is allowed to run. If this is reached, the script returns a fatal error. The default limit is 30 seconds or, if it exists, the  value defined in the .\n  \n  When called,  restarts the timeout counter from zero. In other words, if the timeout is the default 30 seconds, and 25 seconds into script execution a call such as  is made, the script will run for a total of 45 seconds before timing out.\n\n\nPerl\n\nYou might as well visit the link, since it&#39;s right on Stack Overflow.\n",
            "excerpt": "Optimizations\n\n<span class=\"highlight\">Evil</span> is actually a bit subjective. Something <span class=\"highlight\">evil</span> to one <span class=\"highlight\">regex</span> engine may not be <span class=\"highlight\">evil</span> to a different engine. An <span class=\"highlight\">evil</span> plot can be thwarted if the engine is optimized. &hellip; Keep in mind that Wikipedia says the <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span>, especially when paired with that string.\n\nOf course, the engine is smart to not need to backtrack to determine the match wouldn&#39;t work. &hellip; ",
            "title": "Worst input for given regular expression"
        },
        {
            "tags": [
                "java",
                "arrays",
                "contains"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 38733306,
            "is_answered": false,
            "question_id": 38732972,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1470190638,
            "creation_date": 1470190638,
            "body": "A previous poster pointed out using &quot;boolean flags&quot; while iterating the String. This is okay if you&#39;re doing some microscopic performance optimizations, but I think it&#39;s a bit of an overoptimization compared to using some simpler methods like .\n\n\n\nIt&#39;s definitely not perfect, and there are attempts at regex validations for such things out there, but for a simple check it&#39;s more than sufficient.\n\nIf you really did want to do the string iteration only once, you could iterate . Though I&#39;d recommend just using direct char comparison over :\n\n\n\nIn short, &quot;premature optimization is the root of all evil&quot;. It&#39;s certainly fine to optimize but there are better, more modern methods like profiling of finding out why code is slow.\n",
            "excerpt": "email.contains(&#39; &#39;);\n}\n\n\nIt&#39;s definitely not perfect, and there are attempts at <span class=\"highlight\">regex</span> validations for such things out there, but for a simple check it&#39;s more than sufficient. &hellip; Though I&#39;d recommend just using direct char comparison over #compareTo:\n\nchar c = /* some char */;\nif (c == &#39;@&#39;) {\n    //etc\n}\n\n\nIn short, &quot;premature optimization is the root of all <span class=\"highlight\">evil</span>&quot;. &hellip; ",
            "title": "Search an array for missing information"
        },
        {
            "tags": [
                "php",
                "regex",
                "parsing",
                "text-parsing",
                "regex-lookarounds"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 38111480,
            "is_answered": false,
            "question_id": 38110833,
            "item_type": "answer",
            "score": 9,
            "last_activity_date": 1469880913,
            "creation_date": 1467241624,
            "body": "Update #2\nAccording to others comments\n\nNote: A short RegEx i.e.  is enough if you know your input does not contain  or  out of PHP syntax.\nSo a long RegEx, in what evil cases does it work?\n\nYou have  in a string between quotation marks \nYou have those quotation marks escaped inside one another\nYou have  in a comment block.  or  or \nYou have  in a heredoc or nowdoc  or \n\nOtherwise it is meant to have a pair of opening/closing braces and depth of nested braces is not important.\nDo we have a case that it fails?\nNo unless you have a martian that lives inside your codes.\n\nFormatting is done by @sln&#39;s RegexFormatter software.\nWhat I provided in live demo?\nLaravel&#39;s Eloquent Model.php file (~3500 lines) randomly is given as input. Check it out:\nLive demo\n",
            "excerpt": "1))*)})\n\nNote: A short <span class=\"highlight\">RegEx</span> i.e. {((?&gt;[^{}]++|(?R))*)} is enough if you know your input does not contain { or } out of PHP syntax.\nSo a long <span class=\"highlight\">RegEx</span>, in what <span class=\"highlight\">evil</span> cases does it work? &hellip; ",
            "title": "Match the body of a function using Regex"
        },
        {
            "tags": [
                "apache",
                ".htaccess",
                "mod-rewrite",
                "nginx",
                "url-rewriting"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 38498106,
            "is_answered": false,
            "question_id": 38492378,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1469087287,
            "creation_date": 1469087287,
            "body": "Your  block accepts URIs that end with  (not including the query string). By adding a  after the  you are appending path info.\n\nUsing the documentation this should work for you:\n\n\n\nThe  regex has been changed to accept URIs with path info. The  directive has been replaced by an evil if, as the URI needs to be split first, before being tested for file existence.\n\nI like to place the  statement before any  statement to avoid the latter being silently overridden.\n",
            "excerpt": "fastcgi_params;\n    fastcgi_pass unix:/var/run/php5-fpm.sock;\n\n    fastcgi_index index.php;\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    fastcgi_param HTTP_PROXY &quot;&quot;;\n}\n\n\nThe location <span class=\"highlight\">regex</span> &hellip; The try_files directive has been replaced by an <span class=\"highlight\">evil</span> if, as the URI needs to be split first, before being tested for file existence. &hellip; ",
            "title": "nginx error 500 with slash in rewrite mechanism (import from apache)"
        },
        {
            "tags": [
                "jquery",
                "node.js",
                "cheerio"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 38492550,
            "is_answered": false,
            "question_id": 38491168,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1469058053,
            "creation_date": 1469058053,
            "body": "You&#39;d first need to obtain the raw content of the script tag (which you can do with cheerio), once you have the javascript inside the tag, you have options:\n\n\nSafe, but tightly coupled to the code structure: use regex to find the literal value: \n\n\n\r\n\r\n\r\n\r\n\r\n\n\n\nSafe and flexible, but more complicated (and performance costly). If the code is too complex to use a regex, and alternative approach is to obtain the AST of that js code, and then you&#39;d just traverse the AST to find the literal you&#39;re looking for, you can try Esprima online here to understand what the AST is and how it&#39;d look like: http://esprima.org/demo/parse.html\n\n\nFor the example you shared, the AST looks like this:\n\n\r\n\r\n\r\n\r\n\r\n\n\n\nUnsafe, nasty (see &quot;eval is evil&quot;), but fast and flexible:\n\n\n\r\n\r\n\r\n\r\n\r\n\n\nBig Warning, never use this eval approach if you don&#39;t have complete trust over the content of that script tag, you&#39;d be running that as part of your node.js app, creating a form of Script Injection vulnerability.\n",
            "excerpt": "need to obtain the raw content of the script tag (which you can do with cheerio), once you have the javascript inside the tag, you have options:\n\n\nSafe, but tightly coupled to the code structure: use <span class=\"highlight\">regex</span> &hellip; &quot;sourceType&quot;: &quot;script&quot;\r\n}\r\n\r\n// you can use something smarter to look for &quot;Test&quot; variable declaration here\r\nvar value = ast.body[0].declarations[0].init.value;\r\n\r\n\r\n\n\n\nUnsafe, nasty (see &quot;eval is <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Get code inside script tag"
        },
        {
            "tags": [
                "python",
                "regex",
                "sanitization"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 38154832,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1467415267,
            "creation_date": 1467414077,
            "body": "The Problem:\n\nI have this artificial example function:\n\n\n\nwhich takes a list of words and dynamically constructs a regular expression pattern without proper escaping the words in the list.\n\nUsage samples:\n\n\n\nThe Question:\n\nHow can I test this function to prove that there is no proper regular expression escaping or input sanitization?\n\nIn other words, what items in a  list should I provide to &quot;break&quot; this function?\n\n\n\nI&#39;ve tried several &quot;evil&quot; regexes to simulate catastrophic backtracking and force the function to hang like  or , but the function just returns  instantly and there is no indication of a problem.\n",
            "excerpt": "I&#39;ve tried several &quot;<span class=\"highlight\">evil</span>&quot; regexes to simulate catastrophic backtracking and force the function to hang like (x+x+)+y or (a+)+, but the function just returns False instantly and there is no indication of &hellip; ",
            "title": "Proving a function has no proper input validation"
        },
        {
            "tags": [
                "php",
                "regex",
                "preg-replace"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 38039506,
            "is_answered": false,
            "question_id": 38039318,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1466951377,
            "creation_date": 1466951377,
            "body": "The PHP manual describes the modifier this way: (emphasis mine)\n\n\n  If this deprecated modifier is set,  does normal\n  substitution of backreferences in the replacement string, s it\n  as PHP code(!!), and uses the result for replacing the search string.\n  Single quotes, double quotes, backslashes () and NULL chars will be\n  escaped by backslashes in substituted backreferences.\n\n\nFirst of all, the very concept of this modifier was always evil.  It included an  case into source-code, the existence of which was usually overlooked and therefore quite easily exploited.\n\nThe online PHP documentation ... http://php.net/manual/en/reference.pcre.pattern.modifiers.php ... talks very extensively about this modifier, why it is evil, and specifically how to use  to replace it.\n\nLet&#39;s take your first regex, the one for &quot;Geshi syntax&quot;:\n\n\n\nThis could be replaced by something like:\n\n\n\nAfter the regex has been evaluated against the string and the matching groups (if any) have been identified, the array is handed to the callback. (The array looks like the one returned by a normal match.)  The value returned by the callback is the final replacement string.\n\nNow, the presence of an executable subroutine is made explicit, and it becomes impossible for a clever  to influence what it consists of or to inject arbitrary code.\n\nFurthermore, it&#39;s much more flexible.  You can, after all, insert an entire subroutine. (It can be an anonymous one, as shown, or it can be a reference to a subroutine that&#39;s used many times.)\n\nFrankly, the  modifier was a bad idea that won&#39;t be missed . . .  Callbacks do the same thing, and much more.\n",
            "excerpt": "First of all, the very concept of this modifier was always <span class=\"highlight\">evil</span>.  It included an eval case into source-code, the existence of which was usually overlooked and therefore quite easily exploited. &hellip; Let&#39;s take your first <span class=\"highlight\">regex</span>, the one for &quot;Geshi syntax&quot;:\n\n$s = preg_replace(\n  &quot;#\\[(php|sql|html)\\](.+?) &hellip; ",
            "title": "/e modifier is deprecated"
        },
        {
            "tags": [
                "regex",
                "pcre",
                "backtracking"
            ],
            "question_score": 20,
            "is_accepted": false,
            "answer_id": 37979580,
            "is_answered": false,
            "question_id": 37912224,
            "item_type": "answer",
            "score": 16,
            "last_activity_date": 1466637394,
            "creation_date": 1466636327,
            "body": "TL;DR\n\nIn short, &quot;backtracking&quot; is when a regex engine returns to a &quot;flexible&quot; match, attempting a different path to get a successful match.\n\nBacktracking with Alternation\n\nFor example, in the following pattern and input:\n\n\n\n\n\n\n\nThe regex engine will match &quot;foo&quot;, then attempt the first of the two options, matching &quot;b&quot; and then &quot;a&quot;, but fails at &quot;r&quot;. Rather than failing the whole match, though, it will &quot;rewind the tape&quot; and start with the second alternative, matching &quot;b&quot; then &quot;a&quot; and then &quot;z&quot;... success!\n\nBacktracking with Quantifiers\n\nThis also works with quantifiers. A quantifier is anything that encourages the engine to match a repeating pattern, including , ,  and  (depending on the engine).\n\nA greedy quantifier (the default) will match as many repetitions as possible before moving on to the rest of the pattern. For example, given the pattern and input below:\n\n\n\n\n\n\n\nThe pattern  will begin by matching the entire string: &quot;foobar&quot;. However, when it moves on to the , the regex engine has reach the end of the input and the match fails. Rather than simply giving up, the engine will ask the last greedy quantifier to give up one of its repetitions, now matching &quot;fooba&quot;. The match still fails, so the engine asks  to give up the &quot;a&quot; (failure), and then the &quot;b&quot;. After giving up the &quot;b&quot;, the engine can now match , and the match succeeds.\n\nTrees and Backtracking\n\nAnother way of thinking of a regex is as a &quot;tree&quot;, and backtracking is going back up a node and trying another path. Given the pattern  and the input &quot;foobaz&quot;, the engine will attempt something like the following:\n\n\n\nCounting the &quot;Backtracks&quot;\n\nAs to why you see differences in the &quot;number&quot; of backtracks... this probably has a lot to do with internal optimizations and logging level. For example, RegexBuddy does not appear to be logging the match to the empty string before , while regex101 does. In the end, though, it doesn&#39;t really matter what exact order you backtrack in (what order you climb back up the tree) so long as you end up with the same result.\n\nEvil Regexes\n\nYou already know this, but for the benefit of anyone else who happens by, your regex was written to demonstrate &quot;catastrophic backtracking&quot; (aka &quot;evil regex&quot;), where the number of backtrack attempts grows exponentially as the length of the input increases. These regexes can be exploited to perform DoS attacks, so you must use caution not to introduce these into your patterns (as I found out).\n",
            "excerpt": "However, when it moves on to the b, the <span class=\"highlight\">regex</span> engine has reach the end of the input and the match fails. &hellip; <span class=\"highlight\">Evil</span> Regexes\n\nYou already know this, but for the benefit of anyone else who happens by, your <span class=\"highlight\">regex</span> was written to demonstrate &quot;catastrophic backtracking&quot; (aka &quot;<span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>&quot;), where the number of backtrack &hellip; ",
            "title": "RegEx debugging"
        },
        {
            "tags": [
                "javascript",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 37707038,
            "is_answered": false,
            "question_id": 37706048,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1465401073,
            "creation_date": 1465400280,
            "body": "First I believe you have a typo in your regex it should be  instead of  notice the lower-case . This correctly matches accross lines.\n\nThis regex could accomplish what you need for matching such a document, someone could probably make a more optimized version:\n\n\n\nOn the other hand I would rather suggest you do this with a different approach if possible. For example if you&#39;re doing this within NodeJS I&#39;d strongly suggest you do a check per line for the  or  delimiters. Then fill the array with lines until the ending delimiter. \n\nAssuming that you want an array of lines in each document, loose pseudo code following:\n\n\n\nAnother note if you&#39;re doing this with HTML I&#39;d strongly suggest not to use regex at all as HTML is not a regular language :) you&#39;ll find many links on SO pointing to evil.\n",
            "excerpt": "First I believe you have a typo in your <span class=\"highlight\">regex</span> it should be [\\s\\S] instead of [\\S\\S] notice the lower-case s. This correctly matches accross lines. &hellip; at all as HTML is not a regular language :) you&#39;ll find many links on SO pointing to <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Split a huge text using regex delimiters"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 5,
            "is_accepted": false,
            "answer_id": 37193871,
            "is_answered": false,
            "question_id": 37193706,
            "item_type": "answer",
            "score": 10,
            "last_activity_date": 1464337103,
            "creation_date": 1463074540,
            "body": "You could, although it&#39;s evil, use an eval after joining all the array elements.\ni.e.\n\n\n\nUpdate:\n\nI just recently thought of a much simple (not simpler than eval) but safe answer. If the only boolean operations you&#39;re using are  and  and the parentheses are properly formatted, then you could do a bunch of regex replaces until there is only one value left, either &quot;true&quot; or &quot;false&quot;.\n\nThe boolean values for AND operations can only be as follows and they simplify to either true or false\n\n\n\nthe same goes for OR operations\n\n\n\nAs a result, we can replace the expression with their simplified values - true or false. Then, if there are parentheses around the expression it&#39;ll end up as either  or  and we can easily regex replace that as well.\n\nWe can then loop this routine until we&#39;re finally left with one value, either  or .\n\ni.e. in code\n\n\n\nAnnd, if you&#39;re really dangerous, you can chain all those replaces together\n\nAlso, please notice the lovely lack of recursion and use of only one loop\n",
            "excerpt": "You could, although it&#39;s <span class=\"highlight\">evil</span>, use an eval after joining all the array elements.\ni.e. &hellip; Then, if there are parentheses around the expression it&#39;ll end up as either &#39;(true)&#39; or &#39;(false)&#39; and we can easily <span class=\"highlight\">regex</span> replace that as well. &hellip; ",
            "title": "Turning an array of values and strings into an if statement in Javascript"
        },
        {
            "tags": [
                "php",
                "regex",
                "security",
                "preg-match",
                "denial-of-service"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 37378330,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1464167950,
            "creation_date": 1463943312,
            "body": "How can I trigger a Regex-DOS using the  function using an evil regular expression (e.g. (a+)+ )?\n\nFor example, I have the following situation:\n\n\n\nIf I have control over , how could I trigger a DOS attack or reach the backtrack limit of the  functions in php?\n\nHow could I do this with the following expressions?\n\n\n",
            "excerpt": "How can I trigger a <span class=\"highlight\">Regex</span>-DOS using the preg_match() function using an <span class=\"highlight\">evil</span> regular expression (e.g. (a+)+ )? &hellip; ",
            "title": "How to trigger Regex Denial-of-Service in PHP?"
        },
        {
            "tags": [
                "angularjs",
                "regex",
                "razor"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 37259708,
            "is_answered": false,
            "question_id": 37257509,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1463419551,
            "creation_date": 1463419551,
            "body": "I assume that your C# code is actually: . The  avoids needing the evil escaped escape.\n\nYou will likely need to use the evil escaped escape in this case. Note that you don&#39;t need to escape the  if you are putting it directly in a string (if you are using it how I think you are). You can also use braces to minimize the escaping. So you can take this regex:\n\n\n\nand pass it through regex planet to get this:\n\n\n\nI would not recommend manual conversion since you already have an escaped backslash.\n",
            "excerpt": "The @ avoids needing the <span class=\"highlight\">evil</span> escaped escape.\n\nYou will likely need to use the <span class=\"highlight\">evil</span> escaped escape in this case. &hellip; So you can take this <span class=\"highlight\">regex</span>:\n\n(\\w+/|\\w+\\\\)+(\\w+)[.]\\w+\n\n\nand pass it through <span class=\"highlight\">regex</span> planet to get this:\n\n&quot;(\\\\w+/|\\\\w+\\\\\\\\)+(\\\\w+)[.] &hellip; ",
            "title": "Pass regex to variable (angular)"
        },
        {
            "tags": [
                "python",
                "list",
                "python-2.7",
                "match"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 37252940,
            "is_answered": false,
            "question_id": 37252447,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1463398955,
            "creation_date": 1463398367,
            "body": "A naive and simple approach - use  to transform the string from the file to a Python evaluable form, then evil  it:\n\n\n\nI think, using  in this context (seems to be a harmless academic NLP task) is ok. If the tokens in your text file aren&#39;t strictly alphanumerical, you might need a smarter regex as  to match them, maybe sth. like ...\n",
            "excerpt": "A naive and simple approach - use <span class=\"highlight\">regex</span> substitution to transform the string from the file to a Python evaluable form, then <span class=\"highlight\">evil</span> eval it:\n\nimport re\n\ns2 = &#39;[go:VB, [like:IN, [i:PR]], [to:TO], [there:RB &hellip; If the tokens in your text file aren&#39;t strictly alphanumerical, you might need a smarter <span class=\"highlight\">regex</span> as r&#39;\\w+&#39; to match them, maybe sth. like r&#39;[^\\[\\]]+&#39;... &hellip; ",
            "title": "matching between two different structured python lists"
        },
        {
            "tags": [
                "arrays",
                "bash"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 37120157,
            "is_answered": false,
            "question_id": 37120028,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1462810404,
            "creation_date": 1462809076,
            "body": "Consider instead:\n\n\n\n\n\nI&#39;ll go into the details below:\n\n\n has to be explicitly created as an array to actually be an array -- otherwise, it&#39;s just a string with a bunch of files in it.\n\nThis is an array:\n\n\n\nThis is not an array (and, in fact, could be a single filename):\n\n\nA proper bash array is expanded with  to get all contents, or  to get only the first entry.\n\n\n\n...thus checks the existence (whether as a file or a symlink) of the first entry in the array -- which is sufficient to tell if the glob expression did in fact expand, or if it matched nothing.\nA boolean is better represented with numeric values than a string containing  or : Running  has potential to perform arbitrary activity if the contents of  could ever be set to a user-controlled value, whereas  -- checking whether  is a positive numeric value (true) or otherwise (false) -- has far less room for side effects in presence of bugs elsewhere.\nThere&#39;s no need to loop over array entries to print them in a list:  will expand the format string additional times whenever it has more arguments (from the array expansion) than its format string requires. Moreover, using  in your format string will quote nonprintable values, whitespace, newlines, &amp;c. in a format that&#39;s consumable by both human readers and the shell -- whereas otherwise a file created with  will appear to be two list entries, whereas in fact it is only one.\n\n",
            "excerpt": "with NUL delimiters for safety\n#files=( )\n#while IFS= read -r -d &#39;&#39; f; do\n#  files+=( &quot;$f&quot; )\n#done &lt; &lt;(printf &#39;%s\\0&#39; * | egrep --null --null-data -e &quot;$1&quot;)\n\n# ...or, evaluate all files against $1, as <span class=\"highlight\">regex</span> &hellip; using %q in your format string will quote nonprintable values, whitespace, newlines, &amp;c. in a format that&#39;s consumable by both human readers and the shell -- whereas otherwise a file created with touch $&#39;<span class=\"highlight\">evil</span> &hellip; ",
            "title": "Bash: rm with an array of filenames"
        },
        {
            "tags": [
                "php",
                "html",
                "xml",
                "xml-parsing",
                "html-parsing"
            ],
            "question_score": 2299,
            "is_accepted": false,
            "answer_id": 3650431,
            "is_answered": false,
            "question_id": 3577641,
            "item_type": "answer",
            "score": 154,
            "last_activity_date": 1462617827,
            "creation_date": 1283766053,
            "body": "Why you shouldn&#39;t and when you should use regular expressions?\n\nFirst off, a common misnomer: Regexps are not for &quot;parsing&quot; HTML. Regexes can however &quot;extract&quot; data. Extracting is what they&#39;re made for. The major drawback of regex HTML extraction over proper SGML toolkits or baseline XML parsers are their syntactic effort and varying reliability.\n\nConsider that making a somewhat dependable HTML extraction regex:\n\n\n\nis way less readable than a simple phpQuery or QueryPath equivalent:\n\n\n\nThere are however specific use cases where they can help.\n\n\nMany DOM traversal frontends don&#39;t reveal HTML comments , which however are sometimes the more useful anchors for extraction. In particular pseudo-HTML variations  or SGML residues are easy to tame with regexps.\nOftentimes regular expressions can save post-processing. However HTML entities often require manual caretaking.\nAnd lastly, for extremely simple tasks like extracting &lt;img src= urls, they are in fact a probable tool. The speed advantage over SGML/XML parsers mostly just comes to play for these very basic extraction procedures.\n\n\nIt&#39;s sometimes even advisable to pre-extract a snippet of HTML using regular expressions  and process the remainder using the simpler HTML parser frontends.\n\nNote: I actually have this app, where I employ XML parsing and regular expressions alternatively. Just last week the PyQuery parsing broke, and the regex still worked. Yes weird, and I can&#39;t explain it myself. But so it happened.\nSo please don&#39;t vote real-world considerations down, just because it doesn&#39;t match the regex=evil meme. But let&#39;s also not vote this up too much. It&#39;s just a sidenote for this topic.\n",
            "excerpt": "Just last week the PyQuery parsing broke, and the <span class=\"highlight\">regex</span> still worked. Yes weird, and I can&#39;t explain it myself. But so it happened. &hellip; So please don&#39;t vote real-world considerations down, just because it doesn&#39;t match the <span class=\"highlight\">regex</span>=<span class=\"highlight\">evil</span> meme. But let&#39;s also not vote this up too much. It&#39;s just a sidenote for this topic. &hellip; ",
            "title": "How do you parse and process HTML/XML in PHP?"
        },
        {
            "tags": [
                "c#",
                "sitecore",
                "sitecore8"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 37073199,
            "is_answered": false,
            "question_id": 37073132,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1462539884,
            "creation_date": 1462539884,
            "body": "No. There is no way to get the number of placeholder.\n\nSitecore generates pages dynamically. It can generated completely different output for  and . \n\n can be inside a rendering which is hidden for one user and shown for another.\n\nThat&#39;s why you simply cannot tell how many placeholder with particular key will be rendered in a final page.\n\nWhat you could try to do (which is reaaaaaaaly evil in my opinion) is to get the layout assigned to the page, get all the renderings and for all of them get their  or  +  files and use some regex (another bad thing for html) to count placeholders with particular key.\n\nBut again - you can never be 100% sure that this is the number that will be used on the rendered page.\n",
            "excerpt": "What you could try to do (which is reaaaaaaaly <span class=\"highlight\">evil</span> in my opinion) is to get the layout assigned to the page, get all the renderings and for all of them get their cshtml or aspx + ascx files and use some &hellip; <span class=\"highlight\">regex</span> (another bad thing for html) to count placeholders with particular key. &hellip; ",
            "title": "Sitecore get the number of placeholders"
        },
        {
            "tags": [
                "java",
                "regex",
                "maven",
                "checkstyle"
            ],
            "question_score": 9,
            "is_accepted": false,
            "answer_id": 36923279,
            "is_answered": false,
            "question_id": 33266679,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1462066673,
            "creation_date": 1461869820,
            "body": "I found some problems with how you&#39;re trying to use regexes. I think I also found a solution (but I am unable to test it because I don&#39;t use Maven/Checkstyle).\n\n\n\nYour hypothesis about  being the issue is wrong. Scrolling down the page for RegexpHeader, there is an example that uses a regex group like :\n\n\n\n\n\nThere is a problem with your regex here: . You&#39;re not escaping the regex control characters (but not the ones you pointed out). You should make it:\n\n\n\nIn Java, it is necessary to have the &quot;evil&quot; escaped escape (). The regex in its pure form is:\n\n\n\nYou can use the &quot;pure form&quot; when the regex is in its own file.\n\nThe full text from the docs states (emphasis mine):\n\n\n  the required header specified inline. Individual header lines must be separated by the string &quot;\\n&quot; (even on platforms with a different line separator), and regular expressions must not span multiple lines.\n\n\nThis might mean that you are required to prefix each line with the anchor . All the examples I saw were like that.\n\nYou might be wondering how you will be able to use regexes with Javadocs (for example), which fit the following format (roughly):\n\n\n\nThe middle line may be missing. Or there may be 500 lines like that.\n\nThey give an example of a header that deals with this.\n\nRegex file (excerpt):\n\n\n\nNote: The words  probably aren&#39;t in the file.\n\nRegexpHeader:\n\n\n\nSee how they have line 13 as &quot;multiline&quot;? From the doc:\n\n\n  line numbers to repeat (zero or more times)\n\n",
            "excerpt": "2004 MyCompany$\\n^// All rights reserved$&quot;/&gt;\n&lt;/module&gt;\n\n\n\n\nThere is a problem with your <span class=\"highlight\">regex</span> here: value=&quot;/*a(\\x10c)?b*/\\n&quot;. &hellip; b\\\\*/\\n&quot;\n\n\nIn Java, it is necessary to have the &quot;<span class=\"highlight\">evil</span>&quot; escaped escape (\\\\). The <span class=\"highlight\">regex</span> in its pure form is:\n\n /\\*a(\\x10c)?b\\*/\\n\n\n\nYou can use the &quot;pure form&quot; when the <span class=\"highlight\">regex</span> is in its own file. &hellip; ",
            "title": "How to specify an optional regex group with a newline character in checkstyle&#39;s RegexpHeader?"
        },
        {
            "tags": [
                "regex",
                "apache-nifi"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 36827823,
            "is_answered": false,
            "question_id": 36825860,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1461526390,
            "creation_date": 1461525925,
            "body": "You can use:\n\n\n\nThere&#39;s no need to escape this backslash because it&#39;s not a regex backslash.\n\nExplanation\n\n\nThe  matches a literal .\nThe  matches a . I have chosen to use brackets instead of the evil Java escaped escape.\n\n",
            "excerpt": "You can use:\n\nreplaceAll(&quot;\\&quot;[{]&quot;, &quot;{&quot;);\nreplaceAll(&quot;[}]\\&quot;&quot;, &quot;}&quot;);\n\n\nThere&#39;s no need to escape this backslash because it&#39;s not a <span class=\"highlight\">regex</span> backslash.\n\nExplanation\n\n\nThe \\&quot; matches a literal &quot;. &hellip; I have chosen to use brackets instead of the <span class=\"highlight\">evil</span> Java escaped escape. &hellip; ",
            "title": "ReplaceText processor configuration"
        },
        {
            "tags": [
                "regex",
                "mule",
                "mule-el"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 36774923,
            "is_answered": false,
            "question_id": 36749323,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1461254495,
            "creation_date": 1461254495,
            "body": "Mule (as this page indicates) does not give a way to avoid the evil escaped escape. If you use a  in your regex, you must escape it: . Java is the same way.\n\nAlso, you need to understand that certain regex symbols do not always need to be escaped. This is very important when you work in Mule/Java, because it means you avoid the evil escaped escape.\n\nDepending on where they appear in the regex, characters may either gain or lose meaning as meta characters. The  character only has special meaning when it is sandwiched inside  character classes. This means that you just can just use it normally instead of escaping it in your regular expression.\n\nI suggest that you read up on regexes.\n\nThere will be times that you need to use the evil escaped escape, which can get confusing. Personally, I usually use this site to convert my regexes into escaped s.\n",
            "excerpt": "Mule (as this page indicates) does not give a way to avoid the <span class=\"highlight\">evil</span> escaped escape. If you use a \\ in your <span class=\"highlight\">regex</span>, you must escape it: \\\\. Java is the same way. &hellip; Also, you need to understand that certain <span class=\"highlight\">regex</span> symbols do not always need to be escaped. This is very important when you work in Mule/Java, because it means you avoid the <span class=\"highlight\">evil</span> escaped escape. &hellip; ",
            "title": "Validator.matchesRegex in Mule blows up with basic pattern"
        },
        {
            "tags": [
                "java",
                "regex",
                "extglob"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 36636765,
            "is_answered": false,
            "question_id": 26042753,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1460683520,
            "creation_date": 1460683520,
            "body": "extglob can match a number of regex constructs ( is a list of alterations):\n\n\n\nThere are some things that regex does that cannot be done in extglob, as far as I know, too:\n\n\n\nAssuming all of the constructs in the regex have extglob equivalents, it would be possible to convert it to extglob form. It would be difficult, because regexes are represented by a CFG. And you&#39;re using Java, which forces you to use the evil escaped escape .\n\nWhy not just use a different bash utility that supports regexes? Like this.\n",
            "excerpt": "extglob can match a number of <span class=\"highlight\">regex</span> constructs (pattern-list is a list of alterations):\n\nextglob           <span class=\"highlight\">regex</span>\n--------------    -----------------\n\n\n?                 [^/]\n*                 [^/]*\n. &hellip; And you&#39;re using Java, which forces you to use the <span class=\"highlight\">evil</span> escaped escape \\\\.\n\nWhy not just use a different bash utility that supports regexes? Like this. &hellip; ",
            "title": "How to convert regex into an extglob expression?"
        },
        {
            "tags": [
                "c#",
                "regex",
                "regex-greedy"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 36632461,
            "is_answered": false,
            "question_id": 36632047,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1460664291,
            "creation_date": 1460662797,
            "body": "I can see Java&#39;s influence. The  means you do not need the evil escaped escape :\n\n\n\nIn case you didn&#39;t know, Java&#39;s regexes are a pain. Most languages aren&#39;t like that. Python, for example, uses  instead of C#&#39;s .\n\n\n\nEdit: JavaScript only makes you escape escapes within strings, but you can use something like: .  The syntax is similar to Perl, actually.\n\nJava has no alternative to escaped escapes, which is why I assumed you meant Java.\n",
            "excerpt": "The @ means you do not need the <span class=\"highlight\">evil</span> escaped escape \\\\:\n\n@&quot;^(\\s{3}){0,}(\\s{5})*$&quot;\n\nIn case you didn&#39;t know, Java&#39;s regexes are a pain. Most languages aren&#39;t like that. &hellip; ",
            "title": "C# regex (coming from a perl/javascript background)"
        },
        {
            "tags": [
                "regex",
                "perl",
                "alternation"
            ],
            "question_score": 7,
            "is_accepted": false,
            "answer_id": 36608603,
            "is_answered": false,
            "question_id": 36420517,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1460578203,
            "creation_date": 1460578203,
            "body": "How regex alternation is implemented in Perl is fairly well explained in \n\n\n  Matching this or that\n  \n  We can match different character strings with the alternation\n  metacharacter  . To match  or  , we form the regex  .\n  As before, Perl will try to match the regex at the earliest possible\n  point in the string. At each character position, Perl will first try\n  to match the first alternative,  . If  doesn&#39;t match, Perl will\n  then try the next alternative,  . If  doesn&#39;t match either, then\n  the match fails and Perl moves to the next position in the string.\n  Some examples:\n\n\n  \n  Even though  is the first alternative in the second regex,  is able to match\n  earlier in the string.\n\n\n  \n  Here, all the alternatives match at the first string position, so the\n  first alternative is the one that matches. If some of the alternatives\n  are truncations of the others, put the longest ones first to give them\n  a chance to match.\n\n\n  \n  The last example points out \n  that character classes are like alternations of characters. At a given\n  character position, the first alternative that allows the regexp match\n  to succeed will be the one that matches.\n\n\nSo this should explain the price you pay when using alternations in regex.\n\nWhen putting simple regex together, you don&#39;t pay such a price. It&#39;s well explained in another related question in SO. When directly searching for a constant string, or a set of characters as in the question, optimizations can be done and no backtracking is needed which means potentially faster code.\n\nWhen defining the regex alternations, just choosing a good order (putting the most common findings first) can influence the performance. It is not the same either to choose between two options, or twenty. As always, premature optimization is the root of all evil and you should instrumentiate you code (Devel::NYTProf) if there are problems or you want improvements. But as a general rule alternations should be kept to a minimum and avoided if possible since:\n\n\nThey easily make the regex too big an complex. We like simple, easy to understand / debug / maintain regex.\nVariability and input dependant. They could be an unexpected source of problems since they backtrack and can lead to unexpected lack of performance depending on your input. As I understand, there&#39;s no case when they will be faster.\nConceptually you are trying to match two different things, so we could argue that two different statements are more correct and clear than just one.\n\n\nHope this answer gets closer to what you were expecting.\n",
            "excerpt": "To match dog or cat , we form the <span class=\"highlight\">regex</span> dog|cat .\n  As before, Perl will try to match the <span class=\"highlight\">regex</span> at the earliest possible\n  point in the string. &hellip; As always, premature optimization is the root of all <span class=\"highlight\">evil</span> and you should instrumentiate you code (Devel::NYTProf) if there are problems or you want improvements. &hellip; ",
            "title": "Is it faster to use alternation than subsequent replacements in regular expressions"
        },
        {
            "tags": [
                "python",
                "regex",
                "git",
                "githooks"
            ],
            "question_score": 22,
            "is_accepted": false,
            "answer_id": 24991376,
            "is_answered": false,
            "question_id": 12093748,
            "item_type": "answer",
            "score": 24,
            "last_activity_date": 1459352815,
            "creation_date": 1406536886,
            "body": " with  is a possibility:\n\n\n\nAdvantages:\n\n\nif the algorithm ever changes, the check will update automatically\nyou are sure to get it right, which is way harder with a monster Regex\n\n\nDisadvantages:\n\n\nslower because subprocess. But premature optimization is the root of all evil.\nrequires Git as a binary dependency. But in the case of a hook it will always be there.\n\n\npygit2, which uses C bindings to libgit2, would be an even better possibility if  is exposed there, as it would be faster than , but I haven&#39;t found it.\n",
            "excerpt": "check-ref-format&quot;, ref])\nexit_status = process.wait()\n\n\nAdvantages:\n\n\nif the algorithm ever changes, the check will update automatically\nyou are sure to get it right, which is way harder with a monster <span class=\"highlight\">Regex</span> &hellip; But premature optimization is the root of all <span class=\"highlight\">evil</span>.\nrequires Git as a binary dependency. But in the case of a hook it will always be there. &hellip; ",
            "title": "How do I check for valid Git branch names?"
        },
        {
            "tags": [
                "php",
                "magento",
                "nginx",
                "url-rewriting",
                "fastcgi"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 3948588,
            "is_answered": false,
            "question_id": 3947333,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1458824859,
            "creation_date": 1287226395,
            "body": "I have some experience with nginx in this regard and have even written about it. So in a shameless act of self-promotion here is the result of my earlier research:\nhttp://www.magentocommerce.com/boards/viewreply/211050/\n\n\n\nSix years on and the above link is dead.  Also my nginx configs are more mature.  The following starts by blocking all files and only allowing those which are explicitly public.  All other requests are rewritten to .  If you want to execute some other PHP file you must write your own exclusion.  This is the safest way I can think of.\n\n/etc/nginx/magento_server:\n\n\n\n/etc/nginx/conf.d/php.conf:\n\n\n\nEach store then has it&#39;s own server block similar to this:\n\n/etc/nginx/sites-enabled/yoursite.com:\n\n\n\nAnd since  files are ignored (because this is not Apache) it helps to put  in each web root:\n\n/var/www/.user.ini\n\n\n",
            "excerpt": "Include from &quot;server {}&quot; block\n##\n\n# 1M = one month\nexpires 1M;\n# recommended for all content, regardless\nadd_header X-Content-Type-Options &quot;nosniff&quot;;\n\n##\n# Front handler\n##\n\nlocation / {\n    # if is <span class=\"highlight\">evil</span> &hellip; log_not_found off;\n}\n\n# specific exclusions, still no <span class=\"highlight\">regex</span>\nlocation = /media/.htaccess              { return 404; }\nlocation ^~ /media/customer/             { return 404; }\nlocation ^~ /media/downloadable &hellip; ",
            "title": "How can I remove index.php from the address while redirect requests to index.php via fastcgi?"
        },
        {
            "tags": [
                "regex",
                "string"
            ],
            "question_score": -2,
            "is_accepted": false,
            "answer_id": 36092368,
            "is_answered": false,
            "question_id": 36092225,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1458327625,
            "creation_date": 1458327625,
            "body": "I think you&#39;re taking this the wrong way, really:\n\n\n  Unfortunately, most of what I&#39;ve read about catastrophic backtracking puts the blame on the regex writer for writing evil regexes, instead of exploring the possibility that regex engines/compilers need to do better. Although I found several sources that look at regex engines/compilers, they are too technical.\n\n\nWell, if you write a regex, your regex engine will need to follow that program you&#39;ve written.\nIf you write a complex program, then there&#39;s nothing the engine can do about that; this regex explicitly specifies that you&#39;ll need to match &quot;stuff&quot; first, before looking for the .\n\nNow, not being too involved in writing compilers, I agree, in this case, it might be possible to first identify all the &quot;static&quot; elements, which here are only said , and look for them. Sadly, in the general case, this won&#39;t really help you, because there might either be more than one static element or the none at all…\n\nIf you cared about speed, you&#39;d actually just first search for the  with plain linear search, and then do your regex thing after you&#39;ve found one. \n\nRegexes were never meant to be as fast as linear search engines, because they were rather meant to be much, much more powerful. \n\nSo, not only are you taking the wrong person to the judge (the regex engine rather than the regex, which is a program with a complexity), you&#39;re also blaming the victim for the crime (you want to harvest the speed of just looking for the  character, but still use a regex).\n\n\nby the way, don&#39;t validate email addresses with regexes. It&#39;s the wrong tool: \nhttp://www.ex-parrot.com/pdw/Mail-RFC822-Address.html\n",
            "excerpt": "I think you&#39;re taking this the wrong way, really:\n\n\n  Unfortunately, most of what I&#39;ve read about catastrophic backtracking puts the blame on the <span class=\"highlight\">regex</span> writer for writing <span class=\"highlight\">evil</span> regexes, instead of exploring &hellip; Although I found several sources that look at <span class=\"highlight\">regex</span> engines/compilers, they are too technical.\n\n\nWell, if you write a <span class=\"highlight\">regex</span>, your <span class=\"highlight\">regex</span> engine will need to follow that program you&#39;ve written. &hellip; ",
            "title": "Why don&#39;t regex engines ensure all required characters are in the string?"
        },
        {
            "tags": [
                "regex",
                "security",
                "match",
                "code-injection",
                "denial-of-service"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 35917903,
            "is_answered": false,
            "question_id": 35798236,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1457617186,
            "creation_date": 1457616513,
            "body": "Yes it would be a naive approach and would make your server susceptible to DOS attacks. \n\nActually first link you have given yourself is pretty nice and complimentary to it you could look at : How can I recognize an evil regex?\n\nHowever it seems like it is a difficult task to detect such evil regexes. It depends how much risk do you want to take ? One solution could be building a mechanism to spawn processes/threads (depends on your platform) that evaluates input strings with the given regex and set a timeout for it. Once the process takes long (as long as you can afford) you could kill it.\n",
            "excerpt": "Actually first link you have given yourself is pretty nice and complimentary to it you could look at : How can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>? &hellip; However it seems like it is a difficult task to detect such <span class=\"highlight\">evil</span> regexes. It depends how much risk do you want to take ? &hellip; ",
            "title": "Not having parenthesis alone in a regex will prevent ReDOS?"
        },
        {
            "tags": [
                "javascript",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 35786777,
            "is_answered": false,
            "question_id": 35786641,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1457057521,
            "creation_date": 1457057521,
            "body": "\r\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "A dog has {{dog.skin}} where-as a bird has {{bird.skin}}.&#39;,\r\n    <span class=\"highlight\">regex</span> = /{{([^]*?)}} &hellip; ) {\r\n    datum = datum[down.shift()];\r\n  }\r\n  return datum;\r\n});\r\nconsole.log(result);\r\n\r\n//<span class=\"highlight\">evil</span> way, more flexible, less safe, slower\r\nvar result = html.replace(<span class=\"highlight\">regex</span>, function(_, e) {\r\n  return eval( &hellip; ",
            "title": "Search String with Regex, and Replace Contents with Data"
        },
        {
            "tags": [
                "python",
                "regex",
                "nlp",
                "nltk",
                "tokenize"
            ],
            "question_score": 17,
            "is_accepted": true,
            "answer_id": 35348340,
            "is_answered": false,
            "question_id": 35345761,
            "item_type": "answer",
            "score": 40,
            "last_activity_date": 1455220659,
            "creation_date": 1455218880,
            "body": "The default  is using the Treebank tokenizer that emulates the tokenizer from the Penn Treebank tokenizer.\n\nDo note that  doesn&#39;t achieve tokens in the linguistics sense, e.g.:\n\n\n\nIt is usually used to separate strings with specified delimiter, e.g. in a tab-separated file, you can use  or when you are trying to split a string by the newline  when your textfile has one sentence per line.\n\nAnd let&#39;s do some benchmarking in :\n\n\n\n[out]:\n\n\n\nIf we try a another tokenizers in bleeding edge NLTK from https://github.com/jonsafari/tok-tok/blob/master/tok-tok.pl:\n\n\n\n[out]:\n\n\n\n(Note: the source of the text file is from https://github.com/Simdiva/DSL-Task)\n\n\n\nIf we look at the native  implementation, the  vs  time for the  is comparable. But do that in the python implementation the regexes are pre-compiled while in perl, it isn&#39;t but then the proof is still in the pudding:\n\n\n\n(Note: When timing the , we had to pipe the output into a file, so the timing here includes the time the machine takes to output to file, whereas in the  timing, it&#39;s doesn&#39;t include time to output into a file)\n\n\n\nWith regards to , it&#39;s a little different and comparing speed benchmark without considering accuracy is a little quirky.\n\nConsider this:\n\n\nIf a regex splits a textfile/paragraph up in 1 sentence, then the speed is almost instantaneous, i.e. 0 work done. But that would be a horrible sentence tokenizer...\nIf sentences in a file is already separated by , then that is simply a case of comparing how  vs  and  would have nothing to do with the sentence tokenization ;P\n\n\nFor information on how  works in NLTK, see:\n\n\ntraining data format for nltk punkt\nUse of PunktSentenceTokenizer in NLTK\n\n\nSo to effectively compare  vs other regex based methods (not ), one would have to evaluate also the accuracy and have a dataset with humanly evaluated sentence in a tokenized format.\n\nConsider this task: https://www.hackerrank.com/challenges/from-paragraphs-to-sentences\n\nGiven the text:\n\n\n  In the third category he included those Brothers (the majority) who\n  saw nothing in Freemasonry but the external forms and ceremonies, and\n  prized the strict performance of these forms without troubling about\n  their purport or significance. Such were Willarski and even the Grand\n  Master of the principal lodge. Finally, to the fourth category also a\n  great many Brothers belonged, particularly those who had lately\n  joined. These according to Pierre&#39;s observations were men who had no\n  belief in anything, nor desire for anything, but joined the Freemasons\n  merely to associate with the wealthy young Brothers who were\n  influential through their connections or rank, and of whom there were\n  very many in the lodge.Pierre began to feel dissatisfied with what he\n  was doing. Freemasonry, at any rate as he saw it here, sometimes\n  seemed to him based merely on externals. He did not think of doubting\n  Freemasonry itself, but suspected that Russian Masonry had taken a\n  wrong path and deviated from its original principles. And so toward\n  the end of the year he went abroad to be initiated into the higher\n  secrets of the order.What is to be done in these circumstances? To\n  favor revolutions, overthrow everything, repel force by force?No! We\n  are very far from that. Every violent reform deserves censure, for it\n  quite fails to remedy evil while men remain what they are, and also\n  because wisdom needs no violence. &quot;But what is there in running across\n  it like that?&quot; said Ilagin&#39;s groom. &quot;Once she had missed it and turned\n  it away, any mongrel could take it,&quot; Ilagin was saying at the same\n  time, breathless from his gallop and his excitement.\n\n\nWe want to get this:\n\n\n\nSo simply doing  will give you nothing. Even without considering the order of the sentences, you will yield 0 positive result:\n\n\n",
            "excerpt": "Consider this:\n\n\nIf a <span class=\"highlight\">regex</span> splits a textfile/paragraph up in 1 sentence, then the speed is almost instantaneous, i.e. 0 work done. But that would be a horrible sentence tokenizer... &hellip; Every violent reform deserves censure, for it\n  quite fails to remedy <span class=\"highlight\">evil</span> while men remain what they are, and also\n  because wisdom needs no violence. &hellip; ",
            "title": "Python re.split() vs nltk word_tokenize and sent_tokenize"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "string",
                "count",
                "coffeescript"
            ],
            "question_score": 5,
            "is_accepted": true,
            "answer_id": 35215653,
            "is_answered": false,
            "question_id": 35215348,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1454641753,
            "creation_date": 1454641753,
            "body": "One regex to solve your problem is:\n\n\n\nThe parts are as follows:\n\n\n\nYou may be able to use a character class instead of a group:\n\n\n\nFor the final element, but that isn&#39;t working on https://regex101.com/.\n\nTested on the following:\n\n\n  Contrary to popular belief, Lorem Ipsum is not simply random text. It\n  has roots in a piece of classical Latin literature from 45 BC, making\n  it over 2000 years old. Richard McClintock, a Latin professor at\n  Hampden-Sydney College in Virginia, looked up one of the more obscure\n  Latin words, consectetur, from a Lorem Ipsum passage, and going\n  through the cites of the word in classical literature, discovered the\n  undoubtable source. Lorem Ipsum comes from sections 1.10.32 and\n  1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the\n  theory of ethics, very popular during the Renaissance. The first line\n  of Lorem Ipsum, &quot;Lorem ipsum dolor sit amet..&quot;, comes from a line in\n  section 1.10.32.\n\n\nAnd finds six sentences (bolded the end of sentences, not the actual match). Note that the different grouping might pose a problem if you&#39;re depending on it for any reason.\n",
            "excerpt": "One <span class=\"highlight\">regex</span> to solve your problem is:\n\n\\w[.?!](\\s|$)\n\n\nThe parts are as follows:\n\n\\w - Word character\n\\[.?!] - Punctuation as specified.\n(\\s|$) - Whitespace character OR the end of the string. &hellip; Lorem Ipsum comes from sections 1.10.32 and\n  1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good and <span class=\"highlight\">Evil</span>) by Cicero, written in 45 BC. &hellip; ",
            "title": "Count sentences in string with JavaScript"
        },
        {
            "tags": [
                "python",
                "request",
                "urllib"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 34917176,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1453362225,
            "creation_date": 1453359183,
            "body": "I&#39;m having some issues with , I can&#39;t even say exactly what&#39;s going on, so I&#39;ll provide the code and  the traceback. First, the code:\n\n\n\nThe idea for this program is that the user enters an URL from Amazon or other sites like that and the program retrieves the image of the object, the sell price and (eventually) shipping fees. This is done by creating a sort of simple database ( will populate the list self.contenuti with some dictionaries containing the data). Now,  has to beahave exactly the same, no matter the site, and this is accomplished by creating specific classes (like the class ) that will have the specific functions for retrieving the data (every site has is own structure, so I can&#39;t use the same regex) and simply putting them in the dictionary : whenever  is called, the appropriate class (here I have only ) will be called passing  as an argument, and this will be the content of the site provided, converted into str, so the class Amazon can search the appropriate informations via regex.\n\nThis is for home uses, I already created a similar program that, with the data collected, writes a simple HTML file that is a sort of image gallery of all the objects of interest. What I want to do here, with , is downloading the image so it will be displayed into a tkinter label when I will write the GUI. No HTML file needed, the whole thing will be GUI based, like a sort of database.\n\nThe problem is that, whatever URL I provide (here I&#39;m doing it in the  function, for debug purposes) I get this evil and nasty &quot;thing&quot;: \n\n\n\nFrom what I understand, the problem is in urllib: for some reason the URL is not parsed correctly and I end up with the error. So, I tried to write this:\n\n\n\nThis is wrote in another module, for testing purpose, there is only this piece of code. If I have it for its own, it works perfectly, with no error. I tried with other URLs, same thing: if I try the second piece of code, no errors; if I try to pass it to , I got the error. What is going on?\n",
            "excerpt": ", and this is accomplished by creating specific classes (like the class Amazon) that will have the specific functions for retrieving the data (every site has is own structure, so I can&#39;t use the same <span class=\"highlight\">regex</span> &hellip; The problem is that, whatever URL I provide (here I&#39;m doing it in the main() function, for debug purposes) I get this <span class=\"highlight\">evil</span> and nasty &quot;thing&quot;: \n\nFile &quot;C:\\Users\\Admin\\pyproj\\amazons\\amazzone2_0.py&quot;, line &hellip; ",
            "title": "Type error when trying to use urllib.request, &#39;str&#39; object is not callable"
        },
        {
            "tags": [
                "r",
                "mongodb",
                "twitter",
                "sentiment-analysis",
                "mongolite"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 34471572,
            "is_answered": false,
            "question_id": 34469227,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1451135015,
            "creation_date": 1451135015,
            "body": "I think you wanted to use , which flattens the list of status object that  returns. In any case this works. Note that you need to install and then start  for this to work:\n\n\n\nYields the following (4 scored bad, 592 scored neutral, 4 scored good):\n\n\n",
            "excerpt": "# we want a simple array (&quot;a&quot;) of scores back, so we use  \n  # &quot;l&quot; + &quot;a&quot; + &quot;ply&quot; = &quot;laply&quot;:  \n  scores = laply(sentences, function(sentence, pos.words, neg.words) {\n    # clean up sentences with R&#39;s <span class=\"highlight\">regex</span>-driven &hellip; pos.words, neg.words, .progress=.progress )  \n  scores.df = data.frame(score=scores, text=sentences)  \n  return(scores.df)  \n}\n\ntweets &lt;- as.character(df_ip_out$iphone.text)\nneg = c(&quot;bad&quot;,&quot;prank&quot;,&quot;inferior&quot;,&quot;<span class=\"highlight\">evil</span> &hellip; ",
            "title": "Error inserting/retrieving tweets into mongolite db"
        },
        {
            "tags": [
                "nginx"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 34395805,
            "is_answered": false,
            "question_id": 34388518,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1450701212,
            "creation_date": 1450701212,
            "body": "You&#39;ll need a second location block as  directives (all handlers, for that matter, see this post) aren&#39;t inherited by nested location blocks.\n\nIf you want to simplify your configuration without copy-and-pasting your other configuration, consider an  directive and put the common aspects of your location block into an external file.\n\nIt is technically possible that you could get away with just one location block by adding an  statement like:\n\n\n\nbut as per the Nginx wiki&#39;s If is Evil page, you&#39;ll want to test this and very carefully.  This also involves more of an overhead by invoking the regex engine; the better option is two location blocks.\n",
            "excerpt": "It is technically possible that you could get away with just one location block by adding an if statement like:\n\nif ($request_uri ~ ^/static) {\n    expires max;\n}\n\n\nbut as per the Nginx wiki&#39;s If is <span class=\"highlight\">Evil</span> &hellip; This also involves more of an overhead by invoking the <span class=\"highlight\">regex</span> engine; the better option is two location blocks. &hellip; ",
            "title": "Expand location only for specific file types"
        },
        {
            "tags": [
                "java",
                "string"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 34201911,
            "is_answered": false,
            "question_id": 34201880,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1449750489,
            "creation_date": 1449750489,
            "body": "An evil regex can help you.\n\n\n\nO/P :\n\n\n\nNote : This will return the entire String in case there is no &quot;Word[space]digits&quot; in the String. You will have to do a length check for the actual String and the returned String. If the length is same, then your String doesn&#39;t contain the expected pattern.\n",
            "excerpt": "An <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> can help you.\n\n    String test=&quot;top 10 products&quot;;\n    System.out.println(test.replaceAll(&quot;.*? &hellip; ",
            "title": "Check if a string has a word followed by a number"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "regex"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 33768168,
            "is_answered": false,
            "question_id": 33766484,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1447799170,
            "creation_date": 1447798867,
            "body": "Here is a way to do it without evil regex strings. Instead I wanted to try and do it with jQuery &#39;keydown&#39; event which was inline with what the questioner mentioned (see: newb at jQuery). Also note that &#39;keydown&#39; is better for this methodology as &#39;keyup&#39; will fire multiple times, though I guess this will too... Anyways, here is what I came up with:\n\n\n\nThis might be the most complicated way to do this ever but it does seem to work and satisfy all the constraints posed. Since I just noticed that this was flagged regex, this might be a terrible solution. Let the evisceration begin!\n\nSuper Bonus: This will work if you have any number of &quot;[]&quot; pairs in the string.\n",
            "excerpt": "Here is a way to do it without <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> strings. Instead I wanted to try and do it with jQuery &#39;keydown&#39; event which was inline with what the questioner mentioned (see: newb at jQuery). &hellip; Since I just noticed that this was flagged <span class=\"highlight\">regex</span>, this might be a terrible solution. Let the evisceration begin!\n\nSuper Bonus: This will work if you have any number of &quot;[]&quot; pairs in the string. &hellip; ",
            "title": "Javascript move text between brackets in textarea"
        },
        {
            "tags": [
                "android",
                "validation"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 33717819,
            "is_answered": false,
            "question_id": 33717377,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1447577058,
            "creation_date": 1447576524,
            "body": "User input is always evil! make that clear in your mind.  you can never trust users to put only the right stuff into your inputs. \nso just bounds check every input. If you want to get no empty strings check for it via\n\n\n\nsame stuff need to happen for every input.  if you e. g. try to get int values check em if they fit in your expected range and so on.... \n\nby this you don&#39;t need to put a space value into your editTexts while clearing em ...  (which need to be deleted by user if he wants to set the edittext correctly (-&gt; evil user just ignores the space and enters its name and you will have to check for leading or ending sign of space before putting it in your database ) \n\nhint: regex strings to ensure input is correct ;) \n",
            "excerpt": "User input is always <span class=\"highlight\">evil</span>! make that clear in your mind.  you can never trust users to put only the right stuff into your inputs. \nso just bounds check every input. &hellip; putting it in your database ) \n\nhint: <span class=\"highlight\">regex</span> strings to ensure input is correct ;) &hellip; ",
            "title": "How do I add validation for the edit text code in android?"
        },
        {
            "tags": [
                "r",
                "csv"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 33317589,
            "is_answered": false,
            "question_id": 33314026,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1445685670,
            "creation_date": 1445685670,
            "body": "This will get you started but you still have quite a bit of work to do. This works for one line (and it may work for the other two in the example) but it can be extrapolated to work with all of the lines ( FTW). Basically you need to rebuild the JSON structure from that single field (there may be alternative ways, especially if you do not need all the fields). It&#39;s easier than it might otherwise be since the Yelp schema is known. \n\nYou have to attack it in a pretty deterministic way, converting some fields before others, accounting for spaces in field names, dealing with arrays &amp; nested structures, etc. As I said, you have quite a bit of work ahead of you. If your regex-fu is weak, this will provide ample practice to become a regex ninja.\n\n\n\nAnd, whomever gave you this file deserves whatever evil comes their way in their programmatic life. I&#39;d give them back whatever they wanted from this in gnarly XML with EBCDIC encoding.\n",
            "excerpt": "If your <span class=\"highlight\">regex</span>-fu is weak, this will provide ample practice to become a <span class=\"highlight\">regex</span> ninja. &hellip; latitude\n## [1] &quot;33.499313000000001&quot;\n## \n## $attributes\n## $attributes$`By Appointment Only`\n## [1] TRUE\n## \n## $attributes$type\n## [1] &quot;business&quot;\n\n\nAnd, whomever gave you this file deserves whatever <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Instructing R to find variable name in rows when reading csv file"
        },
        {
            "tags": [
                "emacs",
                "evil-mode"
            ],
            "question_score": 11,
            "is_accepted": true,
            "answer_id": 22418983,
            "is_answered": false,
            "question_id": 18102004,
            "item_type": "answer",
            "score": 21,
            "last_activity_date": 1445565371,
            "creation_date": 1394852337,
            "body": "Update:  was recently replaced with . This  works on current evil and has the same usage as the old one:\n\n\n\n\n\nOriginal Answer:\n\nIf you end up defining more than one new text object, the repetition can get annoying, especially if you want to bind both inner and outer objects. If you hit that barrier, try this:\n\n\n\nUsage:\n\n\n\n(This is more than you wanted, but I&#39;ll leave it here in case it helps someone :)\n",
            "excerpt": "(<span class=\"highlight\">evil</span>-define-text-object ,outer-name (count &amp;optional beg end type)\n         (<span class=\"highlight\">evil</span>-select-paren ,start-<span class=\"highlight\">regex</span> ,end-<span class=\"highlight\">regex</span> beg end type count t))\n       (define-key <span class=\"highlight\">evil</span>-inner-text-objects-map ,key (quote &hellip; `(progn\n      (<span class=\"highlight\">evil</span>-define-text-object ,inner-name (count &amp;optional beg end type)\n        (<span class=\"highlight\">evil</span>-regexp-range count beg end type ,start-<span class=\"highlight\">regex</span> ,end-<span class=\"highlight\">regex</span> t))\n      (<span class=\"highlight\">evil</span>-define-text-object ,outer-name (count &hellip; ",
            "title": "Emacs Evil mode: how to create a new text object to select words with any non-space characters?"
        },
        {
            "tags": [
                "php",
                "curl"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 33186033,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1445094939,
            "creation_date": 1445080878,
            "body": "I&#39;m using Rolling cUrl PHP library to get data out of an API with JSON.\n\nIn the Rolling CURL library documentation I tried the following example, which works great:\n\n\n\nand I tried to change it for my needs, and save the data for each &quot;scrape&quot; in an array, but I couldn&#39;t find a way to save the data from the callback or outside it.\n\nThis is what I tried:\n\n\n\nSo my questions are:\n\n\nHow do I save data array outside this function?\nCan I get the content of each API call without the callback (after the execution)?\n\n",
            "excerpt": "rollingCurl\n    -&gt;get(&#39;https://www.google.com&#39;)\n    -&gt;get(&#39;http://www.msn.com&#39;)\n    -&gt;setCallback(function(\\RollingCurl\\Request $request, \\RollingCurl\\RollingCurl $rollingCurl) {\n        // parsing html with <span class=\"highlight\">regex</span> &hellip; is <span class=\"highlight\">evil</span> (http://bit.ly/3x9sQX), but this is just a demo\n        if (preg_match(&quot;#&lt;title&gt;(.*)&lt;/title&gt;#i&quot;, $request-&gt;getResponseText(), $out)) {\n            $title = $out[1];\n        }\n        else { &hellip; ",
            "title": "Saving a data from inner PHP function"
        },
        {
            "tags": [
                "java",
                "xml"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 33116617,
            "is_answered": false,
            "question_id": 33116334,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1444800824,
            "creation_date": 1444796724,
            "body": "I think you should mention the programming language you are using so people can give you solutions with code anyway, for now I can think of regular expression can only be the solution and you have to know what will be the root tag your code should look for. like in above i can see  is the root tag. I&#39;ll try to compe up with code solution in few hours. \n\nFollowing code works in JDK 6 and should work in later versions as well\n\n\n\noutput is \n\n\n\nSee your code running online here\n",
            "excerpt": "Midnight Rain&lt;/title&gt;&quot; +\n   &quot;&lt;genre&gt;Fantasy&lt;/genre&gt;&quot; +\n   &quot;&lt;price&gt;5.95&lt;/price&gt;&quot; +\n   &quot;&lt;publish_date&gt;2000-12-16&lt;/publish_date&gt;&quot; +\n   &quot;&lt;description&gt;A former architect battles corporate zombies,&quot; + \n   &quot;an <span class=\"highlight\">evil</span> &hellip; &lt;/description&gt;&quot; +\n&quot;&lt;/book&gt;&quot; +\n&quot;&lt;/catalog&gt;&quot;;\n\nString <span class=\"highlight\">regex</span> = &quot;(\\\\&lt;catalog\\\\&gt;.*? &hellip; ",
            "title": "How to identify an xml in a text file containing many xml files along with other text using the node of the xml in Java?"
        },
        {
            "tags": [
                "ajax",
                "regex",
                "forms",
                "validation"
            ],
            "question_score": 6,
            "is_accepted": true,
            "answer_id": 32881866,
            "is_answered": false,
            "question_id": 32878110,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1443685123,
            "creation_date": 1443684774,
            "body": "Just for information you should not validate User code on the clientside. Always treat input from the client as evil\n\nI changed the regex so that the min length () of the Username is included\n\n\n",
            "excerpt": "Always treat input from the client as <span class=\"highlight\">evil</span>\n\nI changed the <span class=\"highlight\">regex</span> so that the min length (username.length &lt; 4) of the Username is included\n\n function username_check() {\n    var username = $(&#39;#warden_id&#39;) &hellip; ",
            "title": "form validation using ajax with regex"
        },
        {
            "tags": [
                "regex",
                "notepad++"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 32805237,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1443336349,
            "creation_date": 1443335639,
            "body": "From below the verse i try to remove all the tab and join them using . But i want to untouch the lines that start with the verse number.\n\n1       I am like one who gathers summer fruit\n        at the gleaning of the vineyard;\n        there is no cluster of grapes to eat,\n        none of the early figs that I crave.\n\n2       The faithful have been swept from the land;\n        not one upright person remains.\n        Everyone lies in wait to shed blood;\n        they hunt each other with nets.\n\n3       Both hands are skilled in doing evil;\n        the ruler demands gifts,\n        the judge accepts bribes,\n        the powerful dictate what they desire—\n        they all conspire together.\n\nIn Notepad++ find &amp; replace, using regex i find  and replace with  it replaces all the TAB. But i don&#39;t know how to join the lines so that it will become like this:\n\n1       I am like one who gathers summer fruit&lt;BR&gt;at the gleaning of the vineyard;&lt;BR&gt;there is no cluster of grapes to eat,&lt;BR&gt;none of the early figs that I crave.\n2       The faithful have been swept from the land;&lt;BR&gt;not one upright person remains.&lt;BR&gt;Everyone lies in wait to shed blood;&lt;BR&gt;they hunt each other with nets.\n3       Both hands are skilled in doing evil;&lt;BR&gt;the ruler demands gifts,&lt;BR&gt;the judge accepts bribes,&lt;BR&gt;the powerful dictate what they desire—&lt;BR&gt;they all conspire together.\n\nCan anyone please tell me how to join the lines using notepad++ regex?\n",
            "excerpt": "In Notepad++ find &amp; replace, using <span class=\"highlight\">regex</span> i find ^\\t and replace with &lt;BR&gt; it replaces all the TAB. &hellip; Can anyone please tell me how to join the lines using notepad++ <span class=\"highlight\">regex</span>? &hellip; ",
            "title": "Regex to replace TAB and move up lines"
        },
        {
            "tags": [
                "bash",
                "shell"
            ],
            "question_score": 15,
            "is_accepted": false,
            "answer_id": 32789134,
            "is_answered": false,
            "question_id": 32787320,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1443208474,
            "creation_date": 1443208474,
            "body": "Instead of piping the output of  through , you might as well use the full capabilities of . You&#39;ll want to build up a an array that contains the options:\n\n\n\nto pass to  (where  ...  are the strings passed as arguments):\n\n\n\nWe&#39;re using  as an initializer, so that building up the array of options is simple; this also has the benefit (or flaw, depending on your point of view) that if no options are given then  exits early without listing all the content of the directory recursively.\n\nWith  you could use regexes to have more powerful matching capabilities; here we&#39;re using &#39;s  option, so we can only use the basic globs: ,  and . If your  supports the  option (GNU  does), and if you really need regexes, then it&#39;s trivial to modify the previous function.\n\n\n\nAnother possibility is to use Bash&#39;s extended globs:\n\n\n\nA few things to note here: \n\n\nThe whole function is included in a subshell—it&#39;s not a typo. That&#39;s to simplify a few things: no need to use local variables, and no need to save the shell options to restore them at the end of the function.\nThe first line uses the evil  but in a safe way: it&#39;s actually an idiomatic way to join the elements of the positional parameters with the first character of  (here a pipe character).\nWe need to set  to the empty string so as to avoid word splitting in the glob .\nThe glob  uses  and the   (with no quotes, it&#39;s not a typo). See Pattern Matching in the reference manual.\n\n\nThis function uses Bash&#39;s extended globs, that differ from (and aren&#39;t as powerful as) regexes (yet this should be enough for most cases).\n",
            "excerpt": "If your find supports the -<span class=\"highlight\">regex</span> option (GNU find does), and if you really need regexes, then it&#39;s trivial to modify the previous function. &hellip; The first line uses the <span class=\"highlight\">evil</span> eval but in a safe way: it&#39;s actually an idiomatic way to join the elements of the positional parameters with the first character of IFS (here a pipe character). &hellip; ",
            "title": "bash scripting: build a command then execute"
        },
        {
            "tags": [
                "regex",
                "nginx",
                "location",
                "url-rewriting"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 32353046,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1441351146,
            "creation_date": 1441196592,
            "body": "I want to create a nginx localtion do to the following\n\nGiven URL:\n\nexample.com/foo/bar/123456?ItemID=123456&amp;aid=0&amp;bid=0\n\nTask:\n\nIf both numbers are the same and aid and bid are zero, then rewreite the url to example.com/foo/bar/123456\n\nMy Try:\n\n\n\nBut that doesn&#39;t work. ;)\n\nWould be great if s.o. could give me a hint.\n\nEDIT:\n\nnginx seems not to match GET-Parameters by regex at all (in location line) so you have to use $args and check with if (which can be evil according to documentation).\n",
            "excerpt": "EDIT:\n\nnginx seems not to match GET-Parameters by <span class=\"highlight\">regex</span> at all (in location line) so you have to use $args and check with if (which can be <span class=\"highlight\">evil</span> according to documentation). &hellip; ",
            "title": "nginx remove / rewrite GET Parameters for specific URL"
        },
        {
            "tags": [
                "json",
                "vb.net"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 31755824,
            "is_answered": false,
            "question_id": 31755494,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1438379986,
            "creation_date": 1438379986,
            "body": "If you are certain that you will only ever need the hashes, you can actually use a regex to get all the hashes from this file.  Yes, this is slightly evil, because regex is normally not a suitable tool for dealing with structured data.  But if you don&#39;t care about the structure...\n\n\n",
            "excerpt": "If you are certain that you will only ever need the hashes, you can actually use a <span class=\"highlight\">regex</span> to get all the hashes from this file. &hellip; Yes, this is slightly <span class=\"highlight\">evil</span>, because <span class=\"highlight\">regex</span> is normally not a suitable tool for dealing with structured data.  But if you don&#39;t care about the structure... &hellip; ",
            "title": "obtain values to json file"
        },
        {
            "tags": [
                "python",
                "django",
                "eval"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 31598076,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1437685732,
            "creation_date": 1437685732,
            "body": "Eval is evil, rm -rf /,  etc etc... \n\nbut lets say for some silly reason I actually want to leverage the power of eval to do basic computations and conditionals.\n\nI want to get an idea of what the potential risks are for even having an eval block sitting around in my server side code, and what I can do in order to mitigate them.\n\nFor starters, eval will actually be run against user input... even scarier I know. These are super users, who, in theory can be trusted, but disgruntled former employees and the like is always a thing.\n\nThe intended use of the input is to provide a formula used to do calculations against a spreadsheet that is parsed. So for example, an intended input would be something like:\n\n\n\nA regex engine is then run on this value to replace all curly bracket values with appropriate column values, to turn the statement into something like:\n\n\n\nHowever, left alone, I recognize they could do something like:\n\n\n\nSo, the idea is to come up with clean method that will allow for:\n1) String values to be valid\n2) Anything within brackets to be valid since it won&#39;t be eval&#39;d\n3) Nothing else containing alphanumeric characters to be valid.\n\nWhat I&#39;ve got so far is:\n\n\n\nWhich gets run on the model save method, disallowing any arbitrary alphanumeric commands hanging around.\n\nAre there any flaws/other risks I&#39;m missing with this approach?\n",
            "excerpt": "Eval is <span class=\"highlight\">evil</span>, rm -rf /,  etc etc... \n\nbut lets say for some silly reason I actually want to leverage the power of eval to do basic computations and conditionals. &hellip; So for example, an intended input would be something like:\n\n({{Column A}} + {{Column B}}) * {{Column C}}\n\n\nA <span class=\"highlight\">regex</span> engine is then run on this value to replace all curly bracket values with appropriate &hellip; ",
            "title": "Using an eval() server side in a Python/Django application"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "node.js"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 31228720,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1436087500,
            "creation_date": 1436086803,
            "body": "I&#39;m looking for a more elegant way to use regexes in a control structure. I want to be able to perform operations using a match without declaring the regex outside of where it is needed or having to perform a the match operation twice. \n\nHere is my code edited for brevity:\n\n\n\nI am away this is very nit-picky, but I will accept it if it is a necessary evil. \n",
            "excerpt": "I want to be able to perform operations using a match without declaring the <span class=\"highlight\">regex</span> outside of where it is needed or having to perform a the match operation twice. &hellip; */\n    var youtubeMatch = regexYoutube.exec(content);\n    return &quot;http://img.youtube.com/vi/&quot;+youtubeMatch[4]+&quot;/0.jpg&quot;;\n}\n\n\nI am away this is very nit-picky, but I will accept it if it is a necessary <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Elegant Regex Use in Control Structure"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "node.js"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 31228797,
            "is_answered": false,
            "question_id": 31228720,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1436087500,
            "creation_date": 1436087500,
            "body": "I&#39;d modify the  function to be something else, such as , and return the value of the .exec. Then instead of declaring the regex outside the , declare it inside the function.\n\nThen you can replace  with a call to  and checking if it returned anything, and replace the exec call you use elsewhere with a use of the same function.\n\nThis is a sort of evil in its own way since it uses the side effect of a function for something else (the return value for a simple is check). But it is an alternative to defining the regex in a place it is not used.\n\nWhich as mentioned in a comment, is not really all that evil. Keep your scopes small and it won&#39;t get too confusing - the code is pretty readable to me as is.\n",
            "excerpt": "Then instead of declaring the <span class=\"highlight\">regex</span> outside the execYouTubeRegex, declare it inside the function. &hellip; But it is an alternative to defining the <span class=\"highlight\">regex</span> in a place it is not used.\n\nWhich as mentioned in a comment, is not really all that <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Elegant Regex Use in Control Structure"
        },
        {
            "tags": [
                "regex",
                "perl",
                "substitution"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 30812890,
            "is_answered": false,
            "question_id": 30812582,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1434147547,
            "creation_date": 1434146976,
            "body": "Something like this using eval  (untested).\n\n\n\nUsing the eval flag in the  form means to evaluate the replacement\nside as a line of code that returns a value.  \n\nIn this case it executes a ternary conditional in the replacement code.  \n\nIt&#39;s sort of like an inline regex callback.\nIt&#39;s much more complicated though since it can be like  so\nbetter to refer to the docs.  \n\nRemember, eval is really evil, misspelled !!\n",
            "excerpt": "It&#39;s sort of like an inline <span class=\"highlight\">regex</span> callback.\nIt&#39;s much more complicated though since it can be like s///eeg so\nbetter to refer to the docs.  \n\nRemember, eval is really <span class=\"highlight\">evil</span>, misspelled !! &hellip; ",
            "title": "perl: substitute pattern with pattern of different size"
        },
        {
            "tags": [
                "java",
                "text",
                "split",
                "bufferedreader",
                "stringbuilder"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 30346438,
            "is_answered": false,
            "question_id": 30345816,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1432194325,
            "creation_date": 1432116177,
            "body": "You want to find the lines which match &quot;I n&quot;.\n\nThe regex you need is : \n\n\n indicates the beginning of the line. Hence, if there are some whitespaces or text before , the line will not match the regex.\n indicates any digit. For the sake of simplicty, I allow only one digit in this regex.\n indicates the end of the line. Hence, if there are some characters after the digit, the line will not match the expression.\n\n\nNow, you need to read the file line by line and keep a reference to the file in which you write the current line.\n\nReading a file line by line is much easier in Java 8 with \n\n\n\nNote : In order to extract the digit, I use a raw  which I consider as evil but it is easier to understand. You can do it in a better way with a  and a   : \n\nWith this regex : &quot;&quot;. (The same as before but with parenthesis which indicates what you will want to capture). Then : \n\n\n",
            "excerpt": "The <span class=\"highlight\">regex</span> you need is : ^.I \\d$\n\n\n^ indicates the beginning of the line. Hence, if there are some whitespaces or text before I, the line will not match the <span class=\"highlight\">regex</span>.\n\\d indicates any digit. &hellip; System.out.println(&quot;Writing this line to &quot;+currentFile + &quot; :&quot; + line);\n      //Files.write(...);\n    }\n  });\n\n\nNote : In order to extract the digit, I use a raw &quot;&quot;.substring() which I consider as <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Splitting a text file into multiple files by specific character sequence"
        },
        {
            "tags": [
                "notepad++",
                "wildcard"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 30292359,
            "is_answered": false,
            "question_id": 30292050,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1431898285,
            "creation_date": 1431898285,
            "body": "Just try this regex substitution using perl\n\n\n\nIf you see &quot;OK&quot;, it just works\n\nI assumed the evil code is enclosed in some sort of opening/closing tags in HEX representation.\n\nIMPORTANT!! Please, do a BACK UP before giving it a try!!\n",
            "excerpt": "Just try this <span class=\"highlight\">regex</span> substitution using perl\n\nperl -0777 -pe &#39;s/#([0-9a-f]{6})#.+? &hellip; #\\/\\1#/OK/s&#39; &lt; test.txt\n\n\nIf you see &quot;OK&quot;, it just works\n\nI assumed the <span class=\"highlight\">evil</span> code is enclosed in some sort of opening/closing tags in HEX representation.\n\nIMPORTANT!! &hellip; ",
            "title": "Notepad++ erase anything in between.. without REGEX?"
        },
        {
            "tags": [
                "python",
                "regex"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 30004823,
            "is_answered": false,
            "question_id": 29997723,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1430584829,
            "creation_date": 1430584829,
            "body": "I&#39;d take a different approach, just to be different. Rather than listing out all the compounds in one big regex, it might be faster to make them a set, grab everything that might be a compound, and filter it after the fact.\n\n\n\nThis should be faster if you have tons of strings to search, since testing set membership is much faster than a regex parse. If you just have a few, the cost of building the set might outweigh the speed in parsing the strings. The golden rule is to profile your code and remember that premature optimization is the root of all evil\n",
            "excerpt": "Rather than listing out all the compounds in one big <span class=\"highlight\">regex</span>, it might be faster to make them a set, grab everything that might be a compound, and filter it after the fact. &hellip; The golden rule is to profile your code and remember that premature optimization is the root of all <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Maximize substring match in regular expression"
        },
        {
            "tags": [
                "java",
                "regex",
                "string",
                "parsing"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 29979517,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1430507939,
            "creation_date": 1430436744,
            "body": "I am scraping information from a log that I need 3 elements. Another added difficulty is that I am parsing the log via  in my java program aka one(1) line at a time. (If there is a possibility to read multiple lines when parsing let me know :) ) NOTE: I have no control over the log output format.\n\nThere are 2 possibilities of what I must extract. Either the log is nice and gives the following\n\nNICE FORMAT\n\n\n\nwhere I must grab  ,  , and \n\nNow the not so nice case: If the name is too long, it bumps everything else to the next line like is below, now the only thing after the first element is one blank space followed by a newline (\\n) which gets clobbered by  anyway.\n\nEVIL FORMAT : Note each line is in a separate arraylist entry.\n\n\n\nTherefore what the regex actually sees is:\n\n\n\nCORNER CASE FORMAT that also occurs within the log but I DO NOT want\n\n\n\nFinally below is my Pattern line I am currently using for the first line and  is what is used on the next line when group 2 of the first line is empty.\n\nUPDATE: The pattern below works for the NICE FORMAT and EVIL FORMAT But now pattern  has no matches, even though on regex101.com it is correct. Link: https://regex101.com/r/vS7vZ3/9\n\nUPDATE2: I fixed it, I forgot to add  once I compiled the second line with Pattern pline2. Corrected code is below.\n\n\n\nTo give a little background I am first matching the name  to  followed by the address  to   and finally the size  to . This is all assuming the log is in the NICE format. If it is in the EVIL format I see that group(2) is empty and therefore readin the next line of the log to a temp buffer and apply the second pattern  to new line. \n\nCan someone help me with the regex?\nIs there a way I can make sure my current line (or even better, just the second grouping) is either the NICE FORMAT or is empty?\n\nAs requested my java code:\n\n\n\nAn Aside, The output I currently get:\n\n\n",
            "excerpt": "<span class=\"highlight\">EVIL</span> FORMAT : Note each line is in a separate arraylist entry.\n\n.text. &hellip; UPDATE: The pattern below works for the NICE FORMAT and <span class=\"highlight\">EVIL</span> FORMAT But now pattern pline2 has no matches, even though on regex101.com it is correct. &hellip; ",
            "title": "Regex expression for multiple patterns in 1 line"
        },
        {
            "tags": [
                "ruby"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 29954906,
            "is_answered": false,
            "question_id": 29948276,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1430342779,
            "creation_date": 1430342779,
            "body": "Parsing the data with JSON is a safe and effective approach when the data is known to be well formed and parsable:\n\n\n\nOtherwise a gsub solution using either regex or simple method chaining can be employed, but this sort of naive approach may remove quotation marks and brackets from the inner elements of the array string being parsed, potentially mangling the data you meant to extract. \n\n\n\nNotice how the gsub approach has a different result than the JSON parse method.  \n\nIn theory, Ruby&#39;s eval could also be used to parse the string data into an array and then join it, but eval is meant for interpreting strings and running them as ruby code, and as such should only be used when it is important to run arbitrary ruby code that has been encoded as a string.  The method name &#39;eval&#39; actually comes from the word &#39;evaluate&#39;, not evil.  Despite this, however, evaluation is not an objective in this scenario; parsing is.  \n\nAnother reason why people are hesitant to recommend eval for trivial tasks like data parsing is that the worst case scenario of JSON#parse is that it fails to parse.  Whereas the worst case scenario of eval is that you&#39;ve completely deleted your file system by parsing a string that you didn&#39;t expect to be there when you first designed your code.  \n",
            "excerpt": "keep\\&quot;, \\&quot;Char4\\&quot;]&quot;\nrequire &#39;json&#39;\nJSON.parse(str).join(&#39;, &#39;)\n =&gt; &quot;This is a word ect, Char2, This Element uses a (\\&quot;) symbol that is important to keep, Char4&quot;\n\n\nOtherwise a gsub solution using either <span class=\"highlight\">regex</span> &hellip; The method name &#39;eval&#39; actually comes from the word &#39;evaluate&#39;, not <span class=\"highlight\">evil</span>.  Despite this, however, evaluation is not an objective in this scenario; parsing is. &hellip; ",
            "title": "gsub for removing brackets and \\ from string"
        },
        {
            "tags": [
                "python",
                "flask"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 29763456,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1429596366,
            "creation_date": 1429593169,
            "body": "Consider this string\n\n\n\nbecause it&#39;s a regex, I have to escape the dot to &#39;.&#39;, and in POST request I receive &quot;\\\\.&quot;. The result is \n\n\n\nPython3 unicode_escape this string to\n\n\n\nReplace string doesn&#39;t help\n\n\n\nast.literal_eval also doesn&#39;t work\n\n\n\nLet&#39;s try to add quote to the string:\n\n\n\neval is evil, but still the same output as literal_eval\nSo, is there anyway for me to receive the original string? The only I&#39;m thinking of is using print\n",
            "excerpt": "\\r\\n&#39;\n\n\nbecause it&#39;s a <span class=\"highlight\">regex</span>, I have to escape the dot to &#39;.&#39;, and in POST request I receive &quot;\\\\.&quot;. The result is \n\nt = &#39;\\\\. &hellip; \\r\\n&#39;\n\n\neval is <span class=\"highlight\">evil</span>, but still the same output as literal_eval\nSo, is there anyway for me to receive the original string? The only I&#39;m thinking of is using print &hellip; ",
            "title": "Python escape dot character after POST"
        },
        {
            "tags": [
                "c#",
                "regex",
                "split"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 29438152,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1428092224,
            "creation_date": 1428087703,
            "body": "I want to get a regex that will split text into sentences, leaving in the punctuation (breaking on the space after the punctuation but not breaking on titles. \n\nI&#39;m almost there. \n\n\n\nsplits on the space, but also splits on the title.\n\n\n\nwon&#39;t split on titles but wipes out the punctuation.\n\nAny suggestions on combining the two expressions so that the regex will split on space after the punctuation but not split on titles?\n\nExample Text:\n\n\n  Shirking and sharking in all their many varieties have been sown broadcast by the\n      ill-fated cause; and even those who have contemplated its history\n      from the outermost circle of such evil have been insensibly tempted\n      into a loose way of letting bad things alone to take their own bad\n      course, and a loose belief that if the world go wrong it was in some\n      off-hand manner never meant to go right.\n  \n  Thus, in the midst of the mud and at the heart of the fog, sits the\n  Lord High Chancellor in his High Court of Chancery.\n  \n  &quot;Mr. Tangle,&quot; says the Lord High Chancellor, latterly something\n      restless under the eloquence of that learned gentleman.\n  \n  &quot;Mlud,&quot; says Mr. Tangle. Mr. Tangle knows more of Jarndyce and\n      Jarndyce than anybody. He is famous for it--supposed never to have\n      read anything else since he left school.\n  \n  &quot;Have you nearly concluded your argument?&quot;\n  \n  &quot;Mlud, no--variety of points--feel it my duty tsubmit--ludship,&quot; is\n      the reply that slides out of Mr. Tangle.\n  \n  &quot;Several members of the bar are still to be heard, I believe?&quot; says\n      the Chancellor with a slight smile.\n\n",
            "excerpt": "Any suggestions on combining the two expressions so that the <span class=\"highlight\">regex</span> will split on space after the punctuation but not split on titles? &hellip; :\n\n\n  Shirking and sharking in all their many varieties have been sown broadcast by the\n      ill-fated cause; and even those who have contemplated its history\n      from the outermost circle of such <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Regex to split out sentences including their punctuation, but not on titles (Mr., Mrs., etc.)"
        },
        {
            "tags": [
                "asp.net",
                "jquery-file-upload"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 28838365,
            "is_answered": false,
            "question_id": 28837605,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1425406011,
            "creation_date": 1425404557,
            "body": "One method, and perhaps the most simple solution, is to just use the  control, and hide it from view. Then again, although this works well if you want the user to choose the files they&#39;re uploading, it might not be the best solution if you want to implement some kind of HTML5 drag&#39;n&#39;drop solution, etc. \n\nCoincidentally, I spent pretty much all of last week studying how to upload files via javascript to ASP.NET web forms. I developed a drag and drop interface that uses HTML5, and also developed a fail-over method with which the user could choose and upload their files via the  control.\n\nDue to the feature being low-priority, we only fully developed the  control, but I&#39;m happy to share that feature with you here:\n\nHTML\n\nWe&#39;re going to create an ASP file upload control, and hide certain parts of it. The rest of it, we can add styles to (or do whatever in javascript and CSS) to make it look fancy and customized. The CONTINUE BUTTON\n\n\n\n\n\nJavascript\n\n\n\n\n\nCODE-BEHIND\n\nNow we just need to add the VB.NET (or C#) to handle the click-event for the continue button.\n\n\n\n\n\nOther Caveats\n\nWe did a couple things in the above code that I did not explain, such as the &quot;FolderPath&quot; application setting (we used this in CODE-BEHIND section to determine where the file should be saved). If you&#39;ve never used application settings in the web.config, it&#39;s very simple. For the sake of the above example, we would add the following snippet between our  tags:\n\n\n\nI can then access the value of this appSetting using \n\n\n\nor\n\n\n\nAlso, I stopped with the function to &quot;getExcelSheets&quot; because that&#39;s more specific to my application, and probably beyond the scope of this tutorial.\n\n\n\nAdditional Resources\n\nI have a good habit of methodically saving useful bookmarks. Here is what I have from my &quot;File Uploader&quot; section...\n\n\nCodeProject.com - File Upload with ASP.NET\nReading files in Javascript using File APIs\nStack Overflow - jQuery Ajax File Upload to ASP.NET web service with\nJSON response\nDrag and Drop Asynchronous File Upload &lt;-- DEFINITELY THE    MOST\nUSEFUL\n\n",
            "excerpt": "(xlsx|xls)$/i; // set the <span class=\"highlight\">regex</span> to test for accepted file extensions.\n\n    if (f.length &amp;&amp; ! &hellip; convertCFlabelToButton(); // &lt;-- converting the label to a button and visa versa is probably a round-about way of doing what we wanted, but we were doing some other stuff with it that kind of made it a necessary <span class=\"highlight\">evil</span> &hellip; ",
            "title": "How can i upload a file to server (asp.net web form) with ajax?"
        },
        {
            "tags": [
                "xml",
                "parsing",
                "bash",
                "sh"
            ],
            "question_score": 18,
            "is_accepted": false,
            "answer_id": 6873226,
            "is_answered": false,
            "question_id": 6873070,
            "item_type": "answer",
            "score": 12,
            "last_activity_date": 1424503036,
            "creation_date": 1311943239,
            "body": "You can use the  command (from package  on Debian-based distros) with the following XSLT sheet:\n\n\n\nThen use the command:\n\n\n\nOr you could also use regexes, but modifying XML through regexes is pure evil :)\n",
            "excerpt": "xsltproc --stringparam tagReplacement polop \\\n         --stringparam tag1Replacement palap \\\n         transform.xsl input.xml\n\n\nOr you could also use regexes, but modifying XML through regexes is pure <span class=\"highlight\">evil</span> &hellip; ",
            "title": "how to edit XML using bash script?"
        },
        {
            "tags": [
                "xml",
                "xpath",
                "openxml",
                "docx",
                "phpdocx"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 28282467,
            "is_answered": false,
            "question_id": 28223112,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1422895323,
            "creation_date": 1422895323,
            "body": "OK, I found it out. The parantheses are actually not a problem at all, I just didn&#39;t realize how PHPDocx handles the block substitution.\n\nThere&#39;s a sneaky, but evil Regex which just replaces everything from the variable until the next occurrence of the variable, just like . So every occurrence of XML and stuff is stripped away and replaced with a single occurrence of $VARIABLE$.\n\nIn the next step, it searches for the occurrence of the variable via XPath and deletes the parent paragraph node.\n",
            "excerpt": "There&#39;s a sneaky, but <span class=\"highlight\">evil</span> <span class=\"highlight\">Regex</span> which just replaces everything from the variable until the next occurrence of the variable, just like \\$BLOCK_VARIABLE\\$.+?\\$BLOCK_VARIABLE\\$. &hellip; ",
            "title": "Xpath in docx, having parentheses as contains attribute"
        },
        {
            "tags": [
                "javascript",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 27865682,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1420825537,
            "creation_date": 1420823435,
            "body": "I am looking for an effective way to create array contain all matches contains regex groups matches.\n\ne.g. Regex  string  expected result \n\nMy current code looks like this:\n\n\n\nIt works, however I don&#39;t like the way how it does.\n\nThe first thing is that I actually don&#39;t know how many groups I will have in my regex variable  so I need to define a lot unnecessary variables .\n\nThe second problem Is that I decided to use evil  to prevent pushing this variables &#39;manually&#39; one by one to array, maybe there is a better solution?\n\nAnd one more thing - I did try use  but unfortunately when I have pattern  it will return me array  so it&#39;s not what I want to achieve.\n\nThanks!\n\nEDIT\n\nOk I found something which looks better\n\n\n",
            "excerpt": "I am looking for an effective way to create array contain all matches contains <span class=\"highlight\">regex</span> groups matches.\n\ne.g. &hellip; The second problem Is that I decided to use <span class=\"highlight\">evil</span> eval to prevent pushing this variables &#39;manually&#39; one by one to array, maybe there is a better solution? &hellip; ",
            "title": "Effective solution for create array containing all groups in regex matches"
        },
        {
            "tags": [
                "regex",
                "vb.net",
                "csv",
                "replace",
                "substring"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 27451004,
            "is_answered": false,
            "question_id": 27450102,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1418478489,
            "creation_date": 1418413537,
            "body": "Bullet proof way.  \n\n\n\nBenchmarks  \n\nSince @TheBlueDog posted a Benchmark (&#39;Edit 2&#39;), I thought I would post a\nbenchmark as well.  \n\nIts based on his input, and the intent is to demonstrate the evils of using\n&#39;to-the-end-of-string&#39; lookahead as a validation technique\n(ie. this -&gt; )  \n\nBlue Dog&#39;s regex replace method is hampered a bit with an unnecessary callback, so I\nimagine that accounts for some of his bad numbers.  \n\nDon&#39;t know Vb.net so this is done in Perl. The machine speed and language are factored out\nbecause its a relative test.\n\nSummary:   \n\n\n\nThis represents a 5 fold difference.   \n\nBenchmark in Perl, 150K line (167MB file):  \n\n\n\nOutput:  \n\n\n",
            "excerpt": ":&quot;[^&quot;]*&quot;[^&quot;]*)*$)  \n\nBlue Dog&#39;s <span class=\"highlight\">regex</span> replace method is hampered a bit with an unnecessary callback, so I\nimagine that accounts for some of his bad numbers. &hellip; ",
            "title": "How to convert comma-delimited file to pipe-delimited in vb.net"
        },
        {
            "tags": [
                "emacs",
                "evil-mode"
            ],
            "question_score": 6,
            "is_accepted": false,
            "answer_id": 25719360,
            "is_answered": false,
            "question_id": 25463369,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1417604579,
            "creation_date": 1410161616,
            "body": "When reading the mailing list someone mentioned it is better to put keybindings in  instead of hooks, so here it is:\n\n\n\nAs for defining new text objects, I must recommend this function from @gordon-gustafson:\n\n\n\nSo the  part would become:\n\n\n",
            "excerpt": "end-<span class=\"highlight\">regex</span>)\n  (let ((inner-name (make-symbol &quot;inner-name&quot;))\n        (outer-name (make-symbol &quot;outer-name&quot;)))\n    `(progn\n      (<span class=\"highlight\">evil</span>-define-text-object ,inner-name (count &amp;optional beg end type) &hellip; (<span class=\"highlight\">evil</span>-select-paren ,start-<span class=\"highlight\">regex</span> ,end-<span class=\"highlight\">regex</span> beg end type count t))\n      (<span class=\"highlight\">evil</span>-define-text-object ,outer-name (count &amp;optional beg end type)\n        (<span class=\"highlight\">evil</span>-select-paren ,start-<span class=\"highlight\">regex</span> ,end-<span class=\"highlight\">regex</span> beg end type &hellip; ",
            "title": "Mode-specific or buffer-local text objects in evil?"
        },
        {
            "tags": [
                "c#",
                "html",
                "regex",
                "vb.net",
                "strip"
            ],
            "question_score": 3,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 26991134,
            "item_type": "question",
            "score": 3,
            "last_activity_date": 1416309300,
            "creation_date": 1416304028,
            "body": "There is a tough nut to crack.\n\nI have a HTML which needs to be stripped of some tags, attributes AND properties.\n\nBasically there are three different approaches which are to be considered:\n\n\nString Operations: Iterate through the HTML string and strip it via string operations &#39;manually&#39;\nRegex: Parsing HTML with RegEx is evil. Is stripping HTML evil too?\nUsing a library to strip it (e.g. HTML Agility Pack)\n\n\nMy wish is that I have lists for:\n\n\nacceptedTags (e.g. SPAN, DIV, OL, LI)\nacceptedAttributes (e.g. STYLE, SRC)\nacceptedProperties (e.g. TEXT-ALIGN, FONT-WEIGHT, COLOR, BACKGROUND-COLOR)\n\n\nWhich I can pass to this function which strips the HTML.\n\nExample Input:\n\n\n\nExample Output (with parameter lists from above):\n\n\n\n\nthe entire tag Body is stripped (not accepted tag)\nproperties margin, font-family and font-size are stripped from DIV-Tag\nproperties font-family and font-size are stripped from SPAN-Tag.\n\n\nWhat have I tried?\n\nRegex seemed to be the best approach at the first glance. But I couldn&#39;t get it working properly.\nArticles on Stackoverflow I had a look at:\n\n\nRegular expression to remove HTML tags\nHow to clean HTML tags using C#\n\n\n...and many more.\n\nI tried the following regex:\n\n\n\nHowever, this is only removing tags and no attributes or properties!\n\nI&#39;m definitely not looking for someone who&#39;s doing the whole job. Rather for someone, who points me to the right direction.\n\nI&#39;m happy with either C# or VB.NET as answers.\n",
            "excerpt": "Basically there are three different approaches which are to be considered:\n\n\nString Operations: Iterate through the HTML string and strip it via string operations &#39;manually&#39;\n<span class=\"highlight\">Regex</span>: Parsing HTML with <span class=\"highlight\">RegEx</span> &hellip; is <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "HTML Strip Function"
        },
        {
            "tags": [
                "emacs"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 26866228,
            "is_answered": false,
            "question_id": 26856800,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1415713130,
            "creation_date": 1415713130,
            "body": "An Evil mode solution would be to use this command:\n\n\n\nWhich means:\n\n\n - On any line containing the regex (which matches two quoted strings)\n - In normal mode\n - go to the third , move one character right, and change the text until the next  to &quot;replaced&quot;\n\n\nIt also takes ranges, so you can use it on a subset of lines if you want to.\n",
            "excerpt": "An <span class=\"highlight\">Evil</span> mode solution would be to use this command:\n\n:g/&quot;.*&quot;.*&quot;. &hellip; .*&quot; - On any line containing the <span class=\"highlight\">regex</span> (which matches two quoted strings)\nnorm - In normal mode\n3f&quot;lct&quot;replaced - go to the third &quot;, move one character right, and change the text until the next &quot; to &quot;replaced &hellip; ",
            "title": "how to replace the second occurrent in emacs evil?"
        },
        {
            "tags": [
                "vba",
                "ms-word",
                "vsto"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 26383799,
            "is_answered": false,
            "question_id": 26380163,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1413405396,
            "creation_date": 1413379600,
            "body": "It&#39;s not really pretty but you can try to remove the unwanted characters by Regex. For example to remove the  letters (it has code 7):\n\n\n\nNow you have to identify the other &#39;evil&#39; characters and add them to the char array. If it works you will get a string whose length corresponds with the number of  in your document. Probably you have to adapt this code by experimenting. (I was not sure which language you are using - I supposed C#.)\n\nUpdate\nAnother idea (if it is applicable to your analyzer tool):\n\nBreak your problem down to single paragraphs:\n\n\n\nWith this paragraph range objects and the contained text strings you do the same as you tried to do with the whole document object and its text - just paragraph by paragraph. All these paragraphs are &#39;addressable&#39; by ranges and Move operations as you already do it. I suppose that the problematic characters are outside or at the end of the paragraphs so they don&#39;t influence the character counting inside these paragraphs. \n\nAs I can&#39;t reproduce what you call endpaper I can&#39;t validate it. Besides I don&#39;t know if special text ranges as page headers and tables of content are covered by paragraphs. But at least you can reduce your problem to smaller ranges. I think it is worth trying.\n",
            "excerpt": "It&#39;s not really pretty but you can try to remove the unwanted characters by <span class=\"highlight\">Regex</span>. &hellip; example to remove the \\a letters (it has code 7):\n\nstring j = new string(new char[] { (char)7 });\nplainText = Regex.Replace(plainText,string.Format(&quot;[{0}]&quot;, j), &quot;&quot;);\n\n\nNow you have to identify the other &#39;<span class=\"highlight\">evil</span> &hellip; ",
            "title": "Word.Range : Move Range index in the formatted text that corresponds to the plain text"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 26165379,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1412269700,
            "creation_date": 1412267800,
            "body": "I&#39;m writing a function that will take in an object and modify a field within the object (could be a nested field). For instance, modifyObj(obj, &#39;nested.nested&#39;, 2) will essentially do obj.nested.nested = 2. The most straightforward way seems to be to use eval, but the consensus seems to be using eval is evil? http://jsfiddle.net/zntf6bfw/\n\n\n\nThe alternative is to use regex to determine if the passed in field is nested, and if so, to use a loop to get a nested object and modify it (which will modify the overall object). However, this seems unnecessarily complicated, and would this count as a valid use case for eval?\n\n\n",
            "excerpt": "The most straightforward way seems to be to use eval, but the consensus seems to be using eval is <span class=\"highlight\">evil</span>? &hellip; .&#39; + field + &#39;=&#39; + val;\n    eval(str);\n}\n\n\nThe alternative is to use <span class=\"highlight\">regex</span> to determine if the passed in field is nested, and if so, to use a loop to get a nested object and modify it (which will modify &hellip; ",
            "title": "Is using eval appropriate when setting deeply nested properties in an object?"
        },
        {
            "tags": [
                "php",
                "arrays",
                "regex"
            ],
            "question_score": 8,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 25737133,
            "item_type": "question",
            "score": 8,
            "last_activity_date": 1410242201,
            "creation_date": 1410239931,
            "body": "In PHP, is there a function or anything else that will remove all elements in an array that do not match a regex.\n\nMy regex is this: \n\nMy array&#39;s come in like this, from a form (they&#39;re tags actually)\n\nOriginal array from form. Note: evil tags\n\n\n\nCleaned array. Note, no evil tags\n\n\n\nI currently do like this, but is there a better way? Without the loop maybe?\n\n\n",
            "excerpt": "In PHP, is there a function or anything else that will remove all elements in an array that do not match a <span class=\"highlight\">regex</span>. &hellip; Note: <span class=\"highlight\">evil</span> tags\n\n$arr = array (\n    &quot;french-cuisine&quot;,\n    &quot;french-fries&quot;,\n    &quot;snack-food&quot;,\n    &quot;<span class=\"highlight\">evil</span>*tag!!&quot;,\n    &quot;fast-food&quot;,\n    &quot;more~<span class=\"highlight\">evil</span>*tags&quot;\n);\n\n\nCleaned array. &hellip; ",
            "title": "Remove elements from an array that do not match a regex"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 25480175,
            "is_answered": false,
            "question_id": 25235854,
            "item_type": "answer",
            "score": 8,
            "last_activity_date": 1408949004,
            "creation_date": 1408948368,
            "body": "Your program has likely encountered what&#39;s called catastrophic backtracking.\nIf you have a bit of time, let&#39;s look at how your regex works...\nQuick refresher: How regex works: The state machine always reads from left to right, backtracking where necessary.\nOn the left hand side, we have our pattern:\n\nAnd here&#39;s the String to match:\n\nFrom the regex101 debugger, your regex took 78540 steps to fail. This is because you used quantifiers that are greedy and not possessive (backtracking).\n\n... Long story short, because the input string fails to match, every quantifier within your regex causes indefinite backtracking - Every character is released from  and then  and then both and then a group is released from  to backtrack more.\nHere&#39;s a few solutions you should follow:\nAvoid abundant quantifiers!\nIf you revise your expression, you&#39;ll see that the pattern is logically same as:\n\nThis uses a step of logical induction to reduce the regex upstairs to match far quicker, now at 97 steps!\n\nUse possessive quantifiers while you can!\nAs I mentioned,  is evil because it backtracks in a terrible manner. We&#39;re in Java, what can we do?\nThis solution works only because  and  matches distinct items. We can use a possessive group!\n\nThese simple &quot;&quot; denotes &quot;We&#39;re not backtracking if we fail the match from here&quot;. This is an extremely effective solution, and cuts off any need for backtracking. Whenever you have two distinct groups with a quantifier in between, use them. And if you need some proof on the effectiveness, here&#39;s our scorecard:\n\nRead also:\n\nThe Stack Overflow Regex Reference\nReDoS - Wikipedia\n\nOnline Demos:\n\nRegEx demo 1\nRegEx demo 2\n\n",
            "excerpt": "As I mentioned, /^([a-zA-Z]+ *)+$/ is <span class=\"highlight\">evil</span> because it backtracks in a terrible manner. We&#39;re in Java, what can we do?\nThis solution works only because [a-zA-Z] and   matches distinct items. &hellip; And if you need some proof on the effectiveness, here&#39;s our scorecard:\n\nRead also:\n\nThe Stack Overflow <span class=\"highlight\">Regex</span> Reference\nReDoS - Wikipedia\n\nOnline Demos:\n\n<span class=\"highlight\">RegEx</span> demo 1\n<span class=\"highlight\">RegEx</span> demo 2 &hellip; ",
            "title": "Program run forever when matching regex"
        },
        {
            "tags": [
                "python",
                "html",
                "regex",
                "parsing",
                "python-3.x"
            ],
            "question_score": 4,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 25121165,
            "item_type": "question",
            "score": 4,
            "last_activity_date": 1407174661,
            "creation_date": 1407162894,
            "body": "I have the following HTML and I need to remove the script tags and any script related attributes in the HTML. By script related attributes I mean any attribute that starts with on. \n\n\n\nMy first thought was to use BeautifulSoup to remove the tags and attributes. Unfortunately, I am unable to use BeautifulSoup. Seeing that BeautifulSoup is off the table I can see two options for doing this. The first option I see is splitting the strings and parsing based on index. This seems like a bad solution to me.\n\nThe other option is to use Regular Expressions. However, we know that isn&#39;t a good solution either (Cthulhu Parsing).\n\nNow with that in mind, I personally feel it is alright to use regular expressions to strip the attributes. After all, with those it is still simple string manipulation. \n\nSo for removing the attributes I have:\n\n\n\nAs I&#39;ve said before, I personally think the above perfectly acceptable use of Regular Expression with HTML. But still I would like to get some opinions on the above usage. \n\nThen there is the question of the script tags. I&#39;m very tempted to go with Regular Expressions for this because I know them and I know what I need is pretty simple. Something like:\n\n\n\nThe above would start to get me close to what I need. And yes I realize the above RegEx will grab everything starting at the first opening script tag until the last closing script tag, but it&#39;s a starting example. \n\nI&#39;m very tempted to use Regular Expressions as I&#39;m familiar with them (more so than Python) and I know that is the quickest way to achieve the results I want, at least for me it is. \n\nSo I need help to go against my nature and not be evil. I want to be evil and use RegEx so somebody please show me the light and guide me to the promised land on non-Regular Expressions.\n\nThanks\n\nUpdate:\n\nIt looks like I wasn&#39;t very clear about what my question actually is, I apologize for that. My question is how can I parse the HTML using pure Python without Regular Expressions? \n\n\n\nAs for the above code example, it&#39;s wrong. I know it is wrong, I was using it as an example of a starting point. \n\nI hope this clears up my question some\n\nUpdate 2\n\nI just wanted to add a few more notes about what I am  doing. \n\nI am crawling a web site to get the data I need.\n\nOnce we have the page that contains the data we need it is saved to the database.\n\nThen the saved web page is displayed to the user.\n\nThe issue I am trying to solve happens here. The application throws a script error when you attempt to interact with the page that forces the user to click on a confirmation box. The application is not a web browser but uses the web browser DLL in Windows (I cannot remember the name at the moment).\n\nThe error in question only happens in this one page for this one web site.\n\nUpdate 3\n\nAfter adding the update I realized I was over thinking the problem, I was looking for a more generic solution. However, in this case that isn&#39;t what is needed. \n\nThe page is dynamically generated, however the script tags will stay static. With that in mind the solution becomes much simpler. With that I no longer need to treat it like HTML but as static strings.\n\nSo the solution I&#39;m looking at is\n\n\n\nI would like to avoid Regular Expression however, since I&#39;m limited to only using the standard library regular expressions seems like the best solution in this case. Which means @skamazin&#39;s answer is correct. \n",
            "excerpt": "And yes I realize the above <span class=\"highlight\">RegEx</span> will grab everything starting at the first opening script tag until the last closing script tag, but it&#39;s a starting example. &hellip; So I need help to go against my nature and not be <span class=\"highlight\">evil</span>. I want to be <span class=\"highlight\">evil</span> and use <span class=\"highlight\">RegEx</span> so somebody please show me the light and guide me to the promised land on non-Regular Expressions. &hellip; ",
            "title": "Remove Script tag and on attributes from HTML"
        },
        {
            "tags": [
                "php",
                "mysql"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 22251076,
            "is_answered": false,
            "question_id": 22249833,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1405667886,
            "creation_date": 1394198034,
            "body": "Eval is Evil\nFirst of all: don&#39;t use   unless there is a good reason. And there is never a good reason.\nin the worst case  makes your application vulnerable to injection attacks and also it&#39;s very slow. A bit of research reveals plenty of reasons why eval is a big no-no.\nDon&#39;t save your calculation code into the database\nIf you do so and you would like to switch from PHP to another language you would still have PHP code in your database. It makes it really hard to migrate languages. You should always strive to make as many parts of your application as independent as possible.\nIn this case you would tight-couple the language you use, to the database. That&#39;s a bad practice.\nAlso the only possibilities to run your calculations from the database would be to eval them (which is bad, see above) or to disassemble the string with string operations or regex which causes unnecessary effort.\nIt&#39;s all about Strategy\nIn order to solve your problem you must execute code dependent of which calculation you need. That could be either done with switch-case-statements or if-statements. But that&#39;s also not a very elegant solution. Imagine you would need to execute other operations before calculating in the future, or extend functionality. You would need to update all your cases or if-statements.\nThere is a nice design-pattern which is called Strategy Pattern. The strategy pattern solves problems when one use-case can be handled differently which is probably what you want.\nYou want to calculate something (use-case) and there are different calculation types for it (different strategies)\nHow it works\nTo implement the Strategy pattern you basically need three things.\n\nA class where you inject your strategies. It&#39;s basically a wrapper for your strategy tasks.\nAn interface which will be implemented by your strategies\nYour strategies\n\nYour interface could look like this:\n\nThe interface will make sure that all your strategies provide a method to actually run the calculation. Nothing special.\nNext you may want to have a base class that takes your calculation operators as constructor arguments and stores them into properties.\n\nNow it&#39;s getting serious. We are implementing our strategies.\n\nOf course you could clean this one up a bit, but what I want to point out here is the class declaration.\nWe are extending our  class so that we can pass the arithmetic operations via constructor and we are implementing the  which tells our class: &quot;Hey! You must provide a calculate method, I don&#39;t care whether you want or not.\nWe&#39;ll see later why this is an integral part of the pattern.\nSo we have two concrete classes that contain the actual code for the actual arithmetic operation. If you would ever need to, you could change it easily as you see.\nTo add more operations just add another class.\nNow we will create a class where our strategies can be injected. Later you will instantiate an object of this class and work with it.\nHere is how it looks like:\n\nThe most important part here is the constructor. See how we type-hint our interface here. By doing that we make sure that only an object can be injected (Dependency Injection) whose class implements the interface. We do not need to demand a concrete class here. That&#39;s the crucial point here.\nAlso there&#39;s a calculate method in there. It&#39;s just a wrapper for our strategy to execute it&#39;s calculate method.\nWrapping it up\nSo now we just need to create an object of our  class and pass an object of one of our strategy classes (that contain the code for the arithmetic operations).\n\nTry replacing the string stored in  to  and you see that the operation for calculating the percentage will be executed.\nConclusion\nThe strategy pattern allowed you to create a clean interface for working with dynamic tasks that are only made concrete during runtime. Neither your database needs to know how we calculate things, nor your actual calculator does. The only thing we need to make sure is to code against an interface that provides a method to let us calculate things.\n",
            "excerpt": "Eval is <span class=\"highlight\">Evil</span>\nFirst of all: don&#39;t use  eval() unless there is a good reason. &hellip; Also the only possibilities to run your calculations from the database would be to eval them (which is bad, see above) or to disassemble the string with string operations or <span class=\"highlight\">regex</span> which causes unnecessary &hellip; ",
            "title": "Save Calculation in Code or Database?"
        },
        {
            "tags": [
                "c#",
                ".net"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 24476439,
            "is_answered": false,
            "question_id": 24476326,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1404048489,
            "creation_date": 1404048170,
            "body": "The sane way would be to use a HTML parser and querying library. I can suggest CsQuery, which is a jQuery-like library in .NET. You could use a selector like  to match your anchor, then extract the attribute value.\n\nThis is the correct way of doing things.\n\n\n\nBut if you only ever want to get this one attribute and don&#39;t do anything with the HTML source ever again, it might be easier to just use a regex, but beware: parsing HTML with regex is evil.\n\nSo if all you want to do is just extract this one piece of information, as an exceptional measure, for your information, you could use that:\n\n\n\nBut try CsQuery first. It&#39;s a much better approach.\n",
            "excerpt": "But if you only ever want to get this one attribute and don&#39;t do anything with the HTML source ever again, it might be easier to just use a <span class=\"highlight\">regex</span>, but beware: parsing HTML with <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "How can i parse specific string using indexof and substring?"
        },
        {
            "tags": [
                "filter",
                "footable"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 24253543,
            "is_answered": false,
            "question_id": 22739211,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1402962206,
            "creation_date": 1402960281,
            "body": "When Footable filters, it uses the entire text from the whole row and it uses indexof() to test.  You can see this in footable.filter.js in the filterFunction function.\n\nI had to do 3 things to solve the problem.\n\n\nReplace window.footable.options.filter.filterFunction with my own function\nDo a per column match instead of the whole row.  Depending on the HTML in your row, the spaces between the columns could be lost causing the first word of a column to concatenate with the last word of the previous column.\nUse a regex match instead of indexof().  This allows you to match a whole word.  As an example, if you us indexof() for &quot;be&quot; in &quot;Don&#39;t be evil, because that&#39;s not good&quot; will return 6 and 15 even though 15 is the beginning of a completely different word.\n\n\nHere&#39;s the function: (I&#39;m sure there are loads of improvements.  Feel free to edit...)\n\n\n\nYou can find a plunk here: http://plnkr.co/edit/P2DWDtyHP3xmoUIcvgDe\n",
            "excerpt": "Use a <span class=\"highlight\">regex</span> match instead of indexof().  This allows you to match a whole word. &hellip; As an example, if you us indexof() for &quot;be&quot; in &quot;Don&#39;t be <span class=\"highlight\">evil</span>, because that&#39;s not good&quot; will return 6 and 15 even though 15 is the beginning of a completely different word. &hellip; ",
            "title": "Footable fine filtering"
        },
        {
            "tags": [
                "php",
                ".htaccess",
                "translation"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 20446396,
            "is_answered": false,
            "question_id": 20446273,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1400707466,
            "creation_date": 1386449037,
            "body": "The HTTP permanent redirect status code (301) is exactly for your case. All links to your site will still work, and additionally any bookmarks will be updated to your new url path construct.\n\nYou can set it up in Apache using mod_rewrite:\n\n\n\nThis will redirect every url path, which does not start with either , , , ,  to the  (default) sub path.\n\nEdit to comments:\n\nThe solution above would enable for all your links to work (old and new ones).\n\nIf you additionally want to change all the links on your page, so that search engines will see them, then your only option is to rewrite them in your PHP/HTML code (using JavaScript for this is a bad idea for many reasons).\n\nThe best option in this case is to write a helper function, which generates the links for you depending on current language. This way you will have a single point, where you can change your links, should they change once again in the future.\n\nUnfortunately, you won&#39;t be able to change all of your links at once. If you have thousands of them, and no common code which generates all of them, then you have to do this one by one. Good news is, that you are not the first one with this problem, and the developers of professional IDE&#39;s already implement tools to aid you. My personal choice is a commercial software, but other open sourced IDE&#39;s also have a pretty good find/replace options. You can for instance write a regex, which will find your links and replace them accordingly to the rules you provide. To write a good regex replacer might prove to be very beneficial as opposed to reviewing all links one by one.\n\nThis is one of the possible implementation of the url helper:\n\n\n\nNow you have to find all places where links are outputed and use the helper:\n\n\n\nNote that this is just an example of how it could work. I actually don&#39;t recommend to implement the helper as a static method, because static is pure evil. For your real implementation you might consider a helper object instead of helper method.\n",
            "excerpt": "You can for instance write a <span class=\"highlight\">regex</span>, which will find your links and replace them accordingly to the rules you provide. &hellip; To write a good <span class=\"highlight\">regex</span> replacer might prove to be very beneficial as opposed to reviewing all links one by one. &hellip; ",
            "title": "Smart way to add language to all website URLS?"
        },
        {
            "tags": [
                "python",
                "markdown"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 23530430,
            "is_answered": false,
            "question_id": 23530142,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1399506827,
            "creation_date": 1399506827,
            "body": "As I said in a comment,  or  are evil, a better alternative is to use the code module as in the following example. Also, you may prefer to compile the regex, in order to only perform the matching at each iteration over the input instead of building the automaton at each iteration.\n\n\n\nThough that example will output the results on  so you may want to use instead an overloaded class such as the one in this example.\n",
            "excerpt": "As I said in a comment, eval or exec are <span class=\"highlight\">evil</span>, a better alternative is to use the code module as in the following example. &hellip; Also, you may prefer to compile the <span class=\"highlight\">regex</span>, in order to only perform the matching at each iteration over the input instead of building the automaton at each iteration. &hellip; ",
            "title": "Literate Python"
        },
        {
            "tags": [
                "php",
                "arrays",
                "function",
                "parsing",
                "dom"
            ],
            "question_score": 5,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 23262987,
            "item_type": "question",
            "score": 5,
            "last_activity_date": 1398336364,
            "creation_date": 1398325912,
            "body": "I have a variable that looks like this:\n\n\n\nand I want to extract the data-tpl-attributes in a way so I end up with a resulting array that looks like this:\n\n\n\nThe number of &quot;data-tpl-&quot; attributes varies, and it&#39;s not always an  element. Other than that, it always follows the same format: .\n\nHow can I retrieve those attributes and store them in an array, without using regex? I say without regex since everywhere I look it seems like parsing html using regex is an evil practice, or is it ok in this case?\n",
            "excerpt": "How can I retrieve those attributes and store them in an array, without using <span class=\"highlight\">regex</span>? &hellip; I say without <span class=\"highlight\">regex</span> since everywhere I look it seems like parsing html using <span class=\"highlight\">regex</span> is an <span class=\"highlight\">evil</span> practice, or is it ok in this case? &hellip; ",
            "title": "Extract html attributes from string in PHP"
        },
        {
            "tags": [
                "python",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 22206107,
            "is_answered": false,
            "question_id": 22205972,
            "item_type": "answer",
            "score": 6,
            "last_activity_date": 1394044405,
            "creation_date": 1394043978,
            "body": "Yep, you&#39;ve got yourself a case of catastrophic backtracking, also known as an &quot;evil regex&quot;, here:\n\n\n\nHere:\n\n\n\nAnd here:\n\n\n\nReplacing  with  should do the trick.\n\nFor more information about what an evil regex is and why it&#39;s evil, check out this question:\nHow can I recognize an evil regex?\n",
            "excerpt": "Yep, you&#39;ve got yourself a case of catastrophic backtracking, also known as an &quot;<span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>&quot;, here:\n\n\\s*\n(?P&lt;q_r&gt;.*?)\n\\s*\n\n\nHere:\n\n\\s*\n(?P&lt;flag_char_code&gt;.*?)\n\\s*\n\n\nAnd here:\n\n\\s*\n\\.(?P&lt;domain&gt;.*)\\. &hellip; For more information about what an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> is and why it&#39;s <span class=\"highlight\">evil</span>, check out this question:\nHow can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>? &hellip; ",
            "title": "Python Regex takes so long in some cases"
        },
        {
            "tags": [
                "html",
                "regex",
                "notepad++"
            ],
            "question_score": 4,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 20942621,
            "item_type": "question",
            "score": 4,
            "last_activity_date": 1388988854,
            "creation_date": 1388979824,
            "body": "Solved (see first comment by &quot;justhalf&quot;)\n\n**\n\nI know, using RegEx for messing with HTML is evil.\n\nHowever, my means and know-how are restricted, and I don&#39;t know what else to do.\n\nThe situation is as follows:\n\nI have a website containing some 5000 pages.\n\nThere are some errors I would like to fix:\n\nThings like this:\n\n\nThe error in this example is that the value for the HTML attribute &quot;alt&quot; is enclosed in apostrophes, yet the text contains an apostrophe as well.\nThere should be many errors of this type. I want to find them all and correct them.\n\nI tried it with this pattern: :\n\nThat is: a space, followed by the name of the HTML attribute , followed by = and the attribute&#39;s value . Up until here, this should match a valid HTML attribute.\nFor a valid HTML attribute, what would follow now from here would be either a space followed by the next attribute, or the closing bracket &gt; for the HTML tag.\nSo, in order to match erroneous HTML attributes as described above, I continue the search pattern with , that is, a string which does not contain = or &gt;, followed by a &#39;. In other words, the next apostrophe is expected before any = or &gt; sign.\n\nAccording to my understanding, this should exclude valid HTML attributes, which are followed by the next HTML attribute or the closing &gt; for the HTML tag. But somehow it does not really work like that.\n\nWith this search pattern, for example, I find things like this:\n\n\n\nSo... valid HTML attributes, followed by the next.\n\nBut I thought these things should be excluded by \n\nVery confused.\n",
            "excerpt": "Solved (see first comment by &quot;justhalf&quot;)\n\n**\n\nI know, using <span class=\"highlight\">RegEx</span> for messing with HTML is <span class=\"highlight\">evil</span>.\n\nHowever, my means and know-how are restricted, and I don&#39;t know what else to do. &hellip; ",
            "title": "find html attributes containing apostrophes using regex (notepad++)"
        },
        {
            "tags": [
                "javascript",
                "php",
                "regex",
                "perl"
            ],
            "question_score": 6,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 20928677,
            "item_type": "question",
            "score": 6,
            "last_activity_date": 1388905476,
            "creation_date": 1388882923,
            "body": "Are there any security concerns if I run a user defined regular expression on my server with a user defined input string? I&#39;m not asking about a single language, but any language really, with PHP as one of the main language I would like to know about.\n\nFor example, if I have the code below:\n\n\n\nProviding this is not a controlled environment (i.e. the user can&#39;t be trusted), what are the risks of the above code? If a similar code is written for other languages, are there risks in these other languages? If so, which languages consist of threats?\n\nI already found out about &#39;evil regular expressions&#39;, however, no matter what I try on my computer, they seem to work fine, see below.\n\nPHP\n\n\n\nJavaScript\n\n\n\nThis leads me to believe that PHP and JavaScript have a fail-safe mechanism for evil regexes. Based on that, I would have that other languages have similar features.\n\nIs this a correct assumption?\n\nFinally, for any or all of the languages that may be harmful, are there any ways to make sure the regular expressions doesn&#39;t cause damage?\n",
            "excerpt": "php\n\nif(isset($_POST[&#39;<span class=\"highlight\">regex</span>&#39;])) {\n    preg_match($_POST[&#39;<span class=\"highlight\">regex</span>&#39;], $_POST[&#39;match&#39;], $matches);\n    var_dump($matches);\n}\n\n? &hellip; I already found out about &#39;<span class=\"highlight\">evil</span> regular expressions&#39;, however, no matter what I try on my computer, they seem to work fine, see below.\n\nPHP\n\n&lt;? &hellip; ",
            "title": "User defined regular expression security concerns"
        },
        {
            "tags": [
                "java",
                "javascript",
                "emacs",
                "intellij-idea"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 20913196,
            "is_answered": false,
            "question_id": 20911127,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1388884827,
            "creation_date": 1388785355,
            "body": "I&#39;m hardly an Emacs veteran, but I do have an emacs obsession.\n\nFor Java:\n\n\nsemantic-mode doesn&#39;t seem to work in practice, but can theoretically jump-to-definition\nevil-mode (a bit overkill...) can jump to definitions just fine with evil-goto-definition\n\nthis works very well, and I&#39;d even suggest porting it to a non-evil environment if possible\n\nimenu (this uses a regex engine to find definitions)\n\nis already used as a fallback in semantic-ia-fast-jump\ndoesn&#39;t seem to work well on variables\n\n\n\nFor Javascript: Javascript has some very complicated scope styles, and, unfortunately, such styles are commonplace so regex based solutions can and will jump to the wrong definition at times.\n\n\nsemantic-mode doesn&#39;t work at all\nevil-goto-definition (uses a regex engine) works great as always\nimenu (uses a regex engine)\n\ndoesn&#39;t seem to work well on variables\n\nTern is a battery of (alien) semantic analysers which seems to integrate well with Emacs\n\n\nIn general, I&#39;d really recommend using evil if you can, it&#39;s superb. If you think of evil as being, well, evil, then:\n\n\nFor variables use semantic-ia for jumps in Java, and tern for jumps in JS\nFor functions use imenu. It works well on both Java and JS.\n\n\nAnd finally, here&#39;s some code that I use for almost all of my jumping. It lets you choose any function to jump to and uses imenu, so you can jump to things other than the current symbol-at-point.\n\n\n",
            "excerpt": "very well, and I&#39;d even suggest porting it to a non-<span class=\"highlight\">evil</span> environment if possible\n\nimenu (this uses a <span class=\"highlight\">regex</span> engine to find definitions)\n\nis already used as a fallback in semantic-ia-fast-jump\ndoesn&#39;t seem &hellip; semantic-mode doesn&#39;t work at all\n<span class=\"highlight\">evil</span>-goto-definition (uses a <span class=\"highlight\">regex</span> engine) works great as always\nimenu (uses a <span class=\"highlight\">regex</span> engine)\n\ndoesn&#39;t seem to work well on variables\n\nTern is a battery of (alien) semantic &hellip; ",
            "title": "How can one &#39;Go to definition&#39; in Java and JavaScript using Emacs?"
        },
        {
            "tags": [
                "php",
                "mysql",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 20245412,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1385564061,
            "creation_date": 1385563410,
            "body": "I have: \n\n\n\nOr I have:\n\n\n\nOr I have:\n\n\n\nAn so on...\n\nHow do I split this into a first part (SELECT-Part, FROM-Part, WHERE-Part, ...) and in a second part with evertything after the first part. \n\nI know, doing regex on SQL ist evil. It&#39;s better not to do this. Nevertheless I would like to see the regex, which can solve that. \n",
            "excerpt": "I know, doing <span class=\"highlight\">regex</span> on SQL ist <span class=\"highlight\">evil</span>. It&#39;s better not to do this. Nevertheless I would like to see the <span class=\"highlight\">regex</span>, which can solve that. &hellip; ",
            "title": "PHP MySql query: Split into parts with regex"
        },
        {
            "tags": [
                "javascript",
                "html",
                "regex"
            ],
            "question_score": 72,
            "is_accepted": false,
            "answer_id": 6660315,
            "is_answered": false,
            "question_id": 6659351,
            "item_type": "answer",
            "score": 127,
            "last_activity_date": 1384800733,
            "creation_date": 1310452191,
            "body": "jQuery uses a regex to remove script tags in some cases and I&#39;m pretty sure its devs had a damn good reason to do so. Probably some browser does execute scripts when inserting them using .\n\nHere&#39;s the regex:\n\n\n\nAnd before people start crying &quot;but regexes for HTML are evil&quot;: Yes, they are - but for script tags they are safe because of the special behaviour - a  section may not contain  at all unless it should end at this position. So matching it with a regex is easily possible. However, from a quick look the regex above does not account for trailing whitespace inside the closing tag so you&#39;d have to test if  etc. will still work.\n",
            "excerpt": "Here&#39;s the <span class=\"highlight\">regex</span>:\n\n/&lt;script\\b[^&lt;]*(?:(?! &hellip; So matching it with a <span class=\"highlight\">regex</span> is easily possible. &hellip; ",
            "title": "Removing all script tags from html with JS Regular Expression"
        },
        {
            "tags": [
                "javascript",
                "django"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 12118596,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1382983266,
            "creation_date": 1345860472,
            "body": "I have this string being stored in a cookie \n\n\n\nAKA\n\n\n\n(for pasting into a console)\n\nbut I can&#39;t parse it with JSON.parse. However, it works with eval (which is evil). The error is .\n\nOf note are the escaped commas. This was generated with the Django messaging API.\n\nDoes anyone know a good regex or other technique that can do this instead?\n\nI first need to unescape the string, (because it&#39;s a proper javascript string) and then I need the array after the dollar (  ).\n",
            "excerpt": "However, it works with eval (which is <span class=\"highlight\">evil</span>). The error is SyntaxError: Unexpected number.\n\nOf note are the escaped commas. This was generated with the Django messaging API. &hellip; Does anyone know a good <span class=\"highlight\">regex</span> or other technique that can do this instead? &hellip; ",
            "title": "JSON.parse throws &quot;SyntaxError: Unexpected Number&quot; when trying to parse a single string stored in a cookie"
        },
        {
            "tags": [
                "php",
                "regex",
                "html-parsing"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 19310606,
            "is_answered": false,
            "question_id": 18893680,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1381469196,
            "creation_date": 1381467995,
            "body": "For what it&#39;s worth, this is the regex that you&#39;re looking for:\n\nRaw Match Pattern:\n\n\n\nRaw Replace Pattern:\n\n\n\nThe PHP code is:\n\n\n\nThat being said, be forewarned -- to Andy Lester&#39;s point, this regex is not reliable. Though in my opinion, the issue is not quite &quot;the nature of HTML&quot;, or at least not simply that. The point being made in this admittedly-great resource -- http://htmlparsing.com/regexes -- is that you&#39;re attempting to re-invent the wheel on a very bumpy road. The broader concern is &quot;not that regular expressions are evil, per se, but that overuse of regular expressions is evil.&quot; That quote is by Jeff Atwood, from an exceptional elaboration on the joy and terror of regular expressions here: Regular Expressions: Now You Have Two Problems (He also has an article specifically warning against using regular expressions to parse HTML -- Parsing Html The Cthulhu Way.)\n\nSpecifically in the case of my &quot;solution&quot; above, for instance -- the following input (with line returns) will not be matched, despite being valid HTML:\n\n\n\nThe following inputs, however, are handled as desired:\n\n\n\nbecomes:\n\n\n\nA great resource for explaining the full breakdown of the regex is here: http://www.myregextester.com/index.php\n\nTo replicate the test on that tool:\n\n\nselect the &quot;replace&quot; operation\nput your regex into &quot;match pattern&quot;\nput the replacment into &quot;replace pattern&quot;\nselect the &quot;i&quot; flag checkbox\nselect the &quot;explain&quot; checkbox\nselect the &quot;PHP&quot; checkbox\nput your target content into &quot;source text&quot;\nclick &quot;Submit&quot;\n\n\nFor convenience and posterity, I&#39;ve included the full explanation provided by that tool below, but two of the conceptual highlights are:\n\n\nLookaheads and negative lookaheads -- eg  http://php.net/manual/en/regexp.reference.assertions.php\nNon-capturing subpatterns -- eg  or the outer part of  http://php.net/manual/en/regexp.reference.subpatterns.php\n\n\nMatch Pattern Explanation:\n\n\n",
            "excerpt": "&lt;\\/a&gt;/i&#39;,&#39;&lt;a $1href=&quot;http://$2&quot;$3&gt;$4&lt;/a&gt;&#39;,$content);\n\n\nThat being said, be forewarned -- to Andy Lester&#39;s point, this <span class=\"highlight\">regex</span> is not reliable. &hellip; The broader concern is &quot;not that regular expressions are <span class=\"highlight\">evil</span>, per se, but that overuse of regular expressions is <span class=\"highlight\">evil</span>.&quot; &hellip; ",
            "title": "Replace protocol in links that don&#39;t match a given domain"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 19126447,
            "is_answered": false,
            "question_id": 19126096,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1380670064,
            "creation_date": 1380663629,
            "body": "It looks like what you&#39;ve got is an &quot;evil regex&quot;, which is not uncommon when you try to construct a complicated regex to match one thing (src) within another thing (img).  In particular, evil regexs usually happen when you try to apply repetition to a complex subexpression, which you are doing with .\n\nA better approach would be to use two regexes; one to match all  tags, and then another to match the  attribute within it.\n\nMy Java&#39;s rusty, so I&#39;ll just give you the pseudocode solution:\n\n\n\nNote the use of a backreference to match the appropriate type of closing quote (i.e., this will match  and .  Also note that the quantifiers are lazy here ( instead of just ); this is necessary to prevent too much from being consumed.\n\nEDIT: even though my Java&#39;s rusty, I was able to crank out an example.  Here&#39;s the solution in Java:\n\n\n",
            "excerpt": "It looks like what you&#39;ve got is an &quot;<span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>&quot;, which is not uncommon when you try to construct a complicated <span class=\"highlight\">regex</span> to match one thing (src) within another thing (img). &hellip; In particular, <span class=\"highlight\">evil</span> regexs usually happen when you try to apply repetition to a complex subexpression, which you are doing with (.|\\s)*?. &hellip; ",
            "title": "attributes pattern matcher takes a long time"
        },
        {
            "tags": [
                "c#",
                "regex",
                "out-of-memory",
                "large-files"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 18923039,
            "is_answered": false,
            "question_id": 18920911,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1379700045,
            "creation_date": 1379700045,
            "body": "You have what&#39;s called &quot;catastrophic backtracking&quot;.\n\nBasically, when you have a variable-length expression (, , etc.) followed by an &quot;overlapping&quot; (that is, both expression could match on the same set of characters) variable length expression, you can get into a tug of war between the two expressions. This usually only happens when the entire expression fails and .NET regex enginge attempts to shift the input text between the overlapping expressions, so often it&#39;s missed in testing.\n\nYour expression has many sub-expressions which could cause this, but here&#39;s an example:\n\n\n\nThe first part, , can match zero or more whitespace characters. The second, , can also match zero or more whitespace characters (in addition to non-whitespace characters). This will cause catastrophic backtracking in the event that your input fails on the first try and there are multiple whitespace characters to match.\n\nI wrote a bit about this issue here as well:\nHow can I recognize an evil regex?\n",
            "excerpt": "This usually only happens when the entire expression fails and .NET <span class=\"highlight\">regex</span> enginge attempts to shift the input text between the overlapping expressions, so often it&#39;s missed in testing. &hellip; I wrote a bit about this issue here as well:\nHow can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>? &hellip; ",
            "title": "A long Regex for a large string"
        },
        {
            "tags": [
                "iphone",
                "ios",
                "objective-c",
                "string",
                "nsstring"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 18385622,
            "is_answered": false,
            "question_id": 18385500,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1377187510,
            "creation_date": 1377187510,
            "body": "\n  it strikes me that with longer sets of strings, this may become inefficient and slow.\n\n\nSo, have you benchmarked it? If not, then you don&#39;t have the right to judge it as &quot;inefficient&quot; and &quot;slow&quot;. Premature optimization is evil. Just stick with those nice and simple for loops and the  method.\n\n\n\nBut: to actually answer your question, it&#39;s not impossible to avoid the manual looping. If you use  with a regex like , then you can find all occurrences in one pass. The use of regular expressions would probably be slower than a simple string search, though.\n",
            "excerpt": "Premature optimization is <span class=\"highlight\">evil</span>. Just stick with those nice and simple for loops and the - [NSString rangeOfString:] method. &hellip; If you use NSRegularExpression with a <span class=\"highlight\">regex</span> like good|great|awesome, then you can find all occurrences in one pass. &hellip; ",
            "title": "Searching for multiple strings in an NSString"
        },
        {
            "tags": [
                "c#",
                "list",
                "ienumerable"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 18238735,
            "is_answered": false,
            "question_id": 4257081,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1376502486,
            "creation_date": 1376502486,
            "body": "By now, I&#39;m sure you&#39;ll see that you&#39;re trying to optimize prematurely, which is, according to many, the root of all evil.\n\nHowever, if you REALLY want to speed this up, regular expressions seem an expensive way to do it.  Everytime you do a Regex.Match(), you&#39;re scanning the string again, which results in at least as many scans as you have tokens.\n\nIf you know the boundaries that define a token (&#39;{&#39; and &#39;}&#39;, for example), you could scan the string once to build the enumerable of tokens (with yield, or list, I don&#39;t think that&#39;ll make much difference).  The caller can then rebuild the string, looking up the values to replace the tokens with.\n\nOf course, this would only work with simple &quot;search and replace&quot; type tokens.  More complex ones would require something more sophisticated, such as a regex.  Perhaps you could extend the TokenDefinition to specify whether the match is a simple one or a regex one.  This would cut down the number of regular expressions performed, but still keep the flexibility required.\n",
            "excerpt": "By now, I&#39;m sure you&#39;ll see that you&#39;re trying to optimize prematurely, which is, according to many, the root of all <span class=\"highlight\">evil</span>. &hellip; More complex ones would require something more sophisticated, such as a <span class=\"highlight\">regex</span>.  Perhaps you could extend the TokenDefinition to specify whether the match is a simple one or a <span class=\"highlight\">regex</span> one. &hellip; ",
            "title": "IEnumerable&lt;T&gt; and &quot;yield return&quot; performance question"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 17780324,
            "is_answered": false,
            "question_id": 17780248,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1374469797,
            "creation_date": 1374469797,
            "body": "While I can&#39;t remember any other reason, sending headers earlier than the normal course may have far reaching consequences. Below are just a few of them that happened to come to my mind at the moment:\n\n\nWhile current PHP releases may have output buffering on, the actual production servers you will be deploying your code on are far more important than any development or testing machines. And they do not always tend to follow latest PHP trends immediately.\nBy sending headers inadvertently, you might have introduced a security vulnerability: say, you are doing a redirection, but hence the headers are already sent, the redirection does not work and the rest of the page might be output, thus the visitor may see what she was not supposed to see. While this can be mitigated by using exit, you know the story, only if every one of us utilize good programming habits every time.\nEven if letting the visitor stay in the wrong page does not have a security implication, by breaking a session behavior, or in some other ways I&#39;ve encountered over years, the security and/or session cycle might have taken some sort of blow in the end.\nIf not security, you may have headaches over inexplicable functionality loss. Say, you are implementing some kind payment gateway, and redirect user to a specific URL after successful confirmation by the payment processor. If some kind of PHP error, even a warning, or an excess line ending happens, the payment may remain unprocessed and the user may still seem unbilled. This is also one of the reasons why needless redirection is evil and if redirection is to be used, it must be used with caution.\nYou may get &quot;Page loading canceled&quot; type of errors in Internet Explorer, even in the most recent versions. This is because an AJAX response/json include contains something that it shouldn&#39;t contain, because of the excess line endings in some PHP files, just as I&#39;ve encountered a few days ago.\nIf you have some file downloads in your app, they can break too, because of this. And you may not notice it, even after years, since the specific breaking habit of a download depends on the server, the browser, the type and content of the file (and possibly some other factors I don&#39;t want to bore you with).\n\n\nBonus: a few gotchas (actually currently one) related to these 2 characters:\n\n\nEven some well-known libraries may contain excess line endings after ?&gt;. An example is Smarty, even the most recent versions of both 2.* and 3.* branch have this. So, as always, watch for third party code. Bonus in bonus: A regex for deleting needless PHP endings: replace (\\s*\\?&gt;\\s*)$ with empty text in all files that contain PHP code.\n\n",
            "excerpt": "This is also one of the reasons why needless redirection is <span class=\"highlight\">evil</span> and if redirection is to be used, it must be used with caution. &hellip; Bonus in bonus: A <span class=\"highlight\">regex</span> for deleting needless PHP endings: replace (\\s*\\?&gt;\\s*)$ with empty text in all files that contain PHP code. &hellip; ",
            "title": "How does the PHP code execute even without closing the ?&gt; PHP tag?"
        },
        {
            "tags": [
                "python",
                "regex",
                "unicode"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 17719039,
            "is_answered": false,
            "question_id": 17712730,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1374138164,
            "creation_date": 1374138164,
            "body": "\n  \\b\n\n\nThere isn&#39;t a word boundary between the letter  and the number —they are both alphanumerics. When Unicode-aware regex is being used this is correctly handled, hence no match. If you don&#39;t want to treat katakana and other non-ASCII letters as being alphanums, remove the  flag which controls this behaviour.\n\nWhen you send a byte string to a regex that was compiled from a Unicode string, it is automatically decoded. For some reason it seems to be decoded as ISO-8859-1 (rather than, say, )... don&#39;t know why that is, but implicit encode/decode is in general evil to be avoided.\n\nThe UTF-8 byte sequence for , when mis-decoded as ISO-8859-1, comes out as . The degree sign is not an alphanum so you get a match.\n",
            "excerpt": "When Unicode-aware <span class=\"highlight\">regex</span> is being used this is correctly handled, hence no match. &hellip; When you send a byte string to a <span class=\"highlight\">regex</span> that was compiled from a Unicode string, it is automatically decoded. &hellip; ",
            "title": "python regex not matching decoded unicode string"
        },
        {
            "tags": [
                "c++",
                "regex",
                "c++11",
                "stack-overflow",
                "standard-library"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 17636892,
            "is_answered": false,
            "question_id": 17634817,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1373780960,
            "creation_date": 1373780960,
            "body": "The problem is the back reference (). Back references are evil, or at least very difficult to implement in the general case, and it&#39;s not easy to recognize not-general cases.\n\nIn your case, the problem is that the regex&#39;s first match will be from the first  to the last . That&#39;s not what you intended, but it is the way regexes work. (The &quot;longest left-most rule&quot;.) In theory, it&#39;s still possible to match the regex without killing the stack, but I doubt whether the regex library you&#39;re using is clever enough to make that optimization.\n\nYou can fix the regex to match what you want it to match by making the data part () non-greedy: change it to . That might also fix the stack blow-up problem, because it will cause the regex to match much earlier, before it blows up the stack. But I don&#39;t know if it will work in general; I really don&#39;t know anything about the MS implementation.\n\nIn my opinion, you should avoid back references, even though it means complicating your code a bit. What I would do is to first match:\n\n\n\nand then create the terminating string:\n\n\n\nand then  the terminating string. That means you can no longer use the regex library&#39;s iterator, which is unfortunate, but the loop is still pretty straight-forward.\n\nBy the way, I find it odd that you only recognize the start delimiter if it is at the end of a line, and the end delimiter if it is at the start of a line. My inclination would have been to require both of them to be full lines. If you replace the regex-with-back-reference with my two-step approach, it&#39;s relatively easy to accomplish that. That might be considered another hint that the regex-with-back-reference is not really the right approach.\n",
            "excerpt": "Back references are <span class=\"highlight\">evil</span>, or at least very difficult to implement in the general case, and it&#39;s not easy to recognize not-general cases. &hellip; In theory, it&#39;s still possible to match the <span class=\"highlight\">regex</span> without killing the stack, but I doubt whether the <span class=\"highlight\">regex</span> library you&#39;re using is clever enough to make that optimization. &hellip; ",
            "title": "Microsoft&#39;s implementation of std::regex"
        },
        {
            "tags": [
                "ruby",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 17500341,
            "is_answered": false,
            "question_id": 17497179,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1373092011,
            "creation_date": 1373092011,
            "body": "If you can always find a string that matches the regex you are given, then it suffices to match it against the regex, and look at the match data length. However, determining whether a regexp has a string that it matches is np-hard[1]. This is only feasible if you know in advance what kind of regexes you&#39;ll be getting.\n\nThe next best best method in the  class is  or . However, we need to parse the regex if we do this.\n\nI can&#39;t speak for the future, but as of Ruby 2.0, there is no better method in the  core class.\n\nA left parenthesis denotes a literal left parenthesis, if preceded by an unescaped backslash. A backslash is unescaped unless an unescaped backslash precedes. So, a character is escaped iff preceded by an odd number of backslashes. \n\nAn unescaped left parenthesis denotes a capturing group iff not followed by a question mark. With a question mark, it can mean various things:  and  denote a named capturing group. Named and unnamed capturing groups cannot coexist in the same regex, however[2].  denote non-capturing groups. This is a special case of .  denote atomic groups. , ,  and  denote lookaround.  denote comments.\n\nRuby regexp engine supports comments in regexes. Considering them in the main regex would be very difficult. We can try to strip them if we really want to support these, but supporting them fully will get messy due to the possibility of inline flags turning extended mode (and thus line comments) on and off in ways that a regular expression cannot capture. I will go ahead and not support unescaped parentheses in regex comments[3].\n\nWe want to count:\n\n\nthe number of left parentheses \nthat are not escaped by a backslash  (read: not preceded by an odd number of backslashes that are not preceded by yet another backslash) and \nthat are not followed by a question mark \n\n\nRuby doesn&#39;t support unbounded lookbehind, but if we reverse the source first, we can rewrite the first assertion slightly: . The second assertion becomes a lookbehind: . \n\nthe whole solution\n\n\n\n\n\n[1]: we can show the NP-hardness by converting the satisfiability problem to it:\n\n\nAND:  ( must be an assertion)\nOR: \nNOT: \natoms: , , , ..., , ...\n\n\nexample(XOR): \n\nthis extends to NP-completeness for any class of regexes that can be tested in polynomial time. This includes any regex with no nested repetition (or repeated backreferences to repetition or recursion) and with bounded nesting depth of optional matches.\n\n[2]:  returns , indicating that unnamed capturing groups are ignored when named capturing groups are present. Tested in Ruby 1.9.3\n\n[3]: Inline comments start with  and end with . They cannot contain an unescaped right parenthesis, but they can contain an unescaped left parenthesis. These can be stripped easily (even though we have to sprinkle the &quot;unescaped&quot; regex everywhere), are the lesser evil, but they&#39;re also less likely to contain anunescaped left parenthesis.\n\nLine comments start with  and end with a newline. These are only treated as comments in the extended mode. Outside the extended mode, they match the literal  and newline. This is still easy, even if we have to consider escaping again. Determining if the regex has the extended flag set is not too difficult, but the flag modifier groups are a different beast entirely.\n\nEven with Ruby&#39;s awesome recursive regexes, merely determining if a previously-open group modifying the extended mode is already closed would yield a very nasty regex (even if you replace one by one and don&#39;t have to skip comments, you have to account for escaping). It wouldn&#39;t be pretty (even with interpolation) and it wouldn&#39;t be fast. \n",
            "excerpt": "If you can always find a string that matches the <span class=\"highlight\">regex</span> you are given, then it suffices to match it against the <span class=\"highlight\">regex</span>, and look at the match data length. &hellip; These can be stripped easily (even though we have to sprinkle the &quot;unescaped&quot; <span class=\"highlight\">regex</span> everywhere), are the lesser <span class=\"highlight\">evil</span>, but they&#39;re also less likely to contain anunescaped left parenthesis. &hellip; ",
            "title": "How to check how many variables (masks) declared in Regexp (ruby)?"
        },
        {
            "tags": [
                "nginx",
                "reverse-proxy"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 17391446,
            "is_answered": false,
            "question_id": 17300163,
            "item_type": "answer",
            "score": 8,
            "last_activity_date": 1372624729,
            "creation_date": 1372602919,
            "body": "The 1st way that I know of is using a regex against the $args parameter like so:\n\n\n\nOr the 2nd way is to use the convenient $is_args like so:\n\n\n\nRemember that in both styles you need to put a space between the if and the opening parenthesis; &quot;if (&quot; not &quot;if(&quot; as well as a space after the closing parenthesis and the opening brace; &quot;) {&quot; rather than &quot;){&quot;.\n\nFull example using the 1st style above, nginx.conf:\n\n\n\nFull example using the 2nd style above, nginx.conf:\n\n\n\nNote that the proxy.conf include goes outside of the if statement.\n\nVersion:\n\n\n\nAnd some info on the $args and $is_args variables:\n\nhttp://nginx.org/en/docs/http/ngx_http_core_module.html\n\nReading the docs is always useful, I just discovered that $query_string is the same as $args, so where I have $args above, you could also use $query_string according to the docs.\n\nIMPORTANT\n\nIt is important to note however, that If can be Evil!\n\nAnd therefore either test thoroughly or use the recommendation provided in the link above to change the URL inside location statement in a way similar to the example provided there, something like:\n\n\n",
            "excerpt": "The 1st way that I know of is using a <span class=\"highlight\">regex</span> against the $args parameter like so:\n\n    if ($args ~ &quot;^(\\w+)=&quot;) { \n\n\nOr the 2nd way is to use the convenient $is_args like so:\n\n    if ($is_args ! &hellip; IMPORTANT\n\nIt is important to note however, that If can be <span class=\"highlight\">Evil</span>! &hellip; ",
            "title": "Nginx proxy pass and url rewriting"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "google-chrome"
            ],
            "question_score": 9,
            "is_accepted": true,
            "answer_id": 17116720,
            "is_answered": false,
            "question_id": 17116675,
            "item_type": "answer",
            "score": 17,
            "last_activity_date": 1371241890,
            "creation_date": 1371241494,
            "body": "Because you have catastrophic backtracking:\n\n\n\nThis expression should be modified to remove one of the stars ():\n\n\n\nNote that catastrophic backtracking typically only rears its ugly head when a match cannot be made. That&#39;s why the first example you gave executes without any issues.\n\nYour second example exits before it hits the , so there is no opportunity for the backtracking to take effect.\n\nFor a more thorough explanation of catastrophic backtracking, see my answer to this question:\nHow can I recognize an evil regex?\n",
            "excerpt": "For a more thorough explanation of catastrophic backtracking, see my answer to this question:\nHow can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>? &hellip; ",
            "title": "Why does this regex make Chrome hang?"
        },
        {
            "tags": [
                "javascript",
                "html",
                "user-input"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 17036018,
            "is_answered": false,
            "question_id": 17035884,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1370920829,
            "creation_date": 1370920829,
            "body": "Here&#39;s simple calculator using  and regex:\n\nHTML:\n\n\n\nJavaScript:\n\n\n\nDemo: http://jsbin.com/utujas/1/edit\n\nSome say  is evil, but it&#39;s fine for a simple calculator, otherwise you&#39;d have to resort to something like this: javascript calculator: plus sign alternatives\n",
            "excerpt": "Here&#39;s simple calculator using eval and <span class=\"highlight\">regex</span>:\n\nHTML:\n\n&lt;input type=&quot;text&quot; id=&quot;calc&quot;&gt;\n&lt;button id=&quot;calculate&quot;&gt;Calculate&lt;/button&gt;\n\n\nJavaScript:\n\nvar input = document.querySelector(&#39;#calc&#39;)\n  , button = document.querySelector &hellip; +\\-/*]+/.test(key)) e.preventDefault();\n});\n\nbutton.addEventListener(&#39;click&#39;, function() {\n  alert(input.value +&#39; = &#39;+ eval(input.value));\n});\n\n\nDemo: http://jsbin.com/utujas/1/edit\n\nSome say eval is <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Good HTML5 object for mathematical input?"
        },
        {
            "tags": [
                "asp.net",
                "vb.net",
                "string"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 16848466,
            "is_answered": false,
            "question_id": 16848457,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1369967685,
            "creation_date": 1369963819,
            "body": "\n\nThe VB.NET version might look like:\n\n\n\nEdit\n\nIt sounds as if you are trying to parse some Html and then do work on it. I would recommend using the Html Agility Pack for that and read about the evils of attempting to use RegEx to parse your Html.\n",
            "excerpt": "I would recommend using the Html Agility Pack for that and read about the evils of attempting to use <span class=\"highlight\">RegEx</span> to parse your Html. &hellip; ",
            "title": "Removing a &#39;New Line&#39; in ASP"
        },
        {
            "tags": [
                "java",
                "regex",
                "matching",
                "replaceall"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 16618130,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1368827032,
            "creation_date": 1368825798,
            "body": "I&#39;m not understanding something about how Java&#39;s regex matching for \\s works. In the simple class below, \\s seems to match [at least] $ and *, which is worrisome. When I don&#39;t include \\s, the last char of each word gets chopped. And, neither regex seems to catch the ending &quot; in the string. Would somebody please explain what&#39;s going on? Or point me to a useful resource? Thanks. \n\n\n",
            "excerpt": "This is  <span class=\"highlight\">Evil</span> !@#$ Wicked %^&amp;* _ Mean ()+&lt;&gt; and ;:&#39; - Nasty. \\\\  =\\&quot;&quot;;\n                String t = &quot;123. ... This is  <span class=\"highlight\">Evil</span> ! &hellip; This is <span class=\"highlight\">Evil</span> $ Wicked * _ Mean and Nasty . &quot;\n// t: 123 .. Thi i Evi Wicke Mea an Nast &quot; &hellip; ",
            "title": "Java regex space matches $ and * ??"
        },
        {
            "tags": [
                "python",
                "object",
                "dictionary",
                "valuestack"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 16100306,
            "is_answered": false,
            "question_id": 16100204,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1366376813,
            "creation_date": 1366359663,
            "body": "\n\nor since regex is evil I would recommend:\n\n\n\nAlternatively you could make things much easier and more readable by making  return a dictionary:\n\n\n\nActually we could make this even better using \n\n\n",
            "excerpt": "334&#39;: &#39;|Hatt| |59| |0|   |0|&#39;, &#39;324&#39;: &#39;|Skor| |250| |0| |0|&#39;, &#39;234&#39;: &#39;|Tr&#246;ja| |300| |0| |0|&#39;, &#39;543&#39;: &#39;|Jacka| |400| |0| |0|&#39;}\n&gt;&gt;&gt; def parts(s):\n        return re.findall(r&#39;\\|([^\\|]+)\\|&#39;, s)\n\n\nor since <span class=\"highlight\">regex</span> &hellip; is <span class=\"highlight\">evil</span> I would recommend:\n\n&gt;&gt;&gt; def parts(s):\n        return [x.strip(&#39;|&#39;) for x in s.split()]    \n\n&gt;&gt;&gt; parts(d[&#39;153&#39;])\n[&#39;T-shirt&#39;, &#39;200&#39;, &#39;0&#39;, &#39;0&#39;]\n&gt;&gt;&gt; parts(d[&#39;153&#39;])[1]\n&#39;200&#39;\n\n\nAlternatively you could &hellip; ",
            "title": "Accessing specific value in a list of values"
        },
        {
            "tags": [
                "javascript",
                "jquery"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 16073986,
            "is_answered": false,
            "question_id": 16073907,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1366255777,
            "creation_date": 1366255777,
            "body": "Try\n\n\n\nAnd\n\n\n\nDemo: Fiddle\n\na more jQuery like solution can be found here\n",
            "excerpt": "Try\n\n&lt;div id=&quot;textArea&quot;&gt;\n    &lt;span id=&quot;myInput&quot; contenteditable=&quot;true&quot;&gt;kfjdkfj&lt;/span&gt;\n&lt;/div&gt;\n\n\nAnd\n\nvar swear_words_arr=new Array(&quot;bad&quot;,&quot;<span class=\"highlight\">evil</span>&quot;,&quot;freak&quot;);\nvar <span class=\"highlight\">regex</span> = new RegExp(&#39;\\\\b(&#39; + swear_words_arr.join &hellip; ",
            "title": "javascript profanity filter on a contenteditable div"
        },
        {
            "tags": [
                "php",
                "javascript",
                "html",
                "security",
                "xss"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 15906990,
            "is_answered": false,
            "question_id": 15906938,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1365528277,
            "creation_date": 1365523585,
            "body": "I suggest that you use  (with ) to load said HTML, remove every kind of tag and every attribute you don&#39;t want to see, and save back the HTML (using  or ). You can do that by recursively iterating over the children of the document&#39;s root, and replacing tags you don&#39;t want by their inner contents. Since  loads code in a similar way browsers do, it&#39;s a much safer way to do it than using regular expressions.\n\nEDIT Here&#39;s a &quot;purifying&quot; function I made:\n\n\n\nYou would call  with an unsafe HTML string and a predefined whitelist of tags and attributes. The whitelist format is &#39;tag&#39; =&gt; array(&#39;attribute&#39; =&gt; &#39;regex&#39;). Tags that don&#39;t exist in the whitelist are stripped, with their contents inlined in the parent tag. Attributes that don&#39;t exist for a given tag in the whitelist are removed as well; and attributes that exist in the whitelist, but that don&#39;t match the regex, are removed as well.\n\nHere&#39;s an example:\n\n\n\nThe result is:\n\n\n\nObviously, you don&#39;t want to allow any  attribute, and I would advise against  because of weird proprietary properties like . Make sure all URL attributes are validated with a decent regex that matches the full string ().\n",
            "excerpt": "&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;javascript:evil()&quot;&gt;<span class=\"highlight\">Evil</span> link&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;script&gt;<span class=\"highlight\">evil</span>()&lt;/script&gt;&lt;/p&gt;\n&lt;p&gt;This is an <span class=\"highlight\">evil</span> image: &lt;img src=&quot;error.png&quot; onerror=&quot;<span class=\"highlight\">evil</span>()&quot;/&gt;&lt;/p&gt;\n&lt;p&gt;This is nice &lt;b&gt;bold text&lt;/b&gt;. &hellip; &lt;/p&gt;\n&lt;p&gt;This is an <span class=\"highlight\">evil</span> paragraph.&lt;/p&gt;\n&lt;p&gt;&lt;a&gt;<span class=\"highlight\">Evil</span> link&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;<span class=\"highlight\">evil</span>()&lt;/p&gt;\n&lt;p&gt;This is an <span class=\"highlight\">evil</span> image: &lt;img&gt;&lt;/p&gt;\n&lt;p&gt;This is nice &lt;b&gt;bold text&lt;/b&gt;. &hellip; ",
            "title": "How i can find 100% sure a JS inside of HTML tag?"
        },
        {
            "tags": [
                "javascript",
                "string",
                "parsing",
                "recursion"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 15737691,
            "is_answered": false,
            "question_id": 15737675,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1364791581,
            "creation_date": 1364791084,
            "body": "You need to at least declare all your variables in the function as local variables by adding  in front of their first use.  \n\n\n\nBy not using , your variables are global and each invocation of  will be sharing the same copies of variables which will mess up the recursion as recursive calls will mess up the state of the higher levels calls.  If the variables are all local variables, then each function invocation has it&#39;s own set of variables and one recursive call does not mess up the others.\n\nPlus, it is generally always a good idea to limit the scope of your variables to as local a scope as practical and avoid globals whenever possible.  Implicit globals variables like you have here are particular evil because they can easily lead to accidental misuse.\n\nAs Kolink suggested, you might just want to do a single global  operation using a regex search/replace.  You would need to make sure that any regex special characters in the search string were properly escaped though.\n",
            "excerpt": "Implicit globals variables like you have here are particular <span class=\"highlight\">evil</span> because they can easily lead to accidental misuse. &hellip; You would need to make sure that any <span class=\"highlight\">regex</span> special characters in the search string were properly escaped though. &hellip; ",
            "title": "program with recursive function"
        },
        {
            "tags": [
                "perl",
                "apache"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 15627826,
            "is_answered": false,
            "question_id": 15626447,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1364261681,
            "creation_date": 1364261681,
            "body": "I spent an hour fiddling with regexes, wrapping my head around s and  horrors, even some C code. Then, I did something crucial:\n\n\n\nI profiled the code (with Devel::NYTProf). The non-suprise: Parsing the string took very little time. The regex application in  took ~ 144ms in total. However, the date parsing amassed whopping 3.39s in . That is nearly a 1:25 relation!\n\nConclusion:\n\n\n  Premature optimization is the root of all evil. – D. Knuth\n\n\nUse a nice, readable regex, like\n\n\n\nThis executes about as fast as your (r)index/substr horrors, but is self-documenting to a certain degree, and certainly easier to debug. This is in line with the experience that clean, idiomatic Perl is likely to be the fastest Perl.\n\nThen, you have a choice to either accept that  is slow, or try to optimize it. If you manage a provable speedup, you might want to consider sending a patch upstream. You can also experiment with other libraries, or write your own  function that is optimized for your special use-case. \n",
            "excerpt": "The <span class=\"highlight\">regex</span> application in split1 took ~ 144ms in total. However, the date parsing amassed whopping 3.39s in str2time. That is nearly a 1:25 relation! &hellip; Conclusion:\n\n\n  Premature optimization is the root of all <span class=\"highlight\">evil</span>. – D. Knuth\n\n\nUse a nice, readable <span class=\"highlight\">regex</span>, like\n\nmy $split1_1_regex = qr/\\A\n        (\\d+)\\.(\\d+)\\.(\\d+)\\. &hellip; ",
            "title": "comon log format splitting"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 15603847,
            "is_answered": false,
            "question_id": 15603786,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1364158625,
            "creation_date": 1364158280,
            "body": "This might be what you want, but I expect evil &#39;regex in HTML&#39;-links in the comments :P. It&#39;s also dependent on the fact if the  only has text and spans in it or also many other (sub)children Dom-Nodes.\n\n\n\nIf you update the question I can give you a more precise answer to narrow down the collisions that can happen with RegEx.\n",
            "excerpt": "This might be what you want, but I expect <span class=\"highlight\">evil</span> &#39;<span class=\"highlight\">regex</span> in HTML&#39;-links in the comments :P. &hellip; html.replace(new RegExp(&#39;&lt;span&gt;[uU]ser&lt;/span&gt;&#39;,&#39;gm&#39;),&#39;user&#39;);\n$(&#39;#myDiv&#39;).html(new_html);\n\n\nIf you update the question I can give you a more precise answer to narrow down the collisions that can happen with <span class=\"highlight\">RegEx</span> &hellip; ",
            "title": "How to unwrap text from a span in text block?"
        },
        {
            "tags": [
                "url-rewriting",
                "nginx",
                "subdomain"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 15593378,
            "is_answered": false,
            "question_id": 15589903,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1364082216,
            "creation_date": 1364082216,
            "body": "\nYou need http://wiki.nginx.org/HttpFastcgiModule to setup CodeIgniter.\nUsing 2 server blocks is better than using if block for redirect. See IF is Evil. \nDon&#39;t use $host because that variable value is obtained from the request&#39;s HOST header, and can be easily faked. Always set a server_name directive and use that name instead.\nUsing &quot;return 301&quot; directive is better than a rewrite. Saving cpu time (regex is slow) and easy to follow. Note that a 302 redirect (rewrite...redirect) has side effect because 302 will turn all POST requests to GET requests, which is not good in your case.\nYou don&#39;t need try_files in the main site because the main site just serves static files. But you can use &#39;expires&#39; directive to allow browser to cache the static files.\n\n\n\n\n\n",
            "excerpt": "See IF is <span class=\"highlight\">Evil</span>. \nDon&#39;t use $host because that variable value is obtained from the request&#39;s HOST header, and can be easily faked. Always set a server_name directive and use that name instead. &hellip; Saving cpu time (<span class=\"highlight\">regex</span> is slow) and easy to follow. &hellip; ",
            "title": "nginx config files redirecting to subfolder"
        },
        {
            "tags": [
                "javascript",
                "node.js",
                "socket.io",
                "serverside-javascript"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 15577271,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1363978063,
            "creation_date": 1363976300,
            "body": "So i&#39;m developing a socket.io real-time web-app.\nThe first concern of mine was &quot;What if some evil-minded user tries to inject some code via Dev Tools or Firebug?&quot; and i&#39;ve got my answer here on SO. My next concern is: &quot;What if some evil-minded user tries to inject some code via chat and/or other form of string inputs?&quot; and I&#39;ve came to the conclusion that I can&#39;t figure this out by myself. I know that I can use regex to find if the user is trying to inject code but once the code is sent to server and stored to a string it is executed. (ex: ; [ where the user sent string is the one between * ] ). So my question is: How can i prevent this? in other words How do I sanitize the user input?\n",
            "excerpt": "The first concern of mine was &quot;What if some <span class=\"highlight\">evil</span>-minded user tries to inject some code via Dev Tools or Firebug?&quot; and i&#39;ve got my answer here on SO. &hellip; I know that I can use <span class=\"highlight\">regex</span> to find if the user is trying to inject code but once the code is sent to server and stored to a string it is executed. &hellip; ",
            "title": "How to secure socket.io from code injection?"
        },
        {
            "tags": [
                "javascript",
                "jquery-ui",
                "jquery"
            ],
            "question_score": -1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 15544572,
            "item_type": "question",
            "score": -1,
            "last_activity_date": 1363862567,
            "creation_date": 1363860680,
            "body": "I have a JSON file with objects containing the file path to an image.  I&#39;m trying to replace the src attr of an image tag using jQuery but no matter what i do, by the time I try to change the source, the file path has quotes around it which ends up leaving encoding around the path and thus fails.\n\nI&#39;ve tried:\n\n\ndecodeURIcomponent\nregex\n\n\nNeither has worked but I am more than willing to accept that they did not work due my error.\n\nHere&#39;s the code as I have it now:\n\n\n\nThe problem portion is this part here:\n\n\n\nNote the two console.logs: the first one for &#39;pic&#39; prints a clean (i.e.w/out quotes) file path.  Oddly enough, the console.log for &#39;image&#39; prints out the same file path but now with the evil double quotes which is the final product that fails.  The regex seen appears to have no effect.\n\nHere&#39;s the JSON returned that I&#39;m working with:\n\n\n\n}\n\nThanks for the help.\n",
            "excerpt": "I&#39;ve tried:\n\n\ndecodeURIcomponent\n<span class=\"highlight\">regex</span>\n\n\nNeither has worked but I am more than willing to accept that they did not work due my error. &hellip; Oddly enough, the console.log for &#39;image&#39; prints out the same file path but now with the <span class=\"highlight\">evil</span> double quotes which is the final product that fails.  The <span class=\"highlight\">regex</span> seen appears to have no effect. &hellip; ",
            "title": "Can&#39;t remove double quotes from image path after JSON.stringify"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "json",
                "syntax-error"
            ],
            "question_score": 40,
            "is_accepted": true,
            "answer_id": 15296279,
            "is_answered": false,
            "question_id": 15296196,
            "item_type": "answer",
            "score": 70,
            "last_activity_date": 1363096816,
            "creation_date": 1362752921,
            "body": "A number can&#39;t start with a not significative .\n\nThis is invalid : \n\nFrom JSON.org : \n\n\n\nYou should fix it at the source but if you can&#39;t, assuming your JSON is always similar to this one (no numbers in strings), then you might probably fix it with a regex :\n\n\n\nYou can&#39;t even here use the evil  because  would be parsed as a octal :\n\n\n\noutputs\n\n\n\nThis probably explains why it was considered safer to forbid numbers starting with non significative  in JSON.\n",
            "excerpt": "&quot;ti&quot;: 0000011410\n\nFrom JSON.org : \n\n\n\nYou should fix it at the source but if you can&#39;t, assuming your JSON is always similar to this one (no numbers in strings), then you might probably fix it with a <span class=\"highlight\">regex</span> &hellip; [\\. }])/g, &#39; &#39;));\n\n\nYou can&#39;t even here use the <span class=\"highlight\">evil</span> eval because &quot;0000011410&quot; would be parsed as a octal :\n\nconsole.log(eval(&#39;({&quot;ti&quot;: 0000011410})&#39;));\n\n\noutputs\n\n{ti: 4872}\n\n\nThis probably explains why &hellip; ",
            "title": "JSON syntax error: &#39;unexpected number&#39; or &#39;JSON.parse: expected &#39;,&#39; or &#39;}&#39; after property value in object&#39;"
        },
        {
            "tags": [
                "html",
                "url",
                "encoding"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 14807731,
            "is_answered": false,
            "question_id": 14806794,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1360568039,
            "creation_date": 1360568039,
            "body": "OWASP provides a list of regular expressions for validating user input, one of which is used for validating URLs. This is as close as you&#39;re going to get to a language-neutral, canonical solution. \n\nMore likely you&#39;ll rely on the URL parsing library of the programming language in use. Or, use a URL parsing regex. \n\nThe workflow would be something like: \n\n\nVerify the supplied string is a well-formed URL.\nProvide a default protocol such as  when no protocol is specified. \nMaintain a whitelist of acceptable protocols (, , , , etc.)   \n\n\nThe whitelist will be application-specific. For an address-book app the  protocol would be indispensable. It&#39;s hard to imagine a use case for the  and  protocols. \n\nEnforce a maximum URL length - ensures cross-browser URLs and prevents attackers from polluting the page with megabyte-length strings. With any luck your URL-parsing library will do this for you. \nEncode a URL string for the usage context. (Escaped for HTML output, escaped for use in an SQL query, etc.). \n\n\n\n  Forbid malicious URLs such as javascript: stuff or links or evil domain names.\n\n\nYou can utilize the Google Safe Browsing API to check a domain for spyware, spam or other &quot;evilness&quot;. \n",
            "excerpt": "Or, use a URL parsing <span class=\"highlight\">regex</span>. \n\nThe workflow would be something like: \n\n\nVerify the supplied string is a well-formed URL.\nProvide a default protocol such as http: when no protocol is specified. &hellip; Forbid malicious URLs such as javascript: stuff or links or <span class=\"highlight\">evil</span> domain names.\n\n\nYou can utilize the Google Safe Browsing API to check a domain for spyware, spam or other &quot;evilness&quot;. &hellip; ",
            "title": "How can I safely add user-supplied URLs to my HTML page?"
        },
        {
            "tags": [
                "php",
                "regex",
                "arrays",
                "preg-match",
                "explode"
            ],
            "question_score": 17,
            "is_accepted": true,
            "answer_id": 14685462,
            "is_answered": false,
            "question_id": 14684764,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1359976420,
            "creation_date": 1359976094,
            "body": "There&#39;s no question that you should write parser if you are building syntax tree. But if you just need to parse this sample input  still might be a tool:\n\n\n\nDemo.\n\nNote: If input will be malformed regex will definitely fail. I am writing this solution just in a case you need fast script. Writing lexer and parser is time-consuming work, that will need lots of research.\n",
            "excerpt": "But if you just need to parse this sample input <span class=\"highlight\">regex</span> still might be a tool:\n\n&lt;? &hellip; $str); //eval is <span class=\"highlight\">evil</span>.\nprint_r($res); //print the result\n\n\nDemo.\n\nNote: If input will be malformed <span class=\"highlight\">regex</span> will definitely fail. I am writing this solution just in a case you need fast script. &hellip; ",
            "title": "PHP string console parameters to array"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "replace"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 14599815,
            "is_answered": false,
            "question_id": 14599611,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1359535456,
            "creation_date": 1359535456,
            "body": "It can be done if they are not local variables using  (although I would call this evil):\n\n\n\nPut them in an object with the string matches as the keys and the replacements as values if you can.\n\nI recommend this regex:\n\n\n\nhttp://jsfiddle.net/p4uvW/\n",
            "excerpt": "It can be done if they are not local variables using window (although I would call this <span class=\"highlight\">evil</span>):\n\nstring.replace(<span class=\"highlight\">regex</span>, function (match, group) {\n    return window[group];\n});\n\n\nPut them in an object with &hellip; I recommend this <span class=\"highlight\">regex</span>:\n\n<span class=\"highlight\">regex</span> = /@(\\w+?)@/g;\n\n\nhttp://jsfiddle.net/p4uvW/ &hellip; ",
            "title": "Replace word depending on the regex search result"
        },
        {
            "tags": [
                ".net",
                "regex"
            ],
            "question_score": 5,
            "is_accepted": true,
            "answer_id": 14570729,
            "is_answered": false,
            "question_id": 14570615,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1359408854,
            "creation_date": 1359405288,
            "body": "QUESTION 1\n\nThis is causing catastrophic backtracking:\n\n\n\nAnd:\n\n\n\nI&#39;m guessing you meant:\n\n\n\nAnd:\n\n\n\nYour regex does not currently match URLs with equal signs, which is why the catastrophic backtracking happens in the first place:\n\n\n\ndoes not match &#39;?a = 1&#39; because  does not include &#39;=&#39;. You can fix this pretty easily:\n\n\n\n(I threw &#39;%&#39; in there too)\n\nAlso, your regex is matching the whitespace before and after your URL. You may prefer lookarounds to  as this will match a position before or after whitespace rather than the whitespace itself:\n\n\n\nQUESTION 2\n\nThere&#39;s nothing you can do to detect or recover from a catastrophically backtracking regular expression. The best you could try is spinning the regex off into an independent thread and then terminating the thread after a certain timeout. Exactly how to do that would be an entirely different question, but it&#39;s not difficult to find tutorials online for .NET.\n\nSee:\n\n\nMultithreaded Applications (C# and Visual Basic)\nHow can I recognize an evil regex?\n\n",
            "excerpt": ":[\\w=%]*)\n\n\n(I threw &#39;%&#39; in there too)\n\nAlso, your <span class=\"highlight\">regex</span> is matching the whitespace before and after your URL. &hellip; See:\n\n\nMultithreaded Applications (C# and Visual Basic)\nHow can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>? &hellip; ",
            "title": ".Net Regex to extract Urls from text never returns"
        },
        {
            "tags": [
                "regex",
                "perl",
                "html-parsing",
                "screen-scraping"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 13812884,
            "is_answered": false,
            "question_id": 13812791,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1355194616,
            "creation_date": 1355194189,
            "body": "The code behaves exactly as you told it to. This is what happens:\n\nYou matched the regex exactly once. It did match, and populated the  variable with the value of the first (and only!) capture buffer. The match returns &quot;true&quot;, and the code in the if-branch is executed.\n\nYou want to do two things:\n\n\nMatch with the  modifier. This matches globally, and tries to return every match in the string, not just the first one.\nExecute the regex in list context, so you can save the capture buffers to an array\n\n\nThis would lead to the following code:\n\n\n\nDo also note that parsing HTML with regexes is evil, and you should search CPAN for a module you like that does that for you.\n",
            "excerpt": "Execute the <span class=\"highlight\">regex</span> in list context, so you can save the capture buffers to an array\n\n\nThis would lead to the following code:\n\nif ( my @matches = ($item =~ /<span class=\"highlight\">REGEX</span>/g) ) {\n  for my $i (1 .. &hellip; @matches) {\n    print &quot;$i: $matches[$i-1]\\n&quot;;\n  }\n}\n\n\nDo also note that parsing HTML with regexes is <span class=\"highlight\">evil</span>, and you should search CPAN for a module you like that does that for you. &hellip; ",
            "title": "perl regex multiple groups"
        },
        {
            "tags": [
                "php",
                "html",
                "whitelist"
            ],
            "question_score": 3,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 9897214,
            "item_type": "question",
            "score": 3,
            "last_activity_date": 1354217338,
            "creation_date": 1332880200,
            "body": "Here&#39;s the deal, I&#39;m making a project to help teach HTML to people. Naturally, I&#39;m afraid of that Scumbag Steve (see figure 1).\n\nSo I wanted to block ALL HTML tags, except those approved on a very specific whitelist.\n\nOut of those approved HTML tags, I want to remove harmful attributes as well. Such as  and . Also, according to a whitelist.\n\nI&#39;ve thought of regex, but I&#39;m pretty sure it&#39;s evil and not very helpful for the job.\n\nCould anyone give me a nudge in the right direction?\n\nThanks in advance.\n\n\n\nFig 1.\n\n\n",
            "excerpt": "I&#39;ve thought of <span class=\"highlight\">regex</span>, but I&#39;m pretty sure it&#39;s <span class=\"highlight\">evil</span> and not very helpful for the job.\n\nCould anyone give me a nudge in the right direction?\n\nThanks in advance.\n\n\n\nFig 1. &hellip; ",
            "title": "How to strip specific tags and specific attributes from a string?"
        },
        {
            "tags": [
                "php",
                "regex",
                "html-parsing"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 13370112,
            "is_answered": false,
            "question_id": 13370003,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1352846255,
            "creation_date": 1352846255,
            "body": "Regex is evil for such case. Better you work on the generated html. Here&#39;s how you do it.\n\nEnable output buffering. On the ob_start function add your own callback. Process the generated html with DOMDocument inside the handler. Something like this,\n\n\n",
            "excerpt": "<span class=\"highlight\">Regex</span> is <span class=\"highlight\">evil</span> for such case. Better you work on the generated html. Here&#39;s how you do it.\n\nEnable output buffering. On the ob_start function add your own callback. &hellip; ",
            "title": "replace html of tags with php regex"
        },
        {
            "tags": [
                "ruby",
                "regex",
                "ruby-on-rails-3.2"
            ],
            "question_score": -5,
            "is_accepted": false,
            "answer_id": 13202501,
            "is_answered": false,
            "question_id": 13202282,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1351887646,
            "creation_date": 1351887646,
            "body": "The first one is HTML so you should parse it with HTML and another is JSON, so you could use some JSON library. Don&#39;t use regex. It&#39;s evil.\n",
            "excerpt": "Don&#39;t use <span class=\"highlight\">regex</span>. It&#39;s <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Regex html help needed"
        },
        {
            "tags": [
                "javascript",
                "security",
                "eval"
            ],
            "question_score": 7,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 13167403,
            "item_type": "question",
            "score": 7,
            "last_activity_date": 1351718910,
            "creation_date": 1351717486,
            "body": "\n  Possible Duplicate:\n  When is JavaScript’s eval() not evil?  \n\n\n\n\nI am writing a script in which users have to write in a currency amount, some examples could be (user input &gt;&gt; converts to), with USD as default currency:\n\n\n\nI want to make this as smooth as possible, therefore I want to use JavaScript (it&#39;s a web app based on PHP/MySql + JavaScript). I want to use regex to filter the input, run it through  and return it.\n\nIs this a bad idea? I&#39;ve read some topics about  being a security issue. I just don&#39;t see how. A user can easily run JavaScript anyway?\n\nKeep in mind that I will validate all input server-side with PHP at a later stage.\n",
            "excerpt": "Possible Duplicate:\n  When is JavaScript’s eval() not <span class=\"highlight\">evil</span>? &hellip; I want to use <span class=\"highlight\">regex</span> to filter the input, run it through eval() and return it.\n\nIs this a bad idea? I&#39;ve read some topics about eval() being a security issue. I just don&#39;t see how. &hellip; ",
            "title": "Is Javascript eval() so dangerous?"
        },
        {
            "tags": [
                "python",
                "string",
                "parsing",
                "substring"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 13167564,
            "is_answered": false,
            "question_id": 13167508,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1351718229,
            "creation_date": 1351718229,
            "body": "Obligatory &quot;don&#39;t parse HTML with regex&quot; warning: https://stackoverflow.com/a/1732454/505154\n\nEvil regex solution:\n\n\n\nThis will return a list with the  attribute for every  tag that only contains a  attribute (since you said you only want to match the first one).\n",
            "excerpt": "Obligatory &quot;don&#39;t parse HTML with <span class=\"highlight\">regex</span>&quot; warning: https://stackoverflow.com/a/1732454/505154\n\n<span class=\"highlight\">Evil</span> <span class=\"highlight\">regex</span> solution:\n\nimport re\nre.findall(r&#39;&lt;img\\s*src=&quot;([^&quot;]*)&quot;\\s*/&gt;&#39;, text)\n\n\nThis will return a list with &hellip; ",
            "title": "python : easy substring/parsing"
        },
        {
            "tags": [
                "java",
                "regex",
                "string",
                "parsing",
                "text"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 12558488,
            "is_answered": false,
            "question_id": 12557081,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1348559042,
            "creation_date": 1348457392,
            "body": "Your second regex is correct, but you don&#39;t need all those brackets.  This will do:\n\n\n\nThis will be much more efficient than @ruakh&#39;s suggestion, , which has to perform two tests at each position.  That&#39;s exactly the problem the Java devs were trying to solve with the intersection operator .  The Unicode Consortium has since endorsed the idea, along with other set operations.\n\nI don&#39;t know what you were trying for with that first regex, but the  and  will both be treated as literal characters, making it equivalent to , which doesn&#39;t sound like what you want.\n\n\n\nEDIT: Don&#39;t get me wrong though, efficiency is not the only reason to prefer this approach. It&#39;s not even the most important one. Premature optimization is as evil in regexes as it is anywhere else.  Concentrate on keeping your regexes as simple and clear as you can, and you shouldn&#39;t have to worry about performance.  My regex is both simpler (in that it only performs one kind of operation) and clearer (more readable) than the lookahead version (but not by much; that  syntax still looks hideous to me).\n",
            "excerpt": "Your second <span class=\"highlight\">regex</span> is correct, but you don&#39;t need all those brackets.  This will do:\n\n&quot;[2-9a-z&amp;&amp;[^e]]&quot;\n\n\nThis will be much more efficient than @ruakh&#39;s suggestion, (?! &hellip; Premature optimization is as <span class=\"highlight\">evil</span> in regexes as it is anywhere else.  Concentrate on keeping your regexes as simple and clear as you can, and you shouldn&#39;t have to worry about performance. &hellip; ",
            "title": "metacharacters in regular expressions"
        },
        {
            "tags": [
                "php",
                "preg-replace",
                "preg-match",
                "preg-match-all"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 12551251,
            "is_answered": false,
            "question_id": 12551081,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1348395899,
            "creation_date": 1348393277,
            "body": "You&#39;re sort of close. You can  the string with  but with spaces included around the . Then the first element would be the function name, in this case  and the second element would be the array but as a string. You&#39;ll need to  that one so that it&#39;ll be a proper array data type.\n\n\n\nAs an alternative, you can also modify the regex so that you don&#39;t have to call .\n\n\n\nEither way, you&#39;ll want to make sure that you sanitize the user input because  can be evil.\n",
            "excerpt": ". &#39;;&#39;));\n\n\nAs an alternative, you can also modify the <span class=\"highlight\">regex</span> so that you don&#39;t have to call explode.\n\npreg_match_all(&#39;/\\[([a-z0-9_]*)\\s*? &hellip; .*)\\]/i&#39;, $s, $matches);\n\n\nEither way, you&#39;ll want to make sure that you sanitize the user input because eval can be <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Replace [diggin] with HTML code or PHP code"
        },
        {
            "tags": [
                "regex",
                "perl"
            ],
            "question_score": 6,
            "is_accepted": true,
            "answer_id": 12423661,
            "is_answered": false,
            "question_id": 12423337,
            "item_type": "answer",
            "score": 9,
            "last_activity_date": 1347632875,
            "creation_date": 1347622280,
            "body": "There&#39;s more than one way to do it, I think.\n\nThe Evial Way:\n\nAs you basically send in a regex expression, it can be evaluated to get the result. Like this:\n\n\n\nOf course, following this way will open you to some very nasty surprises. For example, consider passing this set of arguments:\n\n\n\nYes, it will laugh at you most evailly.\n\nThe Safe Way:\n\n\n\nAs you can see, we parse the expression given to us into two parts, then use these parts to build a full operator. Obviously, this approach is less flexible, but, of course, it&#39;s much more safe.\n\nThe Easiest Way:\n\n\n\nYes, that&#39;s right - no regex parsing at all! What happens here is we decided to take two arguments - &#39;search pattern&#39; and &#39;replacement string&#39; - instead of a single one. Will it make our script less flexible than the previous one? No, as we still had to parse the regex expression more-or-less regularly. But now user clearly understand all the data that is given to a command, which is usually quite an improvement. )\n\n@args in both examples corresponds to @ARGV array.\n",
            "excerpt": "For example, consider passing this set of arguments:\n\n...\nmy @args = (&#39;s/hi/bye/; print qq{MINE IS AN <span class=\"highlight\">EVIL</span> LAUGH!\\n}&#39;, &#39;hi.h&#39;);\n...\n\n\nYes, it will laugh at you most evailly. &hellip; No, as we still had to parse the <span class=\"highlight\">regex</span> expression more-or-less regularly. &hellip; ",
            "title": "How to pass a replacing regex as a command line argument to a perl script"
        },
        {
            "tags": [
                "c#",
                "regex"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 12112807,
            "is_answered": false,
            "question_id": 12112603,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1346141794,
            "creation_date": 1345823843,
            "body": "Don&#39;t use regex to parse html, it&#39;s evil. \n\nYou could use the HTML Agility Pack, it even has a nice NuGet Package.\n\nAlternatively, you could do this on the client side with a single line of jQuery:\n\n\n\nThis is making use of the Attribute Contains Selector.\n\nIf you want to find the docid in your click function, you could write something like this in your click function:\n\n\n\nNote that this assumes there&#39;s only ever one query string value, if you wanted to make this more robust you could do something like in this answer: https://stackoverflow.com/a/1171731/21200 \n",
            "excerpt": "Don&#39;t use <span class=\"highlight\">regex</span> to parse html, it&#39;s <span class=\"highlight\">evil</span>. \n\nYou could use the HTML Agility Pack, it even has a nice NuGet Package. &hellip; ",
            "title": "Regular expression to find anchor link with special href?"
        },
        {
            "tags": [
                "php",
                "javascript",
                "regex",
                "pattern-matching",
                "web-scraping"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 12152946,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1346138734,
            "creation_date": 1346129419,
            "body": "This is a fun little one I&#39;ve been working on.  I&#39;ve found many solutions, but none are really the right match.  The goal is this &quot;Match p tags only if there are 3 or more in a row&quot;\n\nSo I feel like this should be right, but it&#39;s not.\n\n\n\nBasically in my words this says:  \n\n\nMatch a p tag with anything inside the tag\nMatch anything until you see a closing P tag\nONLY match the preceding (above 2 lines) iff followed by\n\na whitespace char (maybe) and then a &lt; p\nIf that occurs 3 or more times\n\n\n\nThe issue is that this works well in Javascript but not in PHP. PHP says \n\n\n\nI&#39;ve tried different rounds of parens to give it that &quot;nothing to repeat&quot; but that causes false regex.\n\nAnd yes, this is for web scraping but no I&#39;m doing research not doing evil things.\n\nAny ideas maybe?\nthanks!\n",
            "excerpt": "PHP says \n\nCompilation failed: nothing to repeat at offset 28\n\n\nI&#39;ve tried different rounds of parens to give it that &quot;nothing to repeat&quot; but that causes false <span class=\"highlight\">regex</span>. &hellip; And yes, this is for web scraping but no I&#39;m doing research not doing <span class=\"highlight\">evil</span> things.\n\nAny ideas maybe?\nthanks! &hellip; ",
            "title": "Regex matching succession of P tags"
        },
        {
            "tags": [
                "php",
                "html",
                "tidy"
            ],
            "question_score": 4,
            "is_accepted": true,
            "answer_id": 11746759,
            "is_answered": false,
            "question_id": 11746455,
            "item_type": "answer",
            "score": 8,
            "last_activity_date": 1344547155,
            "creation_date": 1343759800,
            "body": "DISCLAIMER:\n\nI don&#39;t think my answer is very... neat. It&#39;s more of a hakish way to use HTMLTidy with HTML5 (which currently it does not support). To accomplish that I use regex to parse HTML, which, according to most, is the the root of all evil or the cthulhu way. If someone knows a better way, please enlighten us, since I don&#39;t feel very secure in using regex to parse html. I&#39;ve tested it with many examples but I&#39;m quite sure it&#39;s not bullet proof. \n\nIntro\n\nThe menu tag was deprecated in HTML4 and XHTML1, being replaced by ul (unordered list). It was, however, redefined in HTML5 and hence is a valid tag according to HTML5 specifications. SinceHTMLTidy does not support HTML5 and uses XHTML or HTML specifications, as the OP pointed, it replaces the then deprecated tag menu to ul (or adds the ul tag), even when you specifically tell it not to.\n\nMy suggestion\n\nThis function replaces the menu tag with a custom tag prior to parsing it with tidy. It then replaces the custom tag with menu again. \n\n\n\nTEST:\n\n\n\nOUTPUT:\n\n\n",
            "excerpt": "To accomplish that I use <span class=\"highlight\">regex</span> to parse HTML, which, according to most, is the the root of all <span class=\"highlight\">evil</span> or the cthulhu way. &hellip; If someone knows a better way, please enlighten us, since I don&#39;t feel very secure in using <span class=\"highlight\">regex</span> to parse html. I&#39;ve tested it with many examples but I&#39;m quite sure it&#39;s not bullet proof. &hellip; ",
            "title": "PHP Tidy removes valid tags"
        },
        {
            "tags": [
                "php",
                "regex",
                "arrays"
            ],
            "question_score": 11,
            "is_accepted": false,
            "answer_id": 11856742,
            "is_answered": false,
            "question_id": 11838359,
            "item_type": "answer",
            "score": 6,
            "last_activity_date": 1344391862,
            "creation_date": 1344391862,
            "body": "First of all, it is a bit debatable, but if you can easily avoid it, just pass  as an argument to the function as most people believe global variables are evil!\n\nNext, for the getting the &quot;s&quot;, I generally do something like this:\n\n\n\nThen just do something like this:\n\n\n\nIt&#39;s essentially the same thing as doing an if/else block, but less lines of code and you only have to write the text once.\n\nAs for the other part, I am STILL confused about what you&#39;re trying to do, but I believe you are looking for some sort of way to convert\n\n\n\ninto:\n\n\n\nThe easiest way is to try to use a combination of  and regex to then get it to do something like I have above.\n",
            "excerpt": "First of all, it is a bit debatable, but if you can easily avoid it, just pass $num_dogs as an argument to the function as most people believe global variables are <span class=\"highlight\">evil</span>! &hellip; return &#39;dogs called fred and harry&#39;;\n        break;\n    case 3:\n        return &#39;dogs called fred, harry and buster&#39;;\n        break;\n}\n\n\nThe easiest way is to try to use a combination of explode() and <span class=\"highlight\">regex</span> &hellip; ",
            "title": "Parsing plain text in such a way that will recognise a custom if statement"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "html",
                "regex"
            ],
            "question_score": 5,
            "is_accepted": true,
            "answer_id": 11661508,
            "is_answered": false,
            "question_id": 11661408,
            "item_type": "answer",
            "score": 8,
            "last_activity_date": 1343272233,
            "creation_date": 1343270147,
            "body": "Try filtering the &#39;s  by nodeType to get only the Text Nodes, then replace them with jQuery-generated anchor elements (any extra text in these nodes will be kept as Text Node):\n\n\n\nFiddle\n\nAs you know, most often it&#39;s not a good idea to parse HTML with Regex (look out for the ponies, they are evil), but if you isolate a part of the HTML you want to parse and it follows a relatively simple pattern, it is a viable option.\n\nedit: Included the  flag (global modifier) in your Regex to allow for matching multiple anchors inside a single Text Node.\n",
            "excerpt": "(look out for the ponies, they are <span class=\"highlight\">evil</span>), but if you isolate a part of the HTML you want to parse and it follows a relatively simple pattern, it is a viable option. &hellip; edit: Included the g flag (global modifier) in your <span class=\"highlight\">Regex</span> to allow for matching multiple anchors inside a single Text Node. &hellip; ",
            "title": "jQuery: How to wrap RegEx matched plain text in an anchor tag?"
        },
        {
            "tags": [
                "html",
                "ruby",
                "nokogiri"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 6308348,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1342728203,
            "creation_date": 1307718794,
            "body": "I imagine this is common enough that it&#39;s a solved problem, but being a bit of a newbie with Loofah and Nokogiri I haven&#39;t found the solution yet.\n\nI&#39;m using Loofah, a HTML scrubber library that wraps Nokogiri, to scrub some HTML text for display. However, that text sometimes happen to things like e-mail addresses and such between  and  characters, for example, . Loofah is considering that as an HTML or XML tag, and is stripping it away from the text.\n\nIs there a way to prevent this from happening while still doing a good job of scrubbing away the actual tags?\n\nEdit: Here&#39;s a failing test case:\n\n\n\nWe&#39;re currently using some pretty evil regex hackery to try and accomplish this, but as the comment above states, it doesn&#39;t work for tags &quot;nested&quot; inside non-tags. And we actually want to preserve the  elements as well.\n\nThe sample below isn&#39;t using Loofah, but the application itself does in other places so it wouldn&#39;t be hard to add it here. We&#39;re just not sure of what configuration options we should use, if any.\n",
            "excerpt": "Test::Unit::UI::Console::TestRunner.run(HTMLTest)\n\n\nWe&#39;re currently using some pretty <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> hackery to try and accomplish this, but as the comment above states, it doesn&#39;t work for tags &quot;nested&quot; inside &hellip; ",
            "title": "Stripping HTML from text containing &lt; and &gt; characters with Loofah and Nokogiri"
        },
        {
            "tags": [
                "javascript",
                "html"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 11304351,
            "is_answered": false,
            "question_id": 11304090,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1341288741,
            "creation_date": 1341288741,
            "body": "Here&#39;s a simple regex example to parse addition:\n\n\n\nSee JSFiddle\n\nIt&#39;ll still let a lot of nonsense through, but it&#39;s better than the alternative.\n\nDon&#39;t use evil.\n",
            "excerpt": "Here&#39;s a simple <span class=\"highlight\">regex</span> example to parse addition:\n\nfunction parseAdditionString(s) {\n  var arr = s.match(/(\\d+)\\+(\\d+)/);\n  if (arr &amp;&amp; arr.length === 3) {\n    alert(&quot;Sum = &quot; + (Number(arr[1]) + Number(arr &hellip; Don&#39;t use <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "how can i automatically calculate an expression from a text field"
        },
        {
            "tags": [
                "php",
                "javascript",
                "asp.net",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 11219100,
            "is_answered": false,
            "question_id": 11206223,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1340768575,
            "creation_date": 1340768575,
            "body": "Disclaimer:\n\nAs others will or have already pointed out, using regex to parse non-regular languages is fraught with peril! It is best to use a dedicated parser specifically designed for the job, especially when parsing the tag soup that is HTML.\n\nThat said...\n\nIf you insist on using a regular expression, here is a tested PHP script implementing a regex solution that does a &quot;pretty good&quot; job:\n\n\n\n\n\nThis function strips the start and matching end tags for all HTML 4.01 Anchor elements (i.e.  tags) which do NOT have the specific, (case-sensitive)  attribute value containing: . The  value may contain any number of values, but one of them must be exactly: . The Anchor tag names and the CLASS attribute name are matched case insensitively.\n\nExample input ():\n\n\n\nExample output ():\n\n\n\nThe reader wishing to advanced their regex-fu would do well to study this (rather long and complex) regex. It is carefully handcrafted for both accuracy and speed and implements several advanced efficiency techniques. It is, of course, fully commented to allow readability by mere humans. This example clearly demonstrates that &quot;REGULAR EXPRESSIONS&quot; have evolved into a rich,  (non-REGULAR) programming language. \n\nNote that there will always be edge cases where this solution will fail. e.g. Evil strings within CDATA sections, comments, scripts, styles and tag attribute values can trip this up. (See disclaimer above.) That said, this solution will do a pretty good job for many cases (but will never be 100% reliable!)\n",
            "excerpt": "&lt;/p&gt;\n\n\nThe reader wishing to advanced their <span class=\"highlight\">regex</span>-fu would do well to study this (rather long and complex) <span class=\"highlight\">regex</span>. &hellip; <span class=\"highlight\">Evil</span> strings within CDATA sections, comments, scripts, styles and tag attribute values can trip this up. (See disclaimer above.) &hellip; ",
            "title": "Get all links except with specified class name with regex"
        },
        {
            "tags": [
                "php",
                "security",
                "eval",
                "formula",
                "equation"
            ],
            "question_score": 4,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 11068246,
            "item_type": "question",
            "score": 4,
            "last_activity_date": 1339969624,
            "creation_date": 1339896155,
            "body": "I&#39;m wondering what sorts of things should be checked when using eval() in PHP to parse a formula that is entered by a user filling out a form. I&#39;ve seen lots of answers about eval(), but not all of them seem to agree.\n\nHere&#39;s what I&#39;ve gathered:\n\n\nDon&#39;t use eval for strings (this could be a problem, since it is a formula I need to parse)\nStrip the input coming from the form (I&#39;m not entirely sure what things I need to strip)\nEval may or may not be evil, and is a security risk (are there alternatives for parsing an equation in a string?)\n\n\nWhat do you folks think I should do?\n\nEDIT: I tried the eval method, and while it does work, the sanitation I used did not support more than two operands. Since I really don&#39;t feel like writing my own (possibly insecure) sanitation regex, I&#39;m just going to find and use a pre-written math class instead. Thanks to everyone for the suggestions!\n",
            "excerpt": "Don&#39;t use eval for strings (this could be a problem, since it is a formula I need to parse)\nStrip the input coming from the form (I&#39;m not entirely sure what things I need to strip)\nEval may or may not be <span class=\"highlight\">evil</span> &hellip; Since I really don&#39;t feel like writing my own (possibly insecure) sanitation <span class=\"highlight\">regex</span>, I&#39;m just going to find and use a pre-written math class instead. Thanks to everyone for the suggestions! &hellip; ",
            "title": "Safest way to use eval to parse equations entered by a form"
        },
        {
            "tags": [
                "python",
                "string"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 10967667,
            "is_answered": false,
            "question_id": 10964106,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1339321033,
            "creation_date": 1339321033,
            "body": "Assuming default ascii encoding, we can do this quite nicely in one line, without evil regex ;), by iterating over the string and removing values based on their encoding value using , or whatever specification we choose:\n\n\n\nOr we could specify a string of allowed characters and use &#39;in&#39;, like this using the builtin \n :\n\n\n\nThis removes punctuation too (but we could easily avoid that by adding those characters back into a string check definition if we want, )\n",
            "excerpt": "Assuming default ascii encoding, we can do this quite nicely in one line, without <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> ;), by iterating over the string and removing values based on their encoding value using ord(i) &lt; 128, or whatever &hellip; ",
            "title": "Removing certain characters from a long string in python"
        },
        {
            "tags": [
                "php",
                "url",
                "escaping",
                "file-get-contents",
                "sanitize"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 10102189,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1334133192,
            "creation_date": 1334131788,
            "body": "I have simple question. User supplies URL to my PHP script where I fetch the page from the URL and parse it and show some snippet to user. Now I want to sanitize or better escape the URL so it is safe for me to fetch it by using file_get_contents().\n\nMy simplified code looks like this:\n\n\n\nFirst thing what came to my mind is to use regex for catching evil URL, but I don&#39;t think it is efficient and better would be escape the whole URL. But what PHP function can I use for escaping URL for use in file_get_contents() function ? \n",
            "excerpt": "My simplified code looks like this:\n\n$url = $_POST[&#39;url&#39;];\n$html = file_get_contents($url);\n\n\nFirst thing what came to my mind is to use <span class=\"highlight\">regex</span> for catching <span class=\"highlight\">evil</span> URL, but I don&#39;t think it is efficient and &hellip; ",
            "title": "How to safely escape URL from user input to be used in file_get_contents?"
        },
        {
            "tags": [
                "asp.net",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 9979816,
            "is_answered": false,
            "question_id": 9979673,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1333382885,
            "creation_date": 1333382885,
            "body": "You don&#39;t need to use regex to search for a specific word. Instead, just do a plain substring search for that specific word.\n\nIn Python, this would look like:\n\n\n\nNote that case folding (converting a string to upper or lowercase) is evil when done to a Unicode string. Don&#39;t do that.\n",
            "excerpt": "You don&#39;t need to use <span class=\"highlight\">regex</span> to search for a specific word. Instead, just do a plain substring search for that specific word. &hellip; Note that case folding (converting a string to upper or lowercase) is <span class=\"highlight\">evil</span> when done to a Unicode string. Don&#39;t do that. &hellip; ",
            "title": "Regex to check if a word doesn&#39;t exist"
        },
        {
            "tags": [
                "php",
                "mysql",
                "regex",
                "search-engine"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 9884287,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1333040629,
            "creation_date": 1332829070,
            "body": "I&#39;m developing a search engine for a CCG. I want the user to be able to find cards based on a query like,  or . There are many variables to search for: brigades (purple, blue), types (heroes, evil characters [ec&#39;s]), special abilities (discard), and identifiers (kings of israel). I&#39;m thinking about regexing to find common search parameters. I know this won&#39;t be easy, and it will take a long time to fine tune, but can someone point me in the right direction? Is regex even a recommend solution? I don&#39;t know if it&#39;s important, but I&#39;m using php and mysql.\n",
            "excerpt": "There are many variables to search for: brigades (purple, blue), types (heroes, <span class=\"highlight\">evil</span> characters [ec&#39;s]), special abilities (discard), and identifiers (kings of israel). &hellip; Is <span class=\"highlight\">regex</span> even a recommend solution? I don&#39;t know if it&#39;s important, but I&#39;m using php and mysql. &hellip; ",
            "title": "how to break apart a search query"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 9897478,
            "is_answered": false,
            "question_id": 9897258,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1332881320,
            "creation_date": 1332881320,
            "body": "The reason REGEX for HTML is considered evil, is because it can (usually) easily be broken, forcing you to repeatedly rethink your pattern. If for instance you&#39;re matching\n\n\n\nIt could be broken easily with\n\n\n\nIf you use\n\n\n\nIt can also be easily broken with\n\n\n\nThere&#39;s no end for this. If you can&#39;t use any of the methods you&#39;ve stated, you could try , but it takes a whitelist as a parameter, not a blacklist, meaning you&#39;ll need to manually allow every single tag you want to allow.\n\nIf all else fail, you could resort to RegEx, what I came up with is this\n\n\n\nBut I bet someone around here could probably come and break that too.\n",
            "excerpt": "The reason <span class=\"highlight\">REGEX</span> for HTML is considered <span class=\"highlight\">evil</span>, is because it can (usually) easily be broken, forcing you to repeatedly rethink your pattern. If for instance you&#39;re matching\n\n&lt;script&gt;. &hellip; If all else fail, you could resort to <span class=\"highlight\">RegEx</span>, what I came up with is this\n\n&lt;\\s*script.*/script&gt;\n\n\nBut I bet someone around here could probably come and break that too. &hellip; ",
            "title": "Remove tag and content in between using REGEX/PHP"
        },
        {
            "tags": [
                "php",
                "security",
                "upload"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 9749219,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1331980906,
            "creation_date": 1331980124,
            "body": "I&#39;m trying to make a plugin system and the plugin contain PHP code.\nI think if someone evil reach the area that upload this plugin he can upload evil code\nso I want to limit the functions used in plugin file such as if there is eval() or  function the upload should fail.\n\nI think this will be done by the regex, but I have no experiance with it.\n\nSo I want something like that\n\n\n\nsee this example\n\n\n\ni want one like this but for making a white list and not for use functions, but for the function it self &quot; i mean  not \n",
            "excerpt": "I think if someone <span class=\"highlight\">evil</span> reach the area that upload this plugin he can upload <span class=\"highlight\">evil</span> code\nso I want to limit the functions used in plugin file such as if there is eval() or base64_encode function the upload &hellip; I think this will be done by the <span class=\"highlight\">regex</span>, but I have no experiance with it.\n\nSo I want something like that\n\n&lt;? &hellip; ",
            "title": "How can I limit used functions in uploaded PHP file?"
        },
        {
            "tags": [
                "regex",
                "xpath",
                "xml-parsing",
                "file-search"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 9534160,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1330698997,
            "creation_date": 1330695145,
            "body": "So we have 1500 xhtml pages in lets say 100 subfolders of /myfolder. I want to find evil constellations of\n\n\n\nIn my current case, it is only allowed to have \n\n\n\nand not 2 evil Tags within a good Tag. This is just an example though. Sometimes I must search for something like\n\n\n\nI&#39;ve been browsing for a while now and could not find a tool which would help me to do so.\nWhat free ware / open source solutions are availble in windows?\n\nWhat are the xhtml files like? basically they are web pages created for JSF. We use our own tags and keep doing changes to them and thus, have to keep a good eye on bad constellation who haven&#39;t been thought of\n\nI&#39;m basically asking because I finally ended up doing it with regex, which makes people around here going nuts. \n",
            "excerpt": "I want to find <span class=\"highlight\">evil</span> constellations of\n\n&lt;goodTag&gt;\n ....\n &lt;evilTag/&gt;\n ....\n &lt;evilTag/&gt;\n ....\n&lt;/goodTag&gt;\n\n\nIn my current case, it is only allowed to have \n\n&lt;goodTag&gt;\n....\n&lt;evilTag/&gt;\n... &hellip; We use our own tags and keep doing changes to them and thus, have to keep a good eye on bad constellation who haven&#39;t been thought of\n\nI&#39;m basically asking because I finally ended up doing it with <span class=\"highlight\">regex</span> &hellip; ",
            "title": "Xpath find files for windows? xml parser to find files in windows"
        },
        {
            "tags": [
                "apache",
                ".htaccess",
                "redirect",
                "http-status-code-404"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 9195658,
            "is_answered": false,
            "question_id": 9195518,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1328712772,
            "creation_date": 1328712772,
            "body": "\n\nThe somewhat cumbersome regex on  ensures, only URLs of the  scheme will be redirected (as opposed to ).\n\nNote the use of  instead of  (the latter is evil and should be avoided).\n",
            "excerpt": "%{SERVER_NAME} [R]\n\n\nThe somewhat cumbersome <span class=\"highlight\">regex</span> on REQUEST_URI ensures, only URLs of the http://example.com/user1 scheme will be redirected (as opposed to /user1/foo/bar). &hellip; Note the use of SERVER_NAME instead of HTTP_HOST (the latter is <span class=\"highlight\">evil</span> and should be avoided). &hellip; ",
            "title": "Apache .htaccess redirect if folder not present"
        },
        {
            "tags": [
                "php",
                "regex",
                "nested",
                "hierarchy",
                "preg-match-all"
            ],
            "question_score": 4,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 8855975,
            "item_type": "question",
            "score": 4,
            "last_activity_date": 1327905157,
            "creation_date": 1326482259,
            "body": "UPDATE\n\nSo I am still messing with this, and have gotten as far as finding all the instances of tags, though I&#39;d rather JUST find the deepest stacked instance, as life would be easier that way.. Anyway here is what I got..\n\n\n\nAre there ANY regexp guru&#39;s out there that could give me some pointers or a regexp that mimics what I need? Which is only getting the deepest stacked instance of a {{tag}} that ends like this {{//tag}}\n\nORIGINAL\n\nOk, so I have an issue I have seen others have, but with a different approach to it.. Or so I thought.. So I am curious if anyone else can help me solve this issue further..\n\nI have a database full of templates that I need to work with in PHP, these templates are made and used by another system, and so there for can not be changed. With that said, these templates have hierarchy style tags added to them. What I need to do, is get these templates from the database, and then programmatically find these tags, their function name (or tag name), and their inner contents, as well as anything following the function (tag) name within the brackets.. An example of one of these tags is, {{FunctionName some (otherStuff) !Here}} Some content sits inside and it ends {{/FunctionName}}\n\nThis is where it gets more fun, the templates have another random tag, which I am guessing are the &quot;variable&quot; style of these tags, as they are always generally the same syntax. Which looks like this, ${RandomTag}, but also there are times that the function style one is there but without an ending tag, like so.. {{RandomLoner}}\n\nExample Template...\n\n\n\nOk so in no way is this a real template, but it follows all the rules that I have seen thus far.\n\nNow I have tried different things with regex and preg_match_all to pull out the matches, and get each of these into a nice array. So far what I have got is this (used it on the example template to make sure its working still)\n\n\n\nI have tried a couple approaches, (that took me nearly 8 hours to get to)\n\n\n\nIn no way am I a guru with regexp, I actually just learned it over the last day or so, trying to get this to work. I have googled for this, and realize that regexp is not designed for nested stuff, but the (?R) seems to do the trick on simple bracket examples Ive seen on the internets, but they always only take into account of the stuff between the { and } or ( and ) or &lt; and &gt;. After reading nearly the whole regex info website, and playing, I came up with these 2 versions.\n\nSo what I NEED to do (I think), would have a regexp work from the DEEPEST hierarchy tag first, and work its way out (if I can do that with help from php, thats fine with me). I was thinking finding the Deepest layer, get its data, and work backwards til all the contents are in 1 fat array. I assumed that was what the ($R) was going to do for me, but it didn&#39;t.\n\nSo any help on what I am missing would be great, also take into note that mine seems to have issues with {{}} that DONT have an ending version of it. So like my {{Random}} example, was removed for the sake of me parsing the array example. I feel these tags, along with the ${} tags can be left alone (if I knew how to do that with regexp), and just remain in the text where they are. I am more or less interested in the functions and getting their data into a multidimensional array for me to work with further.\n\nSorry for the long post, I just have been banging me head all night with this. I started with the assumption that it was going to be a bit easier.. Til I realized the tags where nested :/\n\nAny help is appreciated! Thanks!\n",
            "excerpt": "Now I have tried different things with <span class=\"highlight\">regex</span> and preg_match_all to pull out the matches, and get each of these into a nice array. &hellip; After reading nearly the whole <span class=\"highlight\">regex</span> info website, and playing, I came up with these 2 versions. &hellip; ",
            "title": "regex, php, and the evil nested (?R)"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 9058571,
            "is_answered": false,
            "question_id": 9058565,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1327889108,
            "creation_date": 1327889108,
            "body": "\n\nEval is evil, and parsing code with regexes is more evil.\n\n\n\nYou can even add varargs support:\n\n\n",
            "excerpt": "function concat(a, b) {\n    return function() { \n        a.call(this, arguments); \n        b.call(this, arguments); \n    };\n}\n\n\nEval is <span class=\"highlight\">evil</span>, and parsing code with regexes is more <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Is it possible to combine the functions easier?"
        },
        {
            "tags": [
                "javascript",
                "greasemonkey"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 9049963,
            "is_answered": false,
            "question_id": 9049858,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1327798024,
            "creation_date": 1327798024,
            "body": "Several things:\n\n\nDon&#39;t inject JS if you don&#39;t have to (On the Evil Overlord list next to &quot;Don&#39;t turn into a snake; it never helps&quot;).\nDon&#39;t futz with  if you don&#39;t have to.  It busts things and leads to the temptation of trying to regex HTML.\nUse DOM methods to add things, with rare exceptions.\nI&#39;m not sure that a script node, created thus, will be parsed anyway.\nMight as well start using jQuery.  It makes things simpler and more robust.\n\n\nPutting it all together, your script would become something like: \n\n\n",
            "excerpt": "Several things:\n\n\nDon&#39;t inject JS if you don&#39;t have to (On the <span class=\"highlight\">Evil</span> Overlord list next to &quot;Don&#39;t turn into a snake; it never helps&quot;).\nDon&#39;t futz with innerHTML if you don&#39;t have to. &hellip; It busts things and leads to the temptation of trying to <span class=\"highlight\">regex</span> HTML.\nUse DOM methods to add things, with rare exceptions.\nI&#39;m not sure that a script node, created thus, will be parsed anyway. &hellip; ",
            "title": "Add my own onclick function with Greasemonkey"
        },
        {
            "tags": [
                "regex",
                "algorithm",
                "named-entity-extraction"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 8706499,
            "is_answered": false,
            "question_id": 8697456,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1325548055,
            "creation_date": 1325548055,
            "body": "A slightly smarter implementation than running every regex on every file:\n\n\n\nBut I don&#39;t know of any programs that do this already - you&#39;d have to code it yourself. This also implies you have the ram to keep the regex state around, and that you don&#39;t have any evil regexes\n",
            "excerpt": "A slightly smarter implementation than running every <span class=\"highlight\">regex</span> on every file:\n\nFor each <span class=\"highlight\">regex</span>:\n    load <span class=\"highlight\">regex</span> into a <span class=\"highlight\">regex</span> engine\n    assemble a list of <span class=\"highlight\">regex</span> engines\nFor each byte in the file:\n    insert &hellip; This also implies you have the ram to keep the <span class=\"highlight\">regex</span> state around, and that you don&#39;t have any <span class=\"highlight\">evil</span> regexes &hellip; ",
            "title": "Fast algorithm to extract thousands of simple patterns out of large amounts of text"
        },
        {
            "tags": [
                "php",
                "regex",
                "bbcode",
                "recursive-regex"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 3613401,
            "is_answered": false,
            "question_id": 3613121,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1324417202,
            "creation_date": 1283290505,
            "body": "Your regex, especially the zero-width assertions (lookaround) cause the regex engine to  backtrack catastrophically. Moral of the story: Regex can&#39;t shouldn&#39;t be used to parse languages that are not regular. If you have nested structures, that&#39;s not a regular language.\n\nIn fact, I think BBCode is evil. BBCode is a markup language invented by lazy programmers who didn&#39;t want to filter HTML the proper way. As a result, we now have a loose &quot;standard&quot; that&#39;s hard to implement. Filter your HTML the right way:\n\nhttp://htmlpurifier.org/\n",
            "excerpt": "Your <span class=\"highlight\">regex</span>, especially the zero-width assertions (lookaround) cause the <span class=\"highlight\">regex</span> engine to  backtrack catastrophically. &hellip; Moral of the story: <span class=\"highlight\">Regex</span> can&#39;t shouldn&#39;t be used to parse languages that are not regular. If you have nested structures, that&#39;s not a regular language.\n\nIn fact, I think BBCode is <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Regular expression crashes Apache due to PCRE limitations"
        },
        {
            "tags": [
                "c#",
                "html",
                "regex"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 8049311,
            "is_answered": false,
            "question_id": 8048951,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1320749779,
            "creation_date": 1320749779,
            "body": "I&#39;ve always read that parsing Html with Regular Expression is the Evil. Ok... it&#39;s surely true...\nBut like the Evil, Regex are so fun :)\nSo I&#39;d give a try to this one:\n\n\n",
            "excerpt": "I&#39;ve always read that parsing Html with Regular Expression is the <span class=\"highlight\">Evil</span>. Ok... it&#39;s surely true...\nBut like the <span class=\"highlight\">Evil</span>, <span class=\"highlight\">Regex</span> are so fun :)\nSo I&#39;d give a try to this one:\n\n<span class=\"highlight\">Regex</span> r = new <span class=\"highlight\">Regex</span>(@&quot;&lt;a.*? &hellip; ",
            "title": "C# Regex: Getting URL and text from multiple &quot;a href&quot;-tags"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 12,
            "is_accepted": true,
            "answer_id": 7898901,
            "is_answered": false,
            "question_id": 7898865,
            "item_type": "answer",
            "score": 19,
            "last_activity_date": 1319664603,
            "creation_date": 1319605645,
            "body": "The pattern you are using is known as an evil regex according to OWASP (they know what they&#39;re talking about most of the time):\n\nhttps://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n\nIt basically matches  OR  or  (since the b is optional by addition of ) \n\nA Regex like this is vulnerable to a ReDoS or Regex Denial of Service Attack.\n\nSo yes, sort out what you want to match.  I suggest in the above example you should simply match , no need for groups, repitition or alternation:\n\n\n\nAlso as someone pointed out, who now deleted his post, you should not use += to append to strings.  You should use a StringBuffer instead:\n\n\n",
            "excerpt": "The pattern you are using is known as an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> according to OWASP (they know what they&#39;re talking about most of the time):\n\nhttps://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS &hellip; A <span class=\"highlight\">Regex</span> like this is vulnerable to a ReDoS or <span class=\"highlight\">Regex</span> Denial of Service Attack.\n\nSo yes, sort out what you want to match. &hellip; ",
            "title": "Java pattern matching going to infinite loop"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 12,
            "is_accepted": false,
            "answer_id": 7898925,
            "is_answered": false,
            "question_id": 7898865,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1319607209,
            "creation_date": 1319605935,
            "body": "The regular expression  is one that takes an especially long time for the regular expression engine to handle.  These are colorfully called evil regexes.  It is similar to the  example at the link.  This particular one is very slow on a string composed entirely of s.\n\nWhat this code does is check the evil regex against increasingly long strings of s, up to length 200, so it certainly ought to take a long time, and it doesn&#39;t print until the loop ends.  I&#39;d be interested to know where the 10^15 years figure came from.\n\nEdit\n\nOK, the 10^15 (and in fact the entire piece of code in the question) comes from this talk, slide 37.  Thanks to zengr for that link.  The most relevant piece of information to the question is that the check for this regex takes time that is exponential in the length of the string.  Specifically it&#39;s O(2^(n/2)), so it takes 2^99 (or so) times longer to check the last string than the first one.\n",
            "excerpt": "What this code does is check the <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> against increasingly long strings of as, up to length 200, so it certainly ought to take a long time, and it doesn&#39;t print until the loop ends. &hellip; The most relevant piece of information to the question is that the check for this <span class=\"highlight\">regex</span> takes time that is exponential in the length of the string. &hellip; ",
            "title": "Java pattern matching going to infinite loop"
        },
        {
            "tags": [
                "c#",
                ".net",
                "regex",
                "regex-greedy"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 3034379,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1319491257,
            "creation_date": 1276473324,
            "body": "I&#39;m writing a regular expression to match data from the IMDb soundtracks data file.  My regexes are mostly working, although they are in places slurping too much text into my named groups.  Take the following regex for example:\n\n\n\nThe performer group includes the string  as well as the performer&#39;s name.  Unfortunately, because the records are not consistently formatted, some performers&#39; names are surrounded by single quotation marks whilst others are not.  This means they are optional as far as the regex is concerned.  \n\nI&#39;ve tried marking the last group as a greedy group using the  group specifier, but this appeared to have no effect on the results.  \n\nI can improve the results by changing the performer group to match a small range of characters, but this reduces my chances of parsing the name out correctly.  Furthermore, if I were to just exclude the apostrophe character, I would then be unable to parse, e.g., band names containing apostrophes, such as Elia&#39;s Lonely Friends Band who performed Run For Your Life featured in Resident Evil: Apocalypse.\n\nUpdate:  Here&#39;s an example input line that the regex should match, as requested.  Other formats are also presented which my existing regex won&#39;t handle.  \n\n\n",
            "excerpt": "just exclude the apostrophe character, I would then be unable to parse, e.g., band names containing apostrophes, such as Elia&#39;s Lonely Friends Band who performed Run For Your Life featured in Resident <span class=\"highlight\">Evil</span> &hellip; Update:  Here&#39;s an example input line that the <span class=\"highlight\">regex</span> should match, as requested.  Other formats are also presented which my existing <span class=\"highlight\">regex</span> won&#39;t handle.  \n\n&quot;  Performed by &#39;Carmen Silvera&#39; (qv)&quot; &hellip; ",
            "title": "Regex expression is too greedy"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 8,
            "is_accepted": false,
            "answer_id": 7854263,
            "is_answered": false,
            "question_id": 7854063,
            "item_type": "answer",
            "score": 8,
            "last_activity_date": 1319323694,
            "creation_date": 1319224822,
            "body": "Ginormous regexes can be quite slow and memory hungry. I know, because I have created one. It can tokenize what shouldn&#39;t be tokenized by a regex. :-) if you want a link... Now... I haven&#39;t ever benchmarked &quot;small&quot; regexes so I don&#39;t know their speed. They surely are compact to write.\n\nAh I was forgetting, regexes are The Evil. Their main problem is that they are like an hammer and when you have them, you try to make all the problems be like a nail. So their main problem is in the user (the programmer).\n\nFirst &quot;big&quot; limitation: Javascript implements only a subset of them, with no Unicode support. Normally the language you use server side has a more complete implementation, so you get limited by js. Even quite complete implementations like the .NET one have big limits: no support for surrogate pairs and no support for &quot;composed&quot; characters (characters that use combining mark). But, as always, the problem is in the programmer. How many programmers that know Unicode know the intricacies of Unicode, of the various sets of digits, of the diacritics?\n\nSecond &quot;big&quot; limitation: maintainability. They are complex and unreadable when they are written. But months later? They get worse! And if you have to train a new programmer, now he has to learn one more language: regex.\n\nThird &quot;big&quot; limitation: they hide too much. You see . What does it means? a digit a space and a digit? Surely. But both  and  in the .NET Regexes &quot;hide&quot; a microworld.  &quot;matches&quot; any non-european digit (and there are many many ones in Unicode).  &quot;matches&quot; so many esoteric spaces of which I don&#39;t even know the name... I don&#39;t even want to think about it. They are like icebergs. Only 1/8 is out of the water, while 7/8 is hidden. But it&#39;s that 7/8 that will probably kill you.\n",
            "excerpt": "It can tokenize what shouldn&#39;t be tokenized by a <span class=\"highlight\">regex</span>. :-) if you want a link... Now... I haven&#39;t ever benchmarked &quot;small&quot; regexes so I don&#39;t know their speed. They surely are compact to write. &hellip; Ah I was forgetting, regexes are The <span class=\"highlight\">Evil</span>. Their main problem is that they are like an hammer and when you have them, you try to make all the problems be like a nail. &hellip; ",
            "title": "Limitations of Regular Expressions?"
        },
        {
            "tags": [
                "regex",
                "preg-replace"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 7727498,
            "is_answered": false,
            "question_id": 7726379,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1318342599,
            "creation_date": 1318342599,
            "body": "Disclaimer:\n\nIt is always best to use a dedicated parser when working with (X)HTML. There are certainly files containing markup that can cause this regex solution to fail. Evil edge case strings placed inside comments, CDATA sections, scripts, styles and/or attribute values can trip it up. (Although these should be very rare.)\n\nThat said...\n\nMany here will tell you to NEVER use regex with HTML. However, this question involves a very specific target string, and a carefully crafted regex solution can work pretty well for this one-shot task at hand. Here is how I would do it:\n\n\n\nThis will replace the target URL only when inside the  attribute of  link tags (with the value wrapped in either single or double quotes). It will also strip any path/query/fragment that may be appended to the old target URLs. It allows any number of other tag attributes to appear before the  attribute.\n",
            "excerpt": "There are certainly files containing markup that can cause this <span class=\"highlight\">regex</span> solution to fail. &hellip; Many here will tell you to NEVER use <span class=\"highlight\">regex</span> with HTML. &hellip; ",
            "title": "replace urls in string preg_replace regex php"
        },
        {
            "tags": [
                "c#",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 7716310,
            "is_answered": false,
            "question_id": 7715506,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1318277295,
            "creation_date": 1318266996,
            "body": "Disclaimer:\n\nAs others have pointed out, using regex to parse non-regular languages is fraught with peril! It is best to use a dedicated parser specifically designed for the job, especially when parsing the tag soup that is HTML.\n\nThat said...\n\nIf you insist on using a regular expression, here is a regex solution that will do a pretty good job:\n\n\n\nExample input:\n\n\n\n\n\n  \n\nExample output:\n\n\n\n\n\n  \n\nNote that there will always be edge cases where this solution will fail. e.g. Evil strings within CDATA sections, comments, scripts, styles and tag attribute values can trip this up. (See disclaimer above.) That said, this solution will do a pretty good job for many cases (but will never be 100% reliable!)\n\nEdit: 2011-10-10 14:00 MDT Streamlined overal answer. Removed first regex solution. Modified to correctly ignore classes having similar names like:  and .\n",
            "excerpt": "Disclaimer:\n\nAs others have pointed out, using <span class=\"highlight\">regex</span> to parse non-regular languages is fraught with peril! &hellip; <span class=\"highlight\">Evil</span> strings within CDATA sections, comments, scripts, styles and tag attribute values can trip this up. (See disclaimer above.) &hellip; ",
            "title": "Replace a class by another in an html string"
        },
        {
            "tags": [
                "javascript",
                ".net",
                "asp.net",
                "visual-studio"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 7645200,
            "is_answered": false,
            "question_id": 7645043,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1317719022,
            "creation_date": 1317717248,
            "body": "The mistake that you are making is that  interprets xx/xx/xxxx formatted strings as U.S. style dates with the month first.   is taken as April 10, not October 4.\n\nHere is a transcript:\n\n\n\nIMHO you should avoid ambiguous date formats like this.  If date strings are to be used, force users to enter ISO8601 (yyyy/MM/dd) formatted text.\n\nThere is decent support for ISO8601 in ECMAScript 5 browsers.  Also see the Date.js library.  Or also this SO question for more info.\n\nADDENDUM\n\nThe built-in  function is documented here.  You can see it does not support DD/MM/YYYY.  While an evil programmer could accept a string in the form DD/MM/YYYY and use  and  (or regexes) to rewrite in an acceptable format for , I&#39;ll assume you are not an evil programmer.\n\nThe proper solution is to use a date parser that accepts format strings.  For JavaScript, one such library is Date.js.  It will allow you to write the following:\n\n\n\nand get the date object corresponding to April 20, 2011.\n",
            "excerpt": "While an <span class=\"highlight\">evil</span> programmer could accept a string in the form DD/MM/YYYY and use substring and concat (or regexes) to rewrite in an acceptable format for Date.parse, I&#39;ll assume you are not an <span class=\"highlight\">evil</span> programmer &hellip; ",
            "title": "javascript validation for dates takes string for comparison"
        },
        {
            "tags": [
                "php",
                "url",
                "tags",
                "file-get-contents"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 7168934,
            "is_answered": false,
            "question_id": 7168918,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1314144009,
            "creation_date": 1314144009,
            "body": "Try the following regex (taken from the jQuery sourcecode).\n\n\n\nAnd before somebody is going to tell me that Regexes+HTML are an evil combination: You are right, but in this specific case it&#39;s perfecly valid since script tags have some specific behaviour such as that the first  will close the script tag; no matter if it&#39;s inside quotes etc.\n\nHowever, if you plan to do anything else with the HTML data, use a HTML parser!\n",
            "excerpt": "Try the following <span class=\"highlight\">regex</span> (taken from the jQuery sourcecode).\n\n$data = preg_replace(&#39;/&lt;script\\b[^&lt;]*(?:(?! &hellip; &lt;\\/script&gt;)&lt;[^&lt;]*)*&lt;\\/script&gt;/gi&#39;, &#39;&#39;, $data);\n\n\nAnd before somebody is going to tell me that Regexes+HTML are an <span class=\"highlight\">evil</span> combination: You are right, but in this specific case it&#39;s perfecly valid since script &hellip; ",
            "title": "PHP How do I remove script tags from URL?"
        },
        {
            "tags": [
                "python",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 7139593,
            "is_answered": false,
            "question_id": 7138560,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1313946174,
            "creation_date": 1313944837,
            "body": "\n  Python violates the Principle of Least Surprise here: they&#39;ve chosen a\n  word with an established meaning and warped it into meaning something\n  different from that. This isn&#39;t quite evil and wrong, but it is\n  certainly stupid and wrong. – tchrist @tchrist\n\n\nI don&#39;t agree. In fact, I think exactly the contrary, it isn&#39;t stupid\n\nIf I say :\n\n\n  a regex&#39;s pattern  matches the string &#39;145caba&#39;\n\n\neverybody will agree with this assertion.\n\nIf I say :\n\n\n  a regex&#39;s pattern  matches the string &#39;ref/ 789lomono\n  145abaca ubulutatouti&#39;\n\n\n80 % of people will agree\nand the other rigorous 20 % of people, in which I am, will be unsatisfied by the wording and will reclaim that the expression be changed to :  \n\n\n   matches SOMEWHERE in the string &#39;ref/ 789lomono\n  145abaca ubulutatouti&#39;\n\n\nThat&#39;s why I find justified to call an action that consists to search if and where a pattern matches in a string:   \n\nand to call the action to verify if a match occurs from the beginning:     \n\nFor me it&#39;s very much logical, not surprising\n\n.\n\nPS \n\nA former answer of mine have been deleted. As I don&#39;t know how to write to the author of the deletion to ask him the reason why he judged my former answer being a rant (!!!?), I re-post what seems to me absolutely impossible to be qualified so\n",
            "excerpt": "This isn&#39;t quite <span class=\"highlight\">evil</span> and wrong, but it is\n  certainly stupid and wrong. – tchrist @tchrist\n\n\nI don&#39;t agree. &hellip; ",
            "title": "Why doesn&#39;t this regexp match?"
        },
        {
            "tags": [
                "php",
                "string",
                "wordpress"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 5045388,
            "is_answered": false,
            "question_id": 5031682,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1313773051,
            "creation_date": 1298055439,
            "body": "Never, ever use RegEx for HTML, ok? Just accept this. Or read the numerous posts on here why not.\n\nDOMDocument is ugly and evil. Use simple_html_dom instead, it&#39;s much simpler:\n\n\n",
            "excerpt": "Never, ever use <span class=\"highlight\">RegEx</span> for HTML, ok? Just accept this. Or read the numerous posts on here why not.\n\nDOMDocument is ugly and <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Find H2 tag in a string and give it a ID"
        },
        {
            "tags": [
                "c#",
                "asp.net-mvc",
                "asp.net-mvc-3",
                ".net-4.0",
                "routes"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 7102404,
            "is_answered": false,
            "question_id": 7043957,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1313641901,
            "creation_date": 1313641901,
            "body": "i think your problem is that you are either not using a constraint to define what location and stage should look like and it is giving you false positives and reading things in where they are not supposed to or you have your route definitions in the wrong order  \n\nmake sure you have the default mvc defined last and if you have multiple custom routes constrain the either using a regex or custom constraint class to define what locations are valid and they should look like    \n\neg http://site.com/ny/test/server/123456     \n\n\nis ny a valid location - make a custom constraint that defines what a\nvalid location is validate it against a database or a list of valid\nlocations\nis test a valid stage - regex could be sufficient but i always try to avoid regex whenever possible as it is evil and hard to maintain. again i would write a custom constraint to define what stages are valid likely validating against a list is sufficient is the case as you shouldnt  have very many stages \nalso to be noted with using stages the way you are in your url you can also add authentication rules in a constraint so that for exaple only people that are ..say.. admin or stakeholder roles be mached to the route and regular or non authenticated users would simply fall through to the next route or can simply give a 404 \n\n\nwriting routes can be tricky so it is advised to contrain your input data as much as you can especially if you are accepting string data \n\nstephen walther has a good post on writing route constraint at his blog \n",
            "excerpt": "where they are not supposed to or you have your route definitions in the wrong order  \n\nmake sure you have the default mvc defined last and if you have multiple custom routes constrain the either using a <span class=\"highlight\">regex</span> &hellip; could be sufficient but i always try to avoid <span class=\"highlight\">regex</span> whenever possible as it is <span class=\"highlight\">evil</span> and hard to maintain. again i would write a custom constraint to define what stages are valid likely validating against &hellip; ",
            "title": "Help with MVC 3 Routes"
        },
        {
            "tags": [
                "php",
                "mysql"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 6838520,
            "is_answered": false,
            "question_id": 6838494,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1311730861,
            "creation_date": 1311730469,
            "body": "You can use prepared statements/PDO to ensure that no malicious queries can be injected into your code.\n\nLinks:\n\n\nPDO::Prepare\nPDOStatement::Execute\n\n\nYou should still validate your inputs with regex so your users can&#39;t just make whatever they want as their username. Say for example, I make my username . I could then run my evil code on all your pages with my username, unless you sanitized either input or output.\n",
            "excerpt": "Links:\n\n\nPDO::Prepare\nPDOStatement::Execute\n\n\nYou should still validate your inputs with <span class=\"highlight\">regex</span> so your users can&#39;t just make whatever they want as their username. &hellip; I could then run my <span class=\"highlight\">evil</span> code on all your pages with my username, unless you sanitized either input or output. &hellip; ",
            "title": "creating a login more securely in phpmysql how other than mysql real escape?"
        },
        {
            "tags": [
                "php",
                "mysql",
                "mysql-real-escape-string"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 6639946,
            "is_answered": false,
            "question_id": 6639909,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1310284843,
            "creation_date": 1310284843,
            "body": "Always assume the client is an evil genius, and smarter than you. \n\nTo avoid SQL injection, always escape client-side data with mysql_real_escape_string, or better yet, use a database wrapper which does it for you.\n\nYour first regex is still useful though, but not for SQL injection. What you might be preventing there is HTML injection - if you ever displayed the input verbatim on a web page, you can prevent anything nefarious like some rogue javascript.\n",
            "excerpt": "Always assume the client is an <span class=\"highlight\">evil</span> genius, and smarter than you. &hellip; Your first <span class=\"highlight\">regex</span> is still useful though, but not for SQL injection. &hellip; ",
            "title": "Performing a mysql_real_escape_string on checkboxes, radio buttons or drop-down menus?"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 6536081,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1309446087,
            "creation_date": 1309442966,
            "body": "the mighty Google apparently makes up its own URLS now to try to locate pages. We have spent allot of time making sure our URL navigation is spot on, but &quot;dont be evil&quot; is being evil and claiming that allot of our pages are duplicates.....\n\neg:\n\n/properties/2531/812/\n\n/properties/2531/812/bisto-prego-Monmouth-Monmouthshire-United Kingdom/\n\n/properties/2531/812/bisto-prego-monmouth-monmouthshire-united-kingdom/\n\n/properties/2531/812/bisto-prego-monmouth-monmouthshire-united-kingdom\n\nyou guessed it, the page is actually found at /properties/2531/812/, the rest is simply there for SEO effort.\n\nSo because google is trying it on, we are now seeing loads of duplicate content reports in our webmaster tools.\n\nEasy enough to handle, we will just make our index.php script allot stricter and run a 303 redirect if the url is not as well formed as we would like. That should sort the sheriff out!\n\n\n\nWe can easiliy detect if the seo part of the URI is present, but still having trouble detecting the ? and if there is a trailing slash....\nSo regex question: first off, how to detect presence of ?query=string etc in the url, and secondly how to detect if a trailing slash is present...\n",
            "excerpt": "We have spent allot of time making sure our URL navigation is spot on, but &quot;dont be <span class=\"highlight\">evil</span>&quot; is being <span class=\"highlight\">evil</span> and claiming that allot of our pages are duplicates..... &hellip; So <span class=\"highlight\">regex</span> question: first off, how to detect presence of ?query=string etc in the url, and secondly how to detect if a trailing slash is present... &hellip; ",
            "title": "more regex: need to setup some redirects to handle duplicate URL reports by big brother (goog)"
        },
        {
            "tags": [
                "java",
                "casting",
                "dynamic-cast"
            ],
            "question_score": 101,
            "is_accepted": false,
            "answer_id": 6496273,
            "is_answered": false,
            "question_id": 2127318,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1309193964,
            "creation_date": 1309193964,
            "body": "For what it is worth, most scripting languages (like Perl) and non-static compile-time languages (like Pick) support automatic run-time dynamic String to (relatively arbitrary) object conversions. This CAN be accomplished in Java as well without losing type-safety and the good stuff statically-typed languages provide WITHOUT the nasty side-effects of some of the other languages that do evil things with dynamic casting. A Perl example that does some questionable math:\n\n\n\nIn Java, this is better accomplished (IMHO) by using a method I call &quot;cross-casting&quot;.\nWith cross-casting, reflection is used in a lazy-loaded cache of constructors and methods that are dynamically discovered via the following static method: \n\n\n\nUnfortunately, no built-in Java methods such as Class.cast() will do this for String to BigDecimal or String to Integer or any other conversion where there is no supporting class hierarchy. For my part, the point is to provide a fully dynamic way to achieve this - for which I don&#39;t think the prior reference is the right approach - having to code every conversion. Simply put, the implementation is just to cast-from-string if it is legal/possible.\n\nSo the solution is simple reflection looking for public Members of either:\n\nSTRING_CLASS_ARRAY = (new Class[] {String.class});\n\na) Member member = targetClass.getMethod(method.getName(),STRING_CLASS_ARRAY);\nb) Member member = targetClass.getConstructor(STRING_CLASS_ARRAY);\n\nYou will find that all of the primitives (Integer, Long, etc) and all of the basics (BigInteger, BigDecimal, etc) and even java.regex.Pattern are all covered via this approach. I have used this with significant success on production projects where there are a huge amount of arbitrary String value inputs where some more strict checking was needed. In this approach, if there is no method or when the method is invoked an exception is thrown (because it is an illegal value such as a non-numeric input to a BigDecimal or illegal RegEx for a Pattern), that provides the checking specific to the target class inherent logic.\n\nThere are some downsides to this:\n\n1) You need to understand reflection well (this is a little complicated and not for novices).\n2) Some of the Java classes and indeed 3rd-party libraries are (surprise) not coded properly. That is, there are methods that take a single string argument as input and return an instance of the target class but it isn&#39;t what you think... Consider the Integer class:\n\n\n\nThe above method really has nothing to do with Integers as objects wrapping primitives ints.\nReflection will find this as a possible candidate for creating an Integer from a String incorrectly versus the decode, valueof and constructor Members - which are all suitable for most arbitrary String conversions where you really don&#39;t have control over your input data but just want to know if it is possible an Integer.\n\nTo remedy the above, looking for methods that throw Exceptions is a good start because invalid input values that create instances of such objects should throw an Exception. Unfortunately, implementations vary as to whether the Exceptions are declared as checked or not. Integer.valueOf(String) throws a checked NumberFormatException for example, but Pattern.compile() exceptions are not found during reflection lookups. Again, not a failing of this dynamic &quot;cross-casting&quot; approach I think so much as a very non-standard implementation for exception declarations in object creation methods.\n\nIf anyone would like more details on how the above was implemented, let me know but I think this solution is much more flexible/extensible and with less code without losing the good parts of type-safety. Of course it is always best to &quot;know thy data&quot; but as many of us find, we are sometimes only recipients of unmanaged content and have to do the best we can to use it properly.\n\nCheers.\n",
            "excerpt": "This CAN be accomplished in Java as well without losing type-safety and the good stuff statically-typed languages provide WITHOUT the nasty side-effects of some of the other languages that do <span class=\"highlight\">evil</span> things &hellip; In this approach, if there is no method or when the method is invoked an exception is thrown (because it is an illegal value such as a non-numeric input to a BigDecimal or illegal <span class=\"highlight\">RegEx</span> for a Pattern), &hellip; ",
            "title": "java: How can I do dynamic casting of a variable from one type to another?"
        },
        {
            "tags": [
                "javascript",
                "replace",
                "character",
                "reserved"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 6348948,
            "is_answered": false,
            "question_id": 6348861,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1308079739,
            "creation_date": 1308079739,
            "body": "first of DON&#39;T USE EVAL it&#39;s the most evil function ever and fully unnecessary here\n\n\n\nworks just as well (or use the  constructor)\n\nand when you want to have a  in the regex and a  before the character you want to escape\n\n\n",
            "excerpt": "first of DON&#39;T USE EVAL it&#39;s the most <span class=\"highlight\">evil</span> function ever and fully unnecessary here\n\nvar badwords = /foo|bar|baz/ig;\n\n\nworks just as well (or use the new RegExp(&quot;foo|bar|baz&quot;,&quot;ig&quot;); constructor)\n\nand when &hellip; you want to have a / in the <span class=\"highlight\">regex</span> and a \\ before the character you want to escape\n\nvar badwords = /\\/foo|bar|baz/ig;\n//or\nvar badwords = new RegExp(&quot;\\\\/foo|bar|baz&quot;,&quot;ig&quot;);//double escape to escape the &hellip; ",
            "title": "Javascript replace several character including &#39;/&#39;"
        },
        {
            "tags": [
                "javascript",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 6345216,
            "is_answered": false,
            "question_id": 6345151,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1308062362,
            "creation_date": 1308061974,
            "body": "No regex required:\n\n\n\nActually parsing HTML with regular expressions is evil. Although it might be easy to come up with an expression for your specific case, it might not work well for a different string.\n",
            "excerpt": "No <span class=\"highlight\">regex</span> required:\n\nvar t_ = document.createElement(&#39;div&#39;),\n    a;\nt_.innerHTML = htmlString; // &lt;- string containing your HTML\na = t_.children[0];\n\nvar text = a.textContent || a.innerText; // W3C vs IE &hellip; Actually parsing HTML with regular expressions is <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "How to extract text from Link in Javascript?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "html-entities"
            ],
            "question_score": 3,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 6337459,
            "item_type": "question",
            "score": 3,
            "last_activity_date": 1308008377,
            "creation_date": 1308006618,
            "body": "I&#39;m using regex snippets to parse smileys into images, and encountering problems with the semicolon.  For example, a smiley like ;) turns into a WINK icon, matching against \n\n\n\nand works in most cases.  But text like &quot;) is also matching into &quot;WINK, because the quotation mark is actually an html entity ().\n\nI tried prefixing the regex with a greedy non-capturing match to discard semicolons in entities:\n\n\n\nBut the resulting pattern still matches against the semicolon in  that should be skipped, because it backtracks to satisfy the non-optional latter portion.  I also realized there&#39;d still be problems with other legitimate matches, such as EVIL: .\n\nSo what it appears I really need is the negation of preceding html entities missing a semicolon:\n\n\n\nBut it is still matching and I&#39;m not sure why.\n\nIt would be ideal to still get returned matches that can be replaced wholesale without further inspection, but I&#39;m open to suggestions.  What is not suitable is first parsing out the html entities, because sometimes they&#39;re necessary and/or part of a legitimate smiley (as with EVIL).\n\n\n\nEDIT (some Google food):\n\nI discovered (and Bryan also noted below) that Zero-width positive lookbehind, , would work as desired (not Zero-width negative lookahead ).\n\nAs per regular-expressions.info, the latter &quot;will only succeed if the regex inside the lookahead fails to match&quot; which sounds right, but isn&#39;t when the section is optional anyway.\n\nIn contrast, the former &quot;matches at a position if the pattern inside the lookahead can be matched ending at that position&quot; which isn&#39;t at all clear, but does the trick.  Because the match is using lookbehind, there&#39;s no chance of backtracking to satisfy the latter portion of the regex.\n\nSo a full regex looks like:\n\n\n\nand that matches these:    while failing this:  \nIt does however still match , so more tweaking would be ideal (such as additionally matching semicolons in place of the ampersands, if that doesn&#39;t cause other smileys with entities in them to break).  People typing out html entities in chat isn&#39;t likely to come up much anyway.\n\nEither way would be &quot;good enough&quot;--except that javascript doesn&#39;t support negative lookbehind.  But it&#39;s worth explaining for the sake of other regex implementations.\n",
            "excerpt": "I also realized there&#39;d still be problems with other legitimate matches, such as <span class=\"highlight\">EVIL</span>: &amp;gt;:) =&gt; &gt;:). &hellip; <span class=\"highlight\">regex</span>), would work as desired (not Zero-width negative lookahead (?!<span class=\"highlight\">regex</span>)). &hellip; ",
            "title": "Skip preceding html entities in javascript regex"
        },
        {
            "tags": [
                "javascript",
                "if-statement"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 6211401,
            "is_answered": false,
            "question_id": 6211103,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1306997679,
            "creation_date": 1306997679,
            "body": "@Anurag&#39;s answer is great, that&#39;s the best you can do,  is supported by every browser that is around (being buggy in IE 5.5-7 but for getting  it works fine).\n\nI just wanted to add a few things:\n\n\nDon&#39;t use &#39;s string syntax, always pass in a function (you can pass in a closure to run more than one functions), which is considered best practice. The string variation works like , the widely known evil bastard. So your code should look like (same applies to ):\n\n\nOthen than using , which is the best approach, you can also write a regex approach. I only add this for fun and broadening the view, please use @Anurag&#39;s solution.\n\n\n\nThis will try to match in a case-insensitive way, looking for  in the end of the string, having either the beginning of the string or  before it.\n\njsFiddle Demo\n\n",
            "excerpt": "The string variation works like eval(), the widely known <span class=\"highlight\">evil</span> bastard. &hellip; So your code should look like (same applies to setInterval):\n\nsetTimeout(turnSad, 1000);\n\nOthen than using getAttribute(), which is the best approach, you can also write a <span class=\"highlight\">regex</span> approach. &hellip; ",
            "title": "Basic Javascript Question"
        },
        {
            "tags": [
                "php",
                "curl"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 6028813,
            "is_answered": false,
            "question_id": 6028705,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1305624318,
            "creation_date": 1305624318,
            "body": "You could grab all the URLs using a regular expression\n\n\n",
            "excerpt": "You could grab all the URLs using a regular expression\n\n// insert general warning about how parsing HTML using <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span> :-)\npreg_match(&#39;/href=&quot;([^&quot;]+)&quot;/&#39;, $html, $matches);\n$urls = array_slice($matches &hellip; ",
            "title": "php Curl clicked links"
        },
        {
            "tags": [
                "javascript",
                "html",
                "xpath",
                "hyperlink",
                "selenium"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 5985639,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1305243761,
            "creation_date": 1305242509,
            "body": "I&#39;m using Selenium RC to write test cases for a website that&#39;s at least partially dynamically generated or otherwise dependent on a database. I&#39;d like to be able to tell my Python program making calls to Selenium to do string operations on the target of a specific link, but I can&#39;t be sure what the target (the href=&#39;&#39; field) will be at &quot;compile time&quot; (or, well, whatever the Python equivalent is. Can someone help me out there?).  \n\nNow, I am sure what the xpath of that link is going to be; &quot;//table[@id=&#39;search-results&#39;]/tbody/tr[2]/td[3]/a/img&quot; . And I am running Selenium, which has an eval() function (the root of all evil) that runs arbitrary lines of javascript. Is there any way I can get the target of this link from the xpath and Selenium, or do I have to find some way to download the entire page source (how do I do this? There was supposed to be a Selenium command to download the entire page source, but I got an &quot;element doesn&#39;t exist&quot; error when I tried running it) and then break out regexes to mess with the entire page source?\n",
            "excerpt": "And I am running Selenium, which has an eval() function (the root of all <span class=\"highlight\">evil</span>) that runs arbitrary lines of javascript. &hellip; ",
            "title": "Is there a way to get a link&#39;s destination in JavaScript from the xpath of the link?"
        },
        {
            "tags": [
                "php",
                "validation",
                "filter",
                "profanity"
            ],
            "question_score": 6,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 5780721,
            "item_type": "question",
            "score": 6,
            "last_activity_date": 1304573985,
            "creation_date": 1303750375,
            "body": "Last year I was working on a Christmas project which allowed customers to send emails to each other with a 256 character free-text field for their Christmas request. The project worked by searching the (very-large) product database for suggest products that matched the text field, but offered a free text option for those customers that could not find the product in question.\n\nOne obvious concern was the opportunity for customers to send rather explicit requests to some unsuspecting customer with the company&#39;s branding sitting around it.\n\nThe project did not go ahead in the end, for various reasons, the profanity aspect being one.\n\nHowever, I&#39;ve come back to thinking about the project and wondering what kinds of validation could be used here. I&#39;m aware of clbuttic which I know is the standard response to any question of this nature.\n\nThe solutions that I considered were:\n\n\nRun it through something like WebPurify\nUse MechanicalTurk\nWrite a regex pattern which looks for the word in the list. A more complicated version of this would consider plurals and past tenses of the word as well.\nWrite an array of suspicious words, and score each one. If the submission goes above a score, the validation fails.\n\n\nSo there are two questions:\n\n\nIf the submission fails, how do you handle it from a UI perspective?\nWhat are the pros and cons of these solutions, or any others that you can suggest?\n\n\nNB - answers like &quot;profanity filters are evil&quot; are irrelevant. In this semi-hypothetical situation, I haven&#39;t decided to implement a profanity filter or been given the choice of whether or not to implement one. I just have to do the best I can with my programming skills (which should be on a LAMP stack if possible).\n",
            "excerpt": "The solutions that I considered were:\n\n\nRun it through something like WebPurify\nUse MechanicalTurk\nWrite a <span class=\"highlight\">regex</span> pattern which looks for the word in the list. &hellip; NB - answers like &quot;profanity filters are <span class=\"highlight\">evil</span>&quot; are irrelevant. &hellip; ",
            "title": "Design pattern for blocking undesirable content"
        },
        {
            "tags": [
                "php",
                "ip"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 5864801,
            "is_answered": false,
            "question_id": 5864718,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1304396244,
            "creation_date": 1304394289,
            "body": "Look this is an acknowledged crap solution based on an unclear question\n\nRegex never seems a great solution, but I don&#39;t have a lot of detail on how consistent the file is.\n\n1. Isolate &quot;s&quot; segments in your ban.txt\n\nAs such, and my regex isn&#39;t fantastic, but this regex should match the &quot;s&quot; segments which appear to be for IP bans (although your comment stating &quot;The IP always in &quot;ip&quot;&quot; confuses this a little).\n\n\n\n2. Isolate the IPs within each &quot;s&quot; segment\n\nOnce we have these segments, we can strip the start bit up to the actual IP (i.e. turn  into ), and afterwards trim the end quotation mark and semi-colon (i.e.  to ):\n\n\n\n3. Example Code\n\nThis would give us this PHP code:\n\n\n\nExample: http://codepad.viper-7.com/S9rTQe\n",
            "excerpt": "<span class=\"highlight\">Regex</span>: s:[0-9]+:&quot;[ ]*[0-9]+.[0-9]+.[0-9]+.[0-9]+&quot;;\n\n\n2. &hellip; Example Code\n\nThis would give us this PHP code:\n\n$banText = file_get_contents(&quot;ban.txt&quot;); \n\n/* <span class=\"highlight\">Evil</span>, <span class=\"highlight\">evil</span> regexes */\n$sSegmentsRegex = &#39;/s:[0-9]+:&quot;[ ]*[0-9]+.[0-9]+.[0-9]+.[0-9]+&quot;/&#39;;\n$removeStartJunkRegex &hellip; ",
            "title": "find ip in txt content php"
        },
        {
            "tags": [
                "nginx"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 5706046,
            "is_answered": false,
            "question_id": 5409413,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1303144739,
            "creation_date": 1303144739,
            "body": "You want to use try_files to check for the existence of files instead of if statements here (because If&#39;s are Evil in Nginx).\n\nTo to a single directory, it would be like:\n\n\n\nWhat this does is try the uri as a file first. If that doesn&#39;t work, it&#39;ll try as a directory. If neither work, it&#39;ll default to index.php of /xxx/. The extra index line is to keep it from showing a blank page if you go directly to whatever.com/xxx\n\nUsing regex, we can expand this rule to work with more than one directory:\n\n\n\nThis should grab the full directory structure and rout it to the appropriate index.\n\n\nabc.com/yyy/nonexistant.php ==&gt; abc.com/yyy/index.php\nabc.com/yyy/zzz/nonexistant.php ==&gt; abc.com/yyy/zzz/index.php\n\n\nIf you only wanted the second example to go to yyy/index.php, use this regex in the location instead:\n\n\n",
            "excerpt": "You want to use try_files to check for the existence of files instead of if statements here (because If&#39;s are <span class=\"highlight\">Evil</span> in Nginx). &hellip; The extra index line is to keep it from showing a blank page if you go directly to whatever.com/xxx\n\nUsing <span class=\"highlight\">regex</span>, we can expand this rule to work with more than one directory:\n\nlocation ~* ^(/.*)/{ &hellip; ",
            "title": "rewrite rule nginx"
        },
        {
            "tags": [
                "python",
                "regex"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 5683634,
            "is_answered": false,
            "question_id": 5682772,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1302913961,
            "creation_date": 1302913961,
            "body": "Most people are giving you answers often qualified with &quot;Don&#39;t use regex! Regex is evil and comes from Perl! We Python users have trancended mere text manipulation!&quot; but no one is explaining why you&#39;re experiencing this problem.\n\nYour regex is working. It takes any alphabet, whitespace, or hyphen character and turns it into the number . The problem is that it thinks the negative sign in  is &quot;evil text&quot; to turn into a number.\n\nOne way to approach this is to provide an anchor for your regex - Make it match the commas (or beginning/ending of the string) surrounding the text. So it would see  and turn it into  but would see  and know that it&#39;s not text.\n\nAnother approach is to filter based on &quot;does it not contain digits&quot; instead of &quot;does it contain these things I need&quot; - because what if, later, you need to filter out other punctuation marks? Using  would match &quot;things that aren&#39;t digits or commas&quot;, which would turn  into  but keep  the same.\n\nA third approach is to split the string on commas, then test and change each individual segment - probably to see if it contains digits - and then join them back together.\n\nIf you choose the first or second approaches, I leave it up to you to write a regex that either matches a leading comma or the beginning of a string (and a trailing comma or the end of the string - both are similar). It&#39;s not terribly difficult.\n",
            "excerpt": "Most people are giving you answers &lt;snark&gt;often qualified with &quot;Don&#39;t use <span class=\"highlight\">regex</span>! <span class=\"highlight\">Regex</span> is <span class=\"highlight\">evil</span> and comes from Perl! We Python users have trancended mere text manipulation!&quot; &hellip; The problem is that it thinks the negative sign in -9 is &quot;<span class=\"highlight\">evil</span> text&quot; to turn into a number. &hellip; ",
            "title": "Regular Expressions Using Python&#39;s Re"
        },
        {
            "tags": [
                "asp.net",
                "regex"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 5676823,
            "is_answered": false,
            "question_id": 5676533,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1302880244,
            "creation_date": 1302871017,
            "body": "In your previous question, you mentioned you wanted from 0 to 50 characters. If that&#39;s still the case, here&#39;s what you want:\n\n\n\nAs of right now, I think these are the only regexes posted that allow for less than one letter with the first pattern, and less than two letters with the second pattern.\n\nRegexes are not a &quot;bad&quot; thing, they&#39;re just a specialized tool that isn&#39;t suited for every task. If you&#39;re trying to validate input in ASP.NET, I would definitely use a RegularExpressionValidator for this particular pattern, because otherwise you&#39;ll have to waste your time writing a CustomValidator for a pretty meager performance boost. See my answer to this other question for a little guidance on when and when not to use regex. \n\nIn this case, the reason I&#39;d use a regex validator has less to do with the pattern itself and more to do with ASP.NET. A RegularExpressionValidator can just be dragged and dropped into your ASPX code, and all you&#39;d have to write would be 10-21 characters of regex. With a CustomValidator, you&#39;d have to write custom validation functions, both in the codebehind and the JavaScript. You might squeeze a little more performance out of it, but think about when validation comes into play: only once per postback. The performance difference is going to be less than a millisecond. It&#39;s simply not worth your time as a developer -- to you or your employer. Remember: Hardware is cheap, programmers are expensive, and premature optimization is the root of all evil.\n",
            "excerpt": "See my answer to this other question for a little guidance on when and when not to use <span class=\"highlight\">regex</span>. &hellip; Remember: Hardware is cheap, programmers are expensive, and premature optimization is the root of all <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "What&#39;s the best way to constraint validation to not allow any spaces in ASP.NET"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "dom"
            ],
            "question_score": 14,
            "is_accepted": false,
            "answer_id": 5550805,
            "is_answered": false,
            "question_id": 5550633,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1302003325,
            "creation_date": 1302001442,
            "body": "\nYou should remove the  elements:\n\n\n\n\n\nSecond attempt:\n\nnode-validator can be used in the browser:\nhttps://github.com/chriso/node-validator\n\n\n\nAlternatively, PHPJS has a strip_tags function (regex/evil based):\nhttp://phpjs.org/functions/strip_tags:535\n",
            "excerpt": "Second attempt:\n\nnode-validator can be used in the browser:\nhttps://github.com/chriso/node-validator\n\nvar str = sanitize(large_input_str).xss();\n\n\nAlternatively, PHPJS has a strip_tags function (<span class=\"highlight\">regex</span> &hellip; /<span class=\"highlight\">evil</span> based):\nhttp://phpjs.org/functions/strip_tags:535 &hellip; ",
            "title": "Append html to jQuery element without running scripts inside the html"
        },
        {
            "tags": [
                "java",
                "regex",
                "string"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 5399766,
            "is_answered": false,
            "question_id": 5389203,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1300842461,
            "creation_date": 1300842461,
            "body": "The  HTML element may be nested. Since Java does not provide a native regex recursive expression, you cannot directly match an outermost  element with a single regex. You can, however, craft a regex to match an innermost  element, and iterate, replacing them from the &quot;inside-out&quot; until there are none left. Here is a tested Java snippet which does precisely that:\n\n\n\n\n\nCAVEATS: As many will undoubtedly point out: &quot;You can&#39;t parse HTML with regex!&quot; And they are correct (if your solution must work reliably 100% of the time). Although the solution above will work for a lot of cases, be aware that it has some limitations and there are certain things which can trip it up, namely:\n\n\nAn  start or  end tag may not appear in any  strings such as in SCRIPT or STYLE tags, or within any tag attribute, or within any HTML comment. e.g.  or , or .\nThe  start tag may not contain any angle brackets in its attributes.\n\n\nThese special cases should be pretty rare and the code above should work just fine for most (if not all) HTML files you have lying around.\n",
            "excerpt": "Since Java does not provide a native <span class=\"highlight\">regex</span> recursive expression, you cannot directly match an outermost OBJECT element with a single <span class=\"highlight\">regex</span>. &hellip; &lt;p title=&quot;<span class=\"highlight\">evil</span> &lt;OBJECT&gt; attribute&quot;&gt; or &lt;SCRIPT&gt;alert(&quot;Bad &lt;OBJECT&gt; script here!&quot;);&lt;/SCRIPT&gt;, or &lt;!-- &lt;OBJECT&gt; inside a comment --&gt;. &hellip; ",
            "title": "How to remove the object tag from my HTML using Java"
        },
        {
            "tags": [
                "regex",
                "perl"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 5399585,
            "is_answered": false,
            "question_id": 5399457,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1300841038,
            "creation_date": 1300840683,
            "body": "The regex you gave matches a single character after  (which will probably be a newline) and immediately expects to see .  Also, from the looks of it, you&#39;re using &quot;blah&quot; as a wildcard for &quot;anything&quot;?\n\n\n\nNote that a regex is not going to handle nested s properly (this is a simpler version of why you shouldn&#39;t try to parse HTML with a regex).  You can force it to work for this simple case with some evil, but it&#39;s still getting rather too close to the Old Ones for comfort.  Best for that case is to use a real parser.\n\nOr you can eschew reinventing the wheel and use unifdef.\n",
            "excerpt": "HTML with a <span class=\"highlight\">regex</span>). &hellip; You can force it to work for this simple case with some <span class=\"highlight\">evil</span>, but it&#39;s still getting rather too close to the Old Ones for comfort.  Best for that case is to use a real parser. &hellip; ",
            "title": "Perl regex multiline zero or more occurrences"
        },
        {
            "tags": [
                "java",
                "regex",
                "multiline"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 5329330,
            "is_answered": false,
            "question_id": 5329046,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1300297812,
            "creation_date": 1300296898,
            "body": "Parsing HTML or XML with regex is evil and error-prone.\n\nUse an XML parser and things will work much better.\nHere&#39;s a solution for your problem using Dom4J:\n\n\n\n\n\nApart from that you are also making a mistake (see my comments):\n\n\n\nYour regex might or might not work if you read the entire file to a String, but it can&#39;t work if you apply it on individual lines.\n",
            "excerpt": "Parsing HTML or XML with <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span> and error-prone.\n\nUse an XML parser and things will work much better. &hellip; = null) {\n     n.reset(aLine);\n     // yet you want to replace a multi-line pattern\n     String result = n.replaceAll(&quot;&quot;);\n     out.write(result);\n     out.newLine();\n}\n\n\nYour <span class=\"highlight\">regex</span> might or might not &hellip; ",
            "title": "Java Multi-line regex to replace multiple instances in a file"
        },
        {
            "tags": [
                "algorithm",
                "language-agnostic",
                "reflection",
                "java"
            ],
            "question_score": 11,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 5,
            "is_answered": true,
            "question_id": 5285306,
            "item_type": "question",
            "score": 11,
            "last_activity_date": 1300057254,
            "creation_date": 1299961842,
            "body": "I am aware that by default Java does not have the so-called  (what I pronounce as &quot;evil&quot;) method.  This sounds like a bad thing—knowing you do not have something which so many others do.  But even worse seems being notified that you can&#39;t have it.  \n\nMy question is: What is solid reasoning behind it?  I mean, Google&#39;ing this just returns a massive amount of old data and bogus reasons—even if there is an answer that I&#39;m looking for, I can&#39;t filter it from people who are just throwing generic tag-words around. \n\nI&#39;m not interested in answers that are telling me how to get around that; I can do that myself: \n\nUsing Bean Scripting Framework (BSF)\n\nFile  (in  folder) contents:\n\n\n\nAnd Java code:\n\n\n\nUsing designed bridges like JLink\n\n\n\nThis is equivalent to:\n\n\n\nOther methods\n\n\nUsing Dijkstras shunting-yard algorithm or alike and writing an expression evaluator from scratch. \nUsing complex regex and string manipulations with delegates and HashMultimaps.\nUsing Java Expressions Library\nUsing Java Expression Language\nUsing JRE compliant scripting language like BeanShell.\nUsing the Java Assembler and approach below or direct bytecode manipulation like Javaassist.\nUsing the Java Compiler API and reflections.\nUsing  as root \n\n",
            "excerpt": "I am aware that by default Java does not have the so-called eval (what I pronounce as &quot;<span class=\"highlight\">evil</span>&quot;) method.  This sounds like a bad thing—knowing you do not have something which so many others do. &hellip; Using complex <span class=\"highlight\">regex</span> and string manipulations with delegates and HashMultimaps.\nUsing Java Expressions Library\nUsing Java Expression Language\nUsing JRE compliant scripting language like BeanShell. &hellip; ",
            "title": "Why do people say that Java can&#39;t have an expression evaluator?"
        },
        {
            "tags": [
                "python",
                "elementtree",
                "celementtree"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 5162766,
            "is_answered": false,
            "question_id": 5160965,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1299105233,
            "creation_date": 1299032786,
            "body": "&quot;simple string methods&quot; are the root [pun intended] of all evil -- see examples below.\n\nUpdate 2 Code and output now show that proposed regexes also don&#39;t work very well.\n\nUse ElementTree. The function that you are looking for is . Enable &quot;start&quot; events. Bale out on the first iteration.\n\nCode:\n\n\n\nAbove ElementTree-related code works with Python 2.5 to 2.7. Will work with Python 2.2 to 2.4; you just need to get ElementTree and cElementTree from effbot.org and do some conditional importing. Should work with any lxml version.\n\nOutput:\n\n\n\nUpdate 1 The above was demonstration code. Below is more like implementation code... just add exception handling. Tested with Python 2.7 and 2.2.\n\n\n",
            "excerpt": "&quot;simple string methods&quot; are the root [pun intended] of all <span class=\"highlight\">evil</span> -- see examples below.\n\nUpdate 2 Code and output now show that proposed regexes also don&#39;t work very well.\n\nUse ElementTree. &hellip; ",
            "title": "How to obtain the root of a tree without parsing the entire file?"
        },
        {
            "tags": [
                "javascript",
                "asp.net",
                "datetime",
                "epoch"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 4928906,
            "is_answered": false,
            "question_id": 4928809,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1297130576,
            "creation_date": 1297130576,
            "body": "You can do it with regex and Date constructor.\n\nNot sure if it better, but it is safer. Eval can be evil sometimes...\n\nSo, you could do something like this:\n\n\n\nYou could also do the regex with replace:\n\n\n",
            "excerpt": "You can do it with <span class=\"highlight\">regex</span> and Date constructor.\n\nNot sure if it better, but it is safer. Eval can be <span class=\"highlight\">evil</span> sometimes... &hellip; So, you could do something like this:\n\nvar millisecs = signupDate.match(/\\d+/)[0];\nvar date = new Date(parseInt(millisecs));\n\n\nYou could also do the <span class=\"highlight\">regex</span> with replace:\n\nvar millisecs = signupDate.replace &hellip; ",
            "title": "Invoking javascript time &quot;object&quot;"
        },
        {
            "tags": [
                "java",
                "optimization",
                "if-statement"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 4830992,
            "is_answered": false,
            "question_id": 4830592,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1296234458,
            "creation_date": 1296234458,
            "body": "Interesting question. Like many people here, micro optimization causes more evil than good. But without throwing any design patten at you or idea for optimization, this is what  I would do.\n\nI will create am Enum for all operations. I will also create a member function in this enum that takes a var args parameter and a operation enum and iteratively apply the enum operation on the arguements.\n\nI will also create an String utility class (for input processing), that Iterates thro all the operation enum values and performs a regular expression check on input string to identify the operation specified by a given string ( regex because I want to make sure of Postfix notation).  Once it identifies the operation, then it delegates to the enum&#39;s member function to perform the operation.\n",
            "excerpt": "Like many people here, micro optimization causes more <span class=\"highlight\">evil</span> than good. But without throwing any design patten at you or idea for optimization, this is what  I would do. &hellip; utility class (for input processing), that Iterates thro all the operation enum values and performs a regular expression check on input string to identify the operation specified by a given string ( <span class=\"highlight\">regex</span> &hellip; ",
            "title": "Is an if-else tree the best way to go in the following case?"
        },
        {
            "tags": [
                "python",
                "html",
                "regex",
                "search",
                "variables"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 4581788,
            "is_answered": false,
            "question_id": 4581620,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1294095390,
            "creation_date": 1294023284,
            "body": "Parsing html by regex is nasty, error-prone, and generally evil.\n\n\n\nreturns something like\n\n\n\nNow we are dealing with plain strings and should use regex,\n\n\n\nresults in\n\n\n",
            "excerpt": "Parsing html by <span class=\"highlight\">regex</span> is nasty, error-prone, and generally <span class=\"highlight\">evil</span>. &hellip; res = root.xpath(&#39;//span[@class=&quot;price&quot;]/text()&#39;) or []\n\nprint res\n\n\nreturns something like\n\n[&#39;\\xc2\\xa379.98&#39;, &#39;\\xc2\\xa389.98&#39;, &#39;\\xc2\\xa399.98&#39;]\n\n\nNow we are dealing with plain strings and should use <span class=\"highlight\">regex</span> &hellip; ",
            "title": "Get parts of html code as a new string in python"
        },
        {
            "tags": [
                "php",
                "html",
                "regex",
                "string"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 4488636,
            "is_answered": false,
            "question_id": 4488573,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1292840018,
            "creation_date": 1292840018,
            "body": "This is one case where I have to agree with the dreaded regex are evil meme. For straightforward extraction purposes, regular expressions are often suitable. But if you want to process malformed and or nested HTML, it&#39;s not an option without significant fuss.\n\nHence I&#39;d recommend using phpQuery or QueryPath for such occasions. It&#39;s also pretty simple:\n\n\n",
            "excerpt": "This is one case where I have to agree with the dreaded <span class=\"highlight\">regex</span> are <span class=\"highlight\">evil</span> meme. For straightforward extraction purposes, regular expressions are often suitable. &hellip; ",
            "title": "Regex match HTML wrapped around HTML"
        },
        {
            "tags": [
                "javascript",
                "asp.net",
                "validation"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 4445662,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1292381566,
            "creation_date": 1292372938,
            "body": "I&#39;m looking for a way to use custom ASP.NET validators to validate input, without using UpdatePanels, and without a full postback.\n\nThe validators do several things - not just length/regex, but some other non-standard stuff as well.\n\nJavascript is required for our users, so I don&#39;t have to worry about normal users who have javascript turned off.\n\nI see several options, but none are ideal:\n\n1) Suck it up and use UpdatePanels. I&#39;m in the &quot;UpdatePanels are evil&quot; group, so I&#39;d prefer not to do this.\n\n2) Without using validation controls, manually validate the fields by passing the values to a PageMethod static method, via jQuery or any other AJAX framework. This would require client and server coding each time I needed to use a validator.\n\n3) Use jQuery (or any other javascript framework) validation for client validation, then if they somehow get by that, have server-code validation controls for full postback. This would require all of the validation rules to be written in javascript as well as C#. I don&#39;t care about the full failed postback at this point, because the javascript validation would catch real users who weren&#39;t trying to screw me over.\n\nIs there alternative out there for using real CustomValidator controls, with partial postback, C# code only, for validating input without UpdatePanels and without a lot of redundant javascript?\n\nThanks\n",
            "excerpt": "The validators do several things - not just length/<span class=\"highlight\">regex</span>, but some other non-standard stuff as well. &hellip; I&#39;m in the &quot;UpdatePanels are <span class=\"highlight\">evil</span>&quot; group, so I&#39;d prefer not to do this.\n\n2) Without using validation controls, manually validate the fields by passing the values to a PageMethod static method, via jQuery &hellip; ",
            "title": "ASP.NET validation using AJAX without update panels"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 4444489,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1292364068,
            "creation_date": 1292362605,
            "body": "I am trying to analyze a piece of text via JavaScript and, reading up, have learned that parsing HTML with Regex is quite evil. I&#39;d like to remove a more sinister part of my text before I analyze it.\n\nIf I&#39;ve got a chunk of text like the item below, how might I (1) slice everything from  to  and (2) store that text in a new var?\n\n\n",
            "excerpt": "I am trying to analyze a piece of text via JavaScript and, reading up, have learned that parsing HTML with <span class=\"highlight\">Regex</span> is quite <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "How can I remove a chunk of text from a Javascript string?"
        },
        {
            "tags": [
                "c#",
                "regex",
                "linq"
            ],
            "question_score": 3,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 4329097,
            "item_type": "question",
            "score": 3,
            "last_activity_date": 1291237986,
            "creation_date": 1291237282,
            "body": "I&#39;m looking for the most elegant way to parse this. I&#39;m just hitting a wall when it comes to my regex knowledge and maybe a regex is not even the best answer?\nI have three example sentences to give an example of what I want to do. I want to to parse these into four parts. Attacker, attack-type, damage and target.\n\nGandalfs&#39;s heavenly wrath DISMEMBERS you!\nThe Holy Prelate&#39;s slash wounds Frodo.\nYour divine power decimates the evil Warlock!\n\nAttacker:\nOne or several words that are always first and the words can be identified by either being &quot;Your&quot; or end in &#39;s.\nAttack-type: One or several words that can only be identified by that they are between the &quot;attacker&quot; and the &quot;damage&quot;.\nDamage: One or more (rare but exists) words that are unique and limited. I have a list with possible words. {&quot;wounds&quot;, &quot;decimates&quot; etc}. They do not exists anywhere else so no risk that the attacker is named &quot;wounds&quot; or something like that.\nTarget: One or several words that can be identified that they are all the words after the damage.\n",
            "excerpt": "I&#39;m just hitting a wall when it comes to my <span class=\"highlight\">regex</span> knowledge and maybe a <span class=\"highlight\">regex</span> is not even the best answer?\nI have three example sentences to give an example of what I want to do. &hellip; Your divine power decimates the <span class=\"highlight\">evil</span> Warlock!\n\nAttacker:\nOne or several words that are always first and the words can be identified by either being &quot;Your&quot; or end in &#39;s. &hellip; ",
            "title": "How do I parse a log from a game with regex and/or linq?"
        },
        {
            "tags": [
                "regex",
                "pattern-matching"
            ],
            "question_score": 5,
            "is_accepted": false,
            "answer_id": 4219645,
            "is_answered": false,
            "question_id": 4218552,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1290126758,
            "creation_date": 1290114861,
            "body": "\n  Is there a regex to match a string of increasing contiguous numbers, e.g. 123, 56789, etc?\n\n\nBut of course there is, since the answer to all questions beginning, “Is there a (Perl) regex to match…?” is always “Why, certainly there is!” The operative question is always, “What is the Perl regex to match…?”   ☺\n\nShort Answer\n\nThat Perl regular expression is this one:\n\n\n\nIf works by having two different  conditional groups, with recursion on group 1 as the THEN clause of the second of those. That’s what  does. \n\nNifty, eh?  \n\nRecursive patterns like these are awesomely cool and incredibly powerful; it’s up to you to use this power in the service of good, not evil.   ☺\n\nI use a lightly less clever form of it in the program given below. I’ll leave the other one there where it started just so you can see that in Perl  There’s More Than One Way To Do It.  \n\nFull Demo Program\n\nNotice that this works no matter what the string of Unicode digits, including non-ASCII (welcome to the Brave New Millennium) and even way up in the Astral Plane where languages stuck on UCS-2, or sometimes even UTF-16, cannot even think about.\n\nThis output:\n\n\n\nIs produced by this program:\n\n\n\nPS: Some say that the reason that There’s More Than One Way To Do It in Perl is to make up for all those other  languages in which there  are no ways to do it — which is often most of them.   ☻\n",
            "excerpt": "Is there a <span class=\"highlight\">regex</span> to match a string of increasing contiguous numbers, e.g. 123, 56789, etc? &hellip; Recursive patterns like these are awesomely cool and incredibly powerful; it’s up to you to use this power in the service of good, not <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Regular expression to match 12345"
        },
        {
            "tags": [
                "jquery",
                "mysql",
                "django",
                "json",
                "filter"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 4196050,
            "is_answered": false,
            "question_id": 4195268,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1289922866,
            "creation_date": 1289922866,
            "body": "Even though users can&#39;t execute any obvious evil queries (deleting or getting secret data), you may have to worry about someone hitting your database often with complex queries (think multiple joins and some regexes or other selects on non-indexed columns) and these can take a long time to answer.\n\nIt also depends on the size of your database how many complex queries it can handle at one time, but this might make your site slower.\n",
            "excerpt": "Even though users can&#39;t execute any obvious <span class=\"highlight\">evil</span> queries (deleting or getting secret data), you may have to worry about someone hitting your database often with complex queries (think multiple joins and &hellip; ",
            "title": "Escape dangerous code when allowing user MySQL filter creation"
        },
        {
            "tags": [
                "asp.net",
                "jquery",
                "linq-to-sql",
                "sql-injection",
                "validation"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 4119717,
            "is_answered": false,
            "question_id": 636248,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1289164270,
            "creation_date": 1289164270,
            "body": "I too was needing a solution to the paste problem, and I figured out something that will work for me. A person can still use the Edit &gt; Paste in the browsers menu, but Ctrl-V, as well as right click paste is handled. Tested in FF,IE,Opera,Safari,Chrome:\n\n\n",
            "excerpt": "&lt;body&gt;\n    &lt;br&gt;\n    &lt;form id=&quot;myform&quot; action=&quot;&quot;&gt;\n        &lt;input id=&quot;element1&quot; name=&quot;mytext1&quot; type=&quot;text&quot;&gt;\n        &lt;input id=&quot;element2&quot; name=&quot;mytext2&quot; type=&quot;text&quot;&gt;\n    &lt;/form&gt;\n&lt;script&gt;\n    /* removes <span class=\"highlight\">evil</span> &hellip; = new RegExp(&#39;[^a-z0-9&#39; + a.allow + &#39;]&#39;, &#39;ig&#39;);\n\n            $(this)\n            .bind(&#39;keyup blur&#39;, function() {\n                if (this.value.search(<span class=\"highlight\">regex</span>) ! &hellip; ",
            "title": "jQuery AlphaNumericPlugin - Copy Paste Issue"
        },
        {
            "tags": [
                "python",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 3908889,
            "is_answered": false,
            "question_id": 3908727,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1286821323,
            "creation_date": 1286821323,
            "body": "Since I think regex is evil...\n\n\n\n...I advocate simply parsing the filename.\n",
            "excerpt": "Since I think <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span>...\n\ndef return_extension(filename):\n    &#39;&#39;&#39;(This functions assumes that filenames such as `.foo` have extension\n    `foo`.)\n    &#39;&#39;&#39;\n    tokens = filename.split(&#39;.&#39;) &hellip; ",
            "title": "python regex question"
        },
        {
            "tags": [
                "php",
                "parsing",
                "dom"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 3808746,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1285632827,
            "creation_date": 1285631743,
            "body": "\n  Possible Duplicate:\n  Dynamically replace the “src” attributes of all &lt;img&gt; tags  \n\n\n\n\nFunny story: I posted this very question a short time ago, but instead of getting something I could, you know, use, all I got was a lot of dogma about the evils of using regex to parse HTML. So here goes again.\n\nI have some HTML and want to replace the &quot;src&quot; attributes of all the img tags so that they point to copies of the identical images (although with different file names) on another host.\n\nFor instance, given these three tags\n\n\n\nI would like them replaced with\n\n\n\nI am trying to use PHP Simple HTML DOM Parser, but I&#39;m not getting it. \n\n\n\nWhat do I do next?\n",
            "excerpt": "attributes of all &lt;img&gt; tags  \n\n\n\n\nFunny story: I posted this very question a short time ago, but instead of getting something I could, you know, use, all I got was a lot of dogma about the evils of using <span class=\"highlight\">regex</span> &hellip; ",
            "title": "Dynamically replace the “src” attributes of all &lt;img&gt; tags (redux)"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 3747677,
            "is_answered": false,
            "question_id": 3747633,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1284966728,
            "creation_date": 1284934178,
            "body": "Looks simple. When you detect a motive like a number inside curly brackets it should be replaced by the square of the number. If no replacement where done you are finished. If some replacement where done you do it again (because what was just replaced may be now inside curly brackets) and so on.\n\nThe first part (replacement) can be done using regex, the second part can be done either recursively either or iteratively.\n\nBelow some code snippet that should help you understand the details (not the full answer, but not far). The goal of the exercice seems to be to help you understand  parameters.\n\n\n\nAs others proposed full solutions, here his mine:\n\n\n\nIf your are preoccupied with compatibility issues (because hardened php installation may forbid use of /e) just use  instead of  like below (use anonymous function available as of PHP 5.2.3, for older php version, you can use ).\n\n\n\nFor curious readers, as someone else suggested a python version, below is a possible perl equivalent:\n\n\n\nThere security mechanisms in Perl to avoid injections because of evil user inputs different than blindly rejecting all evals. For those interested you can have a look here.\n\nAnd two other shorter python versions, recursive:\n\n\n\nand non recursive\n\n\n",
            "excerpt": "The first part (replacement) can be done using <span class=\"highlight\">regex</span>, the second part can be done either recursively either or iteratively. &hellip; \\n&quot; ;\n} \n\n\nThere security mechanisms in Perl to avoid injections because of <span class=\"highlight\">evil</span> user inputs different than blindly rejecting all evals. For those interested you can have a look here. &hellip; ",
            "title": "Recursive Function"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 3601456,
            "is_answered": false,
            "question_id": 3601374,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1283180508,
            "creation_date": 1283179757,
            "body": "Well, it&#39;s because the function was already defined in a prior function call (That&#39;s the danger in declaring a function inside of another function).  There are a few options.\n\nConditionally declaring the function\n\n\n\nDeclaring an anonymous function:\n\nPHP 5.3+ :\n\n\n\nPHP 5.2+ :\n\n\n\nUsing a class:\n\n\n\nAlso, I&#39;d suggest not using the  modifier for the regex (it&#39;s just not necessary, and it&#39;s basically just , which is typically seen as evil).  You should instead just use :\n\nAssuming  is a valid callback:\n\n\n",
            "excerpt": "(it&#39;s just not necessary, and it&#39;s basically just eval, which is typically seen as <span class=\"highlight\">evil</span>). &hellip; Do stuff here\n}\n$string = preg_replace_callback($<span class=\"highlight\">regex</span>, $callback, $string); &hellip; ",
            "title": "PHP : Function in preg_replace says that the function was already declared"
        },
        {
            "tags": [
                "javascript",
                "xss"
            ],
            "question_score": 10,
            "is_accepted": false,
            "answer_id": 3571109,
            "is_answered": false,
            "question_id": 3571080,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1282780117,
            "creation_date": 1282780117,
            "body": "Instead of checking for evil things like script includes, I would go for regex-based whitelisting of the few commands you expect to be used.  Then involve a human to authorize and add new acceptable commands to the whitelist.\n",
            "excerpt": "Instead of checking for <span class=\"highlight\">evil</span> things like script includes, I would go for <span class=\"highlight\">regex</span>-based whitelisting of the few commands you expect to be used. &hellip; ",
            "title": "Is it possible to sanitize Javascript code?"
        },
        {
            "tags": [
                ".net",
                "xml",
                "datacontractserializer"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 1469395,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1282030081,
            "creation_date": 1253756150,
            "body": "I&#39;m working on getting some objects serialized through an mvc site and returning things via xml, json, etc and I&#39;m looking for the best way to not send the empty elements.\n\nIn a perfect world, simply attaching EmitDefaultValue:=False to DataMembers in a DataContract would suffice, but in some situations, it just doesn&#39;t fly.\n\nA String default is Nothing, but I don&#39;t want to serialize them if they are Nothing or String.Empty. Same goes for lists and collections. I don&#39;t want them to serialize if they&#39;re Nothing or if they&#39;re empty with a count of 0.\n\nThere seems to be a few not so pretty options.\n\n\nCustom  that buffers itself and drops empty elements\nBefore an object is serialized, cycle through the prop, setting Empty to Nothing, Count-0 to Nothing\nXSLT that drops empty elements\nRegex the output string on the way out\n\n\nAll of these seem some what evil, 1 being the least evil but the leave trivial to do. Is there some other tricks out there?\n",
            "excerpt": "Custom XmlTextWriter that buffers itself and drops empty elements\nBefore an object is serialized, cycle through the prop, setting Empty to Nothing, Count-0 to Nothing\nXSLT that drops empty elements\n<span class=\"highlight\">Regex</span> &hellip; the output string on the way out\n\n\nAll of these seem some what <span class=\"highlight\">evil</span>, 1 being the least <span class=\"highlight\">evil</span> but the leave trivial to do. &hellip; ",
            "title": "DataContractSerializer, EmitDefaultValue and empty tags"
        },
        {
            "tags": [
                "java",
                "regex",
                "string",
                "pattern-matching"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 3355051,
            "is_answered": false,
            "question_id": 3354796,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1280334241,
            "creation_date": 1280334241,
            "body": "You are being wilfully evil by trying to parse HTML with Regexes. Don&#39;t.\n\nThat said, you are being extra evil by trying to do everything in one regexp. There is no need for that; it makes your code regex-engine-dependent, unreadable, and quite possibly slow. Instead, simply match tags and then check your first-stage hits again with the trivial regex . Of course, that character string might occur elsewhere in an HTML tag, but see (1)... you have alrady thrown good practice out of the window, so why not at least make things un-obfuscated so everyone can see what you&#39;re doing?\n",
            "excerpt": "You are being wilfully <span class=\"highlight\">evil</span> by trying to parse HTML with Regexes. Don&#39;t.\n\nThat said, you are being extra <span class=\"highlight\">evil</span> by trying to do everything in one regexp. &hellip; Instead, simply match tags and then check your first-stage hits again with the trivial <span class=\"highlight\">regex</span> /target=/. &hellip; ",
            "title": "Regex exclusion behavior"
        },
        {
            "tags": [
                "php",
                "html",
                "eval",
                "custom-tags"
            ],
            "question_score": 5,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 3326446,
            "item_type": "question",
            "score": 5,
            "last_activity_date": 1280000702,
            "creation_date": 1279998197,
            "body": "Overview\n\nAround the end of 2009, I wrote a simple templating system for PHP/HTML to be used in-house by our designers for brochure-ware type websites. The goal of the system is to allow templating in otherwise pure HTML via custom tags that are processed by PHP. For example, a templated page might look like this:\n\n\n\nThe template itself might look something like this:\n\n\n\nBesides the Page and Content/Container tags, there are a few other tags included in the core for stuff like flow control, iterating over a collection, outputting dynamic values, etc. The framework is designed so it&#39;s very easy to add your own set of tags registered under another prefix and namespace.\n\nCustom Tags to PHP\n\nHow do we parse these custom tags? Since the&#39;re no guarantee that the HTML file is well-formed XML, solutions like XSLT/XPATH won&#39;t be reliable. Instead, we use a regex to look for tags with registered prefixes, and replace those with PHP code. The PHP code is a stack-based design... upon encountering an opening tag, an object representing the tag is created pushed onto the stack, and its &quot;initialization function&quot; (if any) runs. Whenever a registered closing tag is encountered, the most recent object is popped off the stack, and its &quot;rendering function&quot; runs.\n\nSo, after the framework replaces the templating tags with PHP, our example page might look something like this (in realty it&#39;s a bit uglier):\n\n\n\nThe good, the bad, and \n\nNow, how to execute our newly-generated PHP code? I can think of a few options here. The easiest is to simply  the string, and that works well enough. However, any programmer will tell you &quot;eval is evil, don&#39;t use it...&quot; so the question is, is there anything more appropriate than  that we can use here? \n\nI&#39;ve considered using a temporary or cached file, using  output streams, etc, but as far as I can see these don&#39;t offer any real advantage over . Caching could speed things up, but in practice all the sites we have on this thing are already blazingly fast, so I see no need to make speed optimizations at this point.\n\nQuestions\n\nFor each of the things on this list: is it a good idea? Can you think of a better alternative?\n\n\nthe whole idea in general (custom tags for html / php)\nconverting tags to php code instead of processing directly\nthe stack-based approach \nthe use of  (or similar)\n\n\nThanks for reading and TIA for any advice. :)\n",
            "excerpt": "Instead, we use a <span class=\"highlight\">regex</span> to look for tags with registered prefixes, and replace those with PHP code. &hellip; However, any programmer will tell you &quot;eval is <span class=\"highlight\">evil</span>, don&#39;t use it...&quot; so the question is, is there anything more appropriate than eval that we can use here? &hellip; ",
            "title": "PHP - templating with custom tags - is this a legit use of eval?"
        },
        {
            "tags": [
                "php",
                "string",
                "if-statement"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 3192041,
            "is_answered": false,
            "question_id": 3191911,
            "item_type": "answer",
            "score": -1,
            "last_activity_date": 1278478931,
            "creation_date": 1278478931,
            "body": "OK, you could use evil Eval. But if your condition is actually as simple as you propose, you could just use a regex to test the condition... No eval necessary.\n",
            "excerpt": "OK, you could use <span class=\"highlight\">evil</span> Eval. But if your condition is actually as simple as you propose, you could just use a <span class=\"highlight\">regex</span> to test the condition... No eval necessary. &hellip; ",
            "title": "PHP - if condition inside string"
        },
        {
            "tags": [
                "php",
                "preg-replace"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 3079882,
            "is_answered": false,
            "question_id": 3079874,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1277049669,
            "creation_date": 1277049669,
            "body": "Escape the slash in the second expression (). If your query becomes more complex, you might have to use a capturing group as well (parentheses).\n\nOh and parsing html with regex is evil. In before the XHTML Regex bandwagon storms this post. :)\n",
            "excerpt": "Oh and parsing html with <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span>. In before the XHTML <span class=\"highlight\">Regex</span> bandwagon storms this post. :) &hellip; ",
            "title": "Php preg_replace"
        },
        {
            "tags": [
                "c#",
                "regex",
                "email",
                "multipart"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 4,
            "is_answered": true,
            "question_id": 3072288,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1276888788,
            "creation_date": 1276886615,
            "body": "Before you guys go telling me that Regex is the epitome of all evil... I already know. If I had more hair it would be ripped out already.\n\nSo onto the question. I have made a parser using regex that strips out the desired parts of an html email. Why on earth would I want to do that? Because I&#39;m still a beginner programmer ok, if you can suggest a better way then by all means... do. The parser works perfectly on normal html parts of an email, however if someone sends me and email with just one attachment (or more)...\n\nALL HELL BREAKS LOOSE!\n\nInstead of getting what a normal html email looks like, I get the plain text version with the html version concatenated onto the end like so:\n\n\n\nSo my question is... How can I separate the html version from the text version using regex (or by easier means)?\n",
            "excerpt": "Before you guys go telling me that <span class=\"highlight\">Regex</span> is the epitome of all <span class=\"highlight\">evil</span>... I already know. If I had more hair it would be ripped out already.\n\nSo onto the question. &hellip; How can I separate the html version from the text version using <span class=\"highlight\">regex</span> (or by easier means)? &hellip; ",
            "title": "Using regex to separate a multipart email"
        },
        {
            "tags": [
                "php",
                "html",
                "arrays"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 2930663,
            "is_answered": false,
            "question_id": 2930532,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1275063799,
            "creation_date": 1275063288,
            "body": "eval() is evil(). And there are some faster options to avoid it in this case.\n\nIf you just want to convert the syntax, then I have a regex:  \n\n\n\nIf your input string not only contains the path, but also an value (attach a dummy value if you must), then you can just use parse_str() to extract the array names into a real PHP array:\n\n\n\nTell something more about your input data.\n\n\n\nOkay, just figured out what you mean. You want to submerge in the $_POST array. Then use step-wise references like so:\n\n\n",
            "excerpt": "eval() is <span class=\"highlight\">evil</span>(). And there are some faster options to avoid it in this case. &hellip; If you just want to convert the syntax, then I have a <span class=\"highlight\">regex</span>:  \n\n  $name = &#39;$&#39; . preg_replace(&quot;/\\[([^\\]]+)\\]/&quot;, &#39;[&quot;$1&quot;]&#39;, $path);\n\n\nIf your input string not only contains the path, but also an value (attach &hellip; ",
            "title": "get the array with html array path"
        },
        {
            "tags": [
                "security",
                "clojure",
                "keyword"
            ],
            "question_score": 8,
            "is_accepted": true,
            "answer_id": 2883569,
            "is_answered": false,
            "question_id": 2869371,
            "item_type": "answer",
            "score": 7,
            "last_activity_date": 1274457067,
            "creation_date": 1274457067,
            "body": "Per http://clojure.org/reader, there are rules for which characters are valid in symbols and keywords.  (For now, alphanumeric characters and , , , , , and .)  You should never create a symbol containing any other characters.  However, right now, these rules are completely unenforced by the compiler.\n\nAt best you could end up with invalid keywords.  At worst you could end up with evil/dangerous ones, as \nMichał Marczyk said.  Keep in mind that  can be used to run arbitrary code at read-time, so you don&#39;t even have to evaluate a string for bad things to happen, you only have to read it.\n\n\n\n(See  for how to disable this behavior, but read-eval is enabled by default.)\n\nI think general rules for sanitizing user input apply here.  Define precisely what you want to allow, and disallow everything else by default.  Maybe allow something like the regex , with possibly other alphanumerics depending on the language you speak.\n",
            "excerpt": "At worst you could end up with <span class=\"highlight\">evil</span>/dangerous ones, as \nMichał Marczyk said. &hellip; Maybe allow something like the <span class=\"highlight\">regex</span> #&quot;[a-zA-Z0-9*+!-_?]+&quot;, with possibly other alphanumerics depending on the language you speak. &hellip; ",
            "title": "Security implications of Clojure keyword creation from user data?"
        },
        {
            "tags": [
                "javascript",
                "html",
                "xhtml",
                "custom-attribute"
            ],
            "question_score": 261,
            "is_accepted": false,
            "answer_id": 2819608,
            "is_answered": false,
            "question_id": 992115,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1273673799,
            "creation_date": 1273673799,
            "body": "We&#39;ve made a web-based editor that understands a subset of HTML - a very strict subset (that understood nearly universally by mail clients).  We need to express things like  in the database, but we can&#39;t have that in the DOM, otherwise the browser where the editor runs, freaks out (or is more likely to freak out than it is likely to freak out over custom attributes).  We wanted drag-and-drop, so putting it purely in the DOM was out, as was jquery&#39;s  (the extra data didn&#39;t get copied properly).  We probably also needed the extra data to come along for the ride in .  In the end we settled on using  during the editing process, and then when we POST it all, we remove  and do a regex search-and-destroy .\n\nAt first the guy writing most of this was the validation-nazi on this issue and tried everything to avoid our custom attribute, but in the end acquiesced when nothing else seemed to work for ALL our requirements.  It helped when he realized that the custom attribute would never appear in an email We did consider encoding our extra data in , but decided that would be the greater of two evils.\n\nPersonally, I prefer to have things clean and passing validators etc., but as a company employee I have to remember that my primary responsibility is advancing the company&#39;s cause (making as much money as quickly as possible), not that of my egotistical desire for technical purity.  Tools should work for us; not us for them.\n",
            "excerpt": "In the end we settled on using &lt;td width=&quot;1234&quot; rs-width=&quot;@INSWIDTH_42@&quot;&gt; during the editing process, and then when we POST it all, we remove width and do a <span class=\"highlight\">regex</span> search-and-destroy s/rs-width=/width=/ &hellip; ",
            "title": "Custom attributes - Yea or nay?"
        },
        {
            "tags": [
                "regex",
                "perl",
                "security"
            ],
            "question_score": 12,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 5,
            "is_answered": true,
            "question_id": 242118,
            "item_type": "question",
            "score": 12,
            "last_activity_date": 1273651677,
            "creation_date": 1225163047,
            "body": "Assuming a Perl script that allows users to specify several text filter expressions in a config file, is there a safe way to let them enter regular expressions as well, without the possibility of unintended side effects or code execution? Without actually parsing the regexes and checking them for problematic constructs, that is. There won&#39;t be any substitution, only matching.\n\nAs an aside, is there a way to test if the specified regex is valid before actually using it? I&#39;d like to issue warnings if something like  was entered.\n\nThanks, Z.\n\n\nEDIT:\nThanks for the very interesting answers. I&#39;ve since found out that the following dangerous constructs will only be evaluated in regexes if the  pragma is used:\n\n\n\nThe default is ; so unless I&#39;m missing something, it should be safe to read regular expressions from a file, with the only check being the eval/catch posted by Axeman. At least I haven&#39;t been able to hide anything evil in them in my tests.\n\nThanks again. Z.\n",
            "excerpt": "As an aside, is there a way to test if the specified <span class=\"highlight\">regex</span> is valid before actually using it? I&#39;d like to issue warnings if something like /foo (bar/ was entered.\n\nThanks, Z. &hellip; At least I haven&#39;t been able to hide anything <span class=\"highlight\">evil</span> in them in my tests.\n\nThanks again. Z. &hellip; ",
            "title": "Is it safe to read regular expressions from a file?"
        },
        {
            "tags": [
                "java"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 2685040,
            "is_answered": false,
            "question_id": 2684517,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1271870062,
            "creation_date": 1271870062,
            "body": "Asides from the regex suggestion (which is a good one), it would seem to make more sense to deal with arrays of characters rather than single-char Strings.\n\nIn particular, the  call (shudder) could/should be replaced by .  This lets you iterate over each individual character, which more clearly indicates your intent, is less prone to bugs as you know you&#39;re treating each character at once, and is more efficient*.  Likewise your valid character sets should also be characters.\n\nYour logic is pretty strangely expressed; you&#39;re not even referencing the specialChars set at all, and the looping logic once you&#39;ve found a match seems odd.  I think this is your bug; the matching seems to be the wrong way round in that if the character matches the first valid char, you set flag to  and continue round the current loop; so it will definitely not match the next valid char and hence you break out of the loop with a  flag.  Always.\n\nI would have thought something like this would be more intuitive:\n\n\n\nThis doesn&#39;t take sequences into account (e.g. the strings &quot;--------**  &quot; and &quot;1&quot; would be valid because all individual characters are valid) but then neither does your original code.  A regex is better because it lets you specify the pattern, I supply the above snippet as an example of a clearer way of iterating through the characters.\n\n*Yes, premature optimization is the root of all evil, but when better, cleaner code also happens to be faster that&#39;s an extra win for free.\n",
            "excerpt": "Asides from the <span class=\"highlight\">regex</span> suggestion (which is a good one), it would seem to make more sense to deal with arrays of characters rather than single-char Strings. &hellip; *Yes, premature optimization is the root of all <span class=\"highlight\">evil</span>, but when better, cleaner code also happens to be faster that&#39;s an extra win for free. &hellip; ",
            "title": "How to validate phone number(US format) in Java?"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 2444576,
            "is_answered": false,
            "question_id": 2444565,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1269332442,
            "creation_date": 1268616360,
            "body": "You could use some regex parsing to check that there&#39;s nothing evil in the string, then just .\n\nWith just simple arithmetic operations, a safe regex would be:\n\n\n\nNote this won&#39;t validate that the expression is balanced in terms of operands and operators (i.e. it would okay &quot;+2*&quot;), but it will stop any weird code injections.\n",
            "excerpt": "You could use some <span class=\"highlight\">regex</span> parsing to check that there&#39;s nothing <span class=\"highlight\">evil</span> in the string, then just eval. &hellip; With just simple arithmetic operations, a safe <span class=\"highlight\">regex</span> would be:\n\ns.match(/^[-*/+0-9]+$/)\n\n\nNote this won&#39;t validate that the expression is balanced in terms of operands and operators (i.e. it would okay &hellip; ",
            "title": "Can I get an arithmetic expression as a string computed with the JavaScript Math object?"
        },
        {
            "tags": [
                "c#",
                "asterisk",
                "telephony"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 2380275,
            "is_answered": false,
            "question_id": 2375885,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1267715193,
            "creation_date": 1267715193,
            "body": "I do have an idea but you will probably not like the answer :)\n\nWe tried to do this and failed so we did something evil :)\n\nWhat we did were to write agi scripts and them call them using the Manager interface and then scrape the command line.\n\nStuff like core show channels concise etc, its ikky but it works.. we used regex to parse the string output and then grabbed the info from there, the only issue with doing stuff like that is that you have to watch every time you patch as the output from the command line tends to change patch to patch.\n\nIf you do discover a way doing this using the c# api and not using agi i&#39;d be very interested but we just couldn&#39;t do what we wanted with the api without resorting to agi scripts in the end.\n",
            "excerpt": "I do have an idea but you will probably not like the answer :)\n\nWe tried to do this and failed so we did something <span class=\"highlight\">evil</span> :)\n\nWhat we did were to write agi scripts and them call them using the Manager interface &hellip; Stuff like core show channels concise etc, its ikky but it works.. we used <span class=\"highlight\">regex</span> to parse the string output and then grabbed the info from there, the only issue with doing stuff like that is that you have &hellip; ",
            "title": "Detect incoming call with Asterisk and who the call is going to"
        },
        {
            "tags": [
                "php",
                "javascript"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 2146181,
            "is_answered": false,
            "question_id": 2145847,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1264589458,
            "creation_date": 1264589458,
            "body": "Bit of a mine-field as MS word counts are considered wrong and unreliable by profesionals who depend on word counts -- journalists, translators, and, lawers who are often involved in legal procedures where motions and submisions must be less than a specific number fo words.\n\nHaving said that this article-\nhttp://dotnetperls.com/word-count\n\ndescribes a pretty good regex algorithm implemented in C# -- but should be faily easy to transalate into php.\n\nI think his small inaccuracies are based on two factors -- MS Word misses out words not conatined in &quot;regular paragraphs&quot; so footnotes, text box and table wrapped words may or may not be counted. Also I think the EVIL smart quotes feature messing with hypens may affect the results. So it may be worth changing all the &#39;el-dash&#39; and &#39;em-dash&#39; characters back to the normal minus sign.    \n",
            "excerpt": "Having said that this article-\nhttp://dotnetperls.com/word-count\n\ndescribes a pretty good <span class=\"highlight\">regex</span> algorithm implemented in C# -- but should be faily easy to transalate into php. &hellip; Also I think the <span class=\"highlight\">EVIL</span> smart quotes feature messing with hypens may affect the results. So it may be worth changing all the &#39;el-dash&#39; and &#39;em-dash&#39; characters back to the normal minus sign. &hellip; ",
            "title": "Count words like Microsoft Word does"
        },
        {
            "tags": [
                "python",
                "python-exec"
            ],
            "question_score": 46,
            "is_accepted": false,
            "answer_id": 1933723,
            "is_answered": false,
            "question_id": 1933451,
            "item_type": "answer",
            "score": 17,
            "last_activity_date": 1261246830,
            "creation_date": 1261246830,
            "body": "When you need exec and eval, yeah, you really do need them.\n\nBut, the majority of the in-the-wild usage of these functions (and the similar constructs in other scripting languages) is totally inappropriate and could be replaced with other simpler constructs that are faster, more secure and have fewer bugs.\n\nYou can, with proper escaping and filtering, use exec and eval safely. But the kind of coder who goes straight for exec/eval to solve a problem (because they don&#39;t understand the other facilities the language makes available) isn&#39;t the kind of coder that&#39;s going to be able to get that processing right; it&#39;s going to be someone who doesn&#39;t understand string processing and just blindly concatenates substrings, resulting in fragile insecure code.\n\nIt&#39;s the Lure Of Strings. Throwing string segments around looks easy and fools na&#239;ve coders into thinking they understand what they&#39;re doing. But experience shows the results are almost always wrong in some corner (or not-so-corner) case, often with potential security implications. This is why we say eval is evil. This is why we say regex-for-HTML is evil. This is why we push SQL parameterisation. Yes, you can get all these things right with manual string processing... but unless you already understand why we say those things, chances are you won&#39;t.\n",
            "excerpt": "This is why we say eval is <span class=\"highlight\">evil</span>. This is why we say <span class=\"highlight\">regex</span>-for-HTML is <span class=\"highlight\">evil</span>. This is why we push SQL parameterisation. &hellip; ",
            "title": "Why should exec() and eval() be avoided?"
        },
        {
            "tags": [
                "c#",
                "string"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 1564322,
            "is_answered": false,
            "question_id": 1564296,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1255498139,
            "creation_date": 1255496739,
            "body": "Since you give an xml example, just use an xml parser:\n\n\n\n\n\nxml is not a simple text format, and  isn&#39;t really a very good fit; using an appropriate tool will protect you from a range of evils... for example, the following is identical as xml:\n\n\n\nIt also means that when the requirement changes, you have a simple tweak to make to the code, rather than trying to unpick a regex and put it back together again (which can be tricky if you are access a non-trivial node). Equally, xpath might be an option; so in your data the xpath:\n\n\n\nis all you need.\n\nIf you haven&#39;t got .NET 3.5:\n\n\n",
            "excerpt": "Since you give an xml example, just use an xml parser:\n\n\n\nstring s = (string) XElement.Parse(xml).Attribute(&quot;content&quot;);\n\n\nxml is not a simple text format, and <span class=\"highlight\">Regex</span> isn&#39;t really a very good fit; using &hellip; description&quot;\n    content=\n        &#39;THIS IS THE TEXT I WANT TO EXTRACT&#39;\n/&gt;\n\n\nIt also means that when the requirement changes, you have a simple tweak to make to the code, rather than trying to unpick a <span class=\"highlight\">regex</span> &hellip; ",
            "title": "Using String methods instead of Regex"
        },
        {
            "tags": [
                "jquery",
                "events",
                "focus",
                "blur",
                "setting"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 1560340,
            "is_answered": false,
            "question_id": 1560251,
            "item_type": "answer",
            "score": 6,
            "last_activity_date": 1255441248,
            "creation_date": 1255441248,
            "body": "Using regular expressions in Javascript to prevent SQL injection is the mother of all (or at least most) evil.  DO NOT DO THIS!!!  Instead, use parameters in your server side code.  If you don&#39;t know how, ask us.  If you try to prevent SQL Injection the way you&#39;re doing it it will not work and you are liable to lose data, or worse.  All your enemy needs to do is disable Javascript (or craft his own HTTP request) and your filter will be useless.  In addition, I don&#39;t think it&#39;s possible to fully block SQL injection with a single regex.\n\n\n\nTo answer the question, try writing  or  in the handler.  However, it won&#39;t work perfectly; it is not possible to fully control focus like this in Javascript.\n",
            "excerpt": "Using regular expressions in Javascript to prevent SQL injection is the mother of all (or at least most) <span class=\"highlight\">evil</span>.  DO NOT DO THIS!!!  Instead, use parameters in your server side code. &hellip; In addition, I don&#39;t think it&#39;s possible to fully block SQL injection with a single <span class=\"highlight\">regex</span>.\n\n\n\nTo answer the question, try writing return false or event.preventDefault() in the handler. &hellip; ",
            "title": "Stopping the jQuery blur event within the blur function"
        },
        {
            "tags": [
                "c#"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 1427176,
            "is_answered": false,
            "question_id": 1427149,
            "item_type": "answer",
            "score": 13,
            "last_activity_date": 1253021912,
            "creation_date": 1253021230,
            "body": "To say it with a Regex...\n\n\n\nor if you need the word you as stand-alone\n\n\n\nEdit: Replaced \\s+you\\s+ with (?i)\\byou\\b for the sake of correctness\n",
            "excerpt": "To say it with a <span class=\"highlight\">Regex</span>...\n\nConsole.WriteLine((new <span class=\"highlight\">Regex</span>(@&quot;(? &hellip; i)you&quot;)).Matches(&quot;dont run if you cant hide, or you will be broken in two strings, your a <span class=\"highlight\">evil</span> man&quot;).Count)\n\n\nor if you need the word you as stand-alone\n\nConsole.WriteLine((new <span class=\"highlight\">Regex</span>(@&quot;(? &hellip; ",
            "title": "count a specifc word in a text file in C#"
        },
        {
            "tags": [
                "linq-to-sql"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 1418013,
            "is_answered": false,
            "question_id": 1417961,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1252856135,
            "creation_date": 1252856135,
            "body": "This is probably a problem with your data architecture.  This is why we keep the data clean in the tables all of the time -- so you don&#39;t have to do evil things like this.\n\nYou have a couple of options here:\n\n\nClean up your actual data and add protections on the data layer to keep your phone numbers pure.\nCreate a view or computed column in your data which cleans up the phone number on the data layer, then map to that clean phone number and query off of that column instead.\nCall ToList() on a subset of your rows before running your regex-based query and then use Linq to Objects to run the regex against those rows.  This may be prohibitive if you can&#39;t narrow down your rows enough before using Linq to Objects.\n\n",
            "excerpt": "This is why we keep the data clean in the tables all of the time -- so you don&#39;t have to do <span class=\"highlight\">evil</span> things like this. &hellip; Call ToList() on a subset of your rows before running your <span class=\"highlight\">regex</span>-based query and then use Linq to Objects to run the <span class=\"highlight\">regex</span> against those rows. &hellip; ",
            "title": "LINQ Dynamic WHERE but Clean Special Chars first"
        },
        {
            "tags": [
                "java",
                "regex",
                "string",
                "rawstring"
            ],
            "question_score": 92,
            "is_accepted": false,
            "answer_id": 1257633,
            "is_answered": false,
            "question_id": 1256667,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1249943980,
            "creation_date": 1249943980,
            "body": "I personally consider regex strings data and not code, so I don&#39;t like them in my code--but I realize that&#39;s impractical and unpopular (Yes, I realize it, you don&#39;t have to yell at me).\n\nGiven that there is no native way to do this, I can come up with two possibilities (well, three but the third is, umm, unnatural).\n\nSo my personal preference would be to just parse a file into strings.  You could name each entry in the file and load them all into a hash table for easy access from your code.\n\nSecond choice, create a file that will be pre-processed into a java interface; it could escape the regex as it does so.  Personally I hate code generation, but if the java file is 100% never human edited, it&#39;s not too bad (the real evil is generated files that you are expected to edit!)\n\nThird (tricky and probably a bad idea): You might be able to create a custom doclet that will extract strings from your comments into a text file or a header file at compile time, then use one of the other two methods above.  This keeps your strings in the same file in which they are being used.  This could be really hard to do correctly, and the penalties of failure are extreme, so I wouldn&#39;t even consider it unless I had an overwhelming need and some pretty impressive talent.\n\nI only suggest this because comments are free-form and things within a &quot;pre&quot; tag are pretty safe from formatters and other system uglies.  The doclet could extract this before printing the javadocs, and could even add some of the generated javadocs indicating your use of regex strings.\n\nBefore downvoting and telling me this is a stupid idea--I KNOW, I just thought I&#39;d suggest it because it&#39;s interesting, but my preference as I stated above is a simple text file...\n",
            "excerpt": "Second choice, create a file that will be pre-processed into a java interface; it could escape the <span class=\"highlight\">regex</span> as it does so. &hellip; Personally I hate code generation, but if the java file is 100% never human edited, it&#39;s not too bad (the real <span class=\"highlight\">evil</span> is generated files that you are expected to edit!) &hellip; ",
            "title": "Raw Strings in Java - for regex in particular. Multiline strings"
        },
        {
            "tags": [
                "database",
                "linq-to-sql",
                "validation"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 1093668,
            "is_answered": false,
            "question_id": 1093595,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1246987755,
            "creation_date": 1246987755,
            "body": "IMHO, validation is best done at multiple levels. I do not see a problem with performing a different type of validation in the UI layer, Business logic layer and lastly the Database itself.\n\nIn my mind, the ideal scenario would be one where the UI layer validates user submitted data for possible malicious input, illegal values, Regex pattern matches and required fields. The second layer would validate the type of data and whether it meshes together to form concrete updatable objects that can be propagated to the data store. The database would impose basic constraints such as the one you mentioned for all operations.\n\nAlso, the level of validation required would decrease with each level... starting from rigorous in the UI layer to basic in the database layer.\n\nI believe in one rule - &quot;All input is evil until proven otherwise.&quot; \n",
            "excerpt": "In my mind, the ideal scenario would be one where the UI layer validates user submitted data for possible malicious input, illegal values, <span class=\"highlight\">Regex</span> pattern matches and required fields. &hellip; I believe in one rule - &quot;All input is <span class=\"highlight\">evil</span> until proven otherwise.&quot; &hellip; ",
            "title": "Validation: do it in the class, or in the database?"
        },
        {
            "tags": [
                "parsing",
                "legacy-code"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 473076,
            "is_answered": false,
            "question_id": 473027,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1232727850,
            "creation_date": 1232720962,
            "body": "I would select from information_schema.tables and save the results to file to build a table list and then use a bat file or command line regex tool to use the table list as a source for comparisons against the files in the source code directory. You could output what files had a hit, and what table names were hit (what line the hit was on if you&#39;re interested). I&#39;m not a grep whiz, but I think that would be the right sort of tool to use. \n\nEDIT\nDepending on how the data access was handled, you might want to expand the search list to include stored procs from information_schema.routines\n\nEdit 2 Approach using finstr, a cursor, and maybe the dark side\n\nPlease note that while the below should work, if pointed at the wrong directory, it could cause havoc. Also, it will only work if the source code is accessible from the server and xp_cmdshell is enabled. Maybe the whole idea is evil, I don&#39;t know.\n\n\n",
            "excerpt": "I would select from information_schema.tables and save the results to file to build a table list and then use a bat file or command line <span class=\"highlight\">regex</span> tool to use the table list as a source for comparisons against &hellip; Maybe the whole idea is <span class=\"highlight\">evil</span>, I don&#39;t know. &hellip; ",
            "title": "Search a codebase for references to table names"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 76947953,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1692647902,
            "creation_date": 1692643259,
            "body": "Starting with Java 9, the regex engine began supporting variable-length lookbehind. I guess that&#39;s great and all if you want it, but that&#39;s a really good way to make a regex that is vulnerable to ReDOS attacks, or just being accidentally ReDOSsed by ordinary user input.\nFor reasons that are beyond the scope of this question, I am unable to police the regexes that my application is using to the extent that I&#39;d like. We&#39;ve had problems with regexes that wouldn&#39;t even have compiled in ancient versions of Java, but instead are causing application hangs (when a clean failure would have been much preferred).\nI&#39;m guessing the answer is &quot;no&quot;, but is there any way to get like legacy behavior on the Java regex engine, or to otherwise enable stricter checking, so that pathological regexes like this won&#39;t even be compiled by the engine? It would be much better to just fail these regexes, than for it to work most of the time but then if you give it just the right input it hangs.\nEdit to add: So there&#39;s stuff like this open source project that would maybe be something to look at if I decide I need to analyze any new regexes to make sure they aren&#39;t Evil. It would be nice if there was just a &quot;strict&quot; setting on the regex engine or something tho...\n",
            "excerpt": "I guess that&#39;s great <span class=\"highlight\">and</span> all if you want it, but that&#39;s a really good way to make a <span class=\"highlight\">regex</span> that is vulnerable to ReDOS attacks, or just being accidentally ReDOSsed by ordinary user input. &hellip; Edit to add: So there&#39;s stuff like this open source project that would maybe be something to look at if I decide I need to analyze any new regexes to make sure they aren&#39;t <span class=\"highlight\">Evil</span>. &hellip; ",
            "title": "Can Java&#39;s regex engine be made to forbid variable length lookbehind?"
        },
        {
            "tags": [
                "perl",
                "for-loop",
                "numbers",
                "primes"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 33919970,
            "is_answered": false,
            "question_id": 27134252,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1691198495,
            "creation_date": 1448464224,
            "body": "One of Abigail&#39;s .sigs has a regex (!) that determines whether a number is prime:\n\nThat takes about 15 seconds on my system. Of course, as evil-otto points out, there are faster solutions.\nThere is a very good explanation of how the regex works on Neil Kandalgaonkar&#39;s excellent blog1. The workings of Abigail&#39;s marvelous brain are left unexplained.\n\n1). See: Abigail&#39;s regex to test for prime numbers.\nLink uses WayBack which is required. Original reference:\nhttp://neilk.net/blog/2000/06/01/abigails-regex-to-test-for-prime-numbers/\n",
            "excerpt": "Of course, as <span class=\"highlight\">evil</span>-otto points out, there are faster solutions.\nThere is a very good explanation of how the <span class=\"highlight\">regex</span> works on Neil Kandalgaonkar&#39;s excellent blog1. &hellip; See: Abigail&#39;s <span class=\"highlight\">regex</span> to test for prime numbers.\nLink uses WayBack which is required. Original reference:\nhttp://neilk.net/blog/2000/06/01/abigails-<span class=\"highlight\">regex</span>-to-test-for-prime-numbers/ &hellip; ",
            "title": "Prime numbers in perl"
        },
        {
            "tags": [
                "linux",
                "bash",
                "posix"
            ],
            "question_score": 840,
            "is_accepted": false,
            "answer_id": 30515012,
            "is_answered": false,
            "question_id": 8987037,
            "item_type": "answer",
            "score": 262,
            "last_activity_date": 1684502850,
            "creation_date": 1432839590,
            "body": "Kill all processes matching the string &quot;myProcessName&quot;:\n\nSource: http://www.commandlinefu.com/commands/view/1138/ps-ef-grep-process-grep-v-grep-awk-print-2-xargs-kill-9\nWhy &quot;ps pipe kill&quot; from terminal is evil:\nThe Piping of integers you scraped from  to  is bad, and you should feel bad, doubly so if you&#39;re root or a user with elevated privileges, because it doesn&#39;t give your process a chance to cleanly shut down socket connections, clean up temp files, inform its children that it is going away or reset its terminal characteristics.\nInstead send 15, and wait a second or two, and if that doesn&#39;t\nwork, send 2, and if that doesn&#39;t work, send 1.  If that doesn&#39;t,\nREMOVE THE BINARY because the program is badly behaved.\nAs a general principle we don&#39;t use Unix Railgun to trim the hedges.  https://porkmail.org/era/unix/award.html#kill\nExplanation of above command:\n produces a list of process id&#39;s on the computer visible to this user.  The pipe grep filters that down for rows containing that string.  The  says don&#39;t match on the process itself doing the grepping.  The pipe awk print says split the rows on default delimiter whitespace and filter to the second column which is our process id.  The pipe xargs spins up a new process to send all those pid&#39;s to , ending them all.\nWhy  is bad, dangerous, ugly and hackish:\n\nThere&#39;s a small possibility that you will accidentally end the operating system or cause undefined behavior in an unrelated process, leading to whole system instability because  lists thousands of processes, and you can&#39;t be sure some 3rd party process shares your process name, or that in the time between read and execute kill -9, the processid had changed to something else, and now you&#39;ve ended some random necessary process unrelated to yours.\n\nIf the code being force-ended is doing any database ops or secure transactions with low probability race conditions, some fraction of a percent of the time, atomicity of that transaction will be wrecked, producing undefined behavior.  kill -9 takes no prisoners.  If your code is sensitive to this, try replacing the  part with a transmitted flag that requests a graceful shutdown, and only if that request is denied, last-resort to \n\n\nBut, if you understand all the risks and control for them with unique names, and you&#39;re ok with a few dropped transactions or occasional corruption, then 99.9% of the time yer gonna be fine. If there&#39;s a problem, reboot the computer, make sure there aren&#39;t any process collisions.  It&#39;s because of code like this that makes the tech support script: &quot;Have you tried restarting your computer&quot; a level 5 meme.  &quot;A Rogue Robot scraped  to find integers and sent those to , so reboot the computer to clear the problem.\nWhy not just use  which is easier?\nThe above gives me manual control because , , ,  and  are multi-platform standard.  It gives full control to which regex engine to use, which part of the process name to match, handling case sensitivity and exception management.\n\nDoes the same thing for me, but see  has different behaviors, flags and regex engines between variants of Linux, Mac, Zune-Bash and my opensource router.  So yes, put your 35000 Watt Unix-Railgun into the capable hands of pkill to trim the hedges.  See what happens.\nGrepping once\nYou can substitute the  with square brackets around the first letter of the command to kill, which does the same thing and prevents grep from grepping itself, for example:\n\nWhy that works:\nhttps://askubuntu.com/questions/153419/how-does-this-tricky-bracket-expression-in-grep-work\n",
            "excerpt": "It gives full control to which <span class=\"highlight\">regex</span> engine to use, which part of the process name to match, handling case sensitivity <span class=\"highlight\">and</span> exception management.\npkill -f -e -c myProcessName\n\nDoes the same thing for me &hellip; , but see man pkill has different behaviors, flags <span class=\"highlight\">and</span> <span class=\"highlight\">regex</span> engines between variants of Linux, Mac, Zune-Bash <span class=\"highlight\">and</span> my opensource router. &hellip; ",
            "title": "How to kill all processes with a given partial name?"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 16,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 288800,
            "item_type": "question",
            "score": 16,
            "last_activity_date": 1682102164,
            "creation_date": 1226620185,
            "body": "I have this naive regex &quot;&lt;([\\s]|[^&lt;])+?&gt;&quot; (excluding the quotation marks). It seems so\nstraightforward but it is indeed evil when it works against the below HTML text. It sends the Java regular expression engine to an infinite loop.\nI have another regex (&quot;&lt;.+?&gt;&quot;), which does somewhat the same thing, but it doesn&#39;t kill anything. Do you know why this happens?\n\nit even keeps looping with an online Java regex tool (such as www.fileformat.info/tool/regex.htm) or a utility like RegexBuddy.\n",
            "excerpt": "I have this naive <span class=\"highlight\">regex</span> &quot;&lt;([\\s]|[^&lt;])+?&gt;&quot; (excluding the quotation marks). It seems so\nstraightforward but it is indeed <span class=\"highlight\">evil</span> when it works against the below HTML text. &hellip; I have another <span class=\"highlight\">regex</span> (&quot;&lt;.+?&gt;&quot;), which does somewhat the same thing, but it doesn&#39;t kill anything. Do you know why this happens? &hellip; ",
            "title": "Why does this regular expression kill the Java regex engine?"
        },
        {
            "tags": [
                "html",
                "email",
                "jvm",
                "jsoup",
                "conditional-comments"
            ],
            "question_score": 4,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 54694473,
            "item_type": "question",
            "score": 4,
            "last_activity_date": 1679529462,
            "creation_date": 1550160068,
            "body": "I know how terribly wrong it is to (attempt to) parse HTML with Regex, which is why I&#39;m trying really, really hard to avoid it.\n\nI have an app that generates HTML emails. We&#39;re using a big fancy WYSIWYG drop in email editor that takes care of generating responsive emails and also generates the abysmal markup for clients like MS Outlook. It does that last bit using conditional comments, which look something like the following. Note that the  has an  attribute, and wraps the  tag that non-mso clients will see.\n\n\n\nOf course, this is just one of dozens (possibly hundreds?) of possible formattings that we need to work with.\n\nPrior to the introduction of this editor, we asked our customers to generate their own HTML emails with a more rudimentary WYSIWYG HMTL editor; but it was incumbent on them to make responsive templates and test their content in various clients. From their perspective, this new editor is a huge win.\n\nAs we&#39;re sending emails, it&#39;s important to track the link clicks via a tracking link that redirects through to the originally-intended link.\n\nTo date, we&#39;ve used jSoup to parse the email content, looking for any anchor tags and replace their href attribute contents. Because regex html parsing is evil, right?\n\nConditional comments have thrown a wrench in those gears.\n\nBecause they are comments, jSoup ignores them, and clicks from MS Outlook and other clients that handle the  markup haven&#39;t been transformed to go through our link tracker, so the clicks don&#39;t get tracked. This is a problem for us.\n\n\n\nFirst idea: replace the conditional comments with a custom tag\n\nAt first I was hopeful to pre-process the message body before letting jSoup have it. I would replace  with  and  with . This was simple enough to do, even for complex forms of the conditions inside the comments. I used a regex to make some simple replacements:\n\n\n became \n became  \netc\n\n\nNotice that I url-encoded the original comment in its entirety. url-encoding it made sure that I could easily use regex to find my marker comments and transform them back (so that I didn&#39;t have to worry about  inside the &quot;orig&quot; attribute content...\n\nThis started to break down when I realized there were multiple possible ways the comments could be closed. I spent a little bit of time working on a similar approach for the closing tags.\n\n\n became \nsame approach for  and \n\n\nI don&#39;t know if you can have attributes on a closing tag. I never tested it because I had another realization before I got to that point. The realization was that using  wasn&#39;t going to produce desirable output from jSoup because the resulting INPUT would often look like:\n\n\n\nThis is not tidy HTML and jSoup will try to correct it, changing the order of tags to make something that it thinks is more correct. When I realized that, I stopped what I was doing and started thinking about the problem again.\n\n\n\nSecond idea: the same thing, but with comments\n\nIf the (new) problem was that jSoup didn&#39;t like my tag nesting, what if I could expose the HTML from inside the conditional comments as if it weren&#39;t commented out, but keep some markers in as comments that I can later transform back into comments? The goal was to aim at making this:\n\n\n\nThis should parse as fairly tidy HTML, right? So I made the code modifications and gave it a shot.\n\nSadly, the documents that we&#39;re working with are far more complex than the simple example I started from above. Here&#39;s the first few lines of an actual sample document:\n\n\n\nAfter the comment conversion, we&#39;ve effectively dropped an  block into the  block, of which jSoup is decidedly not a fan. This is what I get back for the above input, after converting the conditional comments into my plain marked comments, parsing with jSoup, and then converting my markers back to their conditional comments:\n\n\n\nThere are some big problems here. The  block gets basically immediately closed. The  tag moves up to before the  block, and everything that came after it moved down into the body. This isn&#39;t going to work.\n\n\n\nNow what?\n\nI feel like we&#39;re basically out of options. \n\n\nDo nothing and just don&#39;t count the clicks from MS Outlook/etc clients. In some cases we might be able to detect a click anyway via a downstream conversion on that email. (Even if we don&#39;t have record of you clicking the link, if you made a payment then we know you got there...)\nWe could let our mail provider do the link tracking for us (experimentation required; not positive they would track the  links either). Historically we started this system with a provider that didn&#39;t offer link tracking so we had to roll our own. Current provider offers it, but we&#39;ve got years of existing code and processes that would have to be updated to support this change. We&#39;re keeping it in our back pocket if we can&#39;t figure something else out, but the prospect of changing ships mid-stream is ... not appealing.\nOr lastly... maybe... regex? (/me ducks) We could let jSoup do its thing for the normal HTML, and then use regex to replace any links that remain. This becomes a game of whack-a-mole with current and future markup. What might we run into aside from a  in the future? &#175;\\_(ツ)_/&#175; And we won&#39;t know what we&#39;re missing without regular manual reviews.\n\n\nUnless there&#39;s another option that we haven&#39;t explored yet. So... are we stuck with nothing/regex?\n\nWe&#39;re on the JVM so anything Java is within reach, I guess.\n",
            "excerpt": "To date, we&#39;ve used jSoup to parse the email content, looking for any anchor tags <span class=\"highlight\">and</span> replace their href attribute contents. Because <span class=\"highlight\">regex</span> html parsing is <span class=\"highlight\">evil</span>, right? &hellip; Or lastly... maybe... <span class=\"highlight\">regex</span>? (/me ducks) We could let jSoup do its thing for the normal HTML, <span class=\"highlight\">and</span> then use <span class=\"highlight\">regex</span> to replace any links that remain. &hellip; ",
            "title": "Parsing HTML Email content inside of conditional comments (trying to avoid regex!)"
        },
        {
            "tags": [
                "python",
                "regex",
                "replace"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 75746343,
            "is_answered": false,
            "question_id": 75746210,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1678891654,
            "creation_date": 1678891654,
            "body": "Disclaimer: It is generally evil and a menace to use regex to clean up XML content, which task should be delegated to a proper parser.  Given that you have no nested tags, you may try using the following replacement logic:\n\nThis prints:\n\nThe regex pattern used here matches:\n\n An XML tag\n OR\n any intermediate content, up to, but not including,\nthe next XML tag or the end of the string\n\nWe do a lambda replacement, which selectively strips spaces only from the intermediate content, but not from the tags themselves.\n",
            "excerpt": "Disclaimer: It is generally <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> a menace to use <span class=\"highlight\">regex</span> to clean up XML content, which task should be delegated to a proper parser. &hellip; &gt;|$)&#39;, lambda m: m.group().replace(&#39; &#39;, &#39;&#39;) if not m.group().startswith(&#39;&lt;&#39;) <span class=\"highlight\">and</span> not m.group().endswith(&#39;&gt;&#39;) else m.group(), inp)\nprint(output)\n\nThis prints:\n&lt;?xml version=&quot;1.0&quot;? &hellip; ",
            "title": "Python: Using sub() tu replace string matched by regex"
        },
        {
            "tags": [
                "perl"
            ],
            "question_score": 13,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 4,
            "is_answered": true,
            "question_id": 167238,
            "item_type": "question",
            "score": 13,
            "last_activity_date": 1677726740,
            "creation_date": 1223045253,
            "body": "The question is not how to tell in a oneliner. If you&#39;re writing the code in a one-liner, you know you are. But how does a module, included by  know that it all started from a oneliner. \n\nThis is mine. It&#39;s non-portable though and relies on UNIX standard commands (although, it can be made portable more or less.)\n\n\n\nAnd if you have a snazzier regex, feel free to improve upon mine. \n\n\n\nA couple of people have asked why I would want to do this. brian correctly guessed that I wanted to change export behavior based on whether it&#39;s a script, which we can assume has had some amount of design, or whether it&#39;s a oneliner where the user is trying to do as much as possible in a single command line. \n\nThis sounds bad, because there&#39;s this credo that exporters should respect other packages--sometimes known as &quot; is EVIL!&quot; But it seems to me that it&#39;s a foolish consistency when applied to oneliners. After all perl itself goes out of it&#39;s way to violate the structure of its language and give you easy loops if you ask for them on the command line, I simply want to extend that idea for my operational/business domain. I even want to apply source filters (gasp!) if it helps. \n\nBut this question also suggests that I might want to be a good citizen of Perl as well, because I only to break the community guidelines in certain cases. It is quite awesome to be able to create major business-level actions just by changing the command line in a batch scheduler rather than writing a whole new module. The test cycle is much compressed. \n",
            "excerpt": "\\s+-[^\\P{IsLower}e]*e[^\\P{IsLower}e]*\\s+/m\n    ;\n\n\n<span class=\"highlight\">And</span> if you have a snazzier <span class=\"highlight\">regex</span>, feel free to improve upon mine. &hellip; This sounds bad, because there&#39;s this credo that exporters should respect other packages--sometimes known as &quot;@EXPORT is <span class=\"highlight\">EVIL</span>!&quot; &hellip; ",
            "title": "What&#39;s the best way to tell if your perl&#39;s running on -e?"
        },
        {
            "tags": [
                "python",
                "web-scraping",
                "cloudflare"
            ],
            "question_score": 16,
            "is_accepted": false,
            "answer_id": 75312785,
            "is_answered": false,
            "question_id": 65604551,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1675266696,
            "creation_date": 1675266696,
            "body": "I can suggest such workflow to &quot;try&quot; to avoid Cloudflare WAF/bot mitigation:\n\ndon&#39;t cycle user agents, proxies or weird tunnels to surf\ndon&#39;t use fixed ip addresses, better leased lines like xDSL, home links and 4G/LTE\ntry to appear as mobile instead of a desktop/tablet\ntry to reproduce pointer movements like never before AKA record your mouse moves and migrate them 1:1 while scraping (yes u need JS enabled and some headless browser able to make up as &quot;common&quot; one)\ndon&#39;t cycle against different Cloudflare protected entities otherwise the attacker ip will be greylisted in a minute (AKA build your own targets blacklist, never touch such entities or you will go in the CF blacklist flawlessy)\ntry to reproduce a real life navigation in all aspects, including errors, waitings and more\ncheck your used ip after any scrape against popular blacklists otherwise bad errors will shortly appears (crowdsec is a good starting point)\nthe usual scrape is a googlebot scrape, a single regex WAF rule on CLoudflare will block 99,99% of the tries then.. avoid to fake as google and try to be LESS evil instead (ex: asking webmasters for APIs or data export if any).\n\nSource: I use Cloudflare with hundreds of domains and thousands of records (Enterprise) from the beginning of the company.\nThat way you will be closer to the point (and you will help them increasing  the overall security).\n",
            "excerpt": "more\ncheck your used ip after any scrape against popular blacklists otherwise bad errors will shortly appears (crowdsec is a good starting point)\nthe usual scrape is a googlebot scrape, a single <span class=\"highlight\">regex</span> &hellip; WAF rule on CLoudflare will block 99,99% of the tries then.. avoid to fake as google <span class=\"highlight\">and</span> try to be LESS <span class=\"highlight\">evil</span> instead (ex: asking webmasters for APIs or data export if any). &hellip; ",
            "title": "Can&#39;t bypass cloudflare with python cloudscraper"
        },
        {
            "tags": [
                "php",
                "xml"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 74974224,
            "is_answered": false,
            "question_id": 74971941,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1672583947,
            "creation_date": 1672570651,
            "body": " is a commonly cited expression - a  to parse XML is not, in my opinion, the  The task of presenting the contents of an XML file in table form can best be accomplished with XSL Transformations\nGiven the original XML, saved as  a simple XSL stylesheet can be used to generate the entire HTML Table with the content drawn directly from the XML.\ncatalog.xsl\n\nTo use the XSL within PHP:\n\nThis yields:\n\nTo display the  and the content - again using XSLT the  file needs to be modified slightly. Within the  loop you also want to add the tagName like this perhaps:\n\nThis modification yields:\n\n\nTo process the XML with DOMDocument only and store the tag&amp;value as a string and the value also as string you could do like this:\n\nWhich yields output like this:\n\n",
            "excerpt": "&quot;The Right tool for the right job&quot; is a commonly cited expression - a <span class=\"highlight\">Regex</span> to parse XML is not, in my opinion, the &quot;Right Tool!&quot; &hellip; &lt;/description&gt;\n            [11] =&gt; A former architect battles corporate zombies, \n      an <span class=\"highlight\">evil</span> sorceress, <span class=\"highlight\">and</span> her own childhood to become queen \n      of the world.\n        )\n\n    [bk103] =&gt; Array &hellip; ",
            "title": "How to take and display the content and tags of the xml file?"
        },
        {
            "tags": [
                "html",
                "nginx"
            ],
            "question_score": 44,
            "is_accepted": true,
            "answer_id": 38238001,
            "is_answered": false,
            "question_id": 38228393,
            "item_type": "answer",
            "score": 150,
            "last_activity_date": 1667677988,
            "creation_date": 1467868828,
            "body": "The &quot;Holy Grail&quot; Solution for Removing &quot;.html&quot; in NGINX:\nUPDATED ANSWER: This question piqued my curiosity, and I went on another, more in-depth search for a &quot;holy grail&quot; solution for  redirects in NGINX. Here is the link to the answer I found, since I didn&#39;t come up with it myself: https://stackoverflow.com/a/32966347/4175718\nHowever, I&#39;ll give an example and explain how it works. Here is the code:\n\nWhat&#39;s happening here is a pretty ingenious use of the  directive. NGINX runs a regex on the  portion of incoming requests. The regex checks if the URI has an .html extension and then stores the extension-less portion of the URI in the built-in variable .\nFrom the docs, since it took me a while to figure out where the  came from:\n\nRegular expressions can contain captures that are made available for later reuse in the $1..$9 variables.\n\nThe regex both checks for the existence of unwanted .html requests and effectively sanitizes the URI so that it does not include the extension. Then, using a simple  statement, the request is redirected to the sanitized URI that is now stored in .\nThe best part about this, as original author cnst explains, is that\n\nDue to the fact that $request_uri is always constant per request, and is not affected by other rewrites, it won&#39;t, in fact, form any infinite loops.\n\nUnlike the rewrites, which operate on any  request (including the invisible internal redirect to ), this solution only operates on external URIs that are visible to the user.\nWhat does &quot;try_files&quot; do?\nYou will still need the  directive, as otherwise NGINX will have no idea what to do with the newly sanitized extension-less URIs. The  directive shown above will first try the new URL by itself, then try it with the &quot;.html&quot; extension, then try it as a directory name.\nThe NGINX docs also explain how the default  directive works. The default  directive is ordered differently than the example above so the explanation below does not perfectly line up:\n\nNGINX will first append  to the end of the URI and try to serve it. If it finds an appropriate  file, it will return that file and will maintain the extension-less URI. If it cannot find an appropriate  file, it will try the URI without any extension, then the URI as a directory, and then finally return a 404 error.\n\nUPDATE: What does the regex do?\nThe above answer touches on the use of regular expressions, but here is a more specific explanation for those who are still curious. The following regular expression (regex) is used:\n\nThis breaks down as:\n: indicates beginning of line.\n: match the character &quot;/&quot; literally. Forward slashes do NOT need to be escaped in NGINX.\n: capturing group: match any character an unlimited number of times\n: match the character &quot;.&quot; literally. This must be escaped with a backslash.\n: match the string &quot;html&quot; literally.\n: match a literal &quot;?&quot; or the end of the string. This is done to avoid mishandling file names with something after &quot;.html&quot;.\nThe capturing group  is what contains the non-&quot;.html&quot; portion of the URL. This can later be referenced with the variable . NGINX is then configured to re-try the request () and the  directive internally re-appends the &quot;.html&quot; extension so the file can be located.\nUPDATE: Retaining the query string\nTo retain query strings and arguments passed to a  page, the  statement can be changed to:\n\nThis should allow requests such as  to redirect to  instead of just .\n\nNote that this is considered safe usage of the `if` directive.\nFrom the NGINX page If Is Evil:\n\nThe only 100% safe things which may be done inside if in a location context are:\nreturn ...;\nrewrite ... last;\n\n\nAlso, note that you may swap out the &#39;302&#39; redirect for a &#39;301&#39;.\nA  redirect is permanent, and is cached by web browsers and search engines. If your goal is to permanently remove the  extension from pages that are already indexed by a search engine, you will want to use a  redirect. However, if you are testing on a live site, it is best practice to start with a  and only move to a  when you are absolutely confident your configuration is working correctly.\n",
            "excerpt": "The <span class=\"highlight\">regex</span> checks if the URI has an .html extension <span class=\"highlight\">and</span> then stores the extension-less portion of the URI in the built-in variable $1. &hellip; The <span class=\"highlight\">regex</span> both checks for the existence of unwanted .html requests <span class=\"highlight\">and</span> effectively sanitizes the URI so that it does not include the extension. &hellip; ",
            "title": "NGINX remove .html extension"
        },
        {
            "tags": [
                "c++",
                "visual-studio",
                "cmake"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 73698691,
            "is_answered": false,
            "question_id": 69564143,
            "item_type": "answer",
            "score": -1,
            "last_activity_date": 1666511775,
            "creation_date": 1663052354,
            "body": "Your first solution can be simplified by using  option of  instead of  option.\nThis will also get rid of the evil  command.\n\nSee CMake Regex Specification.\n\nAs for the  option, your solution is pretty good.\nWith the following minor modification, I can get the filtering behaviour as you desire, where files are filtered according to their folder name, and the ones at the root folder has no filter instead of being listed under &quot;Source Files&quot;.\n\n\nNote that it is sometimes necessary to run CMake command in a clean build environment for VS filters to take effect.\nI suspect that was the reason you had to apply a workaround to the  solution.\n",
            "excerpt": "This will also get rid of the <span class=\"highlight\">evil</span> GLOB command.\nsource_group(&quot;benchmark&quot; REGULAR_EXPRESSION &quot;benchmark/.+\\.(h|cpp)&quot;)\nsource_group(&quot;builder&quot; REGULAR_EXPRESSION &quot;builder/.+\\.(h|cpp)&quot;)\n... &hellip; See CMake <span class=\"highlight\">Regex</span> Specification.\n\nAs for the TREE option, your solution is pretty good. &hellip; ",
            "title": "How can I cleanly place files in the &quot;root&quot; filter in Visual Studio using CMake?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "string"
            ],
            "question_score": -2,
            "is_accepted": true,
            "answer_id": 73871703,
            "is_answered": false,
            "question_id": 73871509,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1664300209,
            "creation_date": 1664300209,
            "body": "The regex is pretty simple and can be almost identical to your string. Where you want to pick out some words use the match syntax  - the period is &quot;any character&quot;, and the  is &quot;one or more&quot;.\nUse  on the string with the expression to return an array of matches which you can then destructure into a number of variables (I&#39;ve called them   and  here).\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "`[` <span class=\"highlight\">and</span> `]` around &quot;Alert&quot;\n// as they are part of <span class=\"highlight\">regex</span> syntax. `^` <span class=\"highlight\">and</span> `$`\n// signify the start <span class=\"highlight\">and</span> end of the string respectively\nconst re = /^\\[Alert\\] (.+) has thrown a (.+) in (.+)\\.$/;\nconst str &hellip; = &#39;[Alert] Trump has thrown a tantrum in his <span class=\"highlight\">Evil</span> Lair.&#39; &hellip; ",
            "title": "Take key values from a string in Javascript"
        },
        {
            "tags": [
                "java",
                "regex",
                "string"
            ],
            "question_score": -3,
            "is_accepted": false,
            "answer_id": 73704934,
            "is_answered": false,
            "question_id": 73688734,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1663080094,
            "creation_date": 1663080094,
            "body": "The OWASP page describes evil regexes as those that contain\n\n\nGrouping with repetition\nInside the repeated group:\n\nRepetition\nAlternation with overlapping\n\n\n\n\nwhich is not always right. Their examples are good, but the rules are too generic and even good and safe patterns can be trigger the vulnerability\nYou can actually remove the first  to stop the warning from showing:\n\nThis way, only one  is used.\n",
            "excerpt": "The OWASP page describes <span class=\"highlight\">evil</span> regexes as those that contain\n\n\nGrouping with repetition\nInside the repeated group:\n\nRepetition\nAlternation with overlapping\n\n\n\n\nwhich is not always right. &hellip; Their examples are good, but the rules are too generic <span class=\"highlight\">and</span> even good <span class=\"highlight\">and</span> safe patterns can be trigger the vulnerability\nYou can actually remove the first + to stop the warning from showing:\ninput.matches &hellip; ",
            "title": "Will these two regex give me the same desired output?"
        },
        {
            "tags": [
                "regex",
                "floating-point",
                "integer",
                "numbers"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 73137567,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1658925492,
            "creation_date": 1658923322,
            "body": "I have this regex to test if the user input is valid:\n\nThe main point is in the regex: . However sonarcloud is feeling it as a security hotspot saying:\nMake sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.\nI guess it&#39;s because of the double digit test, but I couldn&#39;t find a way to avoid it. Is it a security threat, or harmless?\n",
            "excerpt": "I have this <span class=\"highlight\">regex</span> to test if the user input is valid:\nvalue.length === 0 ||\nvalue === &#39;-&#39; ||\n(!isNaN(parseFloat(value)) &amp;&amp; /^-?\\d+\\.?\\d*$/.test(value))\n\nThe main point is in the <span class=\"highlight\">regex</span>: /^-?\\d+\\.? &hellip; However sonarcloud is feeling it as a security hotspot saying:\nMake sure the <span class=\"highlight\">regex</span> used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service. &hellip; ",
            "title": "Match negative/positive float/int regex - is it evil?"
        },
        {
            "tags": [
                "regex",
                "scala",
                "unapply"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 72964888,
            "is_answered": false,
            "question_id": 72961975,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1657708679,
            "creation_date": 1657708679,
            "body": "I am not sure why you would expect it to not compile.  is valid syntax, and matches the extractor definition.\nFor example, this returns true:\n\nI guess, what you are really asking is why extractor does not throw a run-time error if number of parameters does not match the number of capturing groups in the regex ...\nThe answer to that is &quot;that&#39;s just how it is implemented&quot;.\nIt is not really obvious at all that throwing in this case would be a better solution than simply failing the match. Runtime errors are generally considered evil in scala (and in functional programming in general), and are only used in cases, when there is no other viable alternative.\n",
            "excerpt": "I am not sure why you would expect it to not compile. <span class=\"highlight\">regex</span>(&lt;any number of strings&gt;) is valid syntax, <span class=\"highlight\">and</span> matches the extractor definition. &hellip; Runtime errors are generally considered <span class=\"highlight\">evil</span> in scala (<span class=\"highlight\">and</span> in functional programming in general), <span class=\"highlight\">and</span> are only used in cases, when there is no other viable alternative. &hellip; ",
            "title": "Why does this compile? (Scala Regex unapplySeq)"
        },
        {
            "tags": [
                "c#",
                "asp.net-core",
                "xss"
            ],
            "question_score": 19,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 5,
            "is_answered": true,
            "question_id": 52239262,
            "item_type": "question",
            "score": 19,
            "last_activity_date": 1656876401,
            "creation_date": 1536439438,
            "body": "In ASP.NET we had Request Validation but in ASP.NET Core there is no such thing.\nHow can we protect an ASP.NET Core app against XSS in the best way?\nRequest validation gone:\nhttps://nvisium.com/resources/blog/2017/08/08/dude-wheres-my-request-validation.html\n\nthis guy recommmends RegEx on  like:\n[RegularExpression(@&quot;^[a-zA-Z0-9 -&#39;]*$&quot;, ErrorMessage = &quot;Invalid characters detected&quot;)]\npublic string Name { get; set; }\n\n\n...but that does not work for globalization/internationalization, i.e. non-latin characters like &#230;, &#248; &#229; 汉字.\nX-XSS to do &gt;limited&lt; XSS-protection: https://dotnetcoretutorials.com/2017/01/10/set-x-xss-protection-asp-net-core/ Like this but there is only limited support afaik:\n\nThe documentation from Microsoft is two years old: https://learn.microsoft.com/en-us/aspnet/core/security/cross-site-scripting?view=aspnetcore-2.1 and does not really cover it.\nI am thinking to do something simple like:\n\n\non all data submission - but it seems kind of wonky.\n\nI have asked the same question for Microsoft but I am interested to hear how people are solving this problem in real-life applications.\nUpdate: what we are trying to accomplish:\nIn our application, we have webforms where people can input names, email, content and similar. The data is stored in a database and will be viewed on a frontend system and possibly other systems in the future (like RSS feeds, JSON, whatever). Some forms contain rich-text editors (TinyMCE) and allow users to markup their texts. Malicious users could enter  in the fields. What is the best way to strip the evil characters in ASP.NET Core before it reaches the database - I prefer evil scripts not to be stored in the database at all.\nI figured something like this could work:\n\n",
            "excerpt": "Some forms contain rich-text editors (TinyMCE) <span class=\"highlight\">and</span> allow users to markup their texts. Malicious users could enter &lt;script&gt;alert(&#39;<span class=\"highlight\">evil</span> stuff&#39;);&lt;/script&gt; in the fields. &hellip; What is the best way to strip the <span class=\"highlight\">evil</span> characters in ASP.NET Core before it reaches the database - I prefer <span class=\"highlight\">evil</span> scripts not to be stored in the database at all. &hellip; ",
            "title": "How to protect against XSS in ASP.NET Core?"
        },
        {
            "tags": [
                "awk",
                "text-processing",
                "unix-text-processing"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 72695200,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1655830113,
            "creation_date": 1655784098,
            "body": "Given the following example URLs:\nurls.txt\n\nI&#39;m using this command:\n\nTo produce this desired output:\n\nBut it yields this output:\n\nWhy is it printing a semblance of the original URL before the correct output?\n\nHere is the above code formatted legibly with :\n\n",
            "excerpt": "MiscHostsFiles/raw/master/MiscAdTrackingHostBlock.txt\nhttps://github.com/DK-255/Pi-hole-list-1/raw/main/Ads-Blocklist\nhttps://github.com/DRSDavidSoft/additional-hosts/raw/master/domains/blacklist/adservers-<span class=\"highlight\">and</span>-trackers.txt &hellip; /smartphone-<span class=\"highlight\">and</span>-general-ads-analytics-<span class=\"highlight\">regex</span>-blocklist-ftprivacy.txt\nhttps://github.com/hell-sh/<span class=\"highlight\">Evil</span>-Domains/raw/master/<span class=\"highlight\">evil</span>-domains.txt\nhttps://github.com/hosts-file/BulgarianHostsFile/raw/master/bhf.txt &hellip; ",
            "title": "Issue converting github.com/*/raw/* URLs to raw.githubusercontent.com URLS using AWK"
        },
        {
            "tags": [
                "awk",
                "text-processing",
                "unix-text-processing"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 72704220,
            "is_answered": false,
            "question_id": 72695200,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1655830113,
            "creation_date": 1655828910,
            "body": "Your only real problem is that awk fields, arrays, and strings all start at 1, not 0, so your loop should have started at 1, not 0. As written first time through your loop  is doing .\nHaving said that, I think what you want is the following with a couple of other things tidied up:\n\n\n\nThe only slightly tricky part in that is  which is how you remove a mid-record field in awk - first convert the field to a string that matches RS since that can&#39;t be present in the input (we can use RS directly when it&#39;s a string like  rather than a regexp) so we changed  to  in the 6th field which meant the record now contained  and then removed  thereby removing the 6th field and preceding .\n",
            "excerpt": "/smartphone-<span class=\"highlight\">and</span>-general-ads-analytics-<span class=\"highlight\">regex</span>-blocklist-ftprivacy.txt\nhttps://raw.githubusercontent.com/hell-sh/<span class=\"highlight\">Evil</span>-Domains/master/<span class=\"highlight\">evil</span>-domains.txt\nhttps://raw.githubusercontent.com/hosts-file/BulgarianHostsFile &hellip; then removed /\\n thereby removing the 6th field <span class=\"highlight\">and</span> preceding /. &hellip; ",
            "title": "Issue converting github.com/*/raw/* URLs to raw.githubusercontent.com URLS using AWK"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": -2,
            "is_accepted": false,
            "answer_id": 72498731,
            "is_answered": false,
            "question_id": 72498625,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1654336065,
            "creation_date": 1654336065,
            "body": "I hope this regex can help you :\n\nAlso be carefull about evil regex, each regex is potentially a open door for DDOS attack on you website.\nI tried your regex on :  https://regexr.com/\nIt&#39;s a good tools for testing your regex\n",
            "excerpt": "I hope this <span class=\"highlight\">regex</span> can help you :\n \\/([a-zA-Z]+)(.*)[\\/](more|next|[0-9]+) \n\n \\/([a-zA-Z]+)(.*)[\\/](more|next|[0-9]+){0,1}[\\/]{0,1}   \n\nAlso be carefull about <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>, each <span class=\"highlight\">regex</span> is potentially a open &hellip; I tried your <span class=\"highlight\">regex</span> on :  https://regexr.com/\nIt&#39;s a good tools for testing your <span class=\"highlight\">regex</span> &hellip; ",
            "title": "regex route filters some /string after slug url"
        },
        {
            "tags": [
                "nginx",
                "nginx-location"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 72173828,
            "is_answered": false,
            "question_id": 72056975,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1652107251,
            "creation_date": 1652107251,
            "body": "Nginx takes a  location modifier as an exact match (docs are here). If you want to make a location that will catch every URI containing  substring (obviously including ), you can use a regex one:\n\nThe  modifier makes the location block in @user973254 answer (original answer version, already fixed) a prefix one with the greater priority than any regex locations, so it will overtake only the URIs starting with  (obviously not including  from your example).\nHowever if your web backend requires an additional URI processing (which is a most common case nowadays), you&#39;ll need at least to replicate your main location behavior with this new location. Fortunately, there is a way to avoid such a problems, and can be easily applied to an arbitrary number of sites as you ask for in your original question. You can check required conditions to make a decision for blocking the request or not using the (very powerful)  block feature. And since we want to match address against a list of subnets, we will use a chain of  and  blocks. To use regexes (PRCE/PCRE2 syntax) for a  block match use a  string prefix ( for case-insensitive match), strings containing some special characters (e.g. curly braces) should be single- or double-qouted. Here is a generic example (you&#39;ll need only the first line of the following  block to fulfill your question requirements):\n\nYou can swap the logic to check the URI first (it can be some performance impact since the regex matching will be performed for every request including requests from the non-restricted networks, however if the majority of requests come from public addresses, there will be no significant difference). That way you can have a common non-restricted subnes list and per-site URI lists:\n\nOf course, you are not limited to use 403 return code using this solution (which is the case when you are using / directives). It also has nothing to do with the famous &quot;If is evil&quot; article since this  is used in  context.\n",
            "excerpt": "<span class=\"highlight\">And</span> since we want to match address against a list of subnets, we will use a chain of map <span class=\"highlight\">and</span> geo blocks. &hellip; It also has nothing to do with the famous &quot;If is <span class=\"highlight\">evil</span>&quot; article since this if is used in server context. &hellip; ",
            "title": "Nginx deny if location contains"
        },
        {
            "tags": [
                "redirect",
                "google-cloud-platform",
                "load-balancing"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 70526479,
            "is_answered": false,
            "question_id": 70525042,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1640825992,
            "creation_date": 1640825992,
            "body": "Url maps path matcher does not support conditions or regex.\nAs quoted from the documentation, Path matcher has some constraints:\n\nA path rule can only include a wildcard character (*) after a forward slash character (/). For example, /videos/* and /videos/hd/* are valid for path rules, but /videos* and /videos/hd* are not.\n\n\nPath rules do not use regular expression or substring matching. For example, path rules for either /videos/hd or /videos/hd/* do not apply to a URL with the path /video/hd-abcd. However, a path rule for /video/* does apply to that path.\n\n\nPath matchers (and URL maps in general) do not offer features that function like Apache LocationMatch directives. If you have an application that generates dynamic URL paths that have a common prefix, such as /videos/hd-abcd and /videos/hd-pqrs, and you need to send requests made to those paths to different backend services, you might not be able to do that with a URL map. For simple cases containing only a few possible dynamic URLs, you might be able to create a path matcher with a limited set of path rules. For more complex cases, you need to do path-based regular expression matching on your backends.\n\n\nWhat you are looking for can be achieved by setting up  or  webservers as the only backend for your  and configuring this backend to route requests with conditions and/or regex to your services.\nPS: If is Evil... when used in location context\n",
            "excerpt": "What you are looking for can be achieved by setting up Nginx or Apache webservers as the only backend for your LoadBalancer <span class=\"highlight\">and</span> configuring this backend to route requests with conditions <span class=\"highlight\">and</span>/or <span class=\"highlight\">regex</span> to &hellip; PS: If is <span class=\"highlight\">Evil</span>... when used in location context &hellip; ",
            "title": "Redirect request based on parameter on GCP"
        },
        {
            "tags": [
                "json",
                "bash",
                "large-files",
                "data-extraction"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 70449626,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1640252943,
            "creation_date": 1640178730,
            "body": "I have a fairly large JSON file (~8GB) that has the following format:\n\nI want to extract all the values of the  to a separate file and I want to do it automatically.\nI tried using this  command\n\nbut the process terminated due to large memory usage (it used more than 80% of my ram at some points and the GUI was unresponsive).\nThen I tried to first use the  command to separate the input into 2GB files\n\nand then use the same  command from above, and this time it finished fairly quickly for every chunk, in about 30 seconds.\nThis method where I have to split the input first would be fine for me but the the only problem is automatically checking if the  command splits the file properly, i.e. not in the middle of  key-pair, since that would result in losing some of the important data.\nI&#39;d like to know if there&#39;s a better/more elegant way to do this.\nWhat also interests me is why doesn&#39;t  work on 8GB file but works like a charm on 2GB files. The regex I use for matching doesn&#39;t seem to be evil.\nMy assumption is that it tries to load the whole line first (which uses half of my RAM) and then it uses more memory for it&#39;s internal calculations, which causes the system to start using SWAP memory which in turn causes really slow performance before terminating the program (10+ minutes).\nSome important info specific for this problem:\n\nThe format of objects inside  array will always be the same\nThe input json is minified, it contains no spaces or new lines\nThe input file is static\nI&#39;m obviously interested in extracting all of the important data\n\n",
            "excerpt": "<span class=\"highlight\">and</span> this time it finished fairly quickly for every chunk, in about 30 seconds. &hellip; The <span class=\"highlight\">regex</span> I use for matching doesn&#39;t seem to be <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Automating data extraction from large json file (~8GB)"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 70305380,
            "is_answered": false,
            "question_id": 70304831,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1639155444,
            "creation_date": 1639143518,
            "body": "Using  is very unsafe way to solve this problem:\nWhen is eval evil in php?\nOne solution is using  function and find your desired format with regex and replace it with custom function.\n function perform a regular expression search and replace using a callback.\nhttps://www.php.net/manual/en/function.preg-replace-callback.php\nJust need to replace line  with following line:\n\n",
            "excerpt": "Using eval is very unsafe way to solve this problem:\nWhen is eval <span class=\"highlight\">evil</span> in php? &hellip; One solution is using preg_replace_callback function <span class=\"highlight\">and</span> find your desired format with <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> replace it with custom function.\npreg_replace_callback function perform a regular expression search <span class=\"highlight\">and</span> &hellip; ",
            "title": "How to assign value of json object to variable in form of text values of textarea?"
        },
        {
            "tags": [
                "regex",
                "spring-boot",
                "sonarqube"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 70301405,
            "is_answered": false,
            "question_id": 70300327,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1639123445,
            "creation_date": 1639123445,
            "body": "You can mark it as reviewed and safe to use.\nThe  pattern is equal to .\nFor a regex to be an evil regex, there must be a considerable backtracking possibility that is only possible with , , ,  and  / ? like quantifiers in non-final position inside the pattern.\nYours is an example of a pattern where only the one or two digit pattern can get backtracked into, but there is just two possible ways to match the pattern, which is not problematic and does not present any threat.\n",
            "excerpt": "You can mark it as reviewed <span class=\"highlight\">and</span> safe to use.\nThe Test--[A-Z]{3}_[0-9]{1,2}[MYD]{1} pattern is equal to Test--[A-Z][A-Z][A-Z]_[0-9][0-9]?[MYD]. &hellip; For a <span class=\"highlight\">regex</span> to be an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>, there must be a considerable backtracking possibility that is only possible with *, *?, +, +? <span class=\"highlight\">and</span> {x,} / {x,}? &hellip; ",
            "title": "Regular Expressions are marked as Security Hotspot on SonarQube report"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 200,
            "is_accepted": true,
            "answer_id": 12643073,
            "is_answered": false,
            "question_id": 12643009,
            "item_type": "answer",
            "score": 439,
            "last_activity_date": 1635437431,
            "creation_date": 1348846620,
            "body": "TL;DR\nUse  instead of  and  instead of  to avoid escaping issues in some languages (like Java).\nThanks to the nameless one for originally recognizing this.\n\nOne relatively simple pattern for matching a floating point number in a larger string is:\n\nThis will match:\n\n\n\n\n\nSee a working example\nIf you also want to match  (a period with no decimal part), then you&#39;ll need a slightly longer expression:\n\nSee pkeller&#39;s answer for a fuller explanation of this pattern\nIf you want to include a wider spectrum of numbers, including scientific notation and non-decimal numbers such as hex and octal, see my answer to How do I identify if a string is a number?.\nIf you want to validate that an input is a number (rather than finding a number within the input), then you should surround the pattern with  and , like so:\n\nIrregular Regular Expressions\n&quot;Regular expressions&quot;, as implemented in most modern languages, APIs, frameworks, libraries, etc., are based on a concept developed in formal language theory. However, software engineers have added many extensions that take these implementations far beyond the formal definition. So, while most regular expression engines resemble one another, there is actually no standard. For this reason, a lot depends on what language, API, framework or library you are using.\n(Incidentally, to help reduce confusion, many have taken to using &quot;regex&quot; or &quot;regexp&quot; to describe these enhanced matching languages. See Is a Regex the Same as a Regular Expression? at RexEgg.com for more information.)\nThat said, most regex engines (actually, all of them, as far as I know) would accept . Most likely, there&#39;s an issue with escaping.\nThe Trouble with Escaping\nSome languages have built-in support for regexes, such as JavaScript. For those languages that don&#39;t, escaping can be a problem.\nThis is because you are basically coding in a language within a language. Java, for example, uses  as an escape character within it&#39;s strings, so if you want to place a literal backslash character within a string, you must escape it:\n\nHowever, regexes also use the  character for escaping, so if you want to match a literal  character, you must escape it for the regex engine, and then escape it again for Java:\n\nIn your case, you have probably not escaped the backslash character in the language you are programming in:\n\nAll this escaping can get very confusing. If the language you are working with supports raw strings, then you should use those to cut down on the number of backslashes, but not all languages do (most notably: Java). Fortunately, there&#39;s an alternative that will work some of the time:\n\nFor a regex engine,  and  mean exactly the same thing. Note that this doesn&#39;t work in every case, like newline (), open square bracket () and backslash ( or ).\nA Note about Matching Numbers\n(Hint: It&#39;s harder than you think)\nMatching a number is one of those things you&#39;d think is quite easy with regex, but it&#39;s actually pretty tricky. Let&#39;s take a look at your approach, piece by piece:\n\nMatch an optional  or \n\nMatch 0 or more sequential digits\n\nMatch an optional \n\nMatch 0 or more sequential digits\nFirst, we can clean up this expression a bit by using a character class shorthand for the digits (note that this is also susceptible to the escaping issue mentioned above):\n = \nI&#39;m going to use  below, but keep in mind that it means the same thing as . (Well, actually, in some engines  will match digits from all scripts, so it&#39;ll match more than  will, but that&#39;s probably not significant in your case.)\nNow, if you look at this carefully, you&#39;ll realize that every single part of your pattern is optional. This pattern can match a 0-length string; a string composed only of  or ; or, a string composed only of a . This is probably not what you&#39;ve intended.\nTo fix this, it&#39;s helpful to start by &quot;anchoring&quot; your regex with the bare-minimum required string, probably a single digit:\n\nNow we want to add the decimal part, but it doesn&#39;t go where you think it might:\n\nThis will still match values like . Worse, it&#39;s got a tinge of evil about it. The period is optional, meaning that you&#39;ve got two repeated classes side-by-side ( and ). This can actually be dangerous if used in just the wrong way, opening your system up to DoS attacks.\nTo fix this, rather than treating the period as optional, we need to treat it as required (to separate the repeated character classes) and instead make the entire decimal portion optional:\n\nThis is looking better now. We require a period between the first sequence of digits and the second, but there&#39;s a fatal flaw: we can&#39;t match  because a leading digit is now required.\nThis is actually pretty easy to fix. Instead of making the &quot;decimal&quot; portion of the number optional, we need to look at it as a sequence of characters: 1 or more numbers that may be prefixed by a  that may be prefixed by 0 or more numbers:\n\nNow we just add the sign:\n\nOf course, those slashes are pretty annoying in Java, so we can substitute in our long-form character classes:\n\nMatching versus Validating\nThis has come up in the comments a couple times, so I&#39;m adding an addendum on matching versus validating.\nThe goal of matching is to find some content within the input (the &quot;needle in a haystack&quot;). The goal of validating is to ensure that the input is in an expected format.\nRegexes, by their nature, only match text. Given some input, they will either find some matching text or they will not. However, by &quot;snapping&quot; an expression to the beginning and ending of the input with anchor tags ( and ), we can ensure that no match is found unless the entire input matches the expression, effectively using regexes to validate.\nThe regex described above () will match one or more numbers within a target string. So given the input:\n\nThe regex will match , , ,  and .\nTo validate that a given input is a number and nothing but a number, &quot;snap&quot; the expression to the start and end of the input by wrapping it in anchor tags:\n\nThis will only find a match if the entire input is a floating point number, and will not find a match if the input contains additional characters. So, given the input , a match will be found, but given  no matches will be found.\nNote that some regex engines have a ,  or similar function, which essentially does what I&#39;ve described automatically, returning  if a match is found and  if no match is found. Also keep in mind that some engines allow you to set flags which change the definition of  and , matching the beginning/end of a line rather than the beginning/end of the entire input. This is typically not the default, but be on the lookout for these flags.\n",
            "excerpt": "Worse, it&#39;s got a tinge of <span class=\"highlight\">evil</span> about it. The period is optional, meaning that you&#39;ve got two repeated classes side-by-side (\\d+ <span class=\"highlight\">and</span> \\d*). &hellip; So given the input:\napple 1.34 pear 7.98 version 1.2.3.4\n\nThe <span class=\"highlight\">regex</span> will match 1.34, 7.98, 1.2, .3 <span class=\"highlight\">and</span> .4. &hellip; ",
            "title": "Regular expression for floating point numbers"
        },
        {
            "tags": [
                "php",
                "xml"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 69686634,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1634987324,
            "creation_date": 1634979938,
            "body": "Please help\nI have been finding a code for this but failed\nsource: https://www.singtel.com/etc/singtel/public/tv/epg-parsed-data/23102021.json\nThis is a epg html site\nCould you suggest a way to convert this link contents to XML?\nbtw the link is based on the day\nhttps://www.singtel.com/etc/singtel/public/tv/epg-parsed-data/ddMMyyyy.json\nmaybe this will help\n\r\n\r\n\r\n\r\n\r\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": ",||}\nindex_description.scrub{<span class=\"highlight\">regex</span>||&quot;program&quot;:\\{&quot;description&quot;:&quot;(.*?)&quot; &hellip; Sandman join forces to protect children&#39;s imagination from the <span class=\"highlight\">evil</span> Pitch! &hellip; ",
            "title": "html epg to xml via php"
        },
        {
            "tags": [
                "c#",
                ".net",
                "mailkit"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 60832412,
            "is_answered": false,
            "question_id": 60825872,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1633166022,
            "creation_date": 1585057872,
            "body": "You can read this blog post that explains what most C# MIME parsers get wrong and why MimeKit can handle multiple charset encodings.\nhttps://jeffreystedfast.blogspot.com/2013/09/time-for-rant-on-mime-parsers.html\nhttps://jeffreystedfast.blogspot.com/2013/08/why-decoding-rfc2047-encoded-headers-is.html\nTime for a rant on mime parsers...\nWarning: Viewer discretion is advised.\nWhere should I begin?\nI guess I should start by saying that I am obsessed with MIME and, in particular, MIME parsers. No, really. I am obsessed. Don&#39;t believe me? I&#39;ve written and/or worked on several MIME parsers at this point. It started off in my college days working on Spruce which had a horrendously bad MIME parser, and so as you read farther along in my rant about shitty MIME parsers, keep in mind: I&#39;ve been there, I&#39;ve written a shitty MIME parser.\nAs a handful of people are aware, I&#39;ve recently started implementing a C# MIME parser called MimeKit. As I work on this, I&#39;ve been searching around on GitHub and Google to see what other MIME parsers exist out there to find out what sort of APIs they provide. I thought perhaps I&#39;ll find one that offers a well-designed API that will inspire me. Perhaps, by some miracle, I&#39;d find one that was actually pretty good that I could just contribute to instead of writing my own from scratch (yea, wishful thinking). Instead, all I have found are poorly designed and implemented MIME parsers, many probably belong on the front page of the Daily WTF.\nI guess I&#39;ll start with some softballs.\nFirst, there&#39;s the fact that every single one of them was written as  parsers. Don&#39;t be fooled by the ones claiming to be &quot;stream parsers&quot;, because all any of those did was to slap a  on top of the byte stream and start using . What&#39;s so bad about that, you ask? For those not familiar with MIME, I&#39;d like for you to take a look at the raw email sources in your inboxes particularly if you have correspondence with anyone outside of the US. Hopefully, most of your friends and colleagues are using more-or-less MIME compliant email clients, but I guarantee you&#39;ll find at least a few emails with raw 8bit text.\nNow, if the language they were using was C or C++, they might be able to get away with doing this because they&#39;d technically be operating on byte arrays, but with Java and C#, a &#39;string&#39; is a unicode string. Tell me: how does one get a unicode string from a raw byte array?\nBingo. You need to know the charset before you can convert those bytes into unicode characters.\nTo be fair, there&#39;s really no good way of handling raw 8bit text in message headers, but by using a  approach, you are really limiting the possibilities.\nNext up is the  approach. One of the 2 early parsers in GMime (pan-mime-parser.c back in the version 0.7 days) used a  approach, so I understand the thinking behind this. And really, there&#39;s nothing wrong with this approach as far as correctness goes, it&#39;s more of a &quot;this can never be fast&quot; complaint. Of the two early parsers in GMime, the pan-mime-parser.c backend was horribly slow compared to the in-memory parser. Of course, that&#39;s not very surprising. More surprising to me at the time was that when I wrote GMime&#39;s current generation of the parser (sometime between v0.7 and v1.0), it was just as fast as the in-memory parser ever was and only ever had up to 4k in a read buffer at any given time. My point is, there are far better approaches than  if you want your parser to be reasonably performant... and why wouldn&#39;t you want that? Your users definitely want that.\nOkay, now come the more serious problems that I encountered in nearly all of the mime parser libraries I found.\nI think that every single mime parser I&#39;ve found so far uses the &quot;String.Split()&quot; approach for parsing address headers and/or for parsing parameter lists on headers such as Content-Type and Content-Disposition.\nHere&#39;s an example from one C# MIME parser:\n\nHere&#39;s how this same parser decodes encoded-word tokens:\n\nWhat?! It completely throws away the charset in each of those encoded-word tokens. In the case of quoted-printable tokens, it assumes they are all ASCII (actually, latin1 may work as well?) and in the case of base64 encoded-word tokens, it assumes they are all in UTF-7!?!? Where in the world did he get that idea? I can&#39;t begin to imagine his code working on any base64 encoded-word tokens in the real world. &#129318;‍♂️\nI&#39;d just like to point out that this is what this project&#39;s description states:\nA small, efficient, and working mime parser library written in c#.\n...\nI&#39;ve used several open-source mime parsers before, but they all either\nfail on one kind of encoding or the other, or miss some crucial\ninformation. That&#39;s why I decided to finally have a go at the problem\nmyself.\nI&#39;ll grant you that his MIME parser is small, but I&#39;d have to take issue with the &quot;efficient&quot; and &quot;working&quot; adjectives. With the heavy use of string allocations and regex matching, it could hardly be considered &quot;efficient&quot;. And as the code pointed out above illustrates, &quot;working&quot; is a bit of an overstatement.\nFolks... this is what you get when you opt for a &quot;lightweight&quot; MIME parser because you think that parsers like GMime are &quot;bloated&quot;.\nOn to parser #2... I like to call this the &quot;Humpty Dumpty&quot; approach:\n\nI&#39;ll give this guy some credit, at least he saw that his  approach was flawed and so tried to compensate by piecing Humpty Dumpty back together again. Of course, with his String.Trim()ing, he just won&#39;t be able to put him back together again with any level of certainty. The white space in those quoted tokens may have significant meaning.\nMany of the C# MIME parsers out there like to use Regex all over the place. Here&#39;s a snippet from one parser that is entirely written in Regex (yea, have fun maintaining that...):\n\nLet&#39;s pretend that the regex pattern strings are correct in their definitions (because they are god-awful to read and I can&#39;t be bothered to double-check them), the replacing of &#39;_&#39; with a space is wrong (it should only be done in the &quot;q&quot; case) and the  is just evil. Not to mention that there could be multiple encoded words per field.Body which this code utterly fails to handle.\nGuys. I know you love regular expressions and that they are very very useful, but they are no substitute for writing a real tokenizer. This is especially true if you want to be lenient in what you accept (and in the case of MIME, you really need to be).\n",
            "excerpt": "With the heavy use of string allocations <span class=\"highlight\">and</span> <span class=\"highlight\">regex</span> matching, it could hardly be considered &quot;efficient&quot;. <span class=\"highlight\">And</span> as the code pointed out above illustrates, &quot;working&quot; is a bit of an overstatement. &hellip; the &quot;q&quot; case) <span class=\"highlight\">and</span> the Regex.Replace() is just <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Supporting multiple content encoding in .net Framework 4.6.1 using mailkit"
        },
        {
            "tags": [
                "sql",
                "oracle"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 69351237,
            "is_answered": false,
            "question_id": 69347664,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1632765334,
            "creation_date": 1632765334,
            "body": "If data really is that simple, regular expressions make code rather simple. Way simpler than  option. Why don&#39;t you want to use regex? Because it is evil, or ...?\n\nsample data in lines #1 - 4\n: take the 2nd numeric value from the column\n: take the last numeric value from the column\n\n\n\n\nAs of\n\nWhat is the best way to create a new column to show the version without duplicate the line?\n\nI have no idea what that means. &quot;Without duplicate the line&quot;? Which line? Which duplicate?\n",
            "excerpt": "Why don&#39;t you want to use <span class=\"highlight\">regex</span>? Because it is <span class=\"highlight\">evil</span>, or ...? &hellip; ",
            "title": "Oracle SQL - Reading delimiter"
        },
        {
            "tags": [
                "nginx",
                "configuration",
                "nginx-cache"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 69268906,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1632227338,
            "creation_date": 1632227338,
            "body": "I&#39;m looking to improve nginx caching by removing irrelevant query parameters (that could come from web crawlers or similar) from the request. I have come across an unwieldy solution on the internet:\n\nIt works, but it&#39;s not very concise, takes a lot of steps and from what I learned, if is evil.\nI know there are maps, which can do basic regex things but they don&#39;t work in this scenario (because there can be any number of parameters in any order that I need to remove).\nI also found this substitution module which can do regex replace but it&#39;s only made for specific operations and not for setting a variable.\nSo I have two questions:\n\nDoes anyone know whether there is some tooling to set a variable by doing a regex replace operation?\nIs using if in this case really that bad? It&#39;s not inside a location context and I don&#39;t know whether many consecutive regexes are actually worse than one large regex replace.\n\nI would be very thankful if someone with more nginx know-how could weigh in here and help me out. Thanks :)\n",
            "excerpt": "location / {\n  # set $c_uri as cache_key\n  proxy_cache_key $c_uri;\n  ...\n}\n    \n\nIt works, but it&#39;s not very concise, takes a lot of steps <span class=\"highlight\">and</span> from what I learned, if is <span class=\"highlight\">evil</span>. &hellip; It&#39;s not inside a location context <span class=\"highlight\">and</span> I don&#39;t know whether many consecutive regexes are actually worse than one large <span class=\"highlight\">regex</span> replace. &hellip; ",
            "title": "NGINX - Setting a variable with regex replace"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 116,
            "is_accepted": true,
            "answer_id": 12846121,
            "is_answered": false,
            "question_id": 12841970,
            "item_type": "answer",
            "score": 116,
            "last_activity_date": 1630933909,
            "creation_date": 1349979734,
            "body": "Why Are Evil Regexes A Problem?\nBecause computers do exactly what you tell them to do, even if it&#39;s not what you meant or is totally unreasonable. If you ask a regex engine to prove that, for some given input, there either is or is not a match for a given pattern, then the engine will attempt to do that no matter how many different combinations must be tested.\nHere is a simple pattern inspired by the first example in the OP&#39;s post:\n\nGiven the input:\n\nabababababababababababab\n\nThe regex engine tries something like  and a match is found on the first try.\nBut then we throw the monkey wrench in:\n\nabababababababababababab a\n\nThe engine will first try  but that fails because of that extra . This causes catastrophic backtracking, because our pattern , in a show of good faith, will release one of its captures (it will &quot;backtrack&quot;) and let the outer pattern try again. For our regex engine, that looks something like this:\n\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n - Nope\n\nThe number of possible combinations scales exponentially with the length of the input and, before you know it, the regex engine is eating up all your system resources trying to solve this thing until, having exhausted every possible combination of terms, it finally gives up and reports &quot;There is no match.&quot; Meanwhile your server has turned into a burning pile of molten metal.\nHow to Spot Evil Regexes\nIt&#39;s actually very tricky. Catastrophic backtracking in modern regex engines is similar in nature to the halting problem which Alan Turing proved was impossible to solve. I have written problematic regexes myself, even though I know what they are and generally how to avoid them. Wrapping everything you can in an atomic group can help to prevent the backtracking issue. It basically tells the regex engine not to revisit a given expression - &quot;lock whatever you matched on the first try&quot;. Note, however, that atomic expressions don&#39;t prevent backtracking within the expression, so  is still dangerous, but  is safe (it&#39;ll match  and then refuse to give up any of it&#39;s matched characters, thus preventing catastrophic backtracking).\nUnfortunately, once it&#39;s written, it&#39;s actually very hard to immediately or quickly find a problem regex. In the end, recognizing a bad regex is like recognizing any other bad code - it takes a lot of time and experience and/or a single catastrophic event.\n\nInterestingly, since this answer was first written, a team at the University of Texas at Austin published a paper describing the development of a tool capable of performing static analysis of regular expressions with the express purpose of finding these &quot;evil&quot; patterns. The tool was developed to analyse Java programs, but I suspect that in the coming years we&#39;ll see more tools developed around analysing and detecting problematic patterns in JavaScript and other languages, especially as the rate of ReDoS attacks continues to climb.\n\nStatic Detection of DoS Vulnerabilities in\nPrograms that use Regular Expressions\nValentin W&#252;stholz, Oswaldo Olivo, Marijn J. H. Heule, and Isil Dillig\nThe University of Texas at Austin\n\n",
            "excerpt": "How to Spot <span class=\"highlight\">Evil</span> Regexes\nIt&#39;s actually very tricky. Catastrophic backtracking in modern <span class=\"highlight\">regex</span> engines is similar in nature to the halting problem which Alan Turing proved was impossible to solve. &hellip; In the end, recognizing a bad <span class=\"highlight\">regex</span> is like recognizing any other bad code - it takes a lot of time <span class=\"highlight\">and</span> experience <span class=\"highlight\">and</span>/or a single catastrophic event. &hellip; ",
            "title": "How can I recognize an evil regex?"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 116,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 8,
            "is_answered": true,
            "question_id": 12841970,
            "item_type": "question",
            "score": 116,
            "last_activity_date": 1630933909,
            "creation_date": 1349965833,
            "body": "I recently became aware of Regular expression Denial of Service attacks, and decided to root out so-called &#39;evil&#39; regex patterns wherever I could find them in my codebase - or at least those that are used on user input. The examples given at the OWASP link above and wikipedia are helpful, but they don&#39;t do a great job of explaining the problem in simple terms.\n\nA description of evil regexes, from wikipedia:\n\n\nthe regular expression applies repetition (&quot;+&quot;, &quot;*&quot;) to a complex subexpression;\nfor the repeated subexpression, there exists a match which is also a suffix of another valid match.\n\n\nWith examples, again from wikipedia:\n\n\n\n\n\n\n for x &gt; 10\n\n\nIs this a problem that just doesn&#39;t have a simpler explanation? I&#39;m looking for something that would make it easier to avoid this problem while writing regexes, or to find them within an existing codebase.\n",
            "excerpt": "I recently became aware of Regular expression Denial of Service attacks, <span class=\"highlight\">and</span> decided to root out so-called &#39;<span class=\"highlight\">evil</span>&#39; <span class=\"highlight\">regex</span> patterns wherever I could find them in my codebase - or at least those that are used &hellip; The examples given at the OWASP link above <span class=\"highlight\">and</span> wikipedia are helpful, but they don&#39;t do a great job of explaining the problem in simple terms. &hellip; ",
            "title": "How can I recognize an evil regex?"
        },
        {
            "tags": [
                "regex",
                "emacs",
                "replace"
            ],
            "question_score": 60,
            "is_accepted": false,
            "answer_id": 69066512,
            "is_answered": false,
            "question_id": 677021,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1630869527,
            "creation_date": 1630869527,
            "body": "When using evil, you can simply do \n is responsible for lowercasing all following letters, this should also work for .\nI have not found documentation around Emacs for that, but it seems to match this list: https://www.boost.org/doc/libs/1_44_0/libs/regex/doc/html/boost_regex/format/perl_format.html\n",
            "excerpt": "When using <span class=\"highlight\">evil</span>, you can simply do :%s/&lt;\\([^&gt;]+\\)&gt;/&lt;\\L\\1&gt;\n\\L is responsible for lowercasing all following letters, this should also work for query-replace-regexp. &hellip; I have not found documentation around Emacs for that, but it seems to match this list: https://www.boost.org/doc/libs/1_44_0/libs/<span class=\"highlight\">regex</span>/doc/html/boost_regex/format/perl_format.html &hellip; ",
            "title": "Emacs: regular expression replacing to change case"
        },
        {
            "tags": [
                "javascript",
                "object",
                "properties",
                "evaluation",
                "template-literals"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 68726771,
            "is_answered": false,
            "question_id": 68725756,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1628670602,
            "creation_date": 1628598219,
            "body": "\nI did this. But is it a good approach ?\n\nI can not really tell, but ... Consider this ...\n\r\n\r\n\r\n\r\n\r\n\r\n\nRead on SO about why eval has limited use cases ... why is eval evil\nEdit\nFor a custom template-string evaluation / interpolation I would stick to the syntax of JavaScript Template Literals of cause without enclosing the template string by backticks.\nFor the substitution one needs a regex which targets both the valid substitute template syntax  and a valid object path syntax. Thus variable/property names can start with ,  and upper/lowercase latin letters only, whereas within a variable name the numbers from  to  are allowed. Thus a regex which does capture such a valid object path from a valid template syntax looks like this ...\n\nValue interpolation then is not that complicated anymore. One just does  an object path like  into an array of property names like . The final value can be evaluated via a simple  task which programmatically walks down the property chain of the provided object/type ...\n\r\n\r\n\r\n\r\n\r\n\r\n\nThe above approach based on a less rigid object-path regex like ...  ... then turns into the one beneath ...\n\r\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "important; top: 0; }\r\n\r\n\r\n\nRead on SO about why eval has limited use cases ... why is eval <span class=\"highlight\">evil</span>\nEdit\nFor a custom template-string evaluation / interpolation I would stick to the syntax of JavaScript Template &hellip; For the substitution one needs a <span class=\"highlight\">regex</span> which targets both the valid substitute template syntax ${ foo.bar } <span class=\"highlight\">and</span> a valid object path syntax. &hellip; ",
            "title": "Function to replace a substring with a function value in javascript"
        },
        {
            "tags": [
                "javascript",
                "if-statement",
                "string-length"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 68704897,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1628458234,
            "creation_date": 1628458057,
            "body": "I am trying to make a search like ctrl+f. I have a function that scrolls to the next keyword when you hit enter. I&#39;m trying to make it to reset the count once you went through all the words, but it just gives me an error. For example if I search &quot;Lorem&quot; it will return 13 matches, so after I hit enter for the 13th time it supposed to reset, but it gives me an error instead. I dont get why (count &lt; elements.length) doesnt work. This is the part where I&#39;m stuck:\nP.S. To avoid the confusion, &quot;mark&quot; is a custom element tag that gets wrapped to the words in the text that matches the input and then highlights it.\n\n\r\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": ") {\n    endRegExp = <span class=\"highlight\">regex</span>;\n    return endRegExp;\n  };\n\n  this.setBreakRegExp = function(<span class=\"highlight\">regex</span>) {\n    breakRegExp = <span class=\"highlight\">regex</span>;\n    return breakRegExp;\n  };\n\n  this.setMatchType = function(type)\n  {\n    switch &hellip; Lorem Ipsum comes from sections 1.10.32 <span class=\"highlight\">and</span> 1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>) by Cicero, written in 45 BC. &hellip; ",
            "title": "Javascript (count &lt; elements.length) doesnt work"
        },
        {
            "tags": [
                "javascript",
                "arrays",
                "loops",
                "full-text-search"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 68685495,
            "is_answered": false,
            "question_id": 68685355,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1628271044,
            "creation_date": 1628271044,
            "body": "You can use a variable to store the current index in the search results.\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "Lorem Ipsum comes from sections 1.10.32 <span class=\"highlight\">and</span> 1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>) by Cicero, written in 45 BC. &hellip; ) {\n    endRegExp = <span class=\"highlight\">regex</span>;\n    return endRegExp;\n  };\n\n  this.setBreakRegExp = function(<span class=\"highlight\">regex</span>) {\n    breakRegExp = <span class=\"highlight\">regex</span>;\n    return breakRegExp;\n  };\n\n  this.setMatchType = function(type)\n  {\n    switch &hellip; ",
            "title": "How can I make input matches counter on enter press like ctrl+f?"
        },
        {
            "tags": [
                "python",
                "regex",
                "validation",
                "character",
                "alphabet"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 67939520,
            "is_answered": false,
            "question_id": 48074764,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1623425430,
            "creation_date": 1623424614,
            "body": "if u want a solution that&#39;s not dependent on unicode-compliance of the utility app, for the main block of AC00-D7AF, u can use\n\nthat slab expanded out would be\n\nif u need the extra stuff - jamo, compatability jamo, circled form, parenthesized form, and half width form, append this one to the one above\neither\n\nor\n\nif you only need the modern jamo that makes up the 11,172 syllable collection, then it&#39;s a lot cleaner :\n\nor if u prefer it without superfluous brackets :\n\nps : i only formatted like this here for readability. there aren&#39;t any spaces tabs or new line in between those octal codes. it&#39;s one continuous string.\npersonally i&#39;d much rather work with clean modern era regex myself, but using these octals are an necessary evil for myself to bring mawk1.3.4 and mawk2-beta up to full UTF8 compliancy.\n(at least in terms of lengthC() ordC() substrC() and character-level splitting but at the UC13 code-point level, plus hangul-only NFD-to-NFC.\nbut nothing fancy like grapheme clusters or bi-directional texts)\n",
            "excerpt": "only formatted like this here for readability. there aren&#39;t any spaces tabs or new line in between those octal codes. it&#39;s one continuous string.\npersonally i&#39;d much rather work with clean modern era <span class=\"highlight\">regex</span> &hellip; myself, but using these octals are an necessary <span class=\"highlight\">evil</span> for myself to bring mawk1.3.4 <span class=\"highlight\">and</span> mawk2-beta up to full UTF8 compliancy. &hellip; ",
            "title": "Regex to match all Hangul (Korean) characters and syllable blocks"
        },
        {
            "tags": [
                "javascript",
                "uuid",
                "denial-of-service"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 67608989,
            "is_answered": false,
            "question_id": 67608900,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1621449218,
            "creation_date": 1621449218,
            "body": "The OWASP article you linked has your answer. A pattern is considered &quot;Evil&quot; (vulnerable to a ReDOS attack) if it contains repetition inside a repeated group.\n\nEvil Regexes\nA Regex is called “evil” if it can stuck on crafted input.\nEvil Regex pattern contains:\n\nGrouping with repetition\nInside the repeated group:\n\nRepetition\nAlternation with overlapping\n\n\n\n\n\nYour pattern does not have grouping inside of repetition so it is not vulnerable. That said, if you know you expect a UUID inside the first 36 characters of the string you are searching, there is an efficiency benefit to trimming the string  before you attempt to match. I don&#39;t know if the splice is hard enough to read to warrant the extra time searching your string, you&#39;ll have to judge that for yourself.\n",
            "excerpt": "A pattern is considered &quot;<span class=\"highlight\">Evil</span>&quot; (vulnerable to a ReDOS attack) if it contains repetition inside a repeated group.\n\n<span class=\"highlight\">Evil</span> Regexes\nA <span class=\"highlight\">Regex</span> is called “<span class=\"highlight\">evil</span>” if it can stuck on crafted input. &hellip; <span class=\"highlight\">Evil</span> <span class=\"highlight\">Regex</span> pattern contains:\n\nGrouping with repetition\nInside the repeated group:\n\nRepetition\nAlternation with overlapping\n\n\n\n\n\nYour pattern does not have grouping inside of repetition so it is not vulnerable &hellip; ",
            "title": "Is regex uuid validator is safe for untrusted strings"
        },
        {
            "tags": [
                "python",
                "string"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 66864965,
            "is_answered": false,
            "question_id": 66864721,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1617168090,
            "creation_date": 1617079811,
            "body": "Here&#39;s a regex-based approach to the problem. We form a regex from  by adding  between each letter in the word. Then we attempt to match the regex against . Since  is inherently greedy, you will get the longest possible match inside word. You can then compare the length of the matched string to the length of , and if the matched string is longer, then  is a kangaroo word:\n\nOutput:\n\nAlternatively you can take an iterative approach. There are two conditions that need to be true for the input to be a kangaroo word:\n\nthe letters of the lookup word must be present in the word in order\nthere must be at least one extra letter between the letters of the lookup word\n\nThe first condition can be tested by checking each letter in turn to see that there is an occurrence of it after the previous letter in the word. The last condition can be checked by testing that the first occurrence of the first letter is more than the length of the word away from the last occurrence of the last letter. For example:\n\nThe results are the same as the regex version.\n",
            "excerpt": "(word, lookup_word):\n    <span class=\"highlight\">regex</span> = &#39;.*&#39;.join(lookup_word)\n    match = re.search(<span class=\"highlight\">regex</span>, word)\n    return match is not None <span class=\"highlight\">and</span> len(match.group()) &gt; len(lookup_word)\n\nprint(areAllCharsInWordInOrderFixed(&#39;encourage &hellip; &#39;, &#39;urge&#39;)) # True\nprint(areAllCharsInWordInOrderFixed(&#39;devil&#39;, &#39;<span class=\"highlight\">evil</span>&#39;)) # False\nprint(areAllCharsInWordInOrderFixed(&#39;devilishly&#39;, &#39;<span class=\"highlight\">evil</span>&#39;)) # True\nprint(areAllCharsInWordInOrderFixed(&#39;encourage&#39;, &#39;nrage &hellip; ",
            "title": "Efficiently Detecting Kangaroo Words"
        },
        {
            "tags": [
                "php",
                "nginx",
                "mod-rewrite",
                "url-rewriting"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 66232867,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1613601055,
            "creation_date": 1613513189,
            "body": "From an old project, I got this .htaccess file, which currently handle the apache rewrite rules:\n\nWhat the above snippet basically does, is that it rewrites all requests to index.php by keeping the query part string intact and stop after the first match, unless the file or folder exists.\nSo, in conclusion, by consulting the Nginx docs and by adding some additional security (permit access to sensible folders and files) and performance-related stuff (enable gzip or brotli output compression where it&#39;s possible [depending on the client, which one it is able to process]), I got this:\n\nThe new Nginx configuration above downloads the PHP file instead of bypassing it to the FPM handler. I have found this and this SO questions, but it doesn&#39;t seem to do the trick for me. Also, as mentioned in Nginx documentation,  is evil and we should avoid using it unless we are 100 percent sure what&#39;s going on. So, for my configuration, I avoided using it. Mainly because regex syntax also works with  and is way more securer in that context than . I mean, as far as I know. Please correct me, if I&#39;m wrong.\nThe main  file is dead simple right now:\n\nThe file above is mainly the openSUSE distributor shipped file, with a few changes.\nAnd this is my  file, which defines the FPM proxy handler for nginx (in order to don&#39;t repeat yourself; it&#39;s neccessarily needed anyways):\n\nI&#39;d appreciate any help with that issue.\n",
            "excerpt": "Also, as mentioned in Nginx documentation, if is <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> we should avoid using it unless we are 100 percent sure what&#39;s going on. So, for my configuration, I avoided using it. &hellip; Mainly because <span class=\"highlight\">regex</span> syntax also works with location <span class=\"highlight\">and</span> is way more securer in that context than if. I mean, as far as I know. Please correct me, if I&#39;m wrong. &hellip; ",
            "title": "How to convert a simple index.php redirection from apache to nginx format?"
        },
        {
            "tags": [
                "javascript",
                "google-apps-script",
                "base64",
                "ascii85",
                "base91"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 66096684,
            "is_answered": false,
            "question_id": 66026729,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1612765309,
            "creation_date": 1612764843,
            "body": "This solution works for me. The whole 3Byte is been encoded into 4 characters. I adapted the alphabet for replacing some missleading characters (0,O,i,l,1 etc.).\nThe base64 padding (&#39;=&#39;) is been removed after encoding and will be added before decoding inside the functions. CRC4 is not perfect - better than no CRC :)\nI am happy for any feedback, suggestions further optimisations. Thanks.\nGoogle Sheet frontend:\n\nAnother tab in this documents where you can define the variations/families/recipes:\n\nHere comes the code for the app script (special credits to @Kamil Kiełczewski for his base64 snippert):\n\nThe result can be tried/decoded with following HTML/JS snippet. Its quick and dirty.\nJust enter for example:\n\nPneumatic Connector  #Xs2a\nCamera #!$cg\nPower Supply 24V #p%qz\n\nYou can try to change manually the base64 code - for testing if the CRC4 works.\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "Techsppoks&quot;,&quot;Mashable&quot;]]},14:{family:[&quot;PC Brands&quot;],types:[[&quot;Asus&quot;,&quot;Intel&quot;,&quot;Dell&quot;,&quot;HP&quot;,&quot;Alienware&quot;,&quot;Microsoft&quot;,&quot;Apple&quot;,&quot;ACer&quot;,&quot;Sony&quot;,&quot;MSI&quot;,&quot;Razer&quot;,&quot;Toshiba&quot;,&quot;Gateway&quot;,&quot;LG&quot;,&quot;Compaq&quot;,&quot;Panasonic&quot;]]},15:{family:[&quot;<span class=\"highlight\">Evil</span> &hellip; Techsppoks&quot;,&quot;Mashable&quot;]]},14:{family:[&quot;PC Brands&quot;],types:[[&quot;Asus&quot;,&quot;Intel&quot;,&quot;Dell&quot;,&quot;HP&quot;,&quot;Alienware&quot;,&quot;Microsoft&quot;,&quot;Apple&quot;,&quot;ACer&quot;,&quot;Sony&quot;,&quot;MSI&quot;,&quot;Razer&quot;,&quot;Toshiba&quot;,&quot;Gateway&quot;,&quot;LG&quot;,&quot;Compaq&quot;,&quot;Panasonic&quot;]]},15:{family:[&quot;<span class=\"highlight\">Evil</span> &hellip; ",
            "title": "Convert Binary/Hex to Base91 / Ascii85 / Base64"
        },
        {
            "tags": [
                "nginx",
                "redirect"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 66016226,
            "is_answered": false,
            "question_id": 66016014,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1612296521,
            "creation_date": 1612293486,
            "body": "\nand\n\n at end of regex will you give trailing &quot;uri path&quot; (after  and before questionmark ) in your capture group .\nUntested.\n\nOK, now I understand your question. LOL. Gimmi a sec.\n\nI know  is evil. But I think I need it.\n\nCheck with  and look for  and .\nUntested.\n\nAnother method comes to mind.\n\nUse only when order of parameters is fixed.\nUntested.\n\nIn general regarding Nginx and Regex:\n\nI like named variables (see ). So no mixup with  in different scopes (http, server, location, deeper location, if, ...).\n will match all characters except of .\nSo  will make sure that you get the whole argument but not more.\n\n",
            "excerpt": "I know if is <span class=\"highlight\">evil</span>. But I think I need it.\nlocation ~ ^/a(/.*$|$)\n{\n    set $target_uri &#39;/b/c&#39;;\n    set $change_target_uri &#39;&#39;;\n    if ($arg_x)  # you can&#39;t have `<span class=\"highlight\">and</span>` in Nginx `if` condition! &hellip; In general regarding Nginx <span class=\"highlight\">and</span> <span class=\"highlight\">Regex</span>:\n\nI like named variables (see blubbi). So no mixup with $1 in different scopes (http, server, location, deeper location, if, ...). &hellip; ",
            "title": "How to redirect URLs with changing a path, but maintaining a parameter on Nginx?"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "cross-domain",
                "browser-plugin",
                "firefox-addon-webextensions"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 65368730,
            "is_answered": false,
            "question_id": 40572065,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1608373093,
            "creation_date": 1608373093,
            "body": "I had a similar issue today where my webextension had to call a javascript function that can only be accessed from the context of a specific web page and I was kinda annoyed that I was supposed to do all the script injection and json serialization and whatnot. But there&#39;s actually a pretty simple solution:\n\n will execute whatever code you pass to it in the context of the page instead of your content script.\nyeah, I know eval is evil, but in this context it really makes sense, because what I want to do (execute arbitrary code in the context of a web page) is evil by definition. It&#39;s like parsing HTML with regex; once you&#39;re at that point, you&#39;re tainted. Also, you&#39;re finally free from the burdens of writing code that is considered lawful good. So let&#39;s embrace the eval, just this one time ;)\n",
            "excerpt": "the script injection <span class=\"highlight\">and</span> json serialization <span class=\"highlight\">and</span> whatnot. &hellip; It&#39;s like parsing HTML with <span class=\"highlight\">regex</span>; once you&#39;re at that point, you&#39;re tainted. Also, you&#39;re finally free from the burdens of writing code that is considered lawful good. &hellip; ",
            "title": "Calling webpage JavaScript methods from browser extension"
        },
        {
            "tags": [
                "php",
                "preg-match",
                "extract",
                "alphanumeric"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 65283534,
            "is_answered": false,
            "question_id": 63154404,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1607919468,
            "creation_date": 1607919468,
            "body": "Unless you are doing hundreds of thousands of iterations of this technique, I don&#39;t think &quot;speed&quot; should factor into as a decision making criteria.\nFor me, I place a high importance on directness then readability.  For this reason, I probably wouldn&#39;t entertain a technique that generated arrays, incorporated a loop, or frankly, made more than one function call.  Regex isn&#39;t evil (I, for one, love it), so unless there is another single-function technique, I opt for regex every time.\nThat said, the only non-regex way (that isn&#39;t terribly convoluted) that I found is as @rid commented with .\n\n has the benefit of being more concise, arguably easier to read, and will not cause headaches if  your project needs to honor multi-byte characters in the future.\n does not generate a temporary array/variable from which the correct value must be extracted, and is very likely to outperform any  call but not to a noticeable/valuable degree.\n\nNotice that in my demo, the &quot;character mask&quot; seems to accept not more than one range of characters.  It would be handy if I could specify , but I was unable to get that to work.\nCode: (Demo)\n\nOutput:\n\nUltimately, I&#39;d go for  because I have used it thousands of times in my career as a php dev.  Conversely, I&#39;ve probably used  a maximum of 1 time in my career (outside of playing around on Stack Overflow) -- so there is a lack of familiarity / intuitive-ness.\n",
            "excerpt": "<span class=\"highlight\">Regex</span> isn&#39;t <span class=\"highlight\">evil</span> (I, for one, love it), so unless there is another single-function technique, I opt for <span class=\"highlight\">regex</span> every time. &hellip; That said, the only non-<span class=\"highlight\">regex</span> way (that isn&#39;t terribly convoluted) that I found is as @rid commented with strcspn(). &hellip; ",
            "title": "Get the first letter/number of string that is not a special character"
        },
        {
            "tags": [
                "java",
                "date",
                "dateformatter"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 65018928,
            "is_answered": false,
            "question_id": 65017630,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1606381554,
            "creation_date": 1606381554,
            "body": "After looking at the documentation, there seems to be no way to see which of the optional formats succeeded. So the easy way out is to build a collection of formatters to try, and to use them in order until one succeeds. However, this is ugly: you are using exceptions for flow-control\n\nAn existing question on SO deals with this problem. My suggested answer goes along the lines of one of its answers.\nA cleaner option may be to use your formats both as regular expressions (to only examine likely candidates) and as actual date formats (to parse only the good candidates). This comes at a cost in readability, and will still throw exceptions when parsing ambiguous formats, because the format-to-regex code is very simplistic:\n\nThe initial code could now be written as:\n\nBefore complicating this further, I would probably just go with ugly exceptions-as-control-flow (1st code snippet) as a lesser evil to re-implementing a time-parsing library.\ndisclaimer: above code is un-tested and may not compile and/or perform as expected\n",
            "excerpt": "This comes at a cost in readability, <span class=\"highlight\">and</span> will still throw exceptions when parsing ambiguous formats, because the format-to-<span class=\"highlight\">regex</span> code is very simplistic:\nenum FormatCandidate {\n    YMD(&quot;yyyyMMdd&quot;), &hellip; to re-implementing a time-parsing library.\ndisclaimer: above code is un-tested <span class=\"highlight\">and</span> may not compile <span class=\"highlight\">and</span>/or perform as expected &hellip; ",
            "title": "How to get date pattern for a date in Java"
        },
        {
            "tags": [
                "ruby",
                "string",
                "methods",
                "startswith"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 64953628,
            "is_answered": false,
            "question_id": 64951639,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1606044583,
            "creation_date": 1606044583,
            "body": "As a general rule, you should never ever blindly execute inputs from untrusted sources.\nInterpolating untrusted input into a  is not quite as bad as interpolating it into, say, , because the worst thing an attacker can do with a  is to construct an Evil Regex to conduct a Regular expression Denial of Service (ReDoS) attack (see also the section on Performance in the  documentation), whereas with , they could execute arbitrary code, including but not limited to, deleting the entire file system, scanning memory for unencrypted passwords / credit card information / PII and exfiltrate that via the network, etc.\nHowever, it is still a bad idea. For example, when I say &quot;the worst thing that happen is a ReDoS&quot;, that assumes that there are no bugs in the  implementation (Onigmo in the case of YARV, Joni in the case of JRuby and TruffleRuby, etc.) Ruby&#39;s s are quite powerful and thus Onigmo, Joni and co. are large and complex pieces of code, and may very well have their own security holes that could be used by a specially crafted .\nYou should properly sanitize and escape the user input before constructing the . Thankfully, the Ruby core library already contains a method which does exactly that: . So, you could do something like this:\n\nThe reason why your attempt at using  didn&#39;t work, is that  is for representing a  the same way you would have to write it as a  literal, i.e. it is escaping  metacharacters, not  metacharacters and it is including the quote characters around the  that you need to have it recognized as a  literal. You can easily see that when you simply try it out:\n\nSo, that means that \n\nincludes the quotes (which you don&#39;t want),\nescapes characters that don&#39;t need escaping in  just because they need escaping in s (e.g.  or ), and\ndoesn&#39;t escape characters that don&#39;t need escaping in s (e.g. , , , , , , ).\n\n",
            "excerpt": "Interpolating untrusted input into a Regexp is not quite as bad as interpolating it into, say, Kernel#eval, because the worst thing an attacker can do with a Regexp is to construct an <span class=\"highlight\">Evil</span> <span class=\"highlight\">Regex</span> to conduct &hellip; Ruby&#39;s Regexps are quite powerful <span class=\"highlight\">and</span> thus Onigmo, Joni <span class=\"highlight\">and</span> co. are large <span class=\"highlight\">and</span> complex pieces of code, <span class=\"highlight\">and</span> may very well have their own security holes that could be used by a specially crafted Regexp. &hellip; ",
            "title": "Get the same results from string.start_with? and string[ ]"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 64651494,
            "is_answered": false,
            "question_id": 64650569,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1604345077,
            "creation_date": 1604342766,
            "body": "Are you sure you have to do that? If you have only a limited number of possible functions, the safest thing to do is to simply map them, and then separate the wanted function and the arguments in the variable, using an array instead. More on that later.\nIf you wanted to provide a generic means for calling functions, you could for example:\n\nI&#39;m using  here, since  is a language statement and not a function, and therefore wouldn&#39;t work like this. If you had to echo here, you&#39;d have to make your own echo wrapper function, like , and call that instead.\nOr, for more readable code, you could list the array as:\n\nIf you needed multiple arguments, you could use this structure:\n\nWhere the arguments listed in the arguments array, unpacked with the splat operator, are in the same order as the target function&#39;s arguments.\nThere are of course only a limited number of useful functions that will directly output anything. Therefore, in the above example we capture the result from  instead and then echo; this simply to illustrate the basic use of variable functions and arguments.\nThis approach will however provide unhinged access to any function in your system, and as such shouldn&#39;t be used on anything but data/calls from trusted sources (you). Allowing users to provide any commands will open up your system to a world of mischief and misery.\nTherefore, my initial recommendation of providing a map of functions. You could:\n\nHave an array with a list of allowed core functions,\nHave an array with a list of your custom wrapper functions, or\nCheck for valid wrapper functions named with a prefix\n\nYou could for example implement wrappers as follows:\n\nThis would give you control over what&#39;s executed, and also whether values are returned or output, etc. pre/post-process. And then iterate your variable commands as follows:\n\nFor an additional layer of insulation, create a class with your custom calls as its methods, instead of polluting the global space with more functions. Ciykd use a public router method that handles no-match cases; calling e.g. , where  returns the  methods.\nI often do something like this when I need to map user requests to class public methods that return output; named e.g. ,  etc. and  for a fallback for unmatched requests. Handy for quick prototyping, where  =&gt; .\nIf you&#39;re stuck with receiving a string command (why?), you can use regex to parse it into something you can pass to functions. Or, if you absolutely trust the data,  isn&#39;t inherently and categorically evil, especially where a work-around would make for a more complex but equally wide back-door to your system. It&#39;s just not very elegant and smells of sloppy design.\n",
            "excerpt": ", you can use <span class=\"highlight\">regex</span> to parse it into something you can pass to functions. &hellip; Or, if you absolutely trust the data, eval isn&#39;t inherently <span class=\"highlight\">and</span> categorically <span class=\"highlight\">evil</span>, especially where a work-around would make for a more complex but equally wide back-door to your system. &hellip; ",
            "title": "Eval alternative to run script from string"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "security",
                "denial-of-service",
                "automaton"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 34042556,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1597852429,
            "creation_date": 1449058629,
            "body": "Is there an algorithm to determine whether a given JavaScript regex is vulnerable to ReDoS? The algorithm doesn&#39;t have to be perfect - some false positives and false negatives are acceptable. (I&#39;m specifically interested in ECMA-262 regexes.)\n",
            "excerpt": "Is there an algorithm to determine whether a given JavaScript <span class=\"highlight\">regex</span> is vulnerable to ReDoS? The algorithm doesn&#39;t have to be perfect - some false positives <span class=\"highlight\">and</span> false negatives are acceptable. &hellip; ",
            "title": "How can I programmatically identify evil regexes?"
        },
        {
            "tags": [
                "java",
                "regex",
                "multithreading"
            ],
            "question_score": 22,
            "is_accepted": false,
            "answer_id": 63458755,
            "is_answered": false,
            "question_id": 910740,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1597698915,
            "creation_date": 1597698915,
            "body": "What about checking the user-submitted regex for &quot;evil&quot; patterns prior to execution using one or more regex patterns (this could be in to form of a method called prior to conditional execution of the regex):\nThis regex:\n\nWill match:\n\nThis Regex:\n\nWill match:\n\nThis Regex:\n\nWill match:\n\nI may be a bit naive wrt Regex and Regex DoS, but I can&#39;t help but think that a little pre-screening for known &quot;evil&quot; patterns would go a long way toward preventing issues at execution time, especially if the regex in question is an input provided by an end user.  The patterns above are likely not refined enough, since I am far from an expert on regex.  It is just food for thought, since everything else I have found out there seems to indicate it can&#39;t be done, and focuses on either putting a time-out on the regex engine, or limiting the number of iterations it is allowed to execute.\n",
            "excerpt": "What about checking the user-submitted <span class=\"highlight\">regex</span> for &quot;<span class=\"highlight\">evil</span>&quot; patterns prior to execution using one or more <span class=\"highlight\">regex</span> patterns (this could be in to form of a method called prior to conditional execution of the <span class=\"highlight\">regex</span> &hellip; *a){x} for x \\&gt; 10\n\nI may be a bit naive wrt <span class=\"highlight\">Regex</span> <span class=\"highlight\">and</span> <span class=\"highlight\">Regex</span> DoS, but I can&#39;t help but think that a little pre-screening for known &quot;<span class=\"highlight\">evil</span>&quot; patterns would go a long way toward preventing issues at execution &hellip; ",
            "title": "Cancelling a long running regex match?"
        },
        {
            "tags": [
                "python",
                "python-3.x",
                "python-typing",
                "pep585"
            ],
            "question_score": 18,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 62871524,
            "item_type": "question",
            "score": 18,
            "last_activity_date": 1594748703,
            "creation_date": 1594627137,
            "body": "PEP 585 -- Type Hinting Generics In Standard Collections claims usability under both Python 3.7 and 3.8 with a standard  preamble. Notably:\n\nFor use cases restricted to type annotations, Python files with the  future-import (available since Python 3.7) can parameterize standard collections, including builtins.\n\n\nStarting with Python 3.7, when  is used, function and variable annotations can parameterize standard collections directly. Example:\n\n\nWhile the above toy example does technically parse, that&#39;s about all it does. Attempting to actually use a parametrized builtin collection at runtime under either Python 3.7 or 3.8 invariably raises the dreaded  exception:\n\nNote the  statement is the standard idiom for resolving PEP 563-style postponed annotations at runtime. Don&#39;t even get me started on PEP 563.\nwho you gonna believe: me or your lying PEP?\nThis discourages the devout Pythonista in me. PEP 585 repeatedly claims that it preserves runtime usability:\n\nPreserving the generic type at runtime enables introspection of the type which can be used for API generation or runtime type checking. Such usage is already present in the wild.\n\n\nJust like with the  module today, the parameterized generic types listed in the previous section all preserve their type parameters at runtime:\n\n\nOf course, none of the above works under Python 3.7 or 3.8 – regardless of whether  is enabled or not:\n\nSo PEP 585 blatantly breaks the wild and all existing attempts to introspect generic types at runtime – especially from runtime type checkers. The entire &quot;Parameters to generics are available at runtime&quot; section is a charade.\nAm I missing something painfully obvious or are parametrized builtin collections the poison pill they superficially appear to be? Since evaluating these collections at runtime under Python 3.7 and 3.8 unconditionally raises exceptions, they&#39;re unusable at runtime – rendering them not simply useless but directly harmful for the widespread use case of type introspection and especially runtime type checking.\nbetween a rock and a hard PEP\nAny codebase type-hinting with parametrized builtin collections will be fundamentally incompatible with runtime type checkers under Python 3.7 and 3.8. Codebases preferring runtime to static type checking while preserving backward compatibility with Python &lt; 3.9 (which has yet to even be officially released as of this writing) thus have no choice but to avoid parametrized builtin collections entirely.\nExcept that too is infeasible. Why? Because PEP 585 deprecates the entire hierarchy of  pseudo-containers:\n\nImporting those [e.g., , , ] from  is deprecated. Due to PEP 563 and the intention to minimize the runtime impact of , this deprecation will not generate . Instead, type checkers may warn about such deprecated usage when the target version of the checked program is signalled to be Python 3.9 or newer. It&#39;s recommended to allow for those warnings to be silenced on a project-wide basis.\n\n\nThe deprecated functionality will be removed from the  module in the first Python version released 5 years after the release of Python 3.9.0.\n\nConsider , for example. By 2025 (or shortly thereafter),  and thus  goes away. But  isn&#39;t safely parametrizable under Python 3.7 and 3.8, because doing so renders your project incompatible with anything that introspects types. So  isn&#39;t a viable option, either.\nSo there are no forward- and backward-compatible options. Instead, either:\n\nProhibit type introspection (and thus runtime type checking) entirely by just preferring builtin containers (e.g., ) to  pseudo-containers (e.g., ) or...\nSupport type introspection (and thus runtime type checking) by either:\n\nPreferring  pseudo-containers to builtin containers until 2025. At that time, both the project in question and all downstream projects of that project will need to be refactored as follows:\n\nDrop Python 3.7 and 3.8 support.\nReplace all  pseudo-containers with builtin containers.\n\n\nImmediately dropping Python 3.7 and 3.8 support by preferring builtin containers to  pseudo-containers. This has the distasteful disadvantage of requiring a currently unstable Python interpreter, but... that&#39;s technically an option. Somehow.\n\n\n\nIn 2020, there are no good options – only a spectrum of increasingly horrifying lessers of several malignant evils. One would hope that PEP authors would actually test their implementations at runtime. Yet, here we are, adrift without a paddle in a steaming cesspit of theorycrafted anti-APIs. Welcome to Python.\nbut that&#39;s not all\nThere is technically a third way. It&#39;s even more distasteful – but it should technically work. One awful theorycrafting deserves another, I always say!\nSince PEP 563-driven postponed annotations are merely strings, type introspection could cleverly run a regex-based replacement on each type being introspected. For each type that is a postponed annotation, globally replace each substring referencing a parametrized builtin container (e.g., ) in that annotation string with the corresponding substring referencing a parametrized  pseudo-container (e.g., ).\nThe result? A Python 3.7- and 3.8-compatible postponed annotation string safely evaluatable until 2025, at which point that internal replacement (and Python 3.7 and 3.8 support) could just be quietly dropped.\nThat&#39;s a totally cray-cray ludicrous speed kludge for the stars, but... that would probably work. The core issue, of course, is that one shouldn&#39;t need insane hackery just to comply with core official PEPs. But there&#39;s an even deeper underlying cultural issue underneath that technical issue. No one – neither the author of PEP 585 nor any of the commentators reviewing PEP 585 – actually tested their new hypothetical proposed functionality before deprecating the existing well-tested functionality that actually worked.\nCore official PEPs should just work out of the box. Increasingly, they don&#39;t. And that should concern everyone.\n",
            "excerpt": "Since PEP 563-driven postponed annotations are merely strings, type introspection could cleverly run a <span class=\"highlight\">regex</span>-based replacement on each type being introspected. &hellip; <span class=\"highlight\">And</span> that should concern everyone. &hellip; ",
            "title": "Is PEP 585 unusable at runtime under Python 3.7 and 3.8?"
        },
        {
            "tags": [
                "java",
                "double"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 62242174,
            "is_answered": false,
            "question_id": 62240868,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1591515619,
            "creation_date": 1591514948,
            "body": "I assume that &quot;overflow&quot; is talking about a number that is too large to represent.\n\nIf you call  on a &quot;really large number&quot;, you will actually get an INF value ... not an exception1.  So the simple solution2 to numbers that overflow is to use  to test the result of calling .  \n\nIt will be more efficient AND less code to do the conversion and test the result that to (try to) check before doing the test.\n\n\n\n1 - I checked the Java 11 source code.  Look at the code for .  The comments are kind of amusing.\n\n2 - If you are a graduate of the &quot;exceptions are evil&quot; school of thinking, you could use a regex to check the syntax of the string before calling .  My opinion is that it is unnecessary.  Just handle the exception.\n",
            "excerpt": "It will be more efficient <span class=\"highlight\">AND</span> less code to do the conversion <span class=\"highlight\">and</span> test the result that to (try to) check before doing the test.\n\n\n\n1 - I checked the Java 11 source code. &hellip; The comments are kind of amusing.\n\n2 - If you are a graduate of the &quot;exceptions are <span class=\"highlight\">evil</span>&quot; school of thinking, you could use a <span class=\"highlight\">regex</span> to check the syntax of the string before calling parseDouble. &hellip; ",
            "title": "Java Parse String to Double Overflow Check"
        },
        {
            "tags": [
                "regex",
                "apache",
                "nginx",
                "nginx-reverse-proxy"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 62199241,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1591305525,
            "creation_date": 1591286915,
            "body": "guys,\n\nI&#39;m in the process of migrating an application using a front Apache reverse-proxy to a NGinx reverse proxy.\n\nI&#39;m trying to find the right way to convert this rule :\n\n\n\nFrom my understanding, it means &quot;If the requested file name starts with /web, but doesn&#39;t contain the string &#39;-staging/&#39;, then redirect to the same URI without the /web, using a 307 HTTP redirection.\n\nI&#39;ve been trying using locations to get this, then regex, (trying to prevent using evil &quot;if&quot;), but no way, it&#39;s beyond my knowledge.\n\nCould someone help me to figure how to get this properly (the website will have heavy traffic, so, looking for something optimized), please ? Thank you in advance.\n",
            "excerpt": "I&#39;ve been trying using locations to get this, then <span class=\"highlight\">regex</span>, (trying to prevent using <span class=\"highlight\">evil</span> &quot;if&quot;), but no way, it&#39;s beyond my knowledge. &hellip; ",
            "title": "NGinx - Right way to rewrite URI matching a string and not the second"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 6,
            "is_accepted": true,
            "answer_id": 37734685,
            "is_answered": false,
            "question_id": 37734164,
            "item_type": "answer",
            "score": 10,
            "last_activity_date": 1589814973,
            "creation_date": 1465500654,
            "body": " is not a back reference in Java&#39;s regexes, nor in any other flavor I can think of. You only use  when you are replacing something:\n\n\n\nThere is some misinformation about what a back reference is, including the very place I got that snippet from: simple java regex with backreference does not work.\n\n\n\nJava modeled its regex syntax after other existing flavors where the  was already a meta character. It anchors to the end of the string (or line in multi-line mode).\n\nSimilarly, Java uses  for back references. Because regexes are strings, it must be escaped: .\n\nFrom a lexical/syntactic standpoint it is true that  could be used unambiguously (as a bonus it would prevent the need for the &quot;evil escaped escape&quot; when using back references). \n\nTo match a  that comes after the end of a line the regex would need to be :\n\n\n\nIt just makes more sense to use a familiar syntax instead of changing the rules, most of which came from Perl.\n\nThe first version of Perl came out in 1987, which is much earlier than Java, which was released in beta in 1995. \n\nI dug up the man pages for Perl 1, which say:\n\n\n  The bracketing construct  may also be used, in which case  matches the &#39;th substring. (Outside of the pattern, always use  instead of  in front of the digit. The scope of  (and ,  and ) extends to the end of the enclosing BLOCK or eval string, or to the next pattern match with subexpressions. The  notation sometimes works outside the current pattern, but should not be relied upon.) You may have as many parentheses as you wish. If you have more than 9 substrings, the variables , , ... refer to the corresponding substring. Within the pattern, , , etc. refer back to substrings if there have been at least that many left parens before the backreference. Otherwise (for backward compatibilty)  is the same as , a backspace, and  the same as , a tab. And so on. ( through  are always backreferences.)\n\n",
            "excerpt": "The scope of $&lt;digit&gt; (<span class=\"highlight\">and</span> $\\`, $&amp; <span class=\"highlight\">and</span> $&#39;) extends to the end of the enclosing BLOCK or eval string, or to the next pattern match with subexpressions. &hellip; Otherwise (for backward compatibilty) \\10 is the same as \\010, a backspace, <span class=\"highlight\">and</span> \\11 the same as \\011, a tab. <span class=\"highlight\">And</span> so on. (\\1 through \\9 are always backreferences.) &hellip; ",
            "title": "Regex backreferences in Java"
        },
        {
            "tags": [
                "php",
                "string",
                "matching"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 61282294,
            "is_answered": false,
            "question_id": 61282060,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1587165991,
            "creation_date": 1587165991,
            "body": "This sounds more like an algorithms question than a PHP question specifically.  Take a look at What is the fastest substring search algorithm?\n\nWell you can transform this into something like an O(n log n) algorithm, but it depends on the implementation specifics of :\n    \n\n\n\nHere each substring is examined by  exactly once.  Probably a better solution is to compose these strings into a series of regexes.  Internally, the regex engine is able to scan text very efficiently, typically scanning each character only one time:\n\nex.:\n\n\n\nFor your purposes the practical solution is very much dependent upon how many rigs you&#39;ve got an how many substrings per rig.  I suspect that unless you&#39;re dealing with tens of thousands of rigs or unless performance is a critical aspect of this application, a naive O(n^2) solution would probably suffice.  (Remember that premature optimization is the root of all evil!)  A simple benchmark would bear this out.\n\nAn even-better solution -- and potentially faster -- would be to set up an elasticsearch instance, but once again that may be too much effort to go to when a naive approach would suffice in a fraction of the implementation time.\n",
            "excerpt": "Internally, the <span class=\"highlight\">regex</span> engine is able to scan text very efficiently, typically scanning each character only one time:\n\nex.:\n\n&lt;? &hellip; (Remember that premature optimization is the root of all <span class=\"highlight\">evil</span>!)  A simple benchmark would bear this out. &hellip; ",
            "title": "Does a string contain any of a list of substrings in PHP?"
        },
        {
            "tags": [
                "php",
                "regex",
                "bash",
                "awk",
                "sed"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 60476607,
            "is_answered": false,
            "question_id": 23706113,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1583116553,
            "creation_date": 1583076051,
            "body": "Goal:\n\nRemove  from the beginning of every PHP file&#39;s first line using the stream editor, sed.\n\nDiscussion:\n\nThe stream editor has implicit and explicit line addressing. If you omit line addresses (numeric, regular expressions, or a combination of both), then the entire file is processed.\n\nPoint 1:\n\nIf you only want to target the first line, then you should specify it explicitly.\n\n\n\nHowever, since you are trying to rid your files of &quot;evil&quot;, you probably want to remove &quot;evil&quot; anywhere (globally) it is found on the first line.\n\n\n\nPoint 2:\n\nThe &quot;evil&quot; you are dealing with uses non-alpha numeric characters, so you must be wary of using it as input in various contexts. In order to use a regular expression to search for regular expression meta-characters (?, +, *, [, ], ., et al), you must either:\n\n\nEscape the meta-characters with backslashes to avoid pattern\ncollisions (Example: ), or\nChange the regular expression pattern delimiter to avoid a pattern collision, or\nBoth (This is what you should do in this case).\n\n\nIn sed, you can change the regex pattern delimiter by escaping a character before your pattern begins.\n\nExample:\n\n\n\nPoint 3:\n\nYou can search for strings as a  with regular expressions in sed! By definition, the most basic pattern is a sequence of characters. However, you must adhere to point number two above and escape any regex meta-characters, or the default pattern delimiter, /, if necessary.\n\nSolution 1:\n\nYour evil, I mean regex pattern, has regex meta-characters and the default pattern delimiter embedded in it!\n\n\n\nI would prescribe the following. Notice that I am now using double quotes because I want the shell to do variable interpolation before executing . Also, because I changed the regex pattern delimiter to , I did not need to escape the two forward slashes associated with that micro block quote. :-)\n\n\n\nNote: I will go out on a limb and say that anyone that puts white spaces in their file names should consider using the underscore, , instead.\n\nMr. @Ed Morton above is trying to warn against the possibility of word splitting, but  should prevent it if you pass your list into a function like above.\n\nHidden, non-printing characters in file names can be hard to deal with, but this specific solution should work for your problem to a high degree of certainty (99.9999%).\n\nSolution 2:\n\nMore generically:\n\n\n\nSolution 3:\n\nIn the event that it would be better to delete the first line of all the files ...\n\n\n\nFinal Note:\n\nBe sure to execute this solution with enough permissions, or else the  command will return messages to  in the following format.\n\n\n",
            "excerpt": "However, you must adhere to point number two above <span class=\"highlight\">and</span> escape any <span class=\"highlight\">regex</span> meta-characters, or the default pattern delimiter, /, if necessary. &hellip; Solution 1:\n\nYour <span class=\"highlight\">evil</span>, I mean <span class=\"highlight\">regex</span> pattern, has <span class=\"highlight\">regex</span> meta-characters <span class=\"highlight\">and</span> the default pattern delimiter embedded in it!\n\n&lt;?php /**/ eval(base64_decode(&quot;aWYoZnVuY3Rpb25&quot;));? &hellip; ",
            "title": "sed causing bash script to hang"
        },
        {
            "tags": [
                "python",
                "regex",
                "python-3.x"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 59669445,
            "is_answered": false,
            "question_id": 59668935,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1579918713,
            "creation_date": 1578591452,
            "body": "Your pattern is affected by catastrophic backtracking.\n\nHere is an alternative pattern that should work with your input:\n\n\n\nThis assumes that there must always be at least one non-word character separating the words (otherwise it would just match one long, unbroken word).\n\n(See also: How can I recognize an evil regex?)\n",
            "excerpt": "Here is an alternative pattern that should work with your input:\n\n<span class=\"highlight\">regex</span> = r&quot;preceding[^A-Za-z0-9\\n\\r]+(?:\\w+[^A-Za-z0-9\\n\\r]+)+? &hellip; (See also: How can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>?) &hellip; ",
            "title": "Python RegEx findall not responding"
        },
        {
            "tags": [
                "r"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 59699127,
            "is_answered": false,
            "question_id": 59699094,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1578782303,
            "creation_date": 1578781030,
            "body": "\n\nSince you want to preserve the single , you can use any of the following for more-specific patterns:\n\n\n\n(The exception for  in the second example is not strictly needed here, but provided as an example.)\n\nThe use of a &quot;look-ahead&quot; ( is used because you stated the requirement for a space before and after; if you use a pattern of , then it will miss many of the single letters (due to recursive replacements). If you relax this a little, then you can use word-boundaries, as in\n\n\n\n(While using perl-style regexes can technically have a performance penalty, I suspect that that really only matters if you&#39;re doing a lot and need to improve performance as much as you can. Not strictly required, and early optimization is &quot;the root of all evil&quot; - Donald Knuth)\n\nNote: In this last pattern, I&#39;m also excepting a lower-case  in addition to the upper-case ; if you are confident that you will never see an otherwise-valid , then you can adjust your pattern to use  instead. (Thanks to @jay.sf for highlighting this assumption.)\n",
            "excerpt": "= )&quot;, &quot;&quot;, &quot;I am a text r r o n n r <span class=\"highlight\">and</span> here&quot;, perl = TRUE)\n# [1] &quot;I am a text <span class=\"highlight\">and</span> here&quot;\n\n### any single-letter except &quot;a&quot; <span class=\"highlight\">and</span> &quot;i&quot;\ngsub(&quot;\\\\s[B-HJ-Zb-hj-z](? &hellip; Not strictly required, <span class=\"highlight\">and</span> early optimization is &quot;the root of all <span class=\"highlight\">evil</span>&quot; - Donald Knuth)\n\nNote: In this last pattern, I&#39;m also excepting a lower-case i in addition to the upper-case I; if you are confident &hellip; ",
            "title": "Remove single alphabetic letters strings"
        },
        {
            "tags": [
                "regex",
                "html-parsing"
            ],
            "question_score": 236,
            "is_accepted": false,
            "answer_id": 44577760,
            "is_answered": false,
            "question_id": 590747,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1576560760,
            "creation_date": 1497564407,
            "body": "HTML/XML is divided into markup and content. \nRegex is only useful doing a lexical tag parse.\nI guess you could deduce the content.\nIt would be a good choice for a SAX parser.\nTags and content could be delivered to a user\ndefined function where nesting/closure of elements\ncan be kept track of.  \n\nAs far as just parsing the tags, it can be done with\nregex and used to strip tags from a document.\n\nOver years of testing, I&#39;ve found the secret to the\nway browsers parse tags, both well and ill formed.  \n\nThe normal elements are parsed with this form:\n\nThe core of these tags use this regex\n\n\n\nYou&#39;ll notice this  as one of the alternations.\nThis will match unbalanced quotes from ill-formed tags.  \n\nIt is also, the single most root of all evil to regular expressions.\nThe way it&#39;s used will trigger a bump-along to satisfy it&#39;s greedy, must-match\nquantified container.  \n\nIf used passively, there is never a problem\nBut, if you force something to match by interspersing it with\na wanted attribute/value pair, and don&#39;t provide adequate protection\nfrom backtracking, it&#39;s an out of control nightmare.\n\nThis is the general form for just plain old tags.\nNotice the   representing the tag name?\nIn reality, the legal characters representing the tag name\nare an incredible list of Unicode characters.  \n\n\n\n\n\nMoving on, we also see that you just can&#39;t search for a specific tag\nwithout parsing ALL tags.\nI mean you could, but it would have to use a combination of\nverbs like (*SKIP)(*FAIL) but still all tags have to be parsed.\n\nThe reason is that tag syntax may be hidden inside other tags, etc.\n\nSo, to passively parse all tags, a regex is needed like the one below.\nThis particular one matches invisible content as well.\n\nAs new HTML or xml or any other develop new constructs, just add it as\none of the alternations. \n\n\n\nWeb page note - I&#39;ve never seen a web page (or xhtml/xml) that this\nhad trouble with. If you find one, let me know.  \n\nPerformance note - It&#39;s quick. This is the fastest tag parser I&#39;ve seen\n(there may be faster, who knows).\nI have several specific versions.  It is also excellent as scraper\n(if you&#39;re the hands-on type).\n\n\n\nComplete raw regex  \n\n  \n\nFormatted look  \n\n\n",
            "excerpt": "HTML/XML is divided into markup <span class=\"highlight\">and</span> content. \n<span class=\"highlight\">Regex</span> is only useful doing a lexical tag parse.\nI guess you could deduce the content.\nIt would be a good choice for a SAX parser. &hellip; As far as just parsing the tags, it can be done with\n<span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> used to strip tags from a document. &hellip; ",
            "title": "Using regular expressions to parse HTML: why not?"
        },
        {
            "tags": [
                "c++",
                "boost",
                "boost-spirit"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 59200636,
            "is_answered": false,
            "question_id": 59198525,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1575567901,
            "creation_date": 1575567901,
            "body": "The simplest without semantic actions&#185; would be to parse into an AST which you then interpret.\n\nThe more tedious approach would be to use semantic actions to build the result. (Keep in mind this gets problematic with backtracking grammars.)\n\nSimilar answers I have made:\n\n\nParsing comma-separated list of ranges and numbers with semantic actions\nA regex-based approach for range-expressions here method for expand a-z to abc...xyz form\nA competing version that uses C for performance method for expand a-z to abc...xyz form\n\n\nWithout further ado:\n\nUsing an AST Representation\n\nAn example AST:\n\n\n\n\n  The  is a good place where we can do logic asserts like &quot;the number of periods isn&#39;t zero&quot; or &quot;if the number of periods is 1, start and end must coincide&quot;.\n\n\nNow, for our end-result we want to have a translation to just-a-vector-of-V:\n\n\n\nNow that we have the basics down, let&#39;s parse and test:\n\nParsing\n\nFirst, let&#39;s adapt the AST types:\n\n\n\n\n  Note: the &quot;natural grammar order&quot; of the adapted properties makes attribute propagation painless without semantic actions\n\n\nNow let&#39;s roll a grammar:\n\n\n\n\n  Note:\n  \n  \n   enables rule debugging\n  The order of  is important, since  also parses individual numbers (so it would prevent  from being parsed in time.\n  \n\n\nA simple utility to invoke the parser and also  the intermediate representation:\n\n\n\nTesting\n\nThe proof of the pudding is in the eating:\n\nLive On Coliru\n\n\n\nPrinting\n\n\n\nUsing Semantic Actions Instead\n\nThis might be more efficient and I found I actually prefer the expressiveness of this approach.\n\nIt might not scale well as the grammar grows more complicated though.\n\nHere we &quot;invert&quot; the flow:\n\n\n\nHere  and  in the semantic actions are Lazy Actors that basically perform the same operation as  did in the AST-based appraoch, but\n\n\non the fly\nthe first operand is implicit (it is the last value already at the back of the vector)\n\n\nThis makes for a few extra checks (we don&#39;t want UB when the user passes a string that starts with  or ):\n\n\n\nTo avoid tedious  in the semantic actions, let&#39;s adapt as Phoenix Functions:\n\n\n\nParsing\n\nThe  helper became simpler because we have no intermediate representation:\n\n\n\nTesting\n\nAgain, the proof of the pudding is in the eating. The test program with unmodified :\n\nLive On Coliru\n\n\n\nPrinting the same as before:\n\n\n\n\n\n&#185; Boost Spirit: &quot;Semantic actions are evil&quot;?\n",
            "excerpt": "Similar answers I have made:\n\n\nParsing comma-separated list of ranges <span class=\"highlight\">and</span> numbers with semantic actions\nA <span class=\"highlight\">regex</span>-based approach for range-expressions here method for expand a-z to abc...xyz form\nA competing &hellip; the same as before:\n\n&quot;1 1.5 2 2.5 3 FOR 4 3.5&quot; -&gt; PASSED {  {1, 1.5, 2, 2.5, 3, 3, 3, 3, 3.5, }\n&quot;1 2 3 4 RAMP 3 6 7 8&quot; -&gt; PASSED {  {1, 2, 3, 4, 5, 6, 7, 8, }\n\n\n\n\n&#185; Boost Spirit: &quot;Semantic actions are <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Boost spirit: how to use custom logic when parsing a list of doubles with text specifiers"
        },
        {
            "tags": [
                "regex",
                "bash",
                "scripting",
                "escaping"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 36345272,
            "is_answered": false,
            "question_id": 33744733,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1572984201,
            "creation_date": 1459465280,
            "body": "Just loop until you&#39;ve found a one line fortune:\n\n\n\nThe  loop will keep going until  exits with a nonzero value, which only happens when we&#39;ve found our one-liner.  The  code reads the whole fortune and then, at the end, checks to see if the number of records (, the line count) is one.  If so, print the last (the only) line and exit the  loop.\n\nI assume you had used  as an effort to limit the size, so I expanded it to 80.  Obviously, you can remove it, return it to 65, or change it to another value as you see fit.\n\n\n\nHere&#39;s a variant that accepts one-line quotes (with a second line of attribution) and prints on one line:\n\n\n\nThis adds two conditionals.  First, we track the content of line 1.  Second, if line two has  as its first whitespace-delimited content, decrement the line count and replace the leading whitespace with a single space (altering  causes  to be respaced), and prepend the previous line so the final clause only sees one line.\n\nSo e.g. this quote:\n\n\n\nis now accepted after becoming:\n\n\n\n\n\nTo exclude  (a noble pursuit &#128515;):\n\n\n\nAll I did was say there is no index for &quot;Evil&quot; in the final condition. You could use an extended regex instead with  although note that  regexes do not allow numeric quantifiers (so  is fine but  and  won&#39;t work). If you want case-insensitive, you have to do .\n",
            "excerpt": "index($0, &quot;<span class=\"highlight\">Evil</span>&quot;)) { print; exit 1 } }\n&#39;; do true; done\n\n\nAll I did was say there is no index for &quot;<span class=\"highlight\">Evil</span>&quot; in the final condition. You could use an extended <span class=\"highlight\">regex</span> instead with (NR == 1 &amp;&amp; ! &hellip; /<span class=\"highlight\">Evil</span>/) although note that awk regexes do not allow numeric quantifiers (so /a+/ is fine but /a{1,}/ <span class=\"highlight\">and</span> /a{1,9}/ won&#39;t work). If you want case-insensitive, you have to do tolower($0) !~ /<span class=\"highlight\">evil</span>/. &hellip; ",
            "title": "Fortune with -m exclude string"
        },
        {
            "tags": [
                "regex",
                "html-parsing"
            ],
            "question_score": 201,
            "is_accepted": false,
            "answer_id": 4234491,
            "is_answered": false,
            "question_id": 4231382,
            "item_type": "answer",
            "score": 726,
            "last_activity_date": 1571920382,
            "creation_date": 1290280762,
            "body": "Oh Yes You Can Use Regexes to Parse HTML!\nFor the task you are attempting, regexes are perfectly fine!\nIt is true that most people underestimate the difficulty of parsing HTML with regular expressions and therefore do so poorly.\nBut this is not some fundamental flaw related to computational theory. That silliness is parroted a lot around here, but don’t you believe them.\nSo while it certainly can be done (this posting serves as an existence proof of this incontrovertible fact), that doesn’t mean it&#160;should&#160;be.\nYou must decide for yourself whether you’re up to the task of writing what amounts to a dedicated, special-purpose HTML parser out of regexes. Most people are not.\nBut I am. ☻\n\nGeneral Regex-Based HTML Parsing Solutions\nFirst I’ll show how easy it is to parse arbitrary HTML with regexes. The full program’s at the end of this posting, but the heart of the parser is:\n\nSee how easy that is to read?\nAs written, it identifies each piece of HTML and tells  where it found that piece. You could easily modify it to do whatever else you want with any given type of piece, or for more particular types than these.\nI have no failing test cases (left :): I’ve successfully run this code on more than 100,000 HTML files — every single one I could quickly and easily get my hands on. Beyond those, I’ve also run it on files specifically constructed to break na&#239;ve parsers.\nThis is not a na&#239;ve parser.\nOh, I’m sure it isn’t perfect, but I haven’t managed to break it yet.  I figure that even if something did, the fix would be easy to fit in because of the program’s clear structure. Even regex-heavy programs should have stucture.\nNow that that’s out of the way, let me address the OP’s question.\nDemo of Solving the OP’s Task Using Regexes\nThe little  program I include below produces the following output, so that you can see that parsing HTML with regexes works just fine for what you wish to do:\n\nParse Input Tags, See No Evil Input\nHere’s the source for the program that produced the output above.\n\nThere you go! Nothing to it! :)\nOnly  you can judge whether your skill with regexes is up to any particular parsing task. Everyone’s level of skill is different, and every new task is different. For jobs where you have a well-defined input set, regexes are obviously the right choice, because it is trivial to put some together when you have a restricted subset of HTML to deal with. Even regex beginners should be handle those jobs with regexes.  Anything else is overkill.\nHowever, once the HTML starts becoming less nailed down, once it starts to ramify in ways you cannot predict but which are perfectly legal, once you have to match more different sorts of things or with more complex dependencies, you will eventually reach a point where you have to work harder to effect a solution that uses regexes than you would have to using a parsing class. Where that break-even point falls  depends again on your own comfort level with regexes.\nSo What Should I Do?\nI’m not going to tell you what you must do or what you cannot do.  I think that’s Wrong. I just want to present you with possibilties, open your eyes a bit. You get to choose what you want to do and how you want to do it. There are no absolutes — and nobody else knows your own situation as well as you yourself do. If something seems like it’s too much work, well, maybe it is.  Programming should be fun, you know. If it isn’t, you may be doing it wrong.\nOne can look at my  program in any number of valid ways.  One such is that you indeed can parse HTML with regular expressions. But another is that it is much, much, much harder than almost anyone ever thinks it is. This can easily lead to the conclusion that my program is a testament to what you should not do, because it really is too hard.\nI won’t disagree with that.  Certainly if everything I do in my program doesn’t make sense to you after some study, then you should not be attempting to use regexes for this kind of task. For specific HTML, regexes are great, but for generic HTML, they’re tantamount to madness. I use parsing classes all the time, especially if it’s HTML I haven’t generated myself.\nRegexes  optimal for small HTML parsing problems,  pessimal for large ones\nEven if my program is taken as  illustrative of why you should not use regexes for parsing general HTML — which is OK, because I kinda meant for it to be that ☺  — it still should be an eye-opener so more people break the terribly common and nasty, nasty habit of writing unreadable, unstructured, and unmaintainable patterns.\nPatterns do not have to be ugly, and they do not have to be hard. If you create ugly patterns, it is a reflection on you, not them.\nPhenomenally Exquisite Regex Language\nI’ve been asked to point out that my proferred solution to your problem has been written in Perl. Are you surprised? Did you not notice? Is this revelation a bombshell?\nIt is true that not all other tools and programming languages are quite as convenient, expressive, and powerful when it comes to regexes as Perl is. There’s a big spectrum out there, with some being more suitable than others.  In general, the languages that have expressed regexes as part of the core language instead of as a library are easier to work with. I’ve done nothing with regexes that you couldn’t do in, say, PCRE, although you would structure the program differently if you were using C.\nEventually other languages will be catch up with where Perl is now in terms of regexes.  I say this because back when Perl started, nobody else had anything like Perl’s regexes. Say anything you like, but this is where Perl clearly won: everybody copied Perl’s regexes albeit at varying stages of their development.  Perl pioneered almost (not quite all, but almost) everything that you have come to rely on in modern patterns today, no matter what tool or language you use.  So eventually the others will catch up.\nBut they’ll only catch up to where Perl was sometime in the past, just as it is now.  Everything advances.  In regexes if nothing else, where Perl leads, others follow. Where will Perl be once everybody else finally catches up to where Perl is now?  I have no idea, but I know we too will have moved. Probably we’ll be closer to Perl₆’s style of crafting patterns.\nIf you like that kind  of thing but would like to use it in Perl₅,  you might be interested in Damian Conway’s wonderful Regexp::Grammars module. It’s completely awesome, and makes what I’ve done here in my program seem just as primitive as mine makes the patterns that people cram together without whitespace or alphabetic identifiers.  Check it out!\n\nSimple HTML Chunker\nHere is the complete source to the parser I showed the centerpiece from at the beginning of this posting.\nI am not suggesting that you should use this over a rigorously tested parsing class. But I am tired of people pretending that nobody can parse HTML with regexes just because they can’t. You clearly can, and this program is proof of that assertion.\nSure,  it isn’t easy, but it is possible!\nAnd trying to do so is a terrible waste of time, because good parsing classes exist which you should use for this task.  The right answer to people trying to parse arbitrary HTML is not that it is impossible.  That is a facile and disingenuous answer.  The correct and honest answer is that they shouldn’t attempt it because it is too much of a bother to figure out from scratch; they should not  break their back striving to re&#239;nvent a wheel that works perfectly well.\nOn the other hand, HTML that falls within a predicable subset is ultra-easy to parse with regexes. It’s no wonder people try to use them, because for small problems, toy problems perhaps, nothing could be easier. That’s why it’s so important to distinguish the two tasks — specific vs generic — as these do not necessarily demand the same approach.\nI hope in the future here to see a more fair and honest treatment of questions about HTML and regexes.\nHere’s my HTML lexer.  It doesn’t try to do a validating parse; it just identifies the lexical elements. You might think of it more as an HTML chunker than an HTML parser. It isn’t very forgiving of broken HTML, although it makes some very small allowances in that direction.\nEven if you never parse full HTML yourself (and why should you? it’s a solved problem!), this program has lots of cool regex bits that I believe a lot of people can learn a lot from.  Enjoy!\n\n",
            "excerpt": "_V192234675_.gif&quot;\n        type =&gt; &quot;image&quot;\n\nParse Input Tags, See No <span class=\"highlight\">Evil</span> Input\nHere’s the source for the program that produced the output above.\n#! &hellip; Even if you never parse full HTML yourself (<span class=\"highlight\">and</span> why should you? it’s a solved problem!), this program has lots of cool <span class=\"highlight\">regex</span> bits that I believe a lot of people can learn a lot from.  Enjoy!\n#! &hellip; ",
            "title": "What to do when a regular expression pattern doesn&#39;t match anywhere in a string?"
        },
        {
            "tags": [
                "nginx"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 58299129,
            "is_answered": false,
            "question_id": 49867809,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1570606365,
            "creation_date": 1570606365,
            "body": "I was also searching how to use Nginx&#39;s  with a concatenated string. I found this question, and a bunch of other articles saying &quot;if is evil&quot;, but not offering a replacement.\n\nAnd then I ran into this question, which led me to a solution that is much more compact and elegant - especially when you need multiple  cases, so I&#39;ll post it for other searchers.\n\n\n\nBasically, this compares the first argument from the first line (the concatenated ) with first arguments from other lines ( literal,  regex case insensitive, or  by default), and assigns the second arguments from corresponding lines ( or  in our case, could be anything) to the variable passed as the second argument on the first line ().\n\nSaving a lot of extra lines of code if you need 10+ ifs\n",
            "excerpt": "I found this question, <span class=\"highlight\">and</span> a bunch of other articles saying &quot;if is <span class=\"highlight\">evil</span>&quot;, but not offering a replacement. &hellip; example <span class=\"highlight\">regex</span> case insensitive, or default by default), <span class=\"highlight\">and</span> assigns the second arguments from corresponding lines (1 or 0 in our case, could be anything) to the variable passed as the second argument on &hellip; ",
            "title": "if condition concatenation in nginx conf file"
        },
        {
            "tags": [
                "php",
                "security",
                "http-headers"
            ],
            "question_score": 408,
            "is_accepted": true,
            "answer_id": 4499749,
            "is_answered": false,
            "question_id": 4410704,
            "item_type": "answer",
            "score": 342,
            "last_activity_date": 1564068960,
            "creation_date": 1292938164,
            "body": "Sending headers earlier than the normal course may have far reaching consequences. Below are just a few of them that happened to come to my mind at the moment:\n\n\nWhile current PHP releases may have output buffering on, the actual production servers you will be deploying your code on are far more important than any development or testing machines. And they do not always tend to follow latest PHP trends immediately.\nYou may have headaches over inexplicable functionality loss. Say, you are implementing some kind payment gateway, and redirect user to a specific URL after successful confirmation by the payment processor. If some kind of PHP error, even a warning, or an excess line ending happens, the payment may remain unprocessed and the user may still seem unbilled. This is also one of the reasons why needless redirection is evil and if redirection is to be used, it must be used with caution.\nYou may get &quot;Page loading canceled&quot; type of errors in Internet Explorer, even in the most recent versions. This is because an AJAX response/json include contains something that it shouldn&#39;t contain, because of the excess line endings in some PHP files, just as I&#39;ve encountered a few days ago.\nIf you have some file downloads in your app, they can break too, because of this. And you may not notice it, even after years, since the specific breaking habit of a download depends on the server, the browser, the type and content of the file (and possibly some other factors I don&#39;t want to bore you with).\nFinally, many PHP frameworks including Symfony, Zend and Laravel (there is no mention of this in the coding guidelines but it follows the suit) and the PSR-2 standard (item 2.2) require omission of the closing tag. PHP manual itself (1,2), Wordpress, Drupal and many other PHP software I guess, advise to do so. If you simply make a habit of following the standard (and setup PHP-CS-Fixer for your code) you can forget the issue. Otherwise you will always need to keep the issue in your mind.\n\n\nBonus: a few gotchas (actually currently one) related to these 2 characters:\n\n\nEven some well-known libraries may contain excess line endings after . An example is Smarty, even the most recent versions of both 2.* and 3.* branch have this. So, as always, watch for third party code. Bonus in bonus: A regex for deleting needless PHP endings: replace  with empty text in all files that contain PHP code.\n\n",
            "excerpt": "This is also one of the reasons why needless redirection is <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> if redirection is to be used, it must be used with caution. &hellip; Bonus in bonus: A <span class=\"highlight\">regex</span> for deleting needless PHP endings: replace (\\s*\\?&gt;\\s*)$ with empty text in all files that contain PHP code. &hellip; ",
            "title": "Why would one omit the close tag?"
        },
        {
            "tags": [
                "regex",
                "character",
                "filenames"
            ],
            "question_score": -1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 56795736,
            "item_type": "question",
            "score": -1,
            "last_activity_date": 1561659406,
            "creation_date": 1561655015,
            "body": "I&#39;m looking for a Regex that exchanges all illegal filename chars like () space . etc before the filetype ending like .jpg by an - \n\ni got:\n[^a-zA-Z0-9_-]+\nmatches every illegal filename char, but including file extension\nand\n.*(?=.)\nmatching everything until the last occurence of .\n\nhow do i combine these?\n\none of my evil file names is\n(800x800-png)MGC1000-03EPTD-021_RAL7035-5010.tif.png\n\nafter regex replace it should look like\n-800x800-png-MGC1000-03EPTD-021_RAL7035-5010-tif.png\n\nthe regex should be working in libre office / excel search and replace.\n\nthanks for your help!\n",
            "excerpt": "file extension\n<span class=\"highlight\">and</span>\n.*(? &hellip; one of my <span class=\"highlight\">evil</span> file names is\n(800x800-png)MGC1000-03EPTD-021_RAL7035-5010.tif.png\n\nafter <span class=\"highlight\">regex</span> replace it should look like\n-800x800-png-MGC1000-03EPTD-021_RAL7035-5010-tif.png\n\nthe <span class=\"highlight\">regex</span> should be working &hellip; ",
            "title": "Regex for all illegal filename characters before filetype extension"
        },
        {
            "tags": [
                "regex",
                "bash",
                "sed"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 56150580,
            "is_answered": false,
            "question_id": 56150157,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1557926900,
            "creation_date": 1557926900,
            "body": "As the comment by @Tom above alludes, using regex to parse HTML is generally evil.  That being said, if you only have single level (non nested) HTML tags, then regex might work here.  But, Sed&#39;s regex engine is not very powerful, as it does not support lazy dot.  Here is a way to do this using Perl in the Bash:\n\n\n\nThis outputs:\n\n\n",
            "excerpt": "As the comment by @Tom above alludes, using <span class=\"highlight\">regex</span> to parse HTML is generally <span class=\"highlight\">evil</span>.  That being said, if you only have single level (non nested) HTML tags, then <span class=\"highlight\">regex</span> might work here. &hellip; But, Sed&#39;s <span class=\"highlight\">regex</span> engine is not very powerful, as it does not support lazy dot. &hellip; ",
            "title": "Delete string between 2 paterns on more than one line"
        },
        {
            "tags": [
                "php",
                "html",
                "preg-replace",
                "paragraph"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 56123779,
            "is_answered": false,
            "question_id": 56123741,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1557813154,
            "creation_date": 1557813154,
            "body": "Note that it is generally evil and bad practice to use regex to parse HTML.  But, assuming you only have a string with a set of top level HTML  tags, regex might be an option here.\n\n\n\nThis outputs:\n\n\n\nHere is an explanation of the regex:\n\n\n\nThe only perhaps tricky part of the above regex is:\n\n\n\nThis is a tempered dot, and it works by applying a negative lookahead  at each step we match any character.  This is critical, because it ensures that the regex engine will not accidentally cross over multiple  tags to find .\n",
            "excerpt": "Note that it is generally <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> bad practice to use <span class=\"highlight\">regex</span> to parse HTML.  But, assuming you only have a string with a set of top level HTML &lt;p&gt; tags, <span class=\"highlight\">regex</span> might be an option here. &hellip; .)*\n\n\nThis is a tempered dot, <span class=\"highlight\">and</span> it works by applying a negative lookahead (?!&lt;/p&gt;) at each step we match any character. &hellip; ",
            "title": "How to remove paragraph tag &lt;p&gt; with contains special word in preg_replace?"
        },
        {
            "tags": [
                "reactjs"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 56067658,
            "is_answered": false,
            "question_id": 35754225,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1557516323,
            "creation_date": 1557436392,
            "body": "There doesn&#39;t seem to be a great answer for this, after trying many things.\nIf there is an answer to the question it might be that there&#39;s no good way to do it. I think it doesn&#39;t hurt to look at potential solutions though and the drawbacks of each one.\n\nSolution 1\n\nUse componentWillUpdate. This is deprecated.\n\nSolution 2\n\nValidate state on render - but in your case and in most others, validation may lead to setState, which react tells you never to do in render(), but doesn&#39;t go into any detail about what will actually happen. Of course, you would have to be careful to prevent infinite loops, but if you call setState in render() upon some condition which cannot logically result in an infinite loop, then what unintended side effects could occur? \n\nSolution 3\n\nAs above, make a wrapper function to both validate and set state. But this is no good in my opinion because any state changes done with set state directly cannot be validated. Not only does setState directly not call your validation, but your validation also does not run on the items in the initial state. You might say, why would you give your component an initial state that&#39;s invalid, but I don&#39;t care, if I want to validate state I want it to validate 50000% of the time and no less.\n\nIn a complex form example, there are other issues with this. What if the validity of one field depends on the state of another field? Surely then, a function to re-validate a field when it changes is not enough. Some people will say to test the field being passed in and dispatch multiple events for re-validation, but again, this just isn&#39;t acceptable to me. Its not fullproof, it can lead to bugs, and make things hard to test. \n\nSolution 4\n\nUse componentWillReceiveProps. Not only is this deprecated, but its also static, meaning that you don&#39;t have access to the component instance. For some components this is fine because you can still modify the state that is returned, but if your component has data outside of state and props then you cannot access it, in addition to not being able to use non-static methods, which in my opinion makes this method pretty useless in many situations.\n\nSolution 5\n\nHaven&#39;t tested this one (bear with me, its fairly nuts), but you can override setState function in your component. Insert a callback into every setState instance. Track how many times setState is called and how many times the setState callback is called. Inside the callback, you can check the two counters stored in the object to see if the last callback is currently running, then, if it is, run one function which validates all state. On render, set both of the counters back down to zero. I don&#39;t recommend this by any means. It may work but its a pretty major hack.\n\nSolution 6\n\nYou can use componentDidUpdate, but this is inefficient. You will be blindly setting state with a value that was not validated then letting your component render only to validate it after and possibly call render again. Once again you have to be careful to avoid infinite loop while calling setState in componentDidUpdate. I read elsewhere that at least if you set the state here, the DOM will only re-draw once. In other words, it doesn&#39;t draw immediately after render() but waits until componentDidUpdate is triggered and re-calls render if state changes in there. This seems like maybe its the only solution I know about that react only warns about without telling you explicitely not to do this. In your case, the efficiency does not matter, but what if the state you were trying to validate was a 100 field form with a very expensive render method. Now, on every key down you&#39;ve essentially doubled the amount of work that react has to do to render your components, causing them to first render without being validated, and then filtering and/or validating them for a very likely second render.\n\nAdditional Issues\n\nIn my case, i&#39;m working on a form and not a simple component like you described above. I may go with a mix of solution 3 and 5. Its more complicated then I want though. It involves using one function to filter, generate errors, and set the state for each field (ie. solution 3). And then on componenetDidUpdate I may look for state keys whose values are different from the last value that the field was validated with. The second step here has many ways of doing so, all of which are messy and inefficient. To make it worse, they practically never run under normal circumstances because I always use the first function to update and validate their state, so this makes testing it harder. It&#39;s like leaving some fallback in my app that seems to work but during the entire development process it never triggers except for like the one time that I decided to test it. Seems like a bad idea to me. \n\nThere are additional efficiency concerns I also won&#39;t get into which relates to trying not to re-validate a field if it has the same value it was validated with last time. This is a whole other can of worms, but basically what it boils down to is that you should be able to not only validate a state before render, but you should have access to the previous state as well, so you can save some cpu time and only validate the fields that changed. For example, if you have a very long textarea with some complex regex, it would be nice to not validate that on every component render even if its a separate field that is changing.\n\nAfterthoughts\n\nI&#39;m very thoroughly disappointed that react seems to provide no legitimate option for this. Seeing as you can call setState many times in one operation, and each one will be queued, how is it that they don&#39;t provide us with one callback after all state changes are resolved and we&#39;re about to render? Well if you think about it, the render function itself is this callback, because I think its only ever called after setStates are resolved, but again, its evil to call setState on render, and it would be a million times cleaner to have render() simply receive the correct state, so I don&#39;t see how this is very useful.\n\nDoes anyone know why they decided to get rid of componentWillUpdate?\n",
            "excerpt": "For example, if you have a very long textarea with some complex <span class=\"highlight\">regex</span>, it would be nice to not validate that on every component render even if its a separate field that is changing. &hellip; Well if you think about it, the render function itself is this callback, because I think its only ever called after setStates are resolved, but again, its <span class=\"highlight\">evil</span> to call setState on render, <span class=\"highlight\">and</span> it would &hellip; ",
            "title": "React state validation"
        },
        {
            "tags": [
                "regex",
                "performance",
                "regex-lookarounds",
                "regex-greedy"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 56048020,
            "is_answered": false,
            "question_id": 56046890,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1557393247,
            "creation_date": 1557344783,
            "body": "An optimized expression for finding the final line of a large input string would be the one that introduces explicit boundaries:\n\n\n\nIn languages like PHP it would be written as  (s are delimiters and  is multiline flag). The caret  makes engine not to go through  (evil) regex if it is not matched. So we have defined a very well known boundary, not only for us to recognize the desired part but also for engines and their builtin optimizations.\n\nThe performance of this regex depends on number of lines of input string. So an input string like yours isn&#39;t a problem at all but something like this would bring some attention.\n\nIn both cases it performs fast and doesn&#39;t come to a failure.\n",
            "excerpt": "*\\z/m (/s are delimiters <span class=\"highlight\">and</span> m is multiline flag). The caret ^ makes engine not to go through .* (<span class=\"highlight\">evil</span>) <span class=\"highlight\">regex</span> if it is not matched. &hellip; In both cases it performs fast <span class=\"highlight\">and</span> doesn&#39;t come to a failure. &hellip; ",
            "title": "RegEx for matching the last line"
        },
        {
            "tags": [
                "javascript",
                "node.js",
                "web-crawler",
                "puppeteer"
            ],
            "question_score": 4,
            "is_accepted": true,
            "answer_id": 55576899,
            "is_answered": false,
            "question_id": 55567952,
            "item_type": "answer",
            "score": 6,
            "last_activity_date": 1554826054,
            "creation_date": 1554737347,
            "body": "Short answer: Don&#39;t (re)build a parser in Node.js, use the browser instead\n\nI strongly advise against evaluating or parsing crawled data in Node.js if you are anyway using puppeteer for crawling. When you are using puppeteer you already have a browser with a great sandbox for JavaScript code running in another process. Why risk that kind of isolation and &quot;rebuild&quot; a parser in your Node.js script? If your Node.js script breaks, your whole script will fail. In the worst case, you might even expose your machine to serious risks when you try to run untrusted code inside your main thread.\n\nInstead, try to do as much parsing as possible inside the context of the page. You can even do an evil  call there. There worst that could happen? Your browser hangs or crashes.\n\nExample\n\nImagine the following HTML page (very much simplified). You are trying to read the text which is pushed into an array. The only information you have is that there is an additional attribute  which is set to .\n\n\n\nBad code\n\nHere is a simple example what your code might look like right now:\n\n\n\nIn this example, the script extracts the JavaScript code from the page. Now we have the JavaScript code from the page and we &quot;only&quot; need to parse it, right? Well, this is the wrong approach. Don&#39;t try to rebuild a parser inside Node.js. Just use the browser. There are basically two approaches you can take to do that in your case.\n\n\nInject proxy functions into the page and fake some built-in functions (recommended)\nParse the data on the client-side (!) by using , a regex or  (eval only if really necessary)\n\n\n\n\nOption 1: Inject proxy functions into the page\n\nIn this approach you are replacing native browser functions with your own &quot;fake functions&quot;. Example:\n\n\n\nThis code replaces the original  function with our own function. Everything works as normal, but when an item with our target id is pushed into an array, a special condition is triggered. To inject this function into the page, you could use . To receive the data from Node.js you would have to expose a function to the browser via :\n\n\n\nNow it doesn&#39;t really matter how complex the code of the page is, whether it happens inside some asynchronous handler or whether the page changes the surrounding code. As long as the target data is pushing the data into an array, we will get it.\n\nYou can use this approach for a lot of crawling. Check how the data is processed and replace the low level functions processing the data with your own proxy version of it.\n\nOption 2: Parse the data\n\nLet&#39;s assume the first approach does not work for some reason. The data is in some script tag, but you are not able to get it by using fake functions.\n\nThen you should parse the data, but not inside your Node.js environment. Do it inside the page context. You could run a regular expression or use . But do it before returning the data back to Node.js. This approach has the benefit that if your code will crash your environment for some reason, it will not be your main script, but just your browser that crashes.\n\nTo give some example code. Instead of running the code from the original &quot;bad code&quot; sample, we change it to this:\n\n\n\nThis will only return the parts of the code we need, which can then be fruther processed from within Node.js.\n\n\n\nIndependent of which approach you choose, both ways are much better and more secure than running unknown code inside your main thread. If you absolutely have to process the data in your Node.js environment, use a regular expression for it like shown in the answer from trincot. You should never use eval to run untrusted code.\n",
            "excerpt": "You can even do an <span class=\"highlight\">evil</span> eval call there. There worst that could happen? Your browser hangs or crashes.\n\nExample\n\nImagine the following HTML page (very much simplified). &hellip; which extracts the data you want/); // we run our <span class=\"highlight\">regex</span> in the browser\n    return match; // <span class=\"highlight\">and</span> only return the results\n});\n\n\nThis will only return the parts of the code we need, which can then be fruther &hellip; ",
            "title": "How to get JavaScript object in JavaScript code?"
        },
        {
            "tags": [
                "html",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 55127085,
            "is_answered": false,
            "question_id": 55126617,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1552468849,
            "creation_date": 1552410460,
            "body": "As already mentioned in the comments, Regex is not the way to go here.\n\nThat said: I have come up with this (https://regex101.com/r/3OVaO2/2)\n\n\n\nHowever, this will only remove ONE evil attribute. The problem is, that with PCRE, you cannot have variable length lookbehind assertions. If you switch it to ECMAscript, you can do this (https://regex101.com/r/3OVaO2/3)\n\n\n\nThis will probably do, what you want it to do. Nonetheless, this is NOT the holy grail for sanitizing HTML. Be careful with your output, if you don&#39;t consider your input safe.\n\nAlso, the definition of the tags may need some tweaking, since there may be tags like , which are currently not detected by the regular expression.\n",
            "excerpt": "As already mentioned in the comments, <span class=\"highlight\">Regex</span> is not the way to go here.\n\nThat said: I have come up with this (https://regex101.com/r/3OVaO2/2)\n\n(&lt;\\w+\\s*[^&gt;]*)\\s(?!href|title|alt)[\\w\\-\\d]+=(?:([&#39;&quot;]).*? &hellip; \\2|\\w+)\n\n\nHowever, this will only remove ONE <span class=\"highlight\">evil</span> attribute. The problem is, that with PCRE, you cannot have variable length lookbehind assertions. &hellip; ",
            "title": "Remove all inline html attributes, but leave some"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 55102898,
            "is_answered": false,
            "question_id": 55102827,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1552313797,
            "creation_date": 1552310851,
            "body": "First of all, using regex to parse HTML is evil.\n\nNow that this is out of the way, here is a working script:\n\n\n\nHere is an explanation of the pattern :\n\n\n\nAs for your current errors, you have defined  to be a delimiter for the regex pattern.  This means that if you want to use a literal forward slash, you therefore must escape it (as you would a regex metacharacter).\n",
            "excerpt": "First of all, using <span class=\"highlight\">regex</span> to parse HTML is <span class=\"highlight\">evil</span>. &hellip; This means that if you want to use a literal forward slash, you therefore must escape it (as you would a <span class=\"highlight\">regex</span> metacharacter). &hellip; ",
            "title": "PHP preg_match_all(): Unknown modifier &#39;&gt;&#39;"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 116,
            "is_accepted": false,
            "answer_id": 43872595,
            "is_answered": false,
            "question_id": 12841970,
            "item_type": "answer",
            "score": 17,
            "last_activity_date": 1551298425,
            "creation_date": 1494340192,
            "body": "Detecting evil regexes\n\n\nTry Nicolaas Weideman&#39;s RegexStaticAnalysis project.\nTry my ensemble-style vuln-regex-detector which has a CLI for Weideman&#39;s tool and others.\n\n\nRules of thumb\n\nEvil regexes are always due to ambiguity in the corresponding NFA, which you can visualize with tools like regexper.\n\nHere are some forms of ambiguity. Don&#39;t use these in your regexes.\n\n\nNesting quantifiers like  (aka &quot;star height &gt; 1&quot;). This can cause exponential blow-up. See substack&#39;s  tool.\nQuantified Overlapping Disjunctions like . This can cause exponential blow-up.\nAvoid Quantified Overlapping Adjacencies like . This can cause polynomial blow-up.\n\n\nAdditional resources\n\nI wrote this paper on super-linear regexes. It includes loads of references to other regex-related research.\n",
            "excerpt": "Detecting <span class=\"highlight\">evil</span> regexes\n\n\nTry Nicolaas Weideman&#39;s RegexStaticAnalysis project.\nTry my ensemble-style vuln-<span class=\"highlight\">regex</span>-detector which has a CLI for Weideman&#39;s tool <span class=\"highlight\">and</span> others. &hellip; It includes loads of references to other <span class=\"highlight\">regex</span>-related research. &hellip; ",
            "title": "How can I recognize an evil regex?"
        },
        {
            "tags": [
                "python",
                "json",
                "regex"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 54689474,
            "is_answered": false,
            "question_id": 54689404,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1550144108,
            "creation_date": 1550144108,
            "body": "First, using regex on JSON is evil, almost as bad as killing a kitten.\n\nIf you want to represent  as a valid JSON value, then consider using this structure:\n\n\n\nIf you need the string literal  to behave like a number, then consider just casting it to an integer in your Python script.\n",
            "excerpt": "First, using <span class=\"highlight\">regex</span> on JSON is <span class=\"highlight\">evil</span>, almost as bad as killing a kitten. &hellip; ",
            "title": "Converting string with leading-zero integer to json"
        },
        {
            "tags": [
                "c#",
                ".net-core",
                "asp.net-core-2.0"
            ],
            "question_score": 11,
            "is_accepted": false,
            "answer_id": 54634368,
            "is_answered": false,
            "question_id": 50356774,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1549900565,
            "creation_date": 1549900565,
            "body": "If I should guess, I would blame Regex\n\n\n is not implemented in .NET Core 2.0 (source)\nSome of your 175 patterns may be slightly evil\n\n\nThis may lead to significant performance difference between .NET Framework 4.6 and .NET Core 2.0 which may result in unresponsive application.\n",
            "excerpt": "If I should guess, I would blame <span class=\"highlight\">Regex</span>\n\n\nRegexOptions.Compiled is not implemented in .NET Core 2.0 (source)\nSome of your 175 patterns may be slightly <span class=\"highlight\">evil</span>\n\n\nThis may lead to significant performance difference &hellip; between .NET Framework 4.6 <span class=\"highlight\">and</span> .NET Core 2.0 which may result in unresponsive application. &hellip; ",
            "title": ".NET Core 2.0 Regex Timeout deadlocking"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 54459445,
            "is_answered": false,
            "question_id": 54459081,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1548933658,
            "creation_date": 1548933658,
            "body": "Here&#39;s my try on this: \nYou can see a working demo here.\nThe expression matches everything you want to remove. It uses lookaheads with arbitrary quantifiers - i hope the regex engine you are using supports this.\nMaybe there&#39;s also a solution without those, but that&#39;s what i can offer for now.\n\nEDIT: I changed the expression so it&#39;s not using the evil  anymore.\n",
            "excerpt": "It uses lookaheads with arbitrary quantifiers - i hope the <span class=\"highlight\">regex</span> engine you are using supports this.\nMaybe there&#39;s also a solution without those, but that&#39;s what i can offer for now. &hellip; EDIT: I changed the expression so it&#39;s not using the <span class=\"highlight\">evil</span> .*? anymore. &hellip; ",
            "title": "Regex to strip email subaddressing (dots and +wildcards)"
        },
        {
            "tags": [
                "nginx",
                "nginx-location"
            ],
            "question_score": 262,
            "is_accepted": false,
            "answer_id": 43595323,
            "is_answered": false,
            "question_id": 35320674,
            "item_type": "answer",
            "score": 71,
            "last_activity_date": 1547240028,
            "creation_date": 1493058660,
            "body": "Both the regex and included files are good methods, and I frequently use those.  But another alternative is to use a &quot;named location&quot;, which is a useful approach in many situations —&#160;especially more complicated ones.  The official &quot;If is Evil&quot; page shows essentially the following as a good way to do things:\n\n\n\nThere are advantages and disadvantages to these various approaches.  One big advantage to a regex is that you can capture parts of the match and use them to modify the response.  Of course, you can usually achieve similar results with the other approaches by either setting a variable in the original block or using .  The downside of the regex approach is that it can get unwieldy if you want to match a variety of locations, plus the low precedence of a regex might just not fit with how you want to match locations —&#160;not to mention that  there are apparently performance impacts from regexes in some cases.\n\nThe main advantage of including files (as far as I can tell) is that it is a little more flexible about exactly what you can include —&#160;it doesn&#39;t have to be a full location block, for example.  But it&#39;s also just subjectively a bit clunkier than named locations.\n\nAlso note that there is a related solution that you may be able to use in similar situations: nested locations.  The idea is that you would start with a very general location, apply some configuration common to several of the possible matches, and then have separate nested locations for the different types of paths that you want to match.  For example, it might be useful to do something like this:\n\n\n",
            "excerpt": "Both the <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> included files are good methods, <span class=\"highlight\">and</span> I frequently use those. &hellip; One big advantage to a <span class=\"highlight\">regex</span> is that you can capture parts of the match <span class=\"highlight\">and</span> use them to modify the response. &hellip; ",
            "title": "How can I have same rule for two locations in NGINX config?"
        },
        {
            "tags": [
                "java",
                "regex",
                "scala"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 53603271,
            "is_answered": false,
            "question_id": 53602965,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1543878182,
            "creation_date": 1543878182,
            "body": "It might be related to RegEx DOS.\n\nJava uses the traditional NFA algorithm [1] to support features such as lazy, backtracking and backreference. NFA &#39;eats in&#39; a character each time and tries to match it with regexp, and &#39;spits&#39; it out if it does not match. It will keep spitting until it can find another match (similar to deep first search), and thus bad expressions might cause the RegEx engine to encounter a RegEx DOS, and specifically in Java, it will finally cause a stack overflow for long strings.\n\nAccording to OWASP, evil regexp expressions contain:\nEvil Regex pattern contains:\n\n\nGrouping with repetition (1)\nInside the repeated group:\n\n\nRepetition\nAlternation with overlapping (2)\n\n\n\nAfter a brief examination of your regexp expression, it seems that you have (1) and (2) since you have  (repetition) and  (overlapping), thus I believe you may have to restructure your RegEx expression to avoid RegEx DOS.\n",
            "excerpt": "It will keep spitting until it can find another match (similar to deep first search), <span class=\"highlight\">and</span> thus bad expressions might cause the <span class=\"highlight\">RegEx</span> engine to encounter a <span class=\"highlight\">RegEx</span> DOS, <span class=\"highlight\">and</span> specifically in Java, it will finally &hellip; According to OWASP, <span class=\"highlight\">evil</span> regexp expressions contain:\n<span class=\"highlight\">Evil</span> <span class=\"highlight\">Regex</span> pattern contains:\n\n\nGrouping with repetition (1)\nInside the repeated group:\n\n\nRepetition\nAlternation with overlapping (2)\n\n\n\nAfter a brief &hellip; ",
            "title": "Simple regex fails with stackoverflow on big string in Scala/Java"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "regex"
            ],
            "question_score": 13,
            "is_accepted": false,
            "answer_id": 53555186,
            "is_answered": false,
            "question_id": 3890475,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1543571971,
            "creation_date": 1543571971,
            "body": "Unlike the  function, the  function returns  or  and is generally preferred when simply testing if a RegEx matches.  The  modifier for case insensitive matching works with both functions.\n\nExample using  with :\n\n\n\n\n\n\nFiddle with the code:\nhttps://jsfiddle.net/71tg4dkw\n\nNote:\nBe aware of evil links that hide their file extension, like:\n\n\nDocumentation for :\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\n",
            "excerpt": "Unlike the match() function, the test() function returns true or false <span class=\"highlight\">and</span> is generally preferred when simply testing if a <span class=\"highlight\">RegEx</span> matches. &hellip; :\nBe aware of <span class=\"highlight\">evil</span> links that hide their file extension, like:\nhttps://example.com/evil.exe? &hellip; ",
            "title": "regex case insensitivity"
        },
        {
            "tags": [
                "php",
                "mysql",
                "eval",
                "preg-replace-callback"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 52819868,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1539708785,
            "creation_date": 1539616605,
            "body": "For a site content creators maintain HTML lists in the format below which a cronjob (Perl) parses into a mySQL database. PHP pulls the data into paginated indices.\n\n\n\n(Perl extracts text and URL and stores them in the database as header, URL, linktext, footer.)\n\nOccasionally a user function call is inserted into the text, like this:\n\n\n\nThe query returns this string for the first line ($header):\n\n\n\nOf course this is not executed when pulled in a query. Nor would it occur in a fixed place, thus cannot be parsed into a separate field.\n\nI have read a couple threads on using  here, and given that only content creators in the house edit the lists, it should be safe enough. IOW if evil code is injected in either list or database we have bigger problems than unsanitized code inserted by some outside party into a form.\n\nMy other idea is . However, some suggested on SO that essentially it has the same problem as , albeit I think the regex should/could lock this down. Also I don&#39;t see how this could execute arbitrary code, unless by passing it as parameter value to the user function.\n\nWhat would be the better approach? Or is there some other, safer approach? (PHP 7.2, mySQL 5.6)\n\nTIA\n\nEdit\n\nI have implemented the code below using a callback, and no . Applying only to few permitted functions which incidentally all require only one numerical parameter it seems quite locked down.\n\n\n\nThanks for your help.\n",
            "excerpt": "/path/to/file.php&quot;&gt;Lorem ipsum dolor sit amet&lt;/a&gt;&lt;br&gt;\nconsectetuer adipiscing elit&lt;/li&gt;\n\n\n(Perl extracts text <span class=\"highlight\">and</span> URL <span class=\"highlight\">and</span> stores them in the database as header, URL, linktext, footer.) &hellip; However, some suggested on SO that essentially it has the same problem as eval, albeit I think the <span class=\"highlight\">regex</span> should/could lock this down. &hellip; ",
            "title": "Execute PHP User Function within mySQL Query Result"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 52019534,
            "is_answered": false,
            "question_id": 52019513,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1535217612,
            "creation_date": 1535217126,
            "body": "This is a classic example of why the  combination can be evil. Use a negated character set instead:\n\n\n\nYou can try it here.\n\n\n\nCompare the behavior of the two expressions:\n\n\nMatch anything greedily. For the second match, the regex matches anything greedily. It will match anything until it reaches the end of the string, and then has to backtrack until it finds a . As soon as it finds a , it stops, hence you end up with  as a match.\nMatch anything but a . Here the regex is matching anything that is not a , therefore at every step is checks whether the next is a  or not. For the second match, you can see that as soon as it finds a , it stops. \n\n",
            "excerpt": ".+ combination can be <span class=\"highlight\">evil</span>. Use a negated character set instead:\n\n(\\$\\{(\\b[a-zA-Z0-9]+\\b)\\})(\\[([^]]+)\\])\n                              ^^^\n\n\nYou can try it here. &hellip; For the second match, the <span class=\"highlight\">regex</span> matches anything greedily. It will match anything until it reaches the end of the string, <span class=\"highlight\">and</span> then has to backtrack until it finds a ]. &hellip; ",
            "title": "Regex capturing group not working as intended"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "browser-extension"
            ],
            "question_score": 18,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 24045756,
            "item_type": "question",
            "score": 18,
            "last_activity_date": 1534620836,
            "creation_date": 1401909425,
            "body": "After I read about Hover Zoom being evil (yikes!), two articles made me instantly switch to another one, called Imagus:\n\n\nHoverzoom’s Malware controversy, and Imagus alternative - ghacks.net\nImagus is a Hover Zoom Replacement to Enlarge Images on Mouseover - LifeHacker\n\n\nImagus seems to fit the bill by doing pretty much what Hover Zoom also could, but in addition, it seems to support custom filters (to support more sites), in addition to the huge bunch it already comes packed with.\n\nIn the options page, on Chrome, the filters section looks deliciously hackable:\n\n&#160;&#160;\n\nHowever, at the same time, it seems to be written in what I would call Perl Javascript.\n\n&#160;&#160;\n\nI consider myself well-versed in Javascript, DOM and Regex, but it&#39;s just painful to try to guess what that is doing, so I looked for documentation. It seems like there was an MyOpera blog, and now the website of the project is, for the time being, hosted on Google Docs.\n\nThe page doesn&#39;t mention anything about how to develop &quot;filters&quot; (or &quot;sieves&quot;, as written in that page?)\n\nSo, how can I develop a custom filter? I&#39;m not aware of all the possibilities (it seems to be pretty flexible), but even a simple example like just modifying URLs would be good. (turning  into  or something).\n\nOr even just an explanation of the fields. They seem to be:\n\n\n\n\n\n\n\n &lt;- Probably Comment\n\n",
            "excerpt": "After I read about Hover Zoom being <span class=\"highlight\">evil</span> (yikes!) &hellip; I consider myself well-versed in Javascript, DOM <span class=\"highlight\">and</span> <span class=\"highlight\">Regex</span>, but it&#39;s just painful to try to guess what that is doing, so I looked for documentation. &hellip; ",
            "title": "How to develop custom filters for the Imagus hover zoom extension?"
        },
        {
            "tags": [
                "regex",
                "python-3.6"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 49019340,
            "is_answered": false,
            "question_id": 49019085,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1519773264,
            "creation_date": 1519772474,
            "body": "Much luck with regex, if you just need the result:\n\n\n\nOutput:\n\n\n\nMake sure to read the eval() \nand have a look into:\n\n\nhttps://opensourcehacker.com/2014/10/29/safe-evaluation-of-math-expressions-in-pure-python/\nhttps://softwareengineering.stackexchange.com/questions/311507/why-are-eval-like-features-considered-evil-in-contrast-to-other-possibly-harmfu/311510\nhttps://www.kevinlondon.com/2015/07/26/dangerous-python-functions.html\n\n\n\n\nExample for hundreds of lines:\n\n\n",
            "excerpt": "Much luck with <span class=\"highlight\">regex</span>, if you just need the result:\n\nimport re\n\ns=&quot;[  9]  -21 - ( 12) - (  -5) + ( -26) = ______&quot;\n\ns = s[s.find(&quot;]&quot;)+1:s.find(&quot;=&quot;)]           #  cut away line nr <span class=\"highlight\">and</span> = ... &hellip; /questions/311507/why-are-eval-like-features-considered-<span class=\"highlight\">evil</span>-in-contrast-to-other-possibly-harmfu/311510\nhttps://www.kevinlondon.com/2015/07/26/dangerous-python-functions.html\n\n\n\n\nExample for hundreds &hellip; ",
            "title": "Regex to pull out numbers and operands"
        },
        {
            "tags": [
                "bash",
                "sed",
                "grep",
                "wget"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 48950339,
            "is_answered": false,
            "question_id": 48949846,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1519406511,
            "creation_date": 1519396951,
            "body": "A fully fledged solution using xpath :\n\nCommand :\n\n\n\nOutput :\n\n\n\nNotes :\n\n\nDon&#39;t parse HTML with regex, use a proper XML/HTML parser like we do here. Check: Using regular expressions with HTML tags\nCheck https://github.com/sputnick-dev/saxon-lint (my own project)\n\n\n\n\n if what I wrote bores you and you just want a quick and dirty command even if it&#39;s evil, then use \n",
            "excerpt": "Check: Using regular expressions with HTML tags\nCheck https://github.com/sputnick-dev/saxon-lint (my own project)\n\n\n\n\n if what I wrote bores you <span class=\"highlight\">and</span> you just want a quick <span class=\"highlight\">and</span> dirty command even if it&#39;s &hellip; <span class=\"highlight\">evil</span>, then use curl -s https://www.foreca.de/Deutschland/Berlin/Berlin | grep -oP &#39;\\d+\\s+hPa&#39; &hellip; ",
            "title": "Bash wget filter specific word"
        },
        {
            "tags": [
                "ruby",
                "regex",
                "split",
                "bbcode"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 3792262,
            "is_answered": false,
            "question_id": 3788959,
            "item_type": "answer",
            "score": 46,
            "last_activity_date": 1516881323,
            "creation_date": 1285382957,
            "body": "Please don&#39;t use BBCode. It&#39;s evil.\n\n\n  BBCode came to life when developers\n  were too lazy to parse HTML correctly\n  and decided to invent their own markup\n  language. As with all products of\n  laziness, the result is completely\n  inconsistent, unstandardized, and\n  widely adopted.\n\n\nTry to use a user-friendlier markup language, like Markdown (that&#39;s what Stack Overflow uses) or Textile.\nBoth of them have parsers for Ruby:\n\n\nMaruku for Markdown\nRedCloth for Textile\n\n\n\n\nIf you still don&#39;t want to heed to my advice and choose to go with BBCode, don&#39;t reinvent the wheel and use a BBCode parser. To answer your question directly, there is the least desirable option: use regex.\n\n\n\nAs seen on rubular. Although I would use , so it will extract the contents inside the  tags. Note that this is fairly fragile and will break if there are nested  tags. Hence, the advice to use a parser.\n",
            "excerpt": "It&#39;s <span class=\"highlight\">evil</span>.\n\n\n  BBCode came to life when developers\n  were too lazy to parse HTML correctly\n  <span class=\"highlight\">and</span> decided to invent their own markup\n  language. &hellip; To answer your question directly, there is the least desirable option: use <span class=\"highlight\">regex</span>.\n\n/\\[img\\].*?\\[\\/img\\]/\n\n\nAs seen on rubular. Although I would use /\\[img\\](.*?) &hellip; ",
            "title": "Regex to split BBCode into pieces"
        },
        {
            "tags": [
                "java",
                "java-stream"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 47893858,
            "is_answered": false,
            "question_id": 47317870,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1513711349,
            "creation_date": 1513711349,
            "body": "The solution by @Bohemian works fine, but the OP asked for an inline RegEx solution as well.  This can be made as follows:\n\n\n\nNote that this will create a new  object for each and every line in your log file.  If you a processing a log file with hundreds of thousand lines, a lot of temporary matcher objects are being created and abandoned to the garbage collector.\n\nIt is possible to reuse a  object by calling the  method, passing in the new subject for the next regex match.  The method returns the matcher object itself, so that the method can be chained, like .  We can abuse this signature to create a  mapping.  Thus, the above could be rewritten as:\n\n\n\nThis may be thought of as a hack, saving the construction of hundreds of thousands of temporary  objects, or the ultimate evil using side-effects in stream pipelines.  Premature optimization is the root of all evil, so only use this technique if it can be shown that this pipeline is actually worth optimizing.\n",
            "excerpt": "The solution by @Bohemian works fine, but the OP asked for an inline <span class=\"highlight\">RegEx</span> solution as well. &hellip; It is possible to reuse a Matcher object by calling the Matcher#reset(String) method, passing in the new subject for the next <span class=\"highlight\">regex</span> match. &hellip; ",
            "title": "Using Regex or StringTokenizer inline with Stream"
        },
        {
            "tags": [
                "python",
                "string",
                "list",
                "file",
                "string-concatenation"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 47858725,
            "is_answered": false,
            "question_id": 47858219,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1513539381,
            "creation_date": 1513539381,
            "body": "You don&#39;t need regex for a simple task like this, you were actually on the right track but you got yourself tangled up in trying to parse everything instead of just streaming the file and deciding where to cut.\n\nBased on your data, you want to cut on the line starting with  (denoting the author) and you want to cut that line from first comma onwards. Presumably, you also want to remove the empty lines, too. Thus, a simple stream modifier would look something like:\n\n\n\nAnd that&#39;s all there is to it. As long as there are no other new lines in the data it will produce exactly the result you want, i.e. for a  file containing:\n\n“The road to hell is paved with works-in-progress.”\n—Philip Roth, WD some other stuff here\n\n“The only thing necessary for the triumph of evil is for good men to do nothing.”\n—Edmund Burke, whatever there is\n\n“You know nothing John Snow.”\n—The wildling Ygritte, &quot;A Dance With Dragons&quot; - George R.R. Martin\n\nIt will produce a  file containing:\n\n“The road to hell is paved with works-in-progress.” —Philip Roth\n“The only thing necessary for the triumph of evil is for good men to do nothing.” —Edmund Burke\n“You know nothing John Snow.” —The wildling Ygritte\n",
            "excerpt": "You don&#39;t need <span class=\"highlight\">regex</span> for a simple task like this, you were actually on the right track but you got yourself tangled up in trying to parse everything instead of just streaming the file <span class=\"highlight\">and</span> deciding where &hellip; it immediately\n\n\n<span class=\"highlight\">And</span> that&#39;s all there is to it. &hellip; ",
            "title": "Open a file, reformat, and write to a new file in Python 3"
        },
        {
            "tags": [
                "regex",
                "arrays",
                "bash"
            ],
            "question_score": 41,
            "is_accepted": false,
            "answer_id": 30971572,
            "is_answered": false,
            "question_id": 20366609,
            "item_type": "answer",
            "score": 25,
            "last_activity_date": 1508088432,
            "creation_date": 1434942120,
            "body": "Bash brace expansion don&#39;t use regexes. The pattern used is just some shell glob, which you can find in bash manual 3.5.8.1 Pattern Matching.\n\nYour two-step solution is cool, but it needs some quotes for whitespace safety:\n\n\n\nYou can also do it in some evil way:\n\n\n",
            "excerpt": "Your two-step solution is cool, but it needs some quotes for whitespace safety:\n\nARR_PRE=(&quot;${ARRAY[@]/#/prefix_}&quot;)\necho &quot;${ARR_PRE[@]/%/_suffix}&quot;\n\n\nYou can also do it in some <span class=\"highlight\">evil</span> way:\n\neval &quot;something &hellip; ",
            "title": "Prefix and postfix elements of a bash array"
        },
        {
            "tags": [
                "python",
                "regex",
                "parsing"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 46513287,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1506870335,
            "creation_date": 1506867554,
            "body": "I have a text which format resemble this sample : \n\n\n  PAUL: Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo &gt;ligula eget dolor. \n  \n  LEONARD: Aenean massa. Cum sociis natoque penatibus et magnis dis parturient &gt;montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque &gt;eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, &gt;fringilla vel, aliquet nec, vulputate eget, arcu. \n  \n  EVIL NINJA [on the roof]: In enim justo, rhoncus ut, imperdiet a, venenatis &gt;vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. &gt;Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. &gt;Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. \n  \n  PAUL [SCREAMING]: Aliquam lorem ante, dapibus in, viverra quis, feugiat a, &gt;tellus. \n\n\nAnd a regular expression to parse the transcripts into dialogs. \n\n\n\nI am trying to capture all the locutors so that the regular expression matches \n\n\n\nAs you can see here I have not been able to capture all of the locutors. \n\n\n  EVIL NINJA [on the roof]:\n\n\nHow can I capture the above as well ? Is regex even the right way to go for this ? \n\nEdit : All the speakers name are in caps, and ends with a colon. This is the format in which all of the transcripts i&#39;m dealing with is.\n",
            "excerpt": "<span class=\"highlight\">And</span> a regular expression to parse the transcripts into dialogs. &hellip; <span class=\"highlight\">EVIL</span> NINJA [on the roof]:\n\n\nHow can I capture the above as well ? Is <span class=\"highlight\">regex</span> even the right way to go for this ? \n\nEdit : All the speakers name are in caps, <span class=\"highlight\">and</span> ends with a colon. &hellip; ",
            "title": "Parsing transcripts with regular expression"
        },
        {
            "tags": [
                "python",
                "regex",
                "parsing"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 46513364,
            "is_answered": false,
            "question_id": 46513287,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1506868091,
            "creation_date": 1506868091,
            "body": "The problem with your regex is that it doesn&#39;t allow any whitespace, so it doesn&#39;t match &quot;EVIL NINJA&quot; or &quot;on the roof&quot;.\n\nBut yes, regex is absolutely the right way to do this. You can try this:\n\n\n\nUsage:\n\n\n\nOutput:\n\n\n",
            "excerpt": "The problem with your <span class=\"highlight\">regex</span> is that it doesn&#39;t allow any whitespace, so it doesn&#39;t match &quot;<span class=\"highlight\">EVIL</span> NINJA&quot; or &quot;on the roof&quot;.\n\nBut yes, <span class=\"highlight\">regex</span> is absolutely the right way to do this. &hellip; : <span class=\"highlight\">EVIL</span> NINJA\ncontext: on the roof\n\nperson: PAUL\ncontext: SCREAMING &hellip; ",
            "title": "Parsing transcripts with regular expression"
        },
        {
            "tags": [
                "python",
                "regex",
                "string"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 46430751,
            "is_answered": false,
            "question_id": 46417454,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1506440634,
            "creation_date": 1506440634,
            "body": " Non-regex alternative \n\nI know you tagged regex, but these kinds of problems are not well-suited to regular expressions.  There are many tricky edge cases, and the failure mode for edge cases is often returning incorrect results, when you would prefer an exception raised instead.  \n\nYou have to choose the lesser of two evils: a simple regex which misbehaves on weird inputs, or a monster regex which is incomprehensible to everyone except the regex engine itself.  \n\nIt&#39;s often easier just by writing a little parser that keeps track of whether you&#39;re enclosed in parens or not.  That&#39;s simple to write, and simple to maintain.  \n\nHere&#39;s a parser based solution and a barrage of tests that might trip up any regex based approach.  This will also detect when the problem is poorly constrained (unbalanced parens), and raise if necessary.  \n\n\n",
            "excerpt": "Non-<span class=\"highlight\">regex</span> alternative \n\nI know you tagged <span class=\"highlight\">regex</span>, but these kinds of problems are not well-suited to regular expressions. &hellip; That&#39;s simple to write, <span class=\"highlight\">and</span> simple to maintain.  \n\nHere&#39;s a parser based solution <span class=\"highlight\">and</span> a barrage of tests that might trip up any <span class=\"highlight\">regex</span> based approach. &hellip; ",
            "title": "How to split a string has &#39;A/B/C(D/E)&#39; format?"
        },
        {
            "tags": [
                "regex",
                "security",
                "go",
                "glob"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 38689161,
            "is_answered": false,
            "question_id": 38393367,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1506287357,
            "creation_date": 1470006889,
            "body": "By &quot;evil regex&quot; I assume you mean a regex that falls victim to catastrophic backtracking.\n\nFrom what you&#39;re describing, it seems like you&#39;re using a glob library to avoid these &quot;evil regexes&quot;. Globs are essentially a weaker version of regex.\n\nThe thing that you&#39;re missing here is the fact that regexes don&#39;t have to be evil. This can be proven in plain Go, with no external libraries.\n\nTry running this Go program:\n\n\n\nYou might wonder why this code doesn&#39;t measure how much time execution took. It&#39;s because it&#39;s not needed (and also because I don&#39;t know much Go).\n\nThe regex will work in almost all regex flavors. You can try running it in Java, Perl or another similar flavor (I like using PCRE on https://regex101.com/#pcre), but the outcome will be one of two things:\n\n\nA timeout\nYou get fed up with how long it&#39;s taking and stop the program\n\n\nYes, that combination causes catastrophic backtracking in most regex flavors. But not Go. Why?\n\nGo doesn&#39;t use backtracking at all for its regexes, so it&#39;s not even a possibility. According to this site:\n\n\n  In Go, we find an optimized regular expression engine. This runs in linear time, making complex patterns faster. It is located in the regexp package.\n\n\nRead more about the differences between backtracking and non-backtracking engines here.\n\n\n\nConsidering the glob library (according to that GitHub link) appears faster than Go&#39;s regexps, performance shouldn&#39;t be a problem.\n",
            "excerpt": "By &quot;<span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>&quot; I assume you mean a <span class=\"highlight\">regex</span> that falls victim to catastrophic backtracking.\n\nFrom what you&#39;re describing, it seems like you&#39;re using a glob library to avoid these &quot;<span class=\"highlight\">evil</span> regexes&quot;. &hellip; It&#39;s because it&#39;s not needed (<span class=\"highlight\">and</span> also because I don&#39;t know much Go).\n\nThe <span class=\"highlight\">regex</span> will work in almost all <span class=\"highlight\">regex</span> flavors. &hellip; ",
            "title": "Are there evil globs?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "character-class"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 46394020,
            "is_answered": false,
            "question_id": 46393875,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1506282616,
            "creation_date": 1506281438,
            "body": "This should match exactly what you&#39;re looking for. When parsing using this on a non-global level for each line - it will parse off the parenthesis. \n\n\n\nSee below...\n\n\n",
            "excerpt": "var s = &#39;Lorem Ipsum comes from sections 1.10.32 <span class=\"highlight\">and</span> 1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>) by Cicero, written in 45 BC. This should also match () <span class=\"highlight\">and</span> ( ).&#39; &hellip; :\\))/g)\n)\n\n//CONSOLE OUTPUT\n(3) [&quot;(The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>)&quot;, &quot;()&quot;, &quot;( )&quot;]\n0: &quot;(The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>)&quot;\n1: &quot;()&quot;\n2: &quot;( )&quot;\nlength: 3 &hellip; ",
            "title": "Match the parentheses with or without a text in it - Regex"
        },
        {
            "tags": [
                "vba",
                "excel",
                "parsing",
                "vbe"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 45745199,
            "is_answered": false,
            "question_id": 45743203,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1503005590,
            "creation_date": 1503005265,
            "body": "As @MatsMug says, parsing VBA with Regex is hard impossible, but line-numbers are a simpler case, and should be findable with regex alone.\n\nFortunately, line numbers can only appear within a procedure body (including before the  statement), so we know they&#39;ll never be the first line of your code.\n\nUnfortunately, you can prefix a line-label with 0 or more line continuations:\n\n\n\nFurthermore, a line number isn&#39;t always followed by a space - it can be followed by an instruction separator, giving the line-number the appearance of a line-label:\n\n\n\nAnd if you&#39;re code is evil, you might encounter a negative line-number (entered by using hex notation - which VBE dutifully pretty prints back to the code-pane with a leading space and a negative number):\n\n\n\nAnd we also need to be able to identify numbers that appear on a continued line, that aren&#39;t line-numbers:\n\n\n\nSo, here&#39;s some evil line-numbering, with a mix of all of those edge-cases:\n\n\n\nAnd here&#39;s some regex that identifies the line-numbers:\n\n\n\nAnd here&#39;s a syntax highlight from regex101:\n\n\n",
            "excerpt": "As @MatsMug says, parsing VBA with <span class=\"highlight\">Regex</span> is hard impossible, but line-numbers are a simpler case, <span class=\"highlight\">and</span> should be findable with <span class=\"highlight\">regex</span> alone. &hellip; &quot;-1&quot; line number is achieved by entering &quot;&amp;HFFFFFFFF&quot;\n\nDebug.Print _\n2 &amp; &quot;is not a line-number&quot;\n\n60 End Sub\n\n\n<span class=\"highlight\">And</span> here&#39;s some <span class=\"highlight\">regex</span> that identifies the line-numbers:\n\n(? &hellip; ",
            "title": "VBA - Find all numbered lines in VBE Modules via pattern search"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "regex-negation"
            ],
            "question_score": 5,
            "is_accepted": true,
            "answer_id": 45502614,
            "is_answered": false,
            "question_id": 45501997,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1501863431,
            "creation_date": 1501837505,
            "body": "You can use String match for that\n\nThe regex below simply matches anything that&#39;s not a mustach, optionally surrounded by mustaches.\n\nExample snippet:\n\n\r\n\r\n\r\n\r\n\r\n\n\nBut to make it more precise, the regex pattern becomes a bit more complicated.\nThe regex below matches: \n\n\n&quot;what you want&quot;\n (a word between 2 mustaches on each side)\nOR &quot;what you don&#39;t want followed by what you want&quot;\n(using lazy matching and positive lookahead)\nOR &quot;what remains&quot;\n\n\n\r\n\r\n\r\n\r\n\r\n\n\nAnd last but not least, the evil SM method.\nSplit AND Match on the same regex. And concatinate them into a single array.\nThe downside of this method is that the order is not preserved.\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "The <span class=\"highlight\">regex</span> below matches: \n\n\n&quot;what you want&quot;\n (a word between 2 mustaches on each side)\nOR &quot;what you don&#39;t want followed by what you want&quot;\n(using lazy matching <span class=\"highlight\">and</span> positive lookahead)\nOR &quot;what remains&quot; &hellip; +/g;\r\n\r\nvar array = str.match(pattern);\r\n\r\nconsole.log(str);\r\nconsole.log(pattern);\r\nconsole.log(array);\r\n\r\n\r\n\n\n<span class=\"highlight\">And</span> last but not least, the <span class=\"highlight\">evil</span> SM method.\nSplit <span class=\"highlight\">AND</span> Match on the same <span class=\"highlight\">regex</span>. &hellip; ",
            "title": "Splitting string into matching and non-matching groups in javascript"
        },
        {
            "tags": [
                "javascript",
                "arrays",
                "string"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 44847982,
            "is_answered": false,
            "question_id": 44847727,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1498992513,
            "creation_date": 1498830180,
            "body": "Solution without eval, which is evil, using regex with group:\n\n\r\n\r\n\r\n\r\n\r\n\n",
            "excerpt": "Solution without eval, which is <span class=\"highlight\">evil</span>, using <span class=\"highlight\">regex</span> with group:\n\n\r\n\r\nvar datastatusMonthly = [3];\r\n\r\nvar text = &#39;datastatusMonthly[0]&#39;;\r\nvar <span class=\"highlight\">regex</span> = /(datastatusMonthly)\\[([0-9]+)\\]/g;\r\nvar match = regex.exec &hellip; ",
            "title": "convert String to array in javascript &quot;datastatusMonthly[0]&quot;"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 116,
            "is_accepted": false,
            "answer_id": 44585641,
            "is_answered": false,
            "question_id": 12841970,
            "item_type": "answer",
            "score": 16,
            "last_activity_date": 1497605177,
            "creation_date": 1497605177,
            "body": "What you call an &quot;evil&quot; regex is a regex that exhibits catastrophic backtracking.  The linked page (which I wrote) explains the concept in detail.  Basically, catastrophic backtracking happens when a regex fails to match and different permutations of the same regex can find a partial match.  The regex engine then tries all those permutations.  If you want to go over your code and inspect your regexes these are the 3 key issues to look at:\n\n\nAlternatives must be mutually exclusive.  If multiple alternatives can match the same text then the engine will try both if the remainder of the regex fails.  If the alternatives are in a group that is repeated, you have catastrophic backtracking.  A classic example is  to match any amount of any text when the regex flavor does not have a &quot;dot matches line breaks&quot; mode.  If this is part of a longer regex then a subject string with a sufficiently long run of spaces (matched by both  and ) will break the regex.  The fix is to use  to make the alternatives mutually exclusive or even better to be more specific about which characters are really allowed, such as  for ASCII printables, tabs, and line breaks.\nQuantified tokens that are in sequence must either be mutually exclusive with each other or be mutually exclusive what comes between them.  Otherwise both can match the same text and all combinations of the two quantifiers will be tried when the remainder of the regex fails to match.  A classic example is  to match 3 things with &quot;anything&quot; between them. When  can&#39;t be matched the first  will expand character by character until the end of the line or file.  For each expansion the second  will expand character by character to match the remainder of the line or file.  The fix is to realize that you can&#39;t have &quot;anything&quot; between them.  The first run needs to stop at  and the second run needs to stop at .  With single characters  is an easy solution.  Since we now stop at the delimiter, we can use possessive quantifiers to further increase performance.\nA group that contains a token with a quantifier must not have a quantifier of its own unless the quantified token inside the group can only be matched with something else that is mutually exclusive with it.  That ensures that there is no way that fewer iterations of the outer quantifier with more iterations of the inner quantifier can match the same text as more iterations of the outer quantifier with fewer iterations of the inner quantifier.  This is the problem illustrated in JDB&#39;s answer.\n\n\nWhile I was writing my answer I decided that this merited a full article on my website.  This is now online too.\n",
            "excerpt": "What you call an &quot;<span class=\"highlight\">evil</span>&quot; <span class=\"highlight\">regex</span> is a <span class=\"highlight\">regex</span> that exhibits catastrophic backtracking.  The linked page (which I wrote) explains the concept in detail. &hellip; Basically, catastrophic backtracking happens when a <span class=\"highlight\">regex</span> fails to match <span class=\"highlight\">and</span> different permutations of the same <span class=\"highlight\">regex</span> can find a partial match.  The <span class=\"highlight\">regex</span> engine then tries all those permutations. &hellip; ",
            "title": "How can I recognize an evil regex?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "camelcasing"
            ],
            "question_score": 291,
            "is_accepted": false,
            "answer_id": 43889080,
            "is_answered": false,
            "question_id": 2970525,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1494410090,
            "creation_date": 1494410090,
            "body": "Upper camel case (&quot;TestString&quot;) to lower camel case (&quot;testString&quot;) without using regex (let&#39;s face it, regex is evil):\n\n\n",
            "excerpt": "Upper camel case (&quot;TestString&quot;) to lower camel case (&quot;testString&quot;) without using <span class=\"highlight\">regex</span> (let&#39;s face it, <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span>):\n\n&#39;TestString&#39;.split(&#39;&#39;).reduce((t, v, k) =&gt; t + (k === 0 ? &hellip; ",
            "title": "Converting any string into camel case"
        },
        {
            "tags": [
                "c++",
                "boost",
                "boost-spirit",
                "boost-phoenix",
                "boost-spirit-lex"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 43102309,
            "is_answered": false,
            "question_id": 43100216,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1490867055,
            "creation_date": 1490815023,
            "body": "I&#39;m going to chant the oft-heard &quot;Why&quot;?\n\nThis time, for good reason.\n\nIn general, avoid semantic actions: Boost Spirit: &quot;Semantic actions are evil&quot;?. \n\nPhoenix Actors are needlessly more complex than the dedicated functor. They have a sweet point (mainly simple assignment or builtin operations). But if the actor is any kind of non-trivial you&#39;ll see the complexity ramp up quickly, not just for the human but also for the compiler. This leads to\n\n\nslow compilation\nsub-optimal emitted code\nharder to maintain source\nnew classes of error (e.g. when the expression templates hold references to locals/temporaries, something that Boost Proto (and hence Phoenix) does not prevent or signal. In fact, it encourages it by assuming all template expressions are ephemeral, but I digress).\n\n\n\n  Interestingly: Spirit X3 dropped Phoenix altogether, even though Phoenix was once the brain child of Spirit&#179;.\n  \n  The new style uses c++14 polymorphic lambdas, that look 90% like the helper function object in the original code, but inline as a lambda.\n\n\nThis specific case\n\nCan&#39;t work. At all.\n\nThe problem is that you&#39;re mixing lazy/deferred actors with direct invocations. That can never work. The type of  isn&#39;t supposed to be . Of course. It is supposed to be a lazy actor&#185; that can be used at some later time to create a . \n\nNow that we know that (and why)  is an actor type, it should become clear why it is completely bogus to call  on it. You might as well say\n\n\n\nAnd wonder why it would not compile.\n\nSummary:\n\nYou should probably just have the dedicated functor. You can of course Phoenix-adapt the regex functions you require, but all it does is shift the complexity tax for some syntactic sugar.\n\nI&#39;d always opt for the more naive approach that is going to be more understandable to a seasoned c++ programmer, and avoids pitfalls that come with high-wire acts&#178;.\n\nNevertheless, here&#39;s a pointer should you be curious:\n\nhttp://www.boost.org/doc/libs/1_63_0/libs/phoenix/doc/html/phoenix/modules/function.html\n\nLive On Coliru\n\n\n\n\n\n&#185; think composed function object that can be invoked at a later time\n\n&#178; the balance might tip if you were designing this as an EDSL for further configuration by non-experts, but then you will have the added responsibility of documenting your EDSL and the constraints in which it can be used\n\n&#179; should we say, spirit-child of a brain?\n",
            "excerpt": "In general, avoid semantic actions: Boost Spirit: &quot;Semantic actions are <span class=\"highlight\">evil</span>&quot;?. \n\nPhoenix Actors are needlessly more complex than the dedicated functor. &hellip; You can of course Phoenix-adapt the <span class=\"highlight\">regex</span> functions you require, but all it does is shift the complexity tax for some syntactic sugar. &hellip; ",
            "title": "Converting a Boost Spirit Lex semantic action to Phoenix - How to access _val?"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 132,
            "is_accepted": false,
            "answer_id": 42824600,
            "is_answered": false,
            "question_id": 22115,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1489633848,
            "creation_date": 1489633848,
            "body": "If you want to generate &quot;critical&quot; strings, you may want to consider:\n\nEGRET http://elarson.pythonanywhere.com/\nthat generates &quot;evil&quot; strings covering your regular expressions\n\nMUTREX http://cs.unibg.it/mutrex/\nthat generates fault-detecting strings by regex mutation\n\nBoth are academic tools (I am one of the authors of the latter) and work reasonably well.\n",
            "excerpt": "If you want to generate &quot;critical&quot; strings, you may want to consider:\n\nEGRET http://elarson.pythonanywhere.com/\nthat generates &quot;<span class=\"highlight\">evil</span>&quot; strings covering your regular expressions\n\nMUTREX http://cs.unibg.it &hellip; /mutrex/\nthat generates fault-detecting strings by <span class=\"highlight\">regex</span> mutation\n\nBoth are academic tools (I am one of the authors of the latter) <span class=\"highlight\">and</span> work reasonably well. &hellip; ",
            "title": "Using Regex to generate Strings rather than match them"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "angular",
                "ionic2"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 42090266,
            "is_answered": false,
            "question_id": 42088669,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1486471544,
            "creation_date": 1486471544,
            "body": "Regex is an evil beast. Luckily I found this nice little example on regexlib.com\n\nThis seems to be kind-of what you&#39;re looking for. As for why Angular isn&#39;t matching your whitespace, it may potentially be that you have to double-escape your whitespace selector, so  it would look like:\n\n\n\nBut that&#39;s just a guess.\n",
            "excerpt": "<span class=\"highlight\">Regex</span> is an <span class=\"highlight\">evil</span> beast. Luckily I found this nice little example on regexlib.com\n\nThis seems to be kind-of what you&#39;re looking for. &hellip; ",
            "title": "Ionic 2 : Form validator (regex)"
        },
        {
            "tags": [
                "php",
                "arrays",
                "preg-match",
                "strpos",
                "preg-split"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 41905431,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1485566009,
            "creation_date": 1485566009,
            "body": "I’m trying to convert a formula like;\n\n\n\nInto a multi dimensional array structured as such\n\n\n\nSo as it can be processed via a function similar to;\n\n\n\n(doCalculation simply processes the 2 values passed to it with the defined function)\n\nThe formula can have any level of complexity and the key to structuring the array is with position of the brackets (items in brackets are contained in calc)\n\ne.g\n\n100 *((1 + 21) * ((2 * 10) + 90))\n\nwould become;\n\n\narray\n\n\nval: 100\n\narray\n\n\nfunc: *\ncalc\n\n\narray\n\n\ncalc\n\n\narray\n\n\nval:1\n\narray\n\n\nfunc: +\nval: 21\n\n\n\narray\n\n\nfunc: *\ncalc\n\n\narray\n\n\ncalc\n\n\narray\n\n\nval: 2\n\narray\n\n\nfunc: *\nval: 10\n\n\n\narray\n\n\nfunc: +\nval: 90\n\n\n\n\n\n\n\nThe reason for this approach is it gives the script complete control over what functions can be passed, so as advanced custom functions can be used and to avoid the use of eval() which should in all fairness be spelt evil().\n\nThe issue here is also simplified slighly as in the actual application it uses field references rather than actual values.\n\nThe issue I am having is with creating the array with the correct structure.\n\nHow could i convert an equation such as 100 *((1 + 21) * ((2 * 10) + 90)) into a php array in the format above.\n\nSomething like (below) is the best i&#39;ve come up with so far, but it won&#39;t work on more complex functions.\n\n\n\nI&#39;m sure that my current approach is wrong.... the answer is likely with looping through the string and using preg_split to split on each bracket or potentially using a regex... but so far i&#39;ve just been hitting brick walls.\n\nAny help would be greatly appreciated.\n",
            "excerpt": "to avoid the use of eval() which should in all fairness be spelt <span class=\"highlight\">evil</span>(). &hellip; using preg_split to split on each bracket or potentially using a <span class=\"highlight\">regex</span>... but so far i&#39;ve just been hitting brick walls. &hellip; ",
            "title": "PHP: Convert a string containing a mathematical formula into a multi dimensional array so is it can be calculated programatically without using eval()"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 41409711,
            "is_answered": false,
            "question_id": 41409588,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1483199961,
            "creation_date": 1483198866,
            "body": "I was about to propose something very basic with regular expressions but I found this here:\n\nhttps://stackoverflow.com/a/7131156/6219628\n\nAfter reading more of the docs, I didn&#39;t found anything to ignore specific tags with just htmlspecialchars(), which doesn&#39;t sound surprising.\n\nEDIT: And since using regex to parse html seems to be evil, you may eventually appreciate reading this bulky answer :)\nhttps://stackoverflow.com/a/1732454/6219628\n",
            "excerpt": "EDIT: <span class=\"highlight\">And</span> since using <span class=\"highlight\">regex</span> to parse html seems to be <span class=\"highlight\">evil</span>, you may eventually appreciate reading this bulky answer :)\nhttps://stackoverflow.com/a/1732454/6219628 &hellip; ",
            "title": "how to escape only &lt;script&gt; tag using htmlspecialchars() in php"
        },
        {
            "tags": [
                "c++"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 38492825,
            "is_answered": false,
            "question_id": 38487653,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1478273397,
            "creation_date": 1469060115,
            "body": "I can&#39;t explain this in a comment. Please don&#39;t judge this too harshly:\n\n\n\nThis will catch and correctly handle MOST cases. What it can&#39;t deal with is:\n\nStuff like \n\n\n\nComments\n\n\n\nString literals\n\n\n\n[expletive deleted] macros\n\n\n\nAnd really odd stuff like\n\n\n\nTo do this right, you need a non-trivial state machine that can detect and eliminate the above failure cases.\n",
            "excerpt": "<span class=\"highlight\">Regex</span> is not\n           ^ finds a cin right here <span class=\"highlight\">and</span> starts reversing &lt;&lt;\n\n\nComments\n\n/* cout &gt;&gt; hah ha ha Sucker!!!; */\n\n\nString literals\n\nstd::string fail = &quot;cout &gt;&gt; Got you again!!!&quot; &hellip; ;\n\n\n[expletive deleted] macros\n\n#define <span class=\"highlight\">evil</span> cout &gt;\\\n&gt; &quot;Gotcha!!!&quot;;\n\n\n<span class=\"highlight\">And</span> really odd stuff like\n\ncout &lt;&lt; vector&lt;vector&lt;int&gt;&gt;(42)[0];\n                         ^ Muhuhahahahahaha!!! &hellip; ",
            "title": "A program that will correct a C++ program that has errors in the operator"
        },
        {
            "tags": [
                "python",
                "regex",
                "loops",
                "freeze"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 39992585,
            "is_answered": false,
            "question_id": 39990657,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1476256383,
            "creation_date": 1476256383,
            "body": "Note that by itself, a  pattern will not cause the catastrophic backtracking, it will only be &quot;evil&quot; inside a longer expression and especially when it is placed next to the start of the pattern since in case subsequent subpatterns fail the engine backtracks to this one, and as the 1+ quantifier inside is again quantified with , that creates a huge amount of possible variations to try before failing. You may have a look at your regex demo and click the regex debugger on the left to see example regex engine behavior.\n\nThe current regex can be written as \n\n\n\nSee the regex demo where there will be a match if you remove space and  in the second field.\n\nDetails:\n\n\n - start of string (not necessary with )\n - (Group 1) 1+ letters/digits/underscores\n - a whitespace\n - 3 pipe symbols\n - see above ( creates Group 2)\n - (Group 3) any 0+ characters other than linebreak characters.\n\n",
            "excerpt": "Note that by itself, a r&#39;(\\w+)+&#39; pattern will not cause the catastrophic backtracking, it will only be &quot;<span class=\"highlight\">evil</span>&quot; inside a longer expression <span class=\"highlight\">and</span> especially when it is placed next to the start of the pattern &hellip; You may have a look at your <span class=\"highlight\">regex</span> demo <span class=\"highlight\">and</span> click the <span class=\"highlight\">regex</span> debugger on the left to see example <span class=\"highlight\">regex</span> engine behavior. &hellip; ",
            "title": "Regex match (\\w+) to capture single words delimited by |||"
        },
        {
            "tags": [
                "c#",
                "c++",
                "regex",
                "string",
                "scanf"
            ],
            "question_score": -2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 39836420,
            "item_type": "question",
            "score": -2,
            "last_activity_date": 1475515682,
            "creation_date": 1475512899,
            "body": "I have to write an equivalent of this in C++ in C#,\n\n\n\nwhere the  method trims and removes all spaces in .\n\nI have looked around here on SO and most of the similar questions involves strings that contain delimiters such as spaces or commas, but don&#39;t apply to this case. So I turned to RegEx.\n\nSo far, I have this,\n\n\n\nIt works so far, but I was wondering if there is another way to do this? I a bit wary of RegEx, because according the accepted answer on this question, having  instead of  is potentially dangerous because of evil RegEx. But if I include those extra parenthesis, then I have an extra group. This causes  to split something like  into an array with the elements,\n\n\n\nThis way, I can&#39;t be sure that the unit,  in this case, will be in , which is a problem.\n\nI tested this on this .NET RegEx tester. I also tried to break my RegEx pattern, , but it seems to be fine and &quot;evil RegEx safe&quot;. So I&#39;m not sure if I should stick to what I&#39;ve done so far, or find a more elegant solution, if one exist.\n",
            "excerpt": "I a bit wary of <span class=\"highlight\">RegEx</span>, because according the accepted answer on this question, having ([-]?\\d*\\.?\\d+) instead of ([-]?(\\d*\\.)?\\d+) is potentially dangerous because of <span class=\"highlight\">evil</span> <span class=\"highlight\">RegEx</span>. &hellip; I tested this on this .NET <span class=\"highlight\">RegEx</span> tester. I also tried to break my <span class=\"highlight\">RegEx</span> pattern, ([-]?\\d*\\.?\\d+), but it seems to be fine <span class=\"highlight\">and</span> &quot;<span class=\"highlight\">evil</span> <span class=\"highlight\">RegEx</span> safe&quot;. &hellip; ",
            "title": "Separating number and unit in a string in C#"
        },
        {
            "tags": [
                "javascript",
                "html",
                "tags",
                "strip",
                "trim"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 5,
            "is_answered": false,
            "question_id": 39406901,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1473786733,
            "creation_date": 1473408887,
            "body": "I would like to trimm text from html tags, and paste result to these tags again. It&#39;s not DOM content, only string.\n\n\n\nWanted result is f.e.:\n\n\n\nI found library striptags, but it only gets rid off tags, but I want to keep them.\n\nIf you have any solution please let me know :)\n\nUPDATE:\n\nThanks all of you for advices. There are few things to add from me: 1. I never have information about html tags, because it came from quill text editor, and I need some kind of regex. 2. In my job there is no jQuery, it&#39;s kind of &#39;evil&#39; :P. 3. I&#39;m using react, so any use of &#39;document&#39; or &#39;window&#39; is unwanted here :(.\n",
            "excerpt": "I would like to trimm text from html tags, <span class=\"highlight\">and</span> paste result to these tags again. It&#39;s not DOM content, only string. &hellip; I never have information about html tags, because it came from quill text editor, <span class=\"highlight\">and</span> I need some kind of <span class=\"highlight\">regex</span>. 2. In my job there is no jQuery, it&#39;s kind of &#39;<span class=\"highlight\">evil</span>&#39; :P. 3. &hellip; ",
            "title": "How to get text from tags, trimm, and paste to tags again in javascript"
        },
        {
            "tags": [
                "regex",
                "perl",
                "regex-greedy"
            ],
            "question_score": 56,
            "is_accepted": true,
            "answer_id": 38495156,
            "is_answered": false,
            "question_id": 38431931,
            "item_type": "answer",
            "score": 20,
            "last_activity_date": 1472093973,
            "creation_date": 1469076879,
            "body": "When there is a &quot;plus&quot; node (e.g. ) at the beginning of a pattern and the node fails to match, the regex engine skips forward to the point of failure and tries again; with , on the other hand, the engine only advances one character at a time.\nYves Orton explains this optimization nicely here:\n\nThe start class optimisation has two modes, &quot;try every valid start position&quot; (doevery) and &quot;flip flop mode&quot; (!doevery) where it trys only the first valid start position in a sequence.\nConsider /(\\d+)X/ and the string &quot;123456Y&quot;, now we know that if we fail to match X after matching &quot;123456&quot; then we will also fail to match after &quot;23456&quot; (assuming no evil tricks are in place, which disable the optimisation anyway), so we know we can skip forward until the check /fails/ and only then start looking for a real match. This is flip-flop mode.\n\n triggers flip-flop mode; , , and  don&#39;t.\nThis optimization can&#39;t be applied to &quot;star&quot; nodes like  because they can match zero characters, so a failure at one point in a sequence isn&#39;t indicative of failure later in the same sequence.\n\nYou can see this in the debug output for each regex. I&#39;ve highlighted the skipped characters with . Compare this (skips four characters at a time):\n\nto this (skips one or two characters at a time):\n\nNote that the optimization isn&#39;t applied to , because  isn&#39;t at the beginning of the pattern. Both  (logically equivalent to ) and  (logically equivalent to ) probably could be optimized, though; it might make sense to ask on perl5-porters whether either would be worth the effort.\n\nIn case you&#39;re interested, &quot;flip-flop mode&quot; is enabled by setting the  flag on a regex when it&#39;s compiled. See the code around lines 7344 and 7405 in regcomp.c and line 1585 in regexec.c in the 5.24.0 source.\n",
            "excerpt": "\\s+) at the beginning of a pattern <span class=\"highlight\">and</span> the node fails to match, the <span class=\"highlight\">regex</span> engine skips forward to the point of failure <span class=\"highlight\">and</span> tries again; with \\s*, on the other hand, the engine only advances one character &hellip; Consider /(\\d+)X/ <span class=\"highlight\">and</span> the string &quot;123456Y&quot;, now we know that if we fail to match X after matching &quot;123456&quot; then we will also fail to match after &quot;23456&quot; (assuming no <span class=\"highlight\">evil</span> tricks are in place, which disable &hellip; ",
            "title": "Why is `\\s+` so much faster than `\\s\\s*` in this Perl regex?"
        },
        {
            "tags": [
                "regex",
                "string"
            ],
            "question_score": -2,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 36092225,
            "item_type": "question",
            "score": -2,
            "last_activity_date": 1471643318,
            "creation_date": 1458327079,
            "body": "For example, look at this email validating regex:\n. If you look carefully, there are three parts: stuff, the  character, and more stuff. So the regex requires an email address to have an , thus the string  will not match.\n\nYet most regex engines will catastrophically backtrack given this combination. (PCRE, which powers Regex101, is smarter than most, but other regex/string combinations can cause catastrophic backtracking.)\n\nWithout needing to know much about Big O, I can tell that combinatorial things are exponential, while searching is linear. So why don&#39;t regex engines ensure the string contains required characters (so they can quit early)?\n\nUnfortunately, most of what I&#39;ve read about catastrophic backtracking puts the blame on the regex writer for writing evil regexes, instead of exploring the possibility that regex engines/compilers need to do better. Although I found several sources that look at regex engines/compilers, they are too technical.\n\n\n\nComing back after getting more experience, I know that regexes are declarative, meaning the execution plan is determined by the computer, not the programmer. Optimization is one of the ways that regex engines differ the most.\n\nWhile PCRE and Perl have challenged the declarative status-quo with the introduction of backtracking control verbs, it is other engines, without the verbs, which are most likely to catastrophically backtrack.\n",
            "excerpt": "If you look carefully, there are three parts: stuff, the @ character, <span class=\"highlight\">and</span> more stuff. So the <span class=\"highlight\">regex</span> requires an email address to have an @, thus the string aaaaaaaaaaaaaaaaaaaaaa! will not match. &hellip; Unfortunately, most of what I&#39;ve read about catastrophic backtracking puts the blame on the <span class=\"highlight\">regex</span> writer for writing <span class=\"highlight\">evil</span> regexes, instead of exploring the possibility that <span class=\"highlight\">regex</span> engines/compilers need &hellip; ",
            "title": "Why don&#39;t regex engines ensure all required characters are in the string?"
        },
        {
            "tags": [
                "regex",
                "algorithm",
                "performance-testing",
                "analysis"
            ],
            "question_score": 10,
            "is_accepted": true,
            "answer_id": 38937338,
            "is_answered": false,
            "question_id": 38785589,
            "item_type": "answer",
            "score": 6,
            "last_activity_date": 1471196301,
            "creation_date": 1471125287,
            "body": "The worst input for a regular expression will vary from engine to engine. The same regex and string may take no time at all on one engine, but never finish on another.\n\nDifferences between engines\n\nEngine Type\n\nFor certain engines, the &quot;evilest&quot; regex is still benign, running in linear time (or  time when both the length of the regex and the length of the string may vary.) Of course, the reason for this is the implementation. These engines don&#39;t backtrack; instead they use a finite state machine (FSM).\n\nNote that some backtracking implementations use FSM, but only as an intermediate step. Don&#39;t let this confuse you; they&#39;re not FSM.\n\nMost of the old regex engines (like sed) use FSM matching. There are a few new engines that use this implementation, such as Go. PCRE even has DFA functions (search for &quot;DFA&quot; here) that use this type of matching.\n\nAnother answer of mine also addresses the potential speed difference between the two implementations.\n\nIt would be wise to consider using a FSM implementation if you are really worried about malicious input affecting the speed of your regex. Unfortunately, FSM is not as powerful as the other implementation; it lacks support for some features, such as back references.\n\nOptimizations\n\nEvil is actually a bit subjective. Something evil to one regex engine may not be evil to a different engine. An evil plot can be thwarted if the engine is optimized. Optimizations are particularly important to backtracking engines, given their potential exponential run time.\n\nShort-circuiting\n\nUnder certain conditions, the engine may be able to quickly determine a match is impossible. While running the regex  against the string , Regex101 says:\n\n\n  Your match failed outright. What this means is the engine, due to its internal optimizations, understood that your pattern would never match at any position, and thus did not even attempt to.\n\n\nKeep in mind that Wikipedia says the regex is evil, especially when paired with that string.\n\nOf course, the engine is smart to not need to backtrack to determine the match wouldn&#39;t work. It saw something pretty obvious: the regex needs an  in order to match, but no  was present in the string.\n\nModifiers\n\nI mention this because you might not expect modifiers to be a factor in regex performance. But they are.\n\nEven PCRE, one of the more optimized implementations, may take considerably more steps with both the  and  modifiers enabled. See my question here for more information about this. In the end, I figured out that only certain characters trigger this behavior.\n\nAnalyzing Strings\n\nString length\n\nIn general, a long string will be slower than a short string. In fact, if you find a string of length x that causes catastrophic backtracking, you can make it backtrack a bit more by increasing the length of the string.\n\nGreedy vs. Lazy\n\nCompare the speeds of these regexes:\n\n\n  on \n on \n  on \n on \n\n\nEssentially, greedy matching is best when you think you will need to match a lot. Lazy matching is best when you need to match only a little.\n\nNote that if you change the regex to  or , then the engine may optimize things considerably.\n\nBrute force testing\n\nThere are several frameworks that are specifically designed to try to find vulnerabilities in your regexes. It may be worthwhile to try one out.\n\nThere&#39;s really one thing that I will suggest if you wanted to try making your own algorithm. It&#39;s not practical to try all characters in the dictionary, especially if you want to test long strings.\n\nInstead, look at your regex to determine what characters you should test. If you have  as your regex, there are really only two things that go into the match:  and not . You could really just imagine that there are only two characters:  and  (aka not ) when you generate your strings to brute force with.\n\nSetting timeouts\n\nIt would be fantastic to be able to ensure your regex finishes before the heat death of the universe, right? Some regex engines do have a way to set a time out.\n\n.NET:\n\n\n\n\n\nJava\n\n\n\n\n\nPHP\n\n\n  \n  \n  Set the number of seconds a script is allowed to run. If this is reached, the script returns a fatal error. The default limit is 30 seconds or, if it exists, the  value defined in the .\n  \n  When called,  restarts the timeout counter from zero. In other words, if the timeout is the default 30 seconds, and 25 seconds into script execution a call such as  is made, the script will run for a total of 45 seconds before timing out.\n\n\nPerl\n\nYou might as well visit the link, since it&#39;s right on Stack Overflow.\n",
            "excerpt": "The same <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> string may take no time at all on one engine, but never finish on another. &hellip; Optimizations\n\n<span class=\"highlight\">Evil</span> is actually a bit subjective. Something <span class=\"highlight\">evil</span> to one <span class=\"highlight\">regex</span> engine may not be <span class=\"highlight\">evil</span> to a different engine. An <span class=\"highlight\">evil</span> plot can be thwarted if the engine is optimized. &hellip; ",
            "title": "Worst input for given regular expression"
        },
        {
            "tags": [
                "java",
                "arrays",
                "contains"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 38733306,
            "is_answered": false,
            "question_id": 38732972,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1470190638,
            "creation_date": 1470190638,
            "body": "A previous poster pointed out using &quot;boolean flags&quot; while iterating the String. This is okay if you&#39;re doing some microscopic performance optimizations, but I think it&#39;s a bit of an overoptimization compared to using some simpler methods like .\n\n\n\nIt&#39;s definitely not perfect, and there are attempts at regex validations for such things out there, but for a simple check it&#39;s more than sufficient.\n\nIf you really did want to do the string iteration only once, you could iterate . Though I&#39;d recommend just using direct char comparison over :\n\n\n\nIn short, &quot;premature optimization is the root of all evil&quot;. It&#39;s certainly fine to optimize but there are better, more modern methods like profiling of finding out why code is slow.\n",
            "excerpt": "email.contains(&#39; &#39;);\n}\n\n\nIt&#39;s definitely not perfect, <span class=\"highlight\">and</span> there are attempts at <span class=\"highlight\">regex</span> validations for such things out there, but for a simple check it&#39;s more than sufficient. &hellip; Though I&#39;d recommend just using direct char comparison over #compareTo:\n\nchar c = /* some char */;\nif (c == &#39;@&#39;) {\n    //etc\n}\n\n\nIn short, &quot;premature optimization is the root of all <span class=\"highlight\">evil</span>&quot;. &hellip; ",
            "title": "Search an array for missing information"
        },
        {
            "tags": [
                "php",
                "regex",
                "parsing",
                "text-parsing",
                "regex-lookarounds"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 38111480,
            "is_answered": false,
            "question_id": 38110833,
            "item_type": "answer",
            "score": 9,
            "last_activity_date": 1469880913,
            "creation_date": 1467241624,
            "body": "Update #2\nAccording to others comments\n\nNote: A short RegEx i.e.  is enough if you know your input does not contain  or  out of PHP syntax.\nSo a long RegEx, in what evil cases does it work?\n\nYou have  in a string between quotation marks \nYou have those quotation marks escaped inside one another\nYou have  in a comment block.  or  or \nYou have  in a heredoc or nowdoc  or \n\nOtherwise it is meant to have a pair of opening/closing braces and depth of nested braces is not important.\nDo we have a case that it fails?\nNo unless you have a martian that lives inside your codes.\n\nFormatting is done by @sln&#39;s RegexFormatter software.\nWhat I provided in live demo?\nLaravel&#39;s Eloquent Model.php file (~3500 lines) randomly is given as input. Check it out:\nLive demo\n",
            "excerpt": "1))*)})\n\nNote: A short <span class=\"highlight\">RegEx</span> i.e. {((?&gt;[^{}]++|(?R))*)} is enough if you know your input does not contain { or } out of PHP syntax.\nSo a long <span class=\"highlight\">RegEx</span>, in what <span class=\"highlight\">evil</span> cases does it work? &hellip; # heredocs <span class=\"highlight\">and</span> nowdocs\n                ( \\w+ )                      # (3) ^\n                [&quot;&#39;]? &hellip; ",
            "title": "Match the body of a function using Regex"
        },
        {
            "tags": [
                "apache",
                ".htaccess",
                "mod-rewrite",
                "nginx",
                "url-rewriting"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 38498106,
            "is_answered": false,
            "question_id": 38492378,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1469087287,
            "creation_date": 1469087287,
            "body": "Your  block accepts URIs that end with  (not including the query string). By adding a  after the  you are appending path info.\n\nUsing the documentation this should work for you:\n\n\n\nThe  regex has been changed to accept URIs with path info. The  directive has been replaced by an evil if, as the URI needs to be split first, before being tested for file existence.\n\nI like to place the  statement before any  statement to avoid the latter being silently overridden.\n",
            "excerpt": "fastcgi_params;\n    fastcgi_pass unix:/var/run/php5-fpm.sock;\n\n    fastcgi_index index.php;\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    fastcgi_param HTTP_PROXY &quot;&quot;;\n}\n\n\nThe location <span class=\"highlight\">regex</span> &hellip; The try_files directive has been replaced by an <span class=\"highlight\">evil</span> if, as the URI needs to be split first, before being tested for file existence. &hellip; ",
            "title": "nginx error 500 with slash in rewrite mechanism (import from apache)"
        },
        {
            "tags": [
                "jquery",
                "node.js",
                "cheerio"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 38492550,
            "is_answered": false,
            "question_id": 38491168,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1469058053,
            "creation_date": 1469058053,
            "body": "You&#39;d first need to obtain the raw content of the script tag (which you can do with cheerio), once you have the javascript inside the tag, you have options:\n\n\nSafe, but tightly coupled to the code structure: use regex to find the literal value: \n\n\n\r\n\r\n\r\n\r\n\r\n\n\n\nSafe and flexible, but more complicated (and performance costly). If the code is too complex to use a regex, and alternative approach is to obtain the AST of that js code, and then you&#39;d just traverse the AST to find the literal you&#39;re looking for, you can try Esprima online here to understand what the AST is and how it&#39;d look like: http://esprima.org/demo/parse.html\n\n\nFor the example you shared, the AST looks like this:\n\n\r\n\r\n\r\n\r\n\r\n\n\n\nUnsafe, nasty (see &quot;eval is evil&quot;), but fast and flexible:\n\n\n\r\n\r\n\r\n\r\n\r\n\n\nBig Warning, never use this eval approach if you don&#39;t have complete trust over the content of that script tag, you&#39;d be running that as part of your node.js app, creating a form of Script Injection vulnerability.\n",
            "excerpt": "If the code is too complex to use a <span class=\"highlight\">regex</span>, <span class=\"highlight\">and</span> alternative approach is to obtain the AST of that js code, <span class=\"highlight\">and</span> then you&#39;d just traverse the AST to find the literal you&#39;re looking for, you can try Esprima &hellip; &quot;sourceType&quot;: &quot;script&quot;\r\n}\r\n\r\n// you can use something smarter to look for &quot;Test&quot; variable declaration here\r\nvar value = ast.body[0].declarations[0].init.value;\r\n\r\n\r\n\n\n\nUnsafe, nasty (see &quot;eval is <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Get code inside script tag"
        },
        {
            "tags": [
                "python",
                "regex",
                "sanitization"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 38154832,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1467415267,
            "creation_date": 1467414077,
            "body": "The Problem:\n\nI have this artificial example function:\n\n\n\nwhich takes a list of words and dynamically constructs a regular expression pattern without proper escaping the words in the list.\n\nUsage samples:\n\n\n\nThe Question:\n\nHow can I test this function to prove that there is no proper regular expression escaping or input sanitization?\n\nIn other words, what items in a  list should I provide to &quot;break&quot; this function?\n\n\n\nI&#39;ve tried several &quot;evil&quot; regexes to simulate catastrophic backtracking and force the function to hang like  or , but the function just returns  instantly and there is no indication of a problem.\n",
            "excerpt": "Problem:\n\nI have this artificial example function:\n\ndef test_function(target, words):\n    pattern = re.compile(r&quot;|&quot;.join(words))\n\n    return bool(pattern.search(target))\n\n\nwhich takes a list of words <span class=\"highlight\">and</span> &hellip; I&#39;ve tried several &quot;<span class=\"highlight\">evil</span>&quot; regexes to simulate catastrophic backtracking <span class=\"highlight\">and</span> force the function to hang like (x+x+)+y or (a+)+, but the function just returns False instantly <span class=\"highlight\">and</span> there is no indication of &hellip; ",
            "title": "Proving a function has no proper input validation"
        },
        {
            "tags": [
                "php",
                "regex",
                "preg-replace"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 38039506,
            "is_answered": false,
            "question_id": 38039318,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1466951377,
            "creation_date": 1466951377,
            "body": "The PHP manual describes the modifier this way: (emphasis mine)\n\n\n  If this deprecated modifier is set,  does normal\n  substitution of backreferences in the replacement string, s it\n  as PHP code(!!), and uses the result for replacing the search string.\n  Single quotes, double quotes, backslashes () and NULL chars will be\n  escaped by backslashes in substituted backreferences.\n\n\nFirst of all, the very concept of this modifier was always evil.  It included an  case into source-code, the existence of which was usually overlooked and therefore quite easily exploited.\n\nThe online PHP documentation ... http://php.net/manual/en/reference.pcre.pattern.modifiers.php ... talks very extensively about this modifier, why it is evil, and specifically how to use  to replace it.\n\nLet&#39;s take your first regex, the one for &quot;Geshi syntax&quot;:\n\n\n\nThis could be replaced by something like:\n\n\n\nAfter the regex has been evaluated against the string and the matching groups (if any) have been identified, the array is handed to the callback. (The array looks like the one returned by a normal match.)  The value returned by the callback is the final replacement string.\n\nNow, the presence of an executable subroutine is made explicit, and it becomes impossible for a clever  to influence what it consists of or to inject arbitrary code.\n\nFurthermore, it&#39;s much more flexible.  You can, after all, insert an entire subroutine. (It can be an anonymous one, as shown, or it can be a reference to a subroutine that&#39;s used many times.)\n\nFrankly, the  modifier was a bad idea that won&#39;t be missed . . .  Callbacks do the same thing, and much more.\n",
            "excerpt": "First of all, the very concept of this modifier was always <span class=\"highlight\">evil</span>.  It included an eval case into source-code, the existence of which was usually overlooked <span class=\"highlight\">and</span> therefore quite easily exploited. &hellip; \\[\\/\\\\1\\]#ise&quot;,\n   function($subs) {\n      return source_highlighter($subs[2], $subs[1]);\n   },\n   $s);\n\n\nAfter the <span class=\"highlight\">regex</span> has been evaluated against the string <span class=\"highlight\">and</span> the matching groups (if any) have been &hellip; ",
            "title": "/e modifier is deprecated"
        },
        {
            "tags": [
                "regex",
                "pcre",
                "backtracking"
            ],
            "question_score": 20,
            "is_accepted": false,
            "answer_id": 37979580,
            "is_answered": false,
            "question_id": 37912224,
            "item_type": "answer",
            "score": 16,
            "last_activity_date": 1466637394,
            "creation_date": 1466636327,
            "body": "TL;DR\n\nIn short, &quot;backtracking&quot; is when a regex engine returns to a &quot;flexible&quot; match, attempting a different path to get a successful match.\n\nBacktracking with Alternation\n\nFor example, in the following pattern and input:\n\n\n\n\n\n\n\nThe regex engine will match &quot;foo&quot;, then attempt the first of the two options, matching &quot;b&quot; and then &quot;a&quot;, but fails at &quot;r&quot;. Rather than failing the whole match, though, it will &quot;rewind the tape&quot; and start with the second alternative, matching &quot;b&quot; then &quot;a&quot; and then &quot;z&quot;... success!\n\nBacktracking with Quantifiers\n\nThis also works with quantifiers. A quantifier is anything that encourages the engine to match a repeating pattern, including , ,  and  (depending on the engine).\n\nA greedy quantifier (the default) will match as many repetitions as possible before moving on to the rest of the pattern. For example, given the pattern and input below:\n\n\n\n\n\n\n\nThe pattern  will begin by matching the entire string: &quot;foobar&quot;. However, when it moves on to the , the regex engine has reach the end of the input and the match fails. Rather than simply giving up, the engine will ask the last greedy quantifier to give up one of its repetitions, now matching &quot;fooba&quot;. The match still fails, so the engine asks  to give up the &quot;a&quot; (failure), and then the &quot;b&quot;. After giving up the &quot;b&quot;, the engine can now match , and the match succeeds.\n\nTrees and Backtracking\n\nAnother way of thinking of a regex is as a &quot;tree&quot;, and backtracking is going back up a node and trying another path. Given the pattern  and the input &quot;foobaz&quot;, the engine will attempt something like the following:\n\n\n\nCounting the &quot;Backtracks&quot;\n\nAs to why you see differences in the &quot;number&quot; of backtracks... this probably has a lot to do with internal optimizations and logging level. For example, RegexBuddy does not appear to be logging the match to the empty string before , while regex101 does. In the end, though, it doesn&#39;t really matter what exact order you backtrack in (what order you climb back up the tree) so long as you end up with the same result.\n\nEvil Regexes\n\nYou already know this, but for the benefit of anyone else who happens by, your regex was written to demonstrate &quot;catastrophic backtracking&quot; (aka &quot;evil regex&quot;), where the number of backtrack attempts grows exponentially as the length of the input increases. These regexes can be exploited to perform DoS attacks, so you must use caution not to introduce these into your patterns (as I found out).\n",
            "excerpt": "Trees <span class=\"highlight\">and</span> Backtracking\n\nAnother way of thinking of a <span class=\"highlight\">regex</span> is as a &quot;tree&quot;, <span class=\"highlight\">and</span> backtracking is going back up a node <span class=\"highlight\">and</span> trying another path. &hellip; <span class=\"highlight\">Evil</span> Regexes\n\nYou already know this, but for the benefit of anyone else who happens by, your <span class=\"highlight\">regex</span> was written to demonstrate &quot;catastrophic backtracking&quot; (aka &quot;<span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>&quot;), where the number of backtrack &hellip; ",
            "title": "RegEx debugging"
        },
        {
            "tags": [
                "javascript",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 37707038,
            "is_answered": false,
            "question_id": 37706048,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1465401073,
            "creation_date": 1465400280,
            "body": "First I believe you have a typo in your regex it should be  instead of  notice the lower-case . This correctly matches accross lines.\n\nThis regex could accomplish what you need for matching such a document, someone could probably make a more optimized version:\n\n\n\nOn the other hand I would rather suggest you do this with a different approach if possible. For example if you&#39;re doing this within NodeJS I&#39;d strongly suggest you do a check per line for the  or  delimiters. Then fill the array with lines until the ending delimiter. \n\nAssuming that you want an array of lines in each document, loose pseudo code following:\n\n\n\nAnother note if you&#39;re doing this with HTML I&#39;d strongly suggest not to use regex at all as HTML is not a regular language :) you&#39;ll find many links on SO pointing to evil.\n",
            "excerpt": "First I believe you have a typo in your <span class=\"highlight\">regex</span> it should be [\\s\\S] instead of [\\S\\S] notice the lower-case s. This correctly matches accross lines. &hellip; at all as HTML is not a regular language :) you&#39;ll find many links on SO pointing to <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Split a huge text using regex delimiters"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 5,
            "is_accepted": false,
            "answer_id": 37193871,
            "is_answered": false,
            "question_id": 37193706,
            "item_type": "answer",
            "score": 10,
            "last_activity_date": 1464337103,
            "creation_date": 1463074540,
            "body": "You could, although it&#39;s evil, use an eval after joining all the array elements.\ni.e.\n\n\n\nUpdate:\n\nI just recently thought of a much simple (not simpler than eval) but safe answer. If the only boolean operations you&#39;re using are  and  and the parentheses are properly formatted, then you could do a bunch of regex replaces until there is only one value left, either &quot;true&quot; or &quot;false&quot;.\n\nThe boolean values for AND operations can only be as follows and they simplify to either true or false\n\n\n\nthe same goes for OR operations\n\n\n\nAs a result, we can replace the expression with their simplified values - true or false. Then, if there are parentheses around the expression it&#39;ll end up as either  or  and we can easily regex replace that as well.\n\nWe can then loop this routine until we&#39;re finally left with one value, either  or .\n\ni.e. in code\n\n\n\nAnnd, if you&#39;re really dangerous, you can chain all those replaces together\n\nAlso, please notice the lovely lack of recursion and use of only one loop\n",
            "excerpt": "You could, although it&#39;s <span class=\"highlight\">evil</span>, use an eval after joining all the array elements.\ni.e. &hellip; Then, if there are parentheses around the expression it&#39;ll end up as either &#39;(true)&#39; or &#39;(false)&#39; <span class=\"highlight\">and</span> we can easily <span class=\"highlight\">regex</span> replace that as well. &hellip; ",
            "title": "Turning an array of values and strings into an if statement in Javascript"
        },
        {
            "tags": [
                "php",
                "regex",
                "security",
                "preg-match",
                "denial-of-service"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 37378330,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1464167950,
            "creation_date": 1463943312,
            "body": "How can I trigger a Regex-DOS using the  function using an evil regular expression (e.g. (a+)+ )?\n\nFor example, I have the following situation:\n\n\n\nIf I have control over , how could I trigger a DOS attack or reach the backtrack limit of the  functions in php?\n\nHow could I do this with the following expressions?\n\n\n",
            "excerpt": "How can I trigger a <span class=\"highlight\">Regex</span>-DOS using the preg_match() function using an <span class=\"highlight\">evil</span> regular expression (e.g. (a+)+ )? &hellip; ",
            "title": "How to trigger Regex Denial-of-Service in PHP?"
        },
        {
            "tags": [
                "angularjs",
                "regex",
                "razor"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 37259708,
            "is_answered": false,
            "question_id": 37257509,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1463419551,
            "creation_date": 1463419551,
            "body": "I assume that your C# code is actually: . The  avoids needing the evil escaped escape.\n\nYou will likely need to use the evil escaped escape in this case. Note that you don&#39;t need to escape the  if you are putting it directly in a string (if you are using it how I think you are). You can also use braces to minimize the escaping. So you can take this regex:\n\n\n\nand pass it through regex planet to get this:\n\n\n\nI would not recommend manual conversion since you already have an escaped backslash.\n",
            "excerpt": "The @ avoids needing the <span class=\"highlight\">evil</span> escaped escape.\n\nYou will likely need to use the <span class=\"highlight\">evil</span> escaped escape in this case. &hellip; So you can take this <span class=\"highlight\">regex</span>:\n\n(\\w+/|\\w+\\\\)+(\\w+)[.]\\w+\n\n\n<span class=\"highlight\">and</span> pass it through <span class=\"highlight\">regex</span> planet to get this:\n\n&quot;(\\\\w+/|\\\\w+\\\\\\\\)+(\\\\w+)[.] &hellip; ",
            "title": "Pass regex to variable (angular)"
        },
        {
            "tags": [
                "python",
                "list",
                "python-2.7",
                "match"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 37252940,
            "is_answered": false,
            "question_id": 37252447,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1463398955,
            "creation_date": 1463398367,
            "body": "A naive and simple approach - use  to transform the string from the file to a Python evaluable form, then evil  it:\n\n\n\nI think, using  in this context (seems to be a harmless academic NLP task) is ok. If the tokens in your text file aren&#39;t strictly alphanumerical, you might need a smarter regex as  to match them, maybe sth. like ...\n",
            "excerpt": "A naive <span class=\"highlight\">and</span> simple approach - use <span class=\"highlight\">regex</span> substitution to transform the string from the file to a Python evaluable form, then <span class=\"highlight\">evil</span> eval it:\n\nimport re\n\ns2 = &#39;[go:VB, [like:IN, [i:PR]], [to:TO], [there:RB &hellip; If the tokens in your text file aren&#39;t strictly alphanumerical, you might need a smarter <span class=\"highlight\">regex</span> as r&#39;\\w+&#39; to match them, maybe sth. like r&#39;[^\\[\\]]+&#39;... &hellip; ",
            "title": "matching between two different structured python lists"
        },
        {
            "tags": [
                "arrays",
                "bash"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 37120157,
            "is_answered": false,
            "question_id": 37120028,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1462810404,
            "creation_date": 1462809076,
            "body": "Consider instead:\n\n\n\n\n\nI&#39;ll go into the details below:\n\n\n has to be explicitly created as an array to actually be an array -- otherwise, it&#39;s just a string with a bunch of files in it.\n\nThis is an array:\n\n\n\nThis is not an array (and, in fact, could be a single filename):\n\n\nA proper bash array is expanded with  to get all contents, or  to get only the first entry.\n\n\n\n...thus checks the existence (whether as a file or a symlink) of the first entry in the array -- which is sufficient to tell if the glob expression did in fact expand, or if it matched nothing.\nA boolean is better represented with numeric values than a string containing  or : Running  has potential to perform arbitrary activity if the contents of  could ever be set to a user-controlled value, whereas  -- checking whether  is a positive numeric value (true) or otherwise (false) -- has far less room for side effects in presence of bugs elsewhere.\nThere&#39;s no need to loop over array entries to print them in a list:  will expand the format string additional times whenever it has more arguments (from the array expansion) than its format string requires. Moreover, using  in your format string will quote nonprintable values, whitespace, newlines, &amp;c. in a format that&#39;s consumable by both human readers and the shell -- whereas otherwise a file created with  will appear to be two list entries, whereas in fact it is only one.\n\n",
            "excerpt": "with NUL delimiters for safety\n#files=( )\n#while IFS= read -r -d &#39;&#39; f; do\n#  files+=( &quot;$f&quot; )\n#done &lt; &lt;(printf &#39;%s\\0&#39; * | egrep --null --null-data -e &quot;$1&quot;)\n\n# ...or, evaluate all files against $1, as <span class=\"highlight\">regex</span> &hellip; with touch $&#39;<span class=\"highlight\">evil</span>\\n  - hiding&#39; will appear to be two list entries, whereas in fact it is only one. &hellip; ",
            "title": "Bash: rm with an array of filenames"
        },
        {
            "tags": [
                "php",
                "html",
                "xml",
                "xml-parsing",
                "html-parsing"
            ],
            "question_score": 2299,
            "is_accepted": false,
            "answer_id": 3650431,
            "is_answered": false,
            "question_id": 3577641,
            "item_type": "answer",
            "score": 154,
            "last_activity_date": 1462617827,
            "creation_date": 1283766053,
            "body": "Why you shouldn&#39;t and when you should use regular expressions?\n\nFirst off, a common misnomer: Regexps are not for &quot;parsing&quot; HTML. Regexes can however &quot;extract&quot; data. Extracting is what they&#39;re made for. The major drawback of regex HTML extraction over proper SGML toolkits or baseline XML parsers are their syntactic effort and varying reliability.\n\nConsider that making a somewhat dependable HTML extraction regex:\n\n\n\nis way less readable than a simple phpQuery or QueryPath equivalent:\n\n\n\nThere are however specific use cases where they can help.\n\n\nMany DOM traversal frontends don&#39;t reveal HTML comments , which however are sometimes the more useful anchors for extraction. In particular pseudo-HTML variations  or SGML residues are easy to tame with regexps.\nOftentimes regular expressions can save post-processing. However HTML entities often require manual caretaking.\nAnd lastly, for extremely simple tasks like extracting &lt;img src= urls, they are in fact a probable tool. The speed advantage over SGML/XML parsers mostly just comes to play for these very basic extraction procedures.\n\n\nIt&#39;s sometimes even advisable to pre-extract a snippet of HTML using regular expressions  and process the remainder using the simpler HTML parser frontends.\n\nNote: I actually have this app, where I employ XML parsing and regular expressions alternatively. Just last week the PyQuery parsing broke, and the regex still worked. Yes weird, and I can&#39;t explain it myself. But so it happened.\nSo please don&#39;t vote real-world considerations down, just because it doesn&#39;t match the regex=evil meme. But let&#39;s also not vote this up too much. It&#39;s just a sidenote for this topic.\n",
            "excerpt": "Just last week the PyQuery parsing broke, <span class=\"highlight\">and</span> the <span class=\"highlight\">regex</span> still worked. Yes weird, <span class=\"highlight\">and</span> I can&#39;t explain it myself. But so it happened. &hellip; So please don&#39;t vote real-world considerations down, just because it doesn&#39;t match the <span class=\"highlight\">regex</span>=<span class=\"highlight\">evil</span> meme. But let&#39;s also not vote this up too much. It&#39;s just a sidenote for this topic. &hellip; ",
            "title": "How do you parse and process HTML/XML in PHP?"
        },
        {
            "tags": [
                "c#",
                "sitecore",
                "sitecore8"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 37073199,
            "is_answered": false,
            "question_id": 37073132,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1462539884,
            "creation_date": 1462539884,
            "body": "No. There is no way to get the number of placeholder.\n\nSitecore generates pages dynamically. It can generated completely different output for  and . \n\n can be inside a rendering which is hidden for one user and shown for another.\n\nThat&#39;s why you simply cannot tell how many placeholder with particular key will be rendered in a final page.\n\nWhat you could try to do (which is reaaaaaaaly evil in my opinion) is to get the layout assigned to the page, get all the renderings and for all of them get their  or  +  files and use some regex (another bad thing for html) to count placeholders with particular key.\n\nBut again - you can never be 100% sure that this is the number that will be used on the rendered page.\n",
            "excerpt": "What you could try to do (which is reaaaaaaaly <span class=\"highlight\">evil</span> in my opinion) is to get the layout assigned to the page, get all the renderings <span class=\"highlight\">and</span> for all of them get their cshtml or aspx + ascx files <span class=\"highlight\">and</span> use some &hellip; <span class=\"highlight\">regex</span> (another bad thing for html) to count placeholders with particular key. &hellip; ",
            "title": "Sitecore get the number of placeholders"
        },
        {
            "tags": [
                "java",
                "regex",
                "maven",
                "checkstyle"
            ],
            "question_score": 9,
            "is_accepted": false,
            "answer_id": 36923279,
            "is_answered": false,
            "question_id": 33266679,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1462066673,
            "creation_date": 1461869820,
            "body": "I found some problems with how you&#39;re trying to use regexes. I think I also found a solution (but I am unable to test it because I don&#39;t use Maven/Checkstyle).\n\n\n\nYour hypothesis about  being the issue is wrong. Scrolling down the page for RegexpHeader, there is an example that uses a regex group like :\n\n\n\n\n\nThere is a problem with your regex here: . You&#39;re not escaping the regex control characters (but not the ones you pointed out). You should make it:\n\n\n\nIn Java, it is necessary to have the &quot;evil&quot; escaped escape (). The regex in its pure form is:\n\n\n\nYou can use the &quot;pure form&quot; when the regex is in its own file.\n\nThe full text from the docs states (emphasis mine):\n\n\n  the required header specified inline. Individual header lines must be separated by the string &quot;\\n&quot; (even on platforms with a different line separator), and regular expressions must not span multiple lines.\n\n\nThis might mean that you are required to prefix each line with the anchor . All the examples I saw were like that.\n\nYou might be wondering how you will be able to use regexes with Javadocs (for example), which fit the following format (roughly):\n\n\n\nThe middle line may be missing. Or there may be 500 lines like that.\n\nThey give an example of a header that deals with this.\n\nRegex file (excerpt):\n\n\n\nNote: The words  probably aren&#39;t in the file.\n\nRegexpHeader:\n\n\n\nSee how they have line 13 as &quot;multiline&quot;? From the doc:\n\n\n  line numbers to repeat (zero or more times)\n\n",
            "excerpt": "b\\\\*/\\n&quot;\n\n\nIn Java, it is necessary to have the &quot;<span class=\"highlight\">evil</span>&quot; escaped escape (\\\\). The <span class=\"highlight\">regex</span> in its pure form is:\n\n /\\*a(\\x10c)?b\\*/\\n\n\n\nYou can use the &quot;pure form&quot; when the <span class=\"highlight\">regex</span> is in its own file. &hellip; Individual header lines must be separated by the string &quot;\\n&quot; (even on platforms with a different line separator), <span class=\"highlight\">and</span> regular expressions must not span multiple lines. &hellip; ",
            "title": "How to specify an optional regex group with a newline character in checkstyle&#39;s RegexpHeader?"
        },
        {
            "tags": [
                "regex",
                "apache-nifi"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 36827823,
            "is_answered": false,
            "question_id": 36825860,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1461526390,
            "creation_date": 1461525925,
            "body": "You can use:\n\n\n\nThere&#39;s no need to escape this backslash because it&#39;s not a regex backslash.\n\nExplanation\n\n\nThe  matches a literal .\nThe  matches a . I have chosen to use brackets instead of the evil Java escaped escape.\n\n",
            "excerpt": "You can use:\n\nreplaceAll(&quot;\\&quot;[{]&quot;, &quot;{&quot;);\nreplaceAll(&quot;[}]\\&quot;&quot;, &quot;}&quot;);\n\n\nThere&#39;s no need to escape this backslash because it&#39;s not a <span class=\"highlight\">regex</span> backslash.\n\nExplanation\n\n\nThe \\&quot; matches a literal &quot;. &hellip; I have chosen to use brackets instead of the <span class=\"highlight\">evil</span> Java escaped escape. &hellip; ",
            "title": "ReplaceText processor configuration"
        },
        {
            "tags": [
                "regex",
                "mule",
                "mule-el"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 36774923,
            "is_answered": false,
            "question_id": 36749323,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1461254495,
            "creation_date": 1461254495,
            "body": "Mule (as this page indicates) does not give a way to avoid the evil escaped escape. If you use a  in your regex, you must escape it: . Java is the same way.\n\nAlso, you need to understand that certain regex symbols do not always need to be escaped. This is very important when you work in Mule/Java, because it means you avoid the evil escaped escape.\n\nDepending on where they appear in the regex, characters may either gain or lose meaning as meta characters. The  character only has special meaning when it is sandwiched inside  character classes. This means that you just can just use it normally instead of escaping it in your regular expression.\n\nI suggest that you read up on regexes.\n\nThere will be times that you need to use the evil escaped escape, which can get confusing. Personally, I usually use this site to convert my regexes into escaped s.\n",
            "excerpt": "Mule (as this page indicates) does not give a way to avoid the <span class=\"highlight\">evil</span> escaped escape. If you use a \\ in your <span class=\"highlight\">regex</span>, you must escape it: \\\\. Java is the same way. &hellip; Also, you need to understand that certain <span class=\"highlight\">regex</span> symbols do not always need to be escaped. This is very important when you work in Mule/Java, because it means you avoid the <span class=\"highlight\">evil</span> escaped escape. &hellip; ",
            "title": "Validator.matchesRegex in Mule blows up with basic pattern"
        },
        {
            "tags": [
                "java",
                "regex",
                "extglob"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 36636765,
            "is_answered": false,
            "question_id": 26042753,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1460683520,
            "creation_date": 1460683520,
            "body": "extglob can match a number of regex constructs ( is a list of alterations):\n\n\n\nThere are some things that regex does that cannot be done in extglob, as far as I know, too:\n\n\n\nAssuming all of the constructs in the regex have extglob equivalents, it would be possible to convert it to extglob form. It would be difficult, because regexes are represented by a CFG. And you&#39;re using Java, which forces you to use the evil escaped escape .\n\nWhy not just use a different bash utility that supports regexes? Like this.\n",
            "excerpt": "extglob can match a number of <span class=\"highlight\">regex</span> constructs (pattern-list is a list of alterations):\n\nextglob           <span class=\"highlight\">regex</span>\n--------------    -----------------\n\n\n?                 [^/]\n*                 [^/]*\n. &hellip; <span class=\"highlight\">And</span> you&#39;re using Java, which forces you to use the <span class=\"highlight\">evil</span> escaped escape \\\\.\n\nWhy not just use a different bash utility that supports regexes? Like this. &hellip; ",
            "title": "How to convert regex into an extglob expression?"
        },
        {
            "tags": [
                "c#",
                "regex",
                "regex-greedy"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 36632461,
            "is_answered": false,
            "question_id": 36632047,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1460664291,
            "creation_date": 1460662797,
            "body": "I can see Java&#39;s influence. The  means you do not need the evil escaped escape :\n\n\n\nIn case you didn&#39;t know, Java&#39;s regexes are a pain. Most languages aren&#39;t like that. Python, for example, uses  instead of C#&#39;s .\n\n\n\nEdit: JavaScript only makes you escape escapes within strings, but you can use something like: .  The syntax is similar to Perl, actually.\n\nJava has no alternative to escaped escapes, which is why I assumed you meant Java.\n",
            "excerpt": "The @ means you do not need the <span class=\"highlight\">evil</span> escaped escape \\\\:\n\n@&quot;^(\\s{3}){0,}(\\s{5})*$&quot;\n\nIn case you didn&#39;t know, Java&#39;s regexes are a pain. Most languages aren&#39;t like that. &hellip; ",
            "title": "C# regex (coming from a perl/javascript background)"
        },
        {
            "tags": [
                "regex",
                "perl",
                "alternation"
            ],
            "question_score": 7,
            "is_accepted": false,
            "answer_id": 36608603,
            "is_answered": false,
            "question_id": 36420517,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1460578203,
            "creation_date": 1460578203,
            "body": "How regex alternation is implemented in Perl is fairly well explained in \n\n\n  Matching this or that\n  \n  We can match different character strings with the alternation\n  metacharacter  . To match  or  , we form the regex  .\n  As before, Perl will try to match the regex at the earliest possible\n  point in the string. At each character position, Perl will first try\n  to match the first alternative,  . If  doesn&#39;t match, Perl will\n  then try the next alternative,  . If  doesn&#39;t match either, then\n  the match fails and Perl moves to the next position in the string.\n  Some examples:\n\n\n  \n  Even though  is the first alternative in the second regex,  is able to match\n  earlier in the string.\n\n\n  \n  Here, all the alternatives match at the first string position, so the\n  first alternative is the one that matches. If some of the alternatives\n  are truncations of the others, put the longest ones first to give them\n  a chance to match.\n\n\n  \n  The last example points out \n  that character classes are like alternations of characters. At a given\n  character position, the first alternative that allows the regexp match\n  to succeed will be the one that matches.\n\n\nSo this should explain the price you pay when using alternations in regex.\n\nWhen putting simple regex together, you don&#39;t pay such a price. It&#39;s well explained in another related question in SO. When directly searching for a constant string, or a set of characters as in the question, optimizations can be done and no backtracking is needed which means potentially faster code.\n\nWhen defining the regex alternations, just choosing a good order (putting the most common findings first) can influence the performance. It is not the same either to choose between two options, or twenty. As always, premature optimization is the root of all evil and you should instrumentiate you code (Devel::NYTProf) if there are problems or you want improvements. But as a general rule alternations should be kept to a minimum and avoided if possible since:\n\n\nThey easily make the regex too big an complex. We like simple, easy to understand / debug / maintain regex.\nVariability and input dependant. They could be an unexpected source of problems since they backtrack and can lead to unexpected lack of performance depending on your input. As I understand, there&#39;s no case when they will be faster.\nConceptually you are trying to match two different things, so we could argue that two different statements are more correct and clear than just one.\n\n\nHope this answer gets closer to what you were expecting.\n",
            "excerpt": "As always, premature optimization is the root of all <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> you should instrumentiate you code (Devel::NYTProf) if there are problems or you want improvements. &hellip; We like simple, easy to understand / debug / maintain <span class=\"highlight\">regex</span>.\nVariability <span class=\"highlight\">and</span> input dependant. &hellip; ",
            "title": "Is it faster to use alternation than subsequent replacements in regular expressions"
        },
        {
            "tags": [
                "python",
                "regex",
                "git",
                "githooks"
            ],
            "question_score": 22,
            "is_accepted": false,
            "answer_id": 24991376,
            "is_answered": false,
            "question_id": 12093748,
            "item_type": "answer",
            "score": 24,
            "last_activity_date": 1459352815,
            "creation_date": 1406536886,
            "body": " with  is a possibility:\n\n\n\nAdvantages:\n\n\nif the algorithm ever changes, the check will update automatically\nyou are sure to get it right, which is way harder with a monster Regex\n\n\nDisadvantages:\n\n\nslower because subprocess. But premature optimization is the root of all evil.\nrequires Git as a binary dependency. But in the case of a hook it will always be there.\n\n\npygit2, which uses C bindings to libgit2, would be an even better possibility if  is exposed there, as it would be faster than , but I haven&#39;t found it.\n",
            "excerpt": "check-ref-format&quot;, ref])\nexit_status = process.wait()\n\n\nAdvantages:\n\n\nif the algorithm ever changes, the check will update automatically\nyou are sure to get it right, which is way harder with a monster <span class=\"highlight\">Regex</span> &hellip; But premature optimization is the root of all <span class=\"highlight\">evil</span>.\nrequires Git as a binary dependency. But in the case of a hook it will always be there. &hellip; ",
            "title": "How do I check for valid Git branch names?"
        },
        {
            "tags": [
                "php",
                "magento",
                "nginx",
                "url-rewriting",
                "fastcgi"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 3948588,
            "is_answered": false,
            "question_id": 3947333,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1458824859,
            "creation_date": 1287226395,
            "body": "I have some experience with nginx in this regard and have even written about it. So in a shameless act of self-promotion here is the result of my earlier research:\nhttp://www.magentocommerce.com/boards/viewreply/211050/\n\n\n\nSix years on and the above link is dead.  Also my nginx configs are more mature.  The following starts by blocking all files and only allowing those which are explicitly public.  All other requests are rewritten to .  If you want to execute some other PHP file you must write your own exclusion.  This is the safest way I can think of.\n\n/etc/nginx/magento_server:\n\n\n\n/etc/nginx/conf.d/php.conf:\n\n\n\nEach store then has it&#39;s own server block similar to this:\n\n/etc/nginx/sites-enabled/yoursite.com:\n\n\n\nAnd since  files are ignored (because this is not Apache) it helps to put  in each web root:\n\n/var/www/.user.ini\n\n\n",
            "excerpt": "I have some experience with nginx in this regard <span class=\"highlight\">and</span> have even written about it. &hellip; Include from &quot;server {}&quot; block\n##\n\n# 1M = one month\nexpires 1M;\n# recommended for all content, regardless\nadd_header X-Content-Type-Options &quot;nosniff&quot;;\n\n##\n# Front handler\n##\n\nlocation / {\n    # if is <span class=\"highlight\">evil</span> &hellip; ",
            "title": "How can I remove index.php from the address while redirect requests to index.php via fastcgi?"
        },
        {
            "tags": [
                "regex",
                "string"
            ],
            "question_score": -2,
            "is_accepted": false,
            "answer_id": 36092368,
            "is_answered": false,
            "question_id": 36092225,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1458327625,
            "creation_date": 1458327625,
            "body": "I think you&#39;re taking this the wrong way, really:\n\n\n  Unfortunately, most of what I&#39;ve read about catastrophic backtracking puts the blame on the regex writer for writing evil regexes, instead of exploring the possibility that regex engines/compilers need to do better. Although I found several sources that look at regex engines/compilers, they are too technical.\n\n\nWell, if you write a regex, your regex engine will need to follow that program you&#39;ve written.\nIf you write a complex program, then there&#39;s nothing the engine can do about that; this regex explicitly specifies that you&#39;ll need to match &quot;stuff&quot; first, before looking for the .\n\nNow, not being too involved in writing compilers, I agree, in this case, it might be possible to first identify all the &quot;static&quot; elements, which here are only said , and look for them. Sadly, in the general case, this won&#39;t really help you, because there might either be more than one static element or the none at all…\n\nIf you cared about speed, you&#39;d actually just first search for the  with plain linear search, and then do your regex thing after you&#39;ve found one. \n\nRegexes were never meant to be as fast as linear search engines, because they were rather meant to be much, much more powerful. \n\nSo, not only are you taking the wrong person to the judge (the regex engine rather than the regex, which is a program with a complexity), you&#39;re also blaming the victim for the crime (you want to harvest the speed of just looking for the  character, but still use a regex).\n\n\nby the way, don&#39;t validate email addresses with regexes. It&#39;s the wrong tool: \nhttp://www.ex-parrot.com/pdw/Mail-RFC822-Address.html\n",
            "excerpt": "I think you&#39;re taking this the wrong way, really:\n\n\n  Unfortunately, most of what I&#39;ve read about catastrophic backtracking puts the blame on the <span class=\"highlight\">regex</span> writer for writing <span class=\"highlight\">evil</span> regexes, instead of exploring &hellip; Now, not being too involved in writing compilers, I agree, in this case, it might be possible to first identify all the &quot;static&quot; elements, which here are only said @, <span class=\"highlight\">and</span> look for them. &hellip; ",
            "title": "Why don&#39;t regex engines ensure all required characters are in the string?"
        },
        {
            "tags": [
                "regex",
                "security",
                "match",
                "code-injection",
                "denial-of-service"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 35917903,
            "is_answered": false,
            "question_id": 35798236,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1457617186,
            "creation_date": 1457616513,
            "body": "Yes it would be a naive approach and would make your server susceptible to DOS attacks. \n\nActually first link you have given yourself is pretty nice and complimentary to it you could look at : How can I recognize an evil regex?\n\nHowever it seems like it is a difficult task to detect such evil regexes. It depends how much risk do you want to take ? One solution could be building a mechanism to spawn processes/threads (depends on your platform) that evaluates input strings with the given regex and set a timeout for it. Once the process takes long (as long as you can afford) you could kill it.\n",
            "excerpt": "Actually first link you have given yourself is pretty nice <span class=\"highlight\">and</span> complimentary to it you could look at : How can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>? &hellip; One solution could be building a mechanism to spawn processes/threads (depends on your platform) that evaluates input strings with the given <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> set a timeout for it. &hellip; ",
            "title": "Not having parenthesis alone in a regex will prevent ReDOS?"
        },
        {
            "tags": [
                "python",
                "regex",
                "nlp",
                "nltk",
                "tokenize"
            ],
            "question_score": 17,
            "is_accepted": true,
            "answer_id": 35348340,
            "is_answered": false,
            "question_id": 35345761,
            "item_type": "answer",
            "score": 40,
            "last_activity_date": 1455220659,
            "creation_date": 1455218880,
            "body": "The default  is using the Treebank tokenizer that emulates the tokenizer from the Penn Treebank tokenizer.\n\nDo note that  doesn&#39;t achieve tokens in the linguistics sense, e.g.:\n\n\n\nIt is usually used to separate strings with specified delimiter, e.g. in a tab-separated file, you can use  or when you are trying to split a string by the newline  when your textfile has one sentence per line.\n\nAnd let&#39;s do some benchmarking in :\n\n\n\n[out]:\n\n\n\nIf we try a another tokenizers in bleeding edge NLTK from https://github.com/jonsafari/tok-tok/blob/master/tok-tok.pl:\n\n\n\n[out]:\n\n\n\n(Note: the source of the text file is from https://github.com/Simdiva/DSL-Task)\n\n\n\nIf we look at the native  implementation, the  vs  time for the  is comparable. But do that in the python implementation the regexes are pre-compiled while in perl, it isn&#39;t but then the proof is still in the pudding:\n\n\n\n(Note: When timing the , we had to pipe the output into a file, so the timing here includes the time the machine takes to output to file, whereas in the  timing, it&#39;s doesn&#39;t include time to output into a file)\n\n\n\nWith regards to , it&#39;s a little different and comparing speed benchmark without considering accuracy is a little quirky.\n\nConsider this:\n\n\nIf a regex splits a textfile/paragraph up in 1 sentence, then the speed is almost instantaneous, i.e. 0 work done. But that would be a horrible sentence tokenizer...\nIf sentences in a file is already separated by , then that is simply a case of comparing how  vs  and  would have nothing to do with the sentence tokenization ;P\n\n\nFor information on how  works in NLTK, see:\n\n\ntraining data format for nltk punkt\nUse of PunktSentenceTokenizer in NLTK\n\n\nSo to effectively compare  vs other regex based methods (not ), one would have to evaluate also the accuracy and have a dataset with humanly evaluated sentence in a tokenized format.\n\nConsider this task: https://www.hackerrank.com/challenges/from-paragraphs-to-sentences\n\nGiven the text:\n\n\n  In the third category he included those Brothers (the majority) who\n  saw nothing in Freemasonry but the external forms and ceremonies, and\n  prized the strict performance of these forms without troubling about\n  their purport or significance. Such were Willarski and even the Grand\n  Master of the principal lodge. Finally, to the fourth category also a\n  great many Brothers belonged, particularly those who had lately\n  joined. These according to Pierre&#39;s observations were men who had no\n  belief in anything, nor desire for anything, but joined the Freemasons\n  merely to associate with the wealthy young Brothers who were\n  influential through their connections or rank, and of whom there were\n  very many in the lodge.Pierre began to feel dissatisfied with what he\n  was doing. Freemasonry, at any rate as he saw it here, sometimes\n  seemed to him based merely on externals. He did not think of doubting\n  Freemasonry itself, but suspected that Russian Masonry had taken a\n  wrong path and deviated from its original principles. And so toward\n  the end of the year he went abroad to be initiated into the higher\n  secrets of the order.What is to be done in these circumstances? To\n  favor revolutions, overthrow everything, repel force by force?No! We\n  are very far from that. Every violent reform deserves censure, for it\n  quite fails to remedy evil while men remain what they are, and also\n  because wisdom needs no violence. &quot;But what is there in running across\n  it like that?&quot; said Ilagin&#39;s groom. &quot;Once she had missed it and turned\n  it away, any mongrel could take it,&quot; Ilagin was saying at the same\n  time, breathless from his gallop and his excitement.\n\n\nWe want to get this:\n\n\n\nSo simply doing  will give you nothing. Even without considering the order of the sentences, you will yield 0 positive result:\n\n\n",
            "excerpt": "Every violent reform deserves censure, for it\n  quite fails to remedy <span class=\"highlight\">evil</span> while men remain what they are, <span class=\"highlight\">and</span> also\n  because wisdom needs no violence. &hellip; Every violent reform deserves censure, for it quite fails to remedy <span class=\"highlight\">evil</span> while men remain what they are, <span class=\"highlight\">and</span> also because wisdom needs no violence.\n... &hellip; ",
            "title": "Python re.split() vs nltk word_tokenize and sent_tokenize"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "string",
                "count",
                "coffeescript"
            ],
            "question_score": 5,
            "is_accepted": true,
            "answer_id": 35215653,
            "is_answered": false,
            "question_id": 35215348,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1454641753,
            "creation_date": 1454641753,
            "body": "One regex to solve your problem is:\n\n\n\nThe parts are as follows:\n\n\n\nYou may be able to use a character class instead of a group:\n\n\n\nFor the final element, but that isn&#39;t working on https://regex101.com/.\n\nTested on the following:\n\n\n  Contrary to popular belief, Lorem Ipsum is not simply random text. It\n  has roots in a piece of classical Latin literature from 45 BC, making\n  it over 2000 years old. Richard McClintock, a Latin professor at\n  Hampden-Sydney College in Virginia, looked up one of the more obscure\n  Latin words, consectetur, from a Lorem Ipsum passage, and going\n  through the cites of the word in classical literature, discovered the\n  undoubtable source. Lorem Ipsum comes from sections 1.10.32 and\n  1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the\n  theory of ethics, very popular during the Renaissance. The first line\n  of Lorem Ipsum, &quot;Lorem ipsum dolor sit amet..&quot;, comes from a line in\n  section 1.10.32.\n\n\nAnd finds six sentences (bolded the end of sentences, not the actual match). Note that the different grouping might pose a problem if you&#39;re depending on it for any reason.\n",
            "excerpt": "One <span class=\"highlight\">regex</span> to solve your problem is:\n\n\\w[.?!](\\s|$)\n\n\nThe parts are as follows:\n\n\\w - Word character\n\\[.?!] - Punctuation as specified.\n(\\s|$) - Whitespace character OR the end of the string. &hellip; Lorem Ipsum comes from sections 1.10.32 <span class=\"highlight\">and</span>\n  1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good <span class=\"highlight\">and</span> <span class=\"highlight\">Evil</span>) by Cicero, written in 45 BC. &hellip; ",
            "title": "Count sentences in string with JavaScript"
        },
        {
            "tags": [
                "python",
                "request",
                "urllib"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 34917176,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1453362225,
            "creation_date": 1453359183,
            "body": "I&#39;m having some issues with , I can&#39;t even say exactly what&#39;s going on, so I&#39;ll provide the code and  the traceback. First, the code:\n\n\n\nThe idea for this program is that the user enters an URL from Amazon or other sites like that and the program retrieves the image of the object, the sell price and (eventually) shipping fees. This is done by creating a sort of simple database ( will populate the list self.contenuti with some dictionaries containing the data). Now,  has to beahave exactly the same, no matter the site, and this is accomplished by creating specific classes (like the class ) that will have the specific functions for retrieving the data (every site has is own structure, so I can&#39;t use the same regex) and simply putting them in the dictionary : whenever  is called, the appropriate class (here I have only ) will be called passing  as an argument, and this will be the content of the site provided, converted into str, so the class Amazon can search the appropriate informations via regex.\n\nThis is for home uses, I already created a similar program that, with the data collected, writes a simple HTML file that is a sort of image gallery of all the objects of interest. What I want to do here, with , is downloading the image so it will be displayed into a tkinter label when I will write the GUI. No HTML file needed, the whole thing will be GUI based, like a sort of database.\n\nThe problem is that, whatever URL I provide (here I&#39;m doing it in the  function, for debug purposes) I get this evil and nasty &quot;thing&quot;: \n\n\n\nFrom what I understand, the problem is in urllib: for some reason the URL is not parsed correctly and I end up with the error. So, I tried to write this:\n\n\n\nThis is wrote in another module, for testing purpose, there is only this piece of code. If I have it for its own, it works perfectly, with no error. I tried with other URLs, same thing: if I try the second piece of code, no errors; if I try to pass it to , I got the error. What is going on?\n",
            "excerpt": ") will be called passing self.sorgente as an argument, <span class=\"highlight\">and</span> this will be the content of the site provided, converted into str, so the class Amazon can search the appropriate informations via <span class=\"highlight\">regex</span>. &hellip; The problem is that, whatever URL I provide (here I&#39;m doing it in the main() function, for debug purposes) I get this <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> nasty &quot;thing&quot;: \n\nFile &quot;C:\\Users\\Admin\\pyproj\\amazons\\amazzone2_0.py&quot;, line &hellip; ",
            "title": "Type error when trying to use urllib.request, &#39;str&#39; object is not callable"
        },
        {
            "tags": [
                "r",
                "mongodb",
                "twitter",
                "sentiment-analysis",
                "mongolite"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 34471572,
            "is_answered": false,
            "question_id": 34469227,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1451135015,
            "creation_date": 1451135015,
            "body": "I think you wanted to use , which flattens the list of status object that  returns. In any case this works. Note that you need to install and then start  for this to work:\n\n\n\nYields the following (4 scored bad, 592 scored neutral, 4 scored good):\n\n\n",
            "excerpt": "# we want a simple array (&quot;a&quot;) of scores back, so we use  \n  # &quot;l&quot; + &quot;a&quot; + &quot;ply&quot; = &quot;laply&quot;:  \n  scores = laply(sentences, function(sentence, pos.words, neg.words) {\n    # clean up sentences with R&#39;s <span class=\"highlight\">regex</span>-driven &hellip; =.progress )  \n  scores.df = data.frame(score=scores, text=sentences)  \n  return(scores.df)  \n}\n\ntweets &lt;- as.character(df_ip_out$iphone.text)\nneg = c(&quot;bad&quot;,&quot;prank&quot;,&quot;inferior&quot;,&quot;<span class=\"highlight\">evil</span>&quot;,&quot;poor&quot;,&quot;minor&quot;)\npos &hellip; ",
            "title": "Error inserting/retrieving tweets into mongolite db"
        },
        {
            "tags": [
                "nginx"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 34395805,
            "is_answered": false,
            "question_id": 34388518,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1450701212,
            "creation_date": 1450701212,
            "body": "You&#39;ll need a second location block as  directives (all handlers, for that matter, see this post) aren&#39;t inherited by nested location blocks.\n\nIf you want to simplify your configuration without copy-and-pasting your other configuration, consider an  directive and put the common aspects of your location block into an external file.\n\nIt is technically possible that you could get away with just one location block by adding an  statement like:\n\n\n\nbut as per the Nginx wiki&#39;s If is Evil page, you&#39;ll want to test this and very carefully.  This also involves more of an overhead by invoking the regex engine; the better option is two location blocks.\n",
            "excerpt": "page, you&#39;ll want to test this <span class=\"highlight\">and</span> very carefully. &hellip; This also involves more of an overhead by invoking the <span class=\"highlight\">regex</span> engine; the better option is two location blocks. &hellip; ",
            "title": "Expand location only for specific file types"
        },
        {
            "tags": [
                "java",
                "string"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 34201911,
            "is_answered": false,
            "question_id": 34201880,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1449750489,
            "creation_date": 1449750489,
            "body": "An evil regex can help you.\n\n\n\nO/P :\n\n\n\nNote : This will return the entire String in case there is no &quot;Word[space]digits&quot; in the String. You will have to do a length check for the actual String and the returned String. If the length is same, then your String doesn&#39;t contain the expected pattern.\n",
            "excerpt": "An <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> can help you.\n\n    String test=&quot;top 10 products&quot;;\n    System.out.println(test.replaceAll(&quot;.*? &hellip; You will have to do a length check for the actual String <span class=\"highlight\">and</span> the returned String. If the length is same, then your String doesn&#39;t contain the expected pattern. &hellip; ",
            "title": "Check if a string has a word followed by a number"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "regex"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 33768168,
            "is_answered": false,
            "question_id": 33766484,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1447799170,
            "creation_date": 1447798867,
            "body": "Here is a way to do it without evil regex strings. Instead I wanted to try and do it with jQuery &#39;keydown&#39; event which was inline with what the questioner mentioned (see: newb at jQuery). Also note that &#39;keydown&#39; is better for this methodology as &#39;keyup&#39; will fire multiple times, though I guess this will too... Anyways, here is what I came up with:\n\n\n\nThis might be the most complicated way to do this ever but it does seem to work and satisfy all the constraints posed. Since I just noticed that this was flagged regex, this might be a terrible solution. Let the evisceration begin!\n\nSuper Bonus: This will work if you have any number of &quot;[]&quot; pairs in the string.\n",
            "excerpt": "Here is a way to do it without <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> strings. Instead I wanted to try <span class=\"highlight\">and</span> do it with jQuery &#39;keydown&#39; event which was inline with what the questioner mentioned (see: newb at jQuery). &hellip; Since I just noticed that this was flagged <span class=\"highlight\">regex</span>, this might be a terrible solution. Let the evisceration begin!\n\nSuper Bonus: This will work if you have any number of &quot;[]&quot; pairs in the string. &hellip; ",
            "title": "Javascript move text between brackets in textarea"
        },
        {
            "tags": [
                "android",
                "validation"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 33717819,
            "is_answered": false,
            "question_id": 33717377,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1447577058,
            "creation_date": 1447576524,
            "body": "User input is always evil! make that clear in your mind.  you can never trust users to put only the right stuff into your inputs. \nso just bounds check every input. If you want to get no empty strings check for it via\n\n\n\nsame stuff need to happen for every input.  if you e. g. try to get int values check em if they fit in your expected range and so on.... \n\nby this you don&#39;t need to put a space value into your editTexts while clearing em ...  (which need to be deleted by user if he wants to set the edittext correctly (-&gt; evil user just ignores the space and enters its name and you will have to check for leading or ending sign of space before putting it in your database ) \n\nhint: regex strings to ensure input is correct ;) \n",
            "excerpt": "(which need to be deleted by user if he wants to set the edittext correctly (-&gt; <span class=\"highlight\">evil</span> user just ignores the space <span class=\"highlight\">and</span> enters its name <span class=\"highlight\">and</span> you will have to check for leading or ending sign of space before &hellip; putting it in your database ) \n\nhint: <span class=\"highlight\">regex</span> strings to ensure input is correct ;) &hellip; ",
            "title": "How do I add validation for the edit text code in android?"
        },
        {
            "tags": [
                "r",
                "csv"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 33317589,
            "is_answered": false,
            "question_id": 33314026,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1445685670,
            "creation_date": 1445685670,
            "body": "This will get you started but you still have quite a bit of work to do. This works for one line (and it may work for the other two in the example) but it can be extrapolated to work with all of the lines ( FTW). Basically you need to rebuild the JSON structure from that single field (there may be alternative ways, especially if you do not need all the fields). It&#39;s easier than it might otherwise be since the Yelp schema is known. \n\nYou have to attack it in a pretty deterministic way, converting some fields before others, accounting for spaces in field names, dealing with arrays &amp; nested structures, etc. As I said, you have quite a bit of work ahead of you. If your regex-fu is weak, this will provide ample practice to become a regex ninja.\n\n\n\nAnd, whomever gave you this file deserves whatever evil comes their way in their programmatic life. I&#39;d give them back whatever they wanted from this in gnarly XML with EBCDIC encoding.\n",
            "excerpt": "If your <span class=\"highlight\">regex</span>-fu is weak, this will provide ample practice to become a <span class=\"highlight\">regex</span> ninja. &hellip; , whomever gave you this file deserves whatever <span class=\"highlight\">evil</span> comes their way in their programmatic life. &hellip; ",
            "title": "Instructing R to find variable name in rows when reading csv file"
        },
        {
            "tags": [
                "emacs",
                "evil-mode"
            ],
            "question_score": 11,
            "is_accepted": true,
            "answer_id": 22418983,
            "is_answered": false,
            "question_id": 18102004,
            "item_type": "answer",
            "score": 21,
            "last_activity_date": 1445565371,
            "creation_date": 1394852337,
            "body": "Update:  was recently replaced with . This  works on current evil and has the same usage as the old one:\n\n\n\n\n\nOriginal Answer:\n\nIf you end up defining more than one new text object, the repetition can get annoying, especially if you want to bind both inner and outer objects. If you hit that barrier, try this:\n\n\n\nUsage:\n\n\n\n(This is more than you wanted, but I&#39;ll leave it here in case it helps someone :)\n",
            "excerpt": "This  works on current <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> has the same usage as the old one:\n\n(defmacro define-<span class=\"highlight\">and</span>-bind-text-object (key start-<span class=\"highlight\">regex</span> end-<span class=\"highlight\">regex</span>)\n  (let ((inner-name (make-symbol &quot;inner-name&quot;))\n        (outer-name &hellip; (<span class=\"highlight\">evil</span>-define-text-object ,outer-name (count &amp;optional beg end type)\n         (<span class=\"highlight\">evil</span>-select-paren ,start-<span class=\"highlight\">regex</span> ,end-<span class=\"highlight\">regex</span> beg end type count t))\n       (define-key <span class=\"highlight\">evil</span>-inner-text-objects-map ,key (quote &hellip; ",
            "title": "Emacs Evil mode: how to create a new text object to select words with any non-space characters?"
        },
        {
            "tags": [
                "java",
                "xml"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 33116617,
            "is_answered": false,
            "question_id": 33116334,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1444800824,
            "creation_date": 1444796724,
            "body": "I think you should mention the programming language you are using so people can give you solutions with code anyway, for now I can think of regular expression can only be the solution and you have to know what will be the root tag your code should look for. like in above i can see  is the root tag. I&#39;ll try to compe up with code solution in few hours. \n\nFollowing code works in JDK 6 and should work in later versions as well\n\n\n\noutput is \n\n\n\nSee your code running online here\n",
            "excerpt": "&lt;/description&gt;&quot; +\n&quot;&lt;/book&gt;&quot; +\n&quot;&lt;/catalog&gt;&quot;;\n\nString <span class=\"highlight\">regex</span> = &quot;(\\\\&lt;catalog\\\\&gt;.*? &hellip; sorceress, <span class=\"highlight\">and</span> her own childhood to become queen of the world. &hellip; ",
            "title": "How to identify an xml in a text file containing many xml files along with other text using the node of the xml in Java?"
        },
        {
            "tags": [
                "ajax",
                "regex",
                "forms",
                "validation"
            ],
            "question_score": 6,
            "is_accepted": true,
            "answer_id": 32881866,
            "is_answered": false,
            "question_id": 32878110,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1443685123,
            "creation_date": 1443684774,
            "body": "Just for information you should not validate User code on the clientside. Always treat input from the client as evil\n\nI changed the regex so that the min length () of the Username is included\n\n\n",
            "excerpt": "Always treat input from the client as <span class=\"highlight\">evil</span>\n\nI changed the <span class=\"highlight\">regex</span> so that the min length (username.length &lt; 4) of the Username is included\n\n function username_check() {\n    var username = $(&#39;#warden_id&#39;) &hellip; ",
            "title": "form validation using ajax with regex"
        },
        {
            "tags": [
                "regex",
                "notepad++"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 32805237,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1443336349,
            "creation_date": 1443335639,
            "body": "From below the verse i try to remove all the tab and join them using . But i want to untouch the lines that start with the verse number.\n\n1       I am like one who gathers summer fruit\n        at the gleaning of the vineyard;\n        there is no cluster of grapes to eat,\n        none of the early figs that I crave.\n\n2       The faithful have been swept from the land;\n        not one upright person remains.\n        Everyone lies in wait to shed blood;\n        they hunt each other with nets.\n\n3       Both hands are skilled in doing evil;\n        the ruler demands gifts,\n        the judge accepts bribes,\n        the powerful dictate what they desire—\n        they all conspire together.\n\nIn Notepad++ find &amp; replace, using regex i find  and replace with  it replaces all the TAB. But i don&#39;t know how to join the lines so that it will become like this:\n\n1       I am like one who gathers summer fruit&lt;BR&gt;at the gleaning of the vineyard;&lt;BR&gt;there is no cluster of grapes to eat,&lt;BR&gt;none of the early figs that I crave.\n2       The faithful have been swept from the land;&lt;BR&gt;not one upright person remains.&lt;BR&gt;Everyone lies in wait to shed blood;&lt;BR&gt;they hunt each other with nets.\n3       Both hands are skilled in doing evil;&lt;BR&gt;the ruler demands gifts,&lt;BR&gt;the judge accepts bribes,&lt;BR&gt;the powerful dictate what they desire—&lt;BR&gt;they all conspire together.\n\nCan anyone please tell me how to join the lines using notepad++ regex?\n",
            "excerpt": "From below the verse i try to remove all the tab <span class=\"highlight\">and</span> join them using &lt;BR&gt;. &hellip; In Notepad++ find &amp; replace, using <span class=\"highlight\">regex</span> i find ^\\t <span class=\"highlight\">and</span> replace with &lt;BR&gt; it replaces all the TAB. &hellip; ",
            "title": "Regex to replace TAB and move up lines"
        },
        {
            "tags": [
                "bash",
                "shell"
            ],
            "question_score": 15,
            "is_accepted": false,
            "answer_id": 32789134,
            "is_answered": false,
            "question_id": 32787320,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1443208474,
            "creation_date": 1443208474,
            "body": "Instead of piping the output of  through , you might as well use the full capabilities of . You&#39;ll want to build up a an array that contains the options:\n\n\n\nto pass to  (where  ...  are the strings passed as arguments):\n\n\n\nWe&#39;re using  as an initializer, so that building up the array of options is simple; this also has the benefit (or flaw, depending on your point of view) that if no options are given then  exits early without listing all the content of the directory recursively.\n\nWith  you could use regexes to have more powerful matching capabilities; here we&#39;re using &#39;s  option, so we can only use the basic globs: ,  and . If your  supports the  option (GNU  does), and if you really need regexes, then it&#39;s trivial to modify the previous function.\n\n\n\nAnother possibility is to use Bash&#39;s extended globs:\n\n\n\nA few things to note here: \n\n\nThe whole function is included in a subshell—it&#39;s not a typo. That&#39;s to simplify a few things: no need to use local variables, and no need to save the shell options to restore them at the end of the function.\nThe first line uses the evil  but in a safe way: it&#39;s actually an idiomatic way to join the elements of the positional parameters with the first character of  (here a pipe character).\nWe need to set  to the empty string so as to avoid word splitting in the glob .\nThe glob  uses  and the   (with no quotes, it&#39;s not a typo). See Pattern Matching in the reference manual.\n\n\nThis function uses Bash&#39;s extended globs, that differ from (and aren&#39;t as powerful as) regexes (yet this should be enough for most cases).\n",
            "excerpt": "<span class=\"highlight\">and</span> [...]. If your find supports the -<span class=\"highlight\">regex</span> option (GNU find does), <span class=\"highlight\">and</span> if you really need regexes, then it&#39;s trivial to modify the previous function. &hellip; The first line uses the <span class=\"highlight\">evil</span> eval but in a safe way: it&#39;s actually an idiomatic way to join the elements of the positional parameters with the first character of IFS (here a pipe character). &hellip; ",
            "title": "bash scripting: build a command then execute"
        },
        {
            "tags": [
                "regex",
                "nginx",
                "location",
                "url-rewriting"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 32353046,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1441351146,
            "creation_date": 1441196592,
            "body": "I want to create a nginx localtion do to the following\n\nGiven URL:\n\nexample.com/foo/bar/123456?ItemID=123456&amp;aid=0&amp;bid=0\n\nTask:\n\nIf both numbers are the same and aid and bid are zero, then rewreite the url to example.com/foo/bar/123456\n\nMy Try:\n\n\n\nBut that doesn&#39;t work. ;)\n\nWould be great if s.o. could give me a hint.\n\nEDIT:\n\nnginx seems not to match GET-Parameters by regex at all (in location line) so you have to use $args and check with if (which can be evil according to documentation).\n",
            "excerpt": "ItemID=123456&amp;aid=0&amp;bid=0\n\nTask:\n\nIf both numbers are the same <span class=\"highlight\">and</span> aid <span class=\"highlight\">and</span> bid are zero, then rewreite the url to example.com/foo/bar/123456\n\nMy Try:\n\nlocation ~ ^/foo/bar/(?&lt;prid&gt;\\d+)\\? &hellip; EDIT:\n\nnginx seems not to match GET-Parameters by <span class=\"highlight\">regex</span> at all (in location line) so you have to use $args <span class=\"highlight\">and</span> check with if (which can be <span class=\"highlight\">evil</span> according to documentation). &hellip; ",
            "title": "nginx remove / rewrite GET Parameters for specific URL"
        },
        {
            "tags": [
                "json",
                "vb.net"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 31755824,
            "is_answered": false,
            "question_id": 31755494,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1438379986,
            "creation_date": 1438379986,
            "body": "If you are certain that you will only ever need the hashes, you can actually use a regex to get all the hashes from this file.  Yes, this is slightly evil, because regex is normally not a suitable tool for dealing with structured data.  But if you don&#39;t care about the structure...\n\n\n",
            "excerpt": "If you are certain that you will only ever need the hashes, you can actually use a <span class=\"highlight\">regex</span> to get all the hashes from this file. &hellip; Yes, this is slightly <span class=\"highlight\">evil</span>, because <span class=\"highlight\">regex</span> is normally not a suitable tool for dealing with structured data.  But if you don&#39;t care about the structure... &hellip; ",
            "title": "obtain values to json file"
        },
        {
            "tags": [
                "python",
                "django",
                "eval"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 31598076,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1437685732,
            "creation_date": 1437685732,
            "body": "Eval is evil, rm -rf /,  etc etc... \n\nbut lets say for some silly reason I actually want to leverage the power of eval to do basic computations and conditionals.\n\nI want to get an idea of what the potential risks are for even having an eval block sitting around in my server side code, and what I can do in order to mitigate them.\n\nFor starters, eval will actually be run against user input... even scarier I know. These are super users, who, in theory can be trusted, but disgruntled former employees and the like is always a thing.\n\nThe intended use of the input is to provide a formula used to do calculations against a spreadsheet that is parsed. So for example, an intended input would be something like:\n\n\n\nA regex engine is then run on this value to replace all curly bracket values with appropriate column values, to turn the statement into something like:\n\n\n\nHowever, left alone, I recognize they could do something like:\n\n\n\nSo, the idea is to come up with clean method that will allow for:\n1) String values to be valid\n2) Anything within brackets to be valid since it won&#39;t be eval&#39;d\n3) Nothing else containing alphanumeric characters to be valid.\n\nWhat I&#39;ve got so far is:\n\n\n\nWhich gets run on the model save method, disallowing any arbitrary alphanumeric commands hanging around.\n\nAre there any flaws/other risks I&#39;m missing with this approach?\n",
            "excerpt": "Eval is <span class=\"highlight\">evil</span>, rm -rf /,  etc etc... \n\nbut lets say for some silly reason I actually want to leverage the power of eval to do basic computations <span class=\"highlight\">and</span> conditionals. &hellip; So for example, an intended input would be something like:\n\n({{Column A}} + {{Column B}}) * {{Column C}}\n\n\nA <span class=\"highlight\">regex</span> engine is then run on this value to replace all curly bracket values with appropriate &hellip; ",
            "title": "Using an eval() server side in a Python/Django application"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "node.js"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 31228720,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1436087500,
            "creation_date": 1436086803,
            "body": "I&#39;m looking for a more elegant way to use regexes in a control structure. I want to be able to perform operations using a match without declaring the regex outside of where it is needed or having to perform a the match operation twice. \n\nHere is my code edited for brevity:\n\n\n\nI am away this is very nit-picky, but I will accept it if it is a necessary evil. \n",
            "excerpt": "I want to be able to perform operations using a match without declaring the <span class=\"highlight\">regex</span> outside of where it is needed or having to perform a the match operation twice. &hellip; */\n    var youtubeMatch = regexYoutube.exec(content);\n    return &quot;http://img.youtube.com/vi/&quot;+youtubeMatch[4]+&quot;/0.jpg&quot;;\n}\n\n\nI am away this is very nit-picky, but I will accept it if it is a necessary <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Elegant Regex Use in Control Structure"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "node.js"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 31228797,
            "is_answered": false,
            "question_id": 31228720,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1436087500,
            "creation_date": 1436087500,
            "body": "I&#39;d modify the  function to be something else, such as , and return the value of the .exec. Then instead of declaring the regex outside the , declare it inside the function.\n\nThen you can replace  with a call to  and checking if it returned anything, and replace the exec call you use elsewhere with a use of the same function.\n\nThis is a sort of evil in its own way since it uses the side effect of a function for something else (the return value for a simple is check). But it is an alternative to defining the regex in a place it is not used.\n\nWhich as mentioned in a comment, is not really all that evil. Keep your scopes small and it won&#39;t get too confusing - the code is pretty readable to me as is.\n",
            "excerpt": "Then instead of declaring the <span class=\"highlight\">regex</span> outside the execYouTubeRegex, declare it inside the function. &hellip; But it is an alternative to defining the <span class=\"highlight\">regex</span> in a place it is not used.\n\nWhich as mentioned in a comment, is not really all that <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Elegant Regex Use in Control Structure"
        },
        {
            "tags": [
                "regex",
                "perl",
                "substitution"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 30812890,
            "is_answered": false,
            "question_id": 30812582,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1434147547,
            "creation_date": 1434146976,
            "body": "Something like this using eval  (untested).\n\n\n\nUsing the eval flag in the  form means to evaluate the replacement\nside as a line of code that returns a value.  \n\nIn this case it executes a ternary conditional in the replacement code.  \n\nIt&#39;s sort of like an inline regex callback.\nIt&#39;s much more complicated though since it can be like  so\nbetter to refer to the docs.  \n\nRemember, eval is really evil, misspelled !!\n",
            "excerpt": "It&#39;s sort of like an inline <span class=\"highlight\">regex</span> callback.\nIt&#39;s much more complicated though since it can be like s///eeg so\nbetter to refer to the docs.  \n\nRemember, eval is really <span class=\"highlight\">evil</span>, misspelled !! &hellip; ",
            "title": "perl: substitute pattern with pattern of different size"
        },
        {
            "tags": [
                "java",
                "text",
                "split",
                "bufferedreader",
                "stringbuilder"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 30346438,
            "is_answered": false,
            "question_id": 30345816,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1432194325,
            "creation_date": 1432116177,
            "body": "You want to find the lines which match &quot;I n&quot;.\n\nThe regex you need is : \n\n\n indicates the beginning of the line. Hence, if there are some whitespaces or text before , the line will not match the regex.\n indicates any digit. For the sake of simplicty, I allow only one digit in this regex.\n indicates the end of the line. Hence, if there are some characters after the digit, the line will not match the expression.\n\n\nNow, you need to read the file line by line and keep a reference to the file in which you write the current line.\n\nReading a file line by line is much easier in Java 8 with \n\n\n\nNote : In order to extract the digit, I use a raw  which I consider as evil but it is easier to understand. You can do it in a better way with a  and a   : \n\nWith this regex : &quot;&quot;. (The same as before but with parenthesis which indicates what you will want to capture). Then : \n\n\n",
            "excerpt": "Path path = Paths.get(&quot;path/to/your/input/file.txt&quot;);\n  Files.lines(path).forEach(line -&gt; {\n    if(line.matches(<span class=\"highlight\">REGEX</span>)) {\n      //Extract the digit <span class=\"highlight\">and</span> update currentFile\n      currentFile = &quot;File DOC_ID &hellip; You can do it in a better way with a Pattern <span class=\"highlight\">and</span> a Matcher  : \n\nWith this <span class=\"highlight\">regex</span> : &quot;.I (\\\\d)&quot;. (The same as before but with parenthesis which indicates what you will want to capture). &hellip; ",
            "title": "Splitting a text file into multiple files by specific character sequence"
        },
        {
            "tags": [
                "notepad++",
                "wildcard"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 30292359,
            "is_answered": false,
            "question_id": 30292050,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1431898285,
            "creation_date": 1431898285,
            "body": "Just try this regex substitution using perl\n\n\n\nIf you see &quot;OK&quot;, it just works\n\nI assumed the evil code is enclosed in some sort of opening/closing tags in HEX representation.\n\nIMPORTANT!! Please, do a BACK UP before giving it a try!!\n",
            "excerpt": "Just try this <span class=\"highlight\">regex</span> substitution using perl\n\nperl -0777 -pe &#39;s/#([0-9a-f]{6})#.+? &hellip; #\\/\\1#/OK/s&#39; &lt; test.txt\n\n\nIf you see &quot;OK&quot;, it just works\n\nI assumed the <span class=\"highlight\">evil</span> code is enclosed in some sort of opening/closing tags in HEX representation.\n\nIMPORTANT!! &hellip; ",
            "title": "Notepad++ erase anything in between.. without REGEX?"
        },
        {
            "tags": [
                "python",
                "regex"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 30004823,
            "is_answered": false,
            "question_id": 29997723,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1430584829,
            "creation_date": 1430584829,
            "body": "I&#39;d take a different approach, just to be different. Rather than listing out all the compounds in one big regex, it might be faster to make them a set, grab everything that might be a compound, and filter it after the fact.\n\n\n\nThis should be faster if you have tons of strings to search, since testing set membership is much faster than a regex parse. If you just have a few, the cost of building the set might outweigh the speed in parsing the strings. The golden rule is to profile your code and remember that premature optimization is the root of all evil\n",
            "excerpt": "Rather than listing out all the compounds in one big <span class=\"highlight\">regex</span>, it might be faster to make them a set, grab everything that might be a compound, <span class=\"highlight\">and</span> filter it after the fact. &hellip; The golden rule is to profile your code <span class=\"highlight\">and</span> remember that premature optimization is the root of all <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Maximize substring match in regular expression"
        },
        {
            "tags": [
                "java",
                "regex",
                "string",
                "parsing"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 29979517,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1430507939,
            "creation_date": 1430436744,
            "body": "I am scraping information from a log that I need 3 elements. Another added difficulty is that I am parsing the log via  in my java program aka one(1) line at a time. (If there is a possibility to read multiple lines when parsing let me know :) ) NOTE: I have no control over the log output format.\n\nThere are 2 possibilities of what I must extract. Either the log is nice and gives the following\n\nNICE FORMAT\n\n\n\nwhere I must grab  ,  , and \n\nNow the not so nice case: If the name is too long, it bumps everything else to the next line like is below, now the only thing after the first element is one blank space followed by a newline (\\n) which gets clobbered by  anyway.\n\nEVIL FORMAT : Note each line is in a separate arraylist entry.\n\n\n\nTherefore what the regex actually sees is:\n\n\n\nCORNER CASE FORMAT that also occurs within the log but I DO NOT want\n\n\n\nFinally below is my Pattern line I am currently using for the first line and  is what is used on the next line when group 2 of the first line is empty.\n\nUPDATE: The pattern below works for the NICE FORMAT and EVIL FORMAT But now pattern  has no matches, even though on regex101.com it is correct. Link: https://regex101.com/r/vS7vZ3/9\n\nUPDATE2: I fixed it, I forgot to add  once I compiled the second line with Pattern pline2. Corrected code is below.\n\n\n\nTo give a little background I am first matching the name  to  followed by the address  to   and finally the size  to . This is all assuming the log is in the NICE format. If it is in the EVIL format I see that group(2) is empty and therefore readin the next line of the log to a temp buffer and apply the second pattern  to new line. \n\nCan someone help me with the regex?\nIs there a way I can make sure my current line (or even better, just the second grouping) is either the NICE FORMAT or is empty?\n\nAs requested my java code:\n\n\n\nAn Aside, The output I currently get:\n\n\n",
            "excerpt": "UPDATE: The pattern below works for the NICE FORMAT <span class=\"highlight\">and</span> <span class=\"highlight\">EVIL</span> FORMAT But now pattern pline2 has no matches, even though on regex101.com it is correct. &hellip; If it is in the <span class=\"highlight\">EVIL</span> format I see that group(2) is empty <span class=\"highlight\">and</span> therefore readin the next line of the log to a temp buffer <span class=\"highlight\">and</span> apply the second pattern pline2 to new line. &hellip; ",
            "title": "Regex expression for multiple patterns in 1 line"
        },
        {
            "tags": [
                "ruby"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 29954906,
            "is_answered": false,
            "question_id": 29948276,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1430342779,
            "creation_date": 1430342779,
            "body": "Parsing the data with JSON is a safe and effective approach when the data is known to be well formed and parsable:\n\n\n\nOtherwise a gsub solution using either regex or simple method chaining can be employed, but this sort of naive approach may remove quotation marks and brackets from the inner elements of the array string being parsed, potentially mangling the data you meant to extract. \n\n\n\nNotice how the gsub approach has a different result than the JSON parse method.  \n\nIn theory, Ruby&#39;s eval could also be used to parse the string data into an array and then join it, but eval is meant for interpreting strings and running them as ruby code, and as such should only be used when it is important to run arbitrary ruby code that has been encoded as a string.  The method name &#39;eval&#39; actually comes from the word &#39;evaluate&#39;, not evil.  Despite this, however, evaluation is not an objective in this scenario; parsing is.  \n\nAnother reason why people are hesitant to recommend eval for trivial tasks like data parsing is that the worst case scenario of JSON#parse is that it fails to parse.  Whereas the worst case scenario of eval is that you&#39;ve completely deleted your file system by parsing a string that you didn&#39;t expect to be there when you first designed your code.  \n",
            "excerpt": "keep\\&quot;, \\&quot;Char4\\&quot;]&quot;\nrequire &#39;json&#39;\nJSON.parse(str).join(&#39;, &#39;)\n =&gt; &quot;This is a word ect, Char2, This Element uses a (\\&quot;) symbol that is important to keep, Char4&quot;\n\n\nOtherwise a gsub solution using either <span class=\"highlight\">regex</span> &hellip; The method name &#39;eval&#39; actually comes from the word &#39;evaluate&#39;, not <span class=\"highlight\">evil</span>.  Despite this, however, evaluation is not an objective in this scenario; parsing is. &hellip; ",
            "title": "gsub for removing brackets and \\ from string"
        },
        {
            "tags": [
                "python",
                "flask"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 29763456,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1429596366,
            "creation_date": 1429593169,
            "body": "Consider this string\n\n\n\nbecause it&#39;s a regex, I have to escape the dot to &#39;.&#39;, and in POST request I receive &quot;\\\\.&quot;. The result is \n\n\n\nPython3 unicode_escape this string to\n\n\n\nReplace string doesn&#39;t help\n\n\n\nast.literal_eval also doesn&#39;t work\n\n\n\nLet&#39;s try to add quote to the string:\n\n\n\neval is evil, but still the same output as literal_eval\nSo, is there anyway for me to receive the original string? The only I&#39;m thinking of is using print\n",
            "excerpt": "\\r\\n&#39;\n\n\nbecause it&#39;s a <span class=\"highlight\">regex</span>, I have to escape the dot to &#39;.&#39;, <span class=\"highlight\">and</span> in POST request I receive &quot;\\\\.&quot;. The result is \n\nt = &#39;\\\\. &hellip; \\r\\n&#39;\n\n\neval is <span class=\"highlight\">evil</span>, but still the same output as literal_eval\nSo, is there anyway for me to receive the original string? The only I&#39;m thinking of is using print &hellip; ",
            "title": "Python escape dot character after POST"
        },
        {
            "tags": [
                "c#",
                "regex",
                "split"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 29438152,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1428092224,
            "creation_date": 1428087703,
            "body": "I want to get a regex that will split text into sentences, leaving in the punctuation (breaking on the space after the punctuation but not breaking on titles. \n\nI&#39;m almost there. \n\n\n\nsplits on the space, but also splits on the title.\n\n\n\nwon&#39;t split on titles but wipes out the punctuation.\n\nAny suggestions on combining the two expressions so that the regex will split on space after the punctuation but not split on titles?\n\nExample Text:\n\n\n  Shirking and sharking in all their many varieties have been sown broadcast by the\n      ill-fated cause; and even those who have contemplated its history\n      from the outermost circle of such evil have been insensibly tempted\n      into a loose way of letting bad things alone to take their own bad\n      course, and a loose belief that if the world go wrong it was in some\n      off-hand manner never meant to go right.\n  \n  Thus, in the midst of the mud and at the heart of the fog, sits the\n  Lord High Chancellor in his High Court of Chancery.\n  \n  &quot;Mr. Tangle,&quot; says the Lord High Chancellor, latterly something\n      restless under the eloquence of that learned gentleman.\n  \n  &quot;Mlud,&quot; says Mr. Tangle. Mr. Tangle knows more of Jarndyce and\n      Jarndyce than anybody. He is famous for it--supposed never to have\n      read anything else since he left school.\n  \n  &quot;Have you nearly concluded your argument?&quot;\n  \n  &quot;Mlud, no--variety of points--feel it my duty tsubmit--ludship,&quot; is\n      the reply that slides out of Mr. Tangle.\n  \n  &quot;Several members of the bar are still to be heard, I believe?&quot; says\n      the Chancellor with a slight smile.\n\n",
            "excerpt": "Any suggestions on combining the two expressions so that the <span class=\"highlight\">regex</span> will split on space after the punctuation but not split on titles? &hellip; of such <span class=\"highlight\">evil</span> have been insensibly tempted\n      into a loose way of letting bad things alone to take their own bad\n      course, <span class=\"highlight\">and</span> a loose belief that if the world go wrong it was in some\n      off-hand &hellip; ",
            "title": "Regex to split out sentences including their punctuation, but not on titles (Mr., Mrs., etc.)"
        },
        {
            "tags": [
                "asp.net",
                "jquery-file-upload"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 28838365,
            "is_answered": false,
            "question_id": 28837605,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1425406011,
            "creation_date": 1425404557,
            "body": "One method, and perhaps the most simple solution, is to just use the  control, and hide it from view. Then again, although this works well if you want the user to choose the files they&#39;re uploading, it might not be the best solution if you want to implement some kind of HTML5 drag&#39;n&#39;drop solution, etc. \n\nCoincidentally, I spent pretty much all of last week studying how to upload files via javascript to ASP.NET web forms. I developed a drag and drop interface that uses HTML5, and also developed a fail-over method with which the user could choose and upload their files via the  control.\n\nDue to the feature being low-priority, we only fully developed the  control, but I&#39;m happy to share that feature with you here:\n\nHTML\n\nWe&#39;re going to create an ASP file upload control, and hide certain parts of it. The rest of it, we can add styles to (or do whatever in javascript and CSS) to make it look fancy and customized. The CONTINUE BUTTON\n\n\n\n\n\nJavascript\n\n\n\n\n\nCODE-BEHIND\n\nNow we just need to add the VB.NET (or C#) to handle the click-event for the continue button.\n\n\n\n\n\nOther Caveats\n\nWe did a couple things in the above code that I did not explain, such as the &quot;FolderPath&quot; application setting (we used this in CODE-BEHIND section to determine where the file should be saved). If you&#39;ve never used application settings in the web.config, it&#39;s very simple. For the sake of the above example, we would add the following snippet between our  tags:\n\n\n\nI can then access the value of this appSetting using \n\n\n\nor\n\n\n\nAlso, I stopped with the function to &quot;getExcelSheets&quot; because that&#39;s more specific to my application, and probably beyond the scope of this tutorial.\n\n\n\nAdditional Resources\n\nI have a good habit of methodically saving useful bookmarks. Here is what I have from my &quot;File Uploader&quot; section...\n\n\nCodeProject.com - File Upload with ASP.NET\nReading files in Javascript using File APIs\nStack Overflow - jQuery Ajax File Upload to ASP.NET web service with\nJSON response\nDrag and Drop Asynchronous File Upload &lt;-- DEFINITELY THE    MOST\nUSEFUL\n\n",
            "excerpt": "(xlsx|xls)$/i; // set the <span class=\"highlight\">regex</span> to test for accepted file extensions.\n\n    if (f.length &amp;&amp; ! &hellip; stuff with it that kind of made it a necessary <span class=\"highlight\">evil</span> :)\n        deactivateChooseFilesCancelButton(); // if nothing selected, disable <span class=\"highlight\">and</span> hide cancel button &lt;-- these functions just do some fluffy stuff &hellip; ",
            "title": "How can i upload a file to server (asp.net web form) with ajax?"
        },
        {
            "tags": [
                "xml",
                "parsing",
                "bash",
                "sh"
            ],
            "question_score": 18,
            "is_accepted": false,
            "answer_id": 6873226,
            "is_answered": false,
            "question_id": 6873070,
            "item_type": "answer",
            "score": 12,
            "last_activity_date": 1424503036,
            "creation_date": 1311943239,
            "body": "You can use the  command (from package  on Debian-based distros) with the following XSLT sheet:\n\n\n\nThen use the command:\n\n\n\nOr you could also use regexes, but modifying XML through regexes is pure evil :)\n",
            "excerpt": "xsltproc --stringparam tagReplacement polop \\\n         --stringparam tag1Replacement palap \\\n         transform.xsl input.xml\n\n\nOr you could also use regexes, but modifying XML through regexes is pure <span class=\"highlight\">evil</span> &hellip; ",
            "title": "how to edit XML using bash script?"
        },
        {
            "tags": [
                "xml",
                "xpath",
                "openxml",
                "docx",
                "phpdocx"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 28282467,
            "is_answered": false,
            "question_id": 28223112,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1422895323,
            "creation_date": 1422895323,
            "body": "OK, I found it out. The parantheses are actually not a problem at all, I just didn&#39;t realize how PHPDocx handles the block substitution.\n\nThere&#39;s a sneaky, but evil Regex which just replaces everything from the variable until the next occurrence of the variable, just like . So every occurrence of XML and stuff is stripped away and replaced with a single occurrence of $VARIABLE$.\n\nIn the next step, it searches for the occurrence of the variable via XPath and deletes the parent paragraph node.\n",
            "excerpt": "There&#39;s a sneaky, but <span class=\"highlight\">evil</span> <span class=\"highlight\">Regex</span> which just replaces everything from the variable until the next occurrence of the variable, just like \\$BLOCK_VARIABLE\\$.+?\\$BLOCK_VARIABLE\\$. &hellip; So every occurrence of XML <span class=\"highlight\">and</span> stuff is stripped away <span class=\"highlight\">and</span> replaced with a single occurrence of $VARIABLE$. &hellip; ",
            "title": "Xpath in docx, having parentheses as contains attribute"
        },
        {
            "tags": [
                "javascript",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 27865682,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1420825537,
            "creation_date": 1420823435,
            "body": "I am looking for an effective way to create array contain all matches contains regex groups matches.\n\ne.g. Regex  string  expected result \n\nMy current code looks like this:\n\n\n\nIt works, however I don&#39;t like the way how it does.\n\nThe first thing is that I actually don&#39;t know how many groups I will have in my regex variable  so I need to define a lot unnecessary variables .\n\nThe second problem Is that I decided to use evil  to prevent pushing this variables &#39;manually&#39; one by one to array, maybe there is a better solution?\n\nAnd one more thing - I did try use  but unfortunately when I have pattern  it will return me array  so it&#39;s not what I want to achieve.\n\nThanks!\n\nEDIT\n\nOk I found something which looks better\n\n\n",
            "excerpt": "The second problem Is that I decided to use <span class=\"highlight\">evil</span> eval to prevent pushing this variables &#39;manually&#39; one by one to array, maybe there is a better solution? &hellip; <span class=\"highlight\">And</span> one more thing - I did try use match() but unfortunately when I have pattern /(1)(2)(3)/g it will return me array [&#39;123&#39;] so it&#39;s not what I want to achieve.\n\nThanks! &hellip; ",
            "title": "Effective solution for create array containing all groups in regex matches"
        },
        {
            "tags": [
                "regex",
                "vb.net",
                "csv",
                "replace",
                "substring"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 27451004,
            "is_answered": false,
            "question_id": 27450102,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1418478489,
            "creation_date": 1418413537,
            "body": "Bullet proof way.  \n\n\n\nBenchmarks  \n\nSince @TheBlueDog posted a Benchmark (&#39;Edit 2&#39;), I thought I would post a\nbenchmark as well.  \n\nIts based on his input, and the intent is to demonstrate the evils of using\n&#39;to-the-end-of-string&#39; lookahead as a validation technique\n(ie. this -&gt; )  \n\nBlue Dog&#39;s regex replace method is hampered a bit with an unnecessary callback, so I\nimagine that accounts for some of his bad numbers.  \n\nDon&#39;t know Vb.net so this is done in Perl. The machine speed and language are factored out\nbecause its a relative test.\n\nSummary:   \n\n\n\nThis represents a 5 fold difference.   \n\nBenchmark in Perl, 150K line (167MB file):  \n\n\n\nOutput:  \n\n\n",
            "excerpt": "Its based on his input, <span class=\"highlight\">and</span> the intent is to demonstrate the evils of using\n&#39;to-the-end-of-string&#39; lookahead as a validation technique\n(ie. this -&gt; ^[^&quot;]*(? &hellip; :&quot;[^&quot;]*&quot;[^&quot;]*)*$)  \n\nBlue Dog&#39;s <span class=\"highlight\">regex</span> replace method is hampered a bit with an unnecessary callback, so I\nimagine that accounts for some of his bad numbers. &hellip; ",
            "title": "How to convert comma-delimited file to pipe-delimited in vb.net"
        },
        {
            "tags": [
                "emacs",
                "evil-mode"
            ],
            "question_score": 6,
            "is_accepted": false,
            "answer_id": 25719360,
            "is_answered": false,
            "question_id": 25463369,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1417604579,
            "creation_date": 1410161616,
            "body": "When reading the mailing list someone mentioned it is better to put keybindings in  instead of hooks, so here it is:\n\n\n\nAs for defining new text objects, I must recommend this function from @gordon-gustafson:\n\n\n\nSo the  part would become:\n\n\n",
            "excerpt": "end type)\n        (<span class=\"highlight\">evil</span>-select-paren ,start-<span class=\"highlight\">regex</span> ,end-<span class=\"highlight\">regex</span> beg end type count t))\n      (<span class=\"highlight\">evil</span>-define-text-object ,outer-name (count &amp;optional beg end type)\n        (<span class=\"highlight\">evil</span>-select-paren ,start-<span class=\"highlight\">regex</span> ,end-<span class=\"highlight\">regex</span> &hellip; &gt; part would become:\n\n(define-<span class=\"highlight\">and</span>-bind-text-object &quot;&lt;key&gt;&quot; &quot;&lt;start-<span class=\"highlight\">regex</span>&gt;&quot; &quot;&lt;end-<span class=\"highlight\">regex</span>&gt;&quot;) &hellip; ",
            "title": "Mode-specific or buffer-local text objects in evil?"
        },
        {
            "tags": [
                "c#",
                "html",
                "regex",
                "vb.net",
                "strip"
            ],
            "question_score": 3,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 26991134,
            "item_type": "question",
            "score": 3,
            "last_activity_date": 1416309300,
            "creation_date": 1416304028,
            "body": "There is a tough nut to crack.\n\nI have a HTML which needs to be stripped of some tags, attributes AND properties.\n\nBasically there are three different approaches which are to be considered:\n\n\nString Operations: Iterate through the HTML string and strip it via string operations &#39;manually&#39;\nRegex: Parsing HTML with RegEx is evil. Is stripping HTML evil too?\nUsing a library to strip it (e.g. HTML Agility Pack)\n\n\nMy wish is that I have lists for:\n\n\nacceptedTags (e.g. SPAN, DIV, OL, LI)\nacceptedAttributes (e.g. STYLE, SRC)\nacceptedProperties (e.g. TEXT-ALIGN, FONT-WEIGHT, COLOR, BACKGROUND-COLOR)\n\n\nWhich I can pass to this function which strips the HTML.\n\nExample Input:\n\n\n\nExample Output (with parameter lists from above):\n\n\n\n\nthe entire tag Body is stripped (not accepted tag)\nproperties margin, font-family and font-size are stripped from DIV-Tag\nproperties font-family and font-size are stripped from SPAN-Tag.\n\n\nWhat have I tried?\n\nRegex seemed to be the best approach at the first glance. But I couldn&#39;t get it working properly.\nArticles on Stackoverflow I had a look at:\n\n\nRegular expression to remove HTML tags\nHow to clean HTML tags using C#\n\n\n...and many more.\n\nI tried the following regex:\n\n\n\nHowever, this is only removing tags and no attributes or properties!\n\nI&#39;m definitely not looking for someone who&#39;s doing the whole job. Rather for someone, who points me to the right direction.\n\nI&#39;m happy with either C# or VB.NET as answers.\n",
            "excerpt": "Basically there are three different approaches which are to be considered:\n\n\nString Operations: Iterate through the HTML string <span class=\"highlight\">and</span> strip it via string operations &#39;manually&#39;\n<span class=\"highlight\">Regex</span>: Parsing HTML with <span class=\"highlight\">RegEx</span> &hellip; is <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "HTML Strip Function"
        },
        {
            "tags": [
                "emacs"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 26866228,
            "is_answered": false,
            "question_id": 26856800,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1415713130,
            "creation_date": 1415713130,
            "body": "An Evil mode solution would be to use this command:\n\n\n\nWhich means:\n\n\n - On any line containing the regex (which matches two quoted strings)\n - In normal mode\n - go to the third , move one character right, and change the text until the next  to &quot;replaced&quot;\n\n\nIt also takes ranges, so you can use it on a subset of lines if you want to.\n",
            "excerpt": "An <span class=\"highlight\">Evil</span> mode solution would be to use this command:\n\n:g/&quot;.*&quot;.*&quot;. &hellip; .*&quot; - On any line containing the <span class=\"highlight\">regex</span> (which matches two quoted strings)\nnorm - In normal mode\n3f&quot;lct&quot;replaced - go to the third &quot;, move one character right, <span class=\"highlight\">and</span> change the text until the next &quot; to &quot;replaced &hellip; ",
            "title": "how to replace the second occurrent in emacs evil?"
        },
        {
            "tags": [
                "vba",
                "ms-word",
                "vsto"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 26383799,
            "is_answered": false,
            "question_id": 26380163,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1413405396,
            "creation_date": 1413379600,
            "body": "It&#39;s not really pretty but you can try to remove the unwanted characters by Regex. For example to remove the  letters (it has code 7):\n\n\n\nNow you have to identify the other &#39;evil&#39; characters and add them to the char array. If it works you will get a string whose length corresponds with the number of  in your document. Probably you have to adapt this code by experimenting. (I was not sure which language you are using - I supposed C#.)\n\nUpdate\nAnother idea (if it is applicable to your analyzer tool):\n\nBreak your problem down to single paragraphs:\n\n\n\nWith this paragraph range objects and the contained text strings you do the same as you tried to do with the whole document object and its text - just paragraph by paragraph. All these paragraphs are &#39;addressable&#39; by ranges and Move operations as you already do it. I suppose that the problematic characters are outside or at the end of the paragraphs so they don&#39;t influence the character counting inside these paragraphs. \n\nAs I can&#39;t reproduce what you call endpaper I can&#39;t validate it. Besides I don&#39;t know if special text ranges as page headers and tables of content are covered by paragraphs. But at least you can reduce your problem to smaller ranges. I think it is worth trying.\n",
            "excerpt": "It&#39;s not really pretty but you can try to remove the unwanted characters by <span class=\"highlight\">Regex</span>. &hellip; &#39; characters <span class=\"highlight\">and</span> add them to the char array. &hellip; ",
            "title": "Word.Range : Move Range index in the formatted text that corresponds to the plain text"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 26165379,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1412269700,
            "creation_date": 1412267800,
            "body": "I&#39;m writing a function that will take in an object and modify a field within the object (could be a nested field). For instance, modifyObj(obj, &#39;nested.nested&#39;, 2) will essentially do obj.nested.nested = 2. The most straightforward way seems to be to use eval, but the consensus seems to be using eval is evil? http://jsfiddle.net/zntf6bfw/\n\n\n\nThe alternative is to use regex to determine if the passed in field is nested, and if so, to use a loop to get a nested object and modify it (which will modify the overall object). However, this seems unnecessarily complicated, and would this count as a valid use case for eval?\n\n\n",
            "excerpt": "The most straightforward way seems to be to use eval, but the consensus seems to be using eval is <span class=\"highlight\">evil</span>? &hellip; .&#39; + field + &#39;=&#39; + val;\n    eval(str);\n}\n\n\nThe alternative is to use <span class=\"highlight\">regex</span> to determine if the passed in field is nested, <span class=\"highlight\">and</span> if so, to use a loop to get a nested object <span class=\"highlight\">and</span> modify it (which will modify &hellip; ",
            "title": "Is using eval appropriate when setting deeply nested properties in an object?"
        },
        {
            "tags": [
                "php",
                "arrays",
                "regex"
            ],
            "question_score": 8,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 25737133,
            "item_type": "question",
            "score": 8,
            "last_activity_date": 1410242201,
            "creation_date": 1410239931,
            "body": "In PHP, is there a function or anything else that will remove all elements in an array that do not match a regex.\n\nMy regex is this: \n\nMy array&#39;s come in like this, from a form (they&#39;re tags actually)\n\nOriginal array from form. Note: evil tags\n\n\n\nCleaned array. Note, no evil tags\n\n\n\nI currently do like this, but is there a better way? Without the loop maybe?\n\n\n",
            "excerpt": "In PHP, is there a function or anything else that will remove all elements in an array that do not match a <span class=\"highlight\">regex</span>. &hellip; Note: <span class=\"highlight\">evil</span> tags\n\n$arr = array (\n    &quot;french-cuisine&quot;,\n    &quot;french-fries&quot;,\n    &quot;snack-food&quot;,\n    &quot;<span class=\"highlight\">evil</span>*tag!!&quot;,\n    &quot;fast-food&quot;,\n    &quot;more~<span class=\"highlight\">evil</span>*tags&quot;\n);\n\n\nCleaned array. &hellip; ",
            "title": "Remove elements from an array that do not match a regex"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 25480175,
            "is_answered": false,
            "question_id": 25235854,
            "item_type": "answer",
            "score": 8,
            "last_activity_date": 1408949004,
            "creation_date": 1408948368,
            "body": "Your program has likely encountered what&#39;s called catastrophic backtracking.\nIf you have a bit of time, let&#39;s look at how your regex works...\nQuick refresher: How regex works: The state machine always reads from left to right, backtracking where necessary.\nOn the left hand side, we have our pattern:\n\nAnd here&#39;s the String to match:\n\nFrom the regex101 debugger, your regex took 78540 steps to fail. This is because you used quantifiers that are greedy and not possessive (backtracking).\n\n... Long story short, because the input string fails to match, every quantifier within your regex causes indefinite backtracking - Every character is released from  and then  and then both and then a group is released from  to backtrack more.\nHere&#39;s a few solutions you should follow:\nAvoid abundant quantifiers!\nIf you revise your expression, you&#39;ll see that the pattern is logically same as:\n\nThis uses a step of logical induction to reduce the regex upstairs to match far quicker, now at 97 steps!\n\nUse possessive quantifiers while you can!\nAs I mentioned,  is evil because it backtracks in a terrible manner. We&#39;re in Java, what can we do?\nThis solution works only because  and  matches distinct items. We can use a possessive group!\n\nThese simple &quot;&quot; denotes &quot;We&#39;re not backtracking if we fail the match from here&quot;. This is an extremely effective solution, and cuts off any need for backtracking. Whenever you have two distinct groups with a quantifier in between, use them. And if you need some proof on the effectiveness, here&#39;s our scorecard:\n\nRead also:\n\nThe Stack Overflow Regex Reference\nReDoS - Wikipedia\n\nOnline Demos:\n\nRegEx demo 1\nRegEx demo 2\n\n",
            "excerpt": "As I mentioned, /^([a-zA-Z]+ *)+$/ is <span class=\"highlight\">evil</span> because it backtracks in a terrible manner. We&#39;re in Java, what can we do?\nThis solution works only because [a-zA-Z] <span class=\"highlight\">and</span>   matches distinct items. &hellip; <span class=\"highlight\">And</span> if you need some proof on the effectiveness, here&#39;s our scorecard:\n\nRead also:\n\nThe Stack Overflow <span class=\"highlight\">Regex</span> Reference\nReDoS - Wikipedia\n\nOnline Demos:\n\n<span class=\"highlight\">RegEx</span> demo 1\n<span class=\"highlight\">RegEx</span> demo 2 &hellip; ",
            "title": "Program run forever when matching regex"
        },
        {
            "tags": [
                "python",
                "html",
                "regex",
                "parsing",
                "python-3.x"
            ],
            "question_score": 4,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 25121165,
            "item_type": "question",
            "score": 4,
            "last_activity_date": 1407174661,
            "creation_date": 1407162894,
            "body": "I have the following HTML and I need to remove the script tags and any script related attributes in the HTML. By script related attributes I mean any attribute that starts with on. \n\n\n\nMy first thought was to use BeautifulSoup to remove the tags and attributes. Unfortunately, I am unable to use BeautifulSoup. Seeing that BeautifulSoup is off the table I can see two options for doing this. The first option I see is splitting the strings and parsing based on index. This seems like a bad solution to me.\n\nThe other option is to use Regular Expressions. However, we know that isn&#39;t a good solution either (Cthulhu Parsing).\n\nNow with that in mind, I personally feel it is alright to use regular expressions to strip the attributes. After all, with those it is still simple string manipulation. \n\nSo for removing the attributes I have:\n\n\n\nAs I&#39;ve said before, I personally think the above perfectly acceptable use of Regular Expression with HTML. But still I would like to get some opinions on the above usage. \n\nThen there is the question of the script tags. I&#39;m very tempted to go with Regular Expressions for this because I know them and I know what I need is pretty simple. Something like:\n\n\n\nThe above would start to get me close to what I need. And yes I realize the above RegEx will grab everything starting at the first opening script tag until the last closing script tag, but it&#39;s a starting example. \n\nI&#39;m very tempted to use Regular Expressions as I&#39;m familiar with them (more so than Python) and I know that is the quickest way to achieve the results I want, at least for me it is. \n\nSo I need help to go against my nature and not be evil. I want to be evil and use RegEx so somebody please show me the light and guide me to the promised land on non-Regular Expressions.\n\nThanks\n\nUpdate:\n\nIt looks like I wasn&#39;t very clear about what my question actually is, I apologize for that. My question is how can I parse the HTML using pure Python without Regular Expressions? \n\n\n\nAs for the above code example, it&#39;s wrong. I know it is wrong, I was using it as an example of a starting point. \n\nI hope this clears up my question some\n\nUpdate 2\n\nI just wanted to add a few more notes about what I am  doing. \n\nI am crawling a web site to get the data I need.\n\nOnce we have the page that contains the data we need it is saved to the database.\n\nThen the saved web page is displayed to the user.\n\nThe issue I am trying to solve happens here. The application throws a script error when you attempt to interact with the page that forces the user to click on a confirmation box. The application is not a web browser but uses the web browser DLL in Windows (I cannot remember the name at the moment).\n\nThe error in question only happens in this one page for this one web site.\n\nUpdate 3\n\nAfter adding the update I realized I was over thinking the problem, I was looking for a more generic solution. However, in this case that isn&#39;t what is needed. \n\nThe page is dynamically generated, however the script tags will stay static. With that in mind the solution becomes much simpler. With that I no longer need to treat it like HTML but as static strings.\n\nSo the solution I&#39;m looking at is\n\n\n\nI would like to avoid Regular Expression however, since I&#39;m limited to only using the standard library regular expressions seems like the best solution in this case. Which means @skamazin&#39;s answer is correct. \n",
            "excerpt": "<span class=\"highlight\">And</span> yes I realize the above <span class=\"highlight\">RegEx</span> will grab everything starting at the first opening script tag until the last closing script tag, but it&#39;s a starting example. &hellip; So I need help to go against my nature <span class=\"highlight\">and</span> not be <span class=\"highlight\">evil</span>. I want to be <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> use <span class=\"highlight\">RegEx</span> so somebody please show me the light <span class=\"highlight\">and</span> guide me to the promised land on non-Regular Expressions. &hellip; ",
            "title": "Remove Script tag and on attributes from HTML"
        },
        {
            "tags": [
                "php",
                "mysql"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 22251076,
            "is_answered": false,
            "question_id": 22249833,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1405667886,
            "creation_date": 1394198034,
            "body": "Eval is Evil\nFirst of all: don&#39;t use   unless there is a good reason. And there is never a good reason.\nin the worst case  makes your application vulnerable to injection attacks and also it&#39;s very slow. A bit of research reveals plenty of reasons why eval is a big no-no.\nDon&#39;t save your calculation code into the database\nIf you do so and you would like to switch from PHP to another language you would still have PHP code in your database. It makes it really hard to migrate languages. You should always strive to make as many parts of your application as independent as possible.\nIn this case you would tight-couple the language you use, to the database. That&#39;s a bad practice.\nAlso the only possibilities to run your calculations from the database would be to eval them (which is bad, see above) or to disassemble the string with string operations or regex which causes unnecessary effort.\nIt&#39;s all about Strategy\nIn order to solve your problem you must execute code dependent of which calculation you need. That could be either done with switch-case-statements or if-statements. But that&#39;s also not a very elegant solution. Imagine you would need to execute other operations before calculating in the future, or extend functionality. You would need to update all your cases or if-statements.\nThere is a nice design-pattern which is called Strategy Pattern. The strategy pattern solves problems when one use-case can be handled differently which is probably what you want.\nYou want to calculate something (use-case) and there are different calculation types for it (different strategies)\nHow it works\nTo implement the Strategy pattern you basically need three things.\n\nA class where you inject your strategies. It&#39;s basically a wrapper for your strategy tasks.\nAn interface which will be implemented by your strategies\nYour strategies\n\nYour interface could look like this:\n\nThe interface will make sure that all your strategies provide a method to actually run the calculation. Nothing special.\nNext you may want to have a base class that takes your calculation operators as constructor arguments and stores them into properties.\n\nNow it&#39;s getting serious. We are implementing our strategies.\n\nOf course you could clean this one up a bit, but what I want to point out here is the class declaration.\nWe are extending our  class so that we can pass the arithmetic operations via constructor and we are implementing the  which tells our class: &quot;Hey! You must provide a calculate method, I don&#39;t care whether you want or not.\nWe&#39;ll see later why this is an integral part of the pattern.\nSo we have two concrete classes that contain the actual code for the actual arithmetic operation. If you would ever need to, you could change it easily as you see.\nTo add more operations just add another class.\nNow we will create a class where our strategies can be injected. Later you will instantiate an object of this class and work with it.\nHere is how it looks like:\n\nThe most important part here is the constructor. See how we type-hint our interface here. By doing that we make sure that only an object can be injected (Dependency Injection) whose class implements the interface. We do not need to demand a concrete class here. That&#39;s the crucial point here.\nAlso there&#39;s a calculate method in there. It&#39;s just a wrapper for our strategy to execute it&#39;s calculate method.\nWrapping it up\nSo now we just need to create an object of our  class and pass an object of one of our strategy classes (that contain the code for the arithmetic operations).\n\nTry replacing the string stored in  to  and you see that the operation for calculating the percentage will be executed.\nConclusion\nThe strategy pattern allowed you to create a clean interface for working with dynamic tasks that are only made concrete during runtime. Neither your database needs to know how we calculate things, nor your actual calculator does. The only thing we need to make sure is to code against an interface that provides a method to let us calculate things.\n",
            "excerpt": "Eval is <span class=\"highlight\">Evil</span>\nFirst of all: don&#39;t use  eval() unless there is a good reason. &hellip; <span class=\"highlight\">And</span> there is never a good reason.\nin the worst case eval() makes your application vulnerable to injection attacks <span class=\"highlight\">and</span> also it&#39;s very slow. &hellip; ",
            "title": "Save Calculation in Code or Database?"
        },
        {
            "tags": [
                "c#",
                ".net"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 24476439,
            "is_answered": false,
            "question_id": 24476326,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1404048489,
            "creation_date": 1404048170,
            "body": "The sane way would be to use a HTML parser and querying library. I can suggest CsQuery, which is a jQuery-like library in .NET. You could use a selector like  to match your anchor, then extract the attribute value.\n\nThis is the correct way of doing things.\n\n\n\nBut if you only ever want to get this one attribute and don&#39;t do anything with the HTML source ever again, it might be easier to just use a regex, but beware: parsing HTML with regex is evil.\n\nSo if all you want to do is just extract this one piece of information, as an exceptional measure, for your information, you could use that:\n\n\n\nBut try CsQuery first. It&#39;s a much better approach.\n",
            "excerpt": "The sane way would be to use a HTML parser <span class=\"highlight\">and</span> querying library. I can suggest CsQuery, which is a jQuery-like library in .NET. &hellip; But if you only ever want to get this one attribute <span class=\"highlight\">and</span> don&#39;t do anything with the HTML source ever again, it might be easier to just use a <span class=\"highlight\">regex</span>, but beware: parsing HTML with <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "How can i parse specific string using indexof and substring?"
        },
        {
            "tags": [
                "filter",
                "footable"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 24253543,
            "is_answered": false,
            "question_id": 22739211,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1402962206,
            "creation_date": 1402960281,
            "body": "When Footable filters, it uses the entire text from the whole row and it uses indexof() to test.  You can see this in footable.filter.js in the filterFunction function.\n\nI had to do 3 things to solve the problem.\n\n\nReplace window.footable.options.filter.filterFunction with my own function\nDo a per column match instead of the whole row.  Depending on the HTML in your row, the spaces between the columns could be lost causing the first word of a column to concatenate with the last word of the previous column.\nUse a regex match instead of indexof().  This allows you to match a whole word.  As an example, if you us indexof() for &quot;be&quot; in &quot;Don&#39;t be evil, because that&#39;s not good&quot; will return 6 and 15 even though 15 is the beginning of a completely different word.\n\n\nHere&#39;s the function: (I&#39;m sure there are loads of improvements.  Feel free to edit...)\n\n\n\nYou can find a plunk here: http://plnkr.co/edit/P2DWDtyHP3xmoUIcvgDe\n",
            "excerpt": "Use a <span class=\"highlight\">regex</span> match instead of indexof().  This allows you to match a whole word. &hellip; As an example, if you us indexof() for &quot;be&quot; in &quot;Don&#39;t be <span class=\"highlight\">evil</span>, because that&#39;s not good&quot; will return 6 <span class=\"highlight\">and</span> 15 even though 15 is the beginning of a completely different word. &hellip; ",
            "title": "Footable fine filtering"
        },
        {
            "tags": [
                "php",
                ".htaccess",
                "translation"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 20446396,
            "is_answered": false,
            "question_id": 20446273,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1400707466,
            "creation_date": 1386449037,
            "body": "The HTTP permanent redirect status code (301) is exactly for your case. All links to your site will still work, and additionally any bookmarks will be updated to your new url path construct.\n\nYou can set it up in Apache using mod_rewrite:\n\n\n\nThis will redirect every url path, which does not start with either , , , ,  to the  (default) sub path.\n\nEdit to comments:\n\nThe solution above would enable for all your links to work (old and new ones).\n\nIf you additionally want to change all the links on your page, so that search engines will see them, then your only option is to rewrite them in your PHP/HTML code (using JavaScript for this is a bad idea for many reasons).\n\nThe best option in this case is to write a helper function, which generates the links for you depending on current language. This way you will have a single point, where you can change your links, should they change once again in the future.\n\nUnfortunately, you won&#39;t be able to change all of your links at once. If you have thousands of them, and no common code which generates all of them, then you have to do this one by one. Good news is, that you are not the first one with this problem, and the developers of professional IDE&#39;s already implement tools to aid you. My personal choice is a commercial software, but other open sourced IDE&#39;s also have a pretty good find/replace options. You can for instance write a regex, which will find your links and replace them accordingly to the rules you provide. To write a good regex replacer might prove to be very beneficial as opposed to reviewing all links one by one.\n\nThis is one of the possible implementation of the url helper:\n\n\n\nNow you have to find all places where links are outputed and use the helper:\n\n\n\nNote that this is just an example of how it could work. I actually don&#39;t recommend to implement the helper as a static method, because static is pure evil. For your real implementation you might consider a helper object instead of helper method.\n",
            "excerpt": "You can for instance write a <span class=\"highlight\">regex</span>, which will find your links <span class=\"highlight\">and</span> replace them accordingly to the rules you provide. &hellip; To write a good <span class=\"highlight\">regex</span> replacer might prove to be very beneficial as opposed to reviewing all links one by one. &hellip; ",
            "title": "Smart way to add language to all website URLS?"
        },
        {
            "tags": [
                "python",
                "markdown"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 23530430,
            "is_answered": false,
            "question_id": 23530142,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1399506827,
            "creation_date": 1399506827,
            "body": "As I said in a comment,  or  are evil, a better alternative is to use the code module as in the following example. Also, you may prefer to compile the regex, in order to only perform the matching at each iteration over the input instead of building the automaton at each iteration.\n\n\n\nThough that example will output the results on  so you may want to use instead an overloaded class such as the one in this example.\n",
            "excerpt": "As I said in a comment, eval or exec are <span class=\"highlight\">evil</span>, a better alternative is to use the code module as in the following example. &hellip; Also, you may prefer to compile the <span class=\"highlight\">regex</span>, in order to only perform the matching at each iteration over the input instead of building the automaton at each iteration. &hellip; ",
            "title": "Literate Python"
        },
        {
            "tags": [
                "php",
                "arrays",
                "function",
                "parsing",
                "dom"
            ],
            "question_score": 5,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 23262987,
            "item_type": "question",
            "score": 5,
            "last_activity_date": 1398336364,
            "creation_date": 1398325912,
            "body": "I have a variable that looks like this:\n\n\n\nand I want to extract the data-tpl-attributes in a way so I end up with a resulting array that looks like this:\n\n\n\nThe number of &quot;data-tpl-&quot; attributes varies, and it&#39;s not always an  element. Other than that, it always follows the same format: .\n\nHow can I retrieve those attributes and store them in an array, without using regex? I say without regex since everywhere I look it seems like parsing html using regex is an evil practice, or is it ok in this case?\n",
            "excerpt": "How can I retrieve those attributes <span class=\"highlight\">and</span> store them in an array, without using <span class=\"highlight\">regex</span>? &hellip; I say without <span class=\"highlight\">regex</span> since everywhere I look it seems like parsing html using <span class=\"highlight\">regex</span> is an <span class=\"highlight\">evil</span> practice, or is it ok in this case? &hellip; ",
            "title": "Extract html attributes from string in PHP"
        },
        {
            "tags": [
                "python",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 22206107,
            "is_answered": false,
            "question_id": 22205972,
            "item_type": "answer",
            "score": 6,
            "last_activity_date": 1394044405,
            "creation_date": 1394043978,
            "body": "Yep, you&#39;ve got yourself a case of catastrophic backtracking, also known as an &quot;evil regex&quot;, here:\n\n\n\nHere:\n\n\n\nAnd here:\n\n\n\nReplacing  with  should do the trick.\n\nFor more information about what an evil regex is and why it&#39;s evil, check out this question:\nHow can I recognize an evil regex?\n",
            "excerpt": "Yep, you&#39;ve got yourself a case of catastrophic backtracking, also known as an &quot;<span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>&quot;, here:\n\n\\s*\n(?P&lt;q_r&gt;.*?)\n\\s*\n\n\nHere:\n\n\\s*\n(?P&lt;flag_char_code&gt;.*?)\n\\s*\n\n\n<span class=\"highlight\">And</span> here:\n\n\\s*\n\\.(?P&lt;domain&gt;.*)\\. &hellip; For more information about what an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> is <span class=\"highlight\">and</span> why it&#39;s <span class=\"highlight\">evil</span>, check out this question:\nHow can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>? &hellip; ",
            "title": "Python Regex takes so long in some cases"
        },
        {
            "tags": [
                "html",
                "regex",
                "notepad++"
            ],
            "question_score": 4,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 20942621,
            "item_type": "question",
            "score": 4,
            "last_activity_date": 1388988854,
            "creation_date": 1388979824,
            "body": "Solved (see first comment by &quot;justhalf&quot;)\n\n**\n\nI know, using RegEx for messing with HTML is evil.\n\nHowever, my means and know-how are restricted, and I don&#39;t know what else to do.\n\nThe situation is as follows:\n\nI have a website containing some 5000 pages.\n\nThere are some errors I would like to fix:\n\nThings like this:\n\n\nThe error in this example is that the value for the HTML attribute &quot;alt&quot; is enclosed in apostrophes, yet the text contains an apostrophe as well.\nThere should be many errors of this type. I want to find them all and correct them.\n\nI tried it with this pattern: :\n\nThat is: a space, followed by the name of the HTML attribute , followed by = and the attribute&#39;s value . Up until here, this should match a valid HTML attribute.\nFor a valid HTML attribute, what would follow now from here would be either a space followed by the next attribute, or the closing bracket &gt; for the HTML tag.\nSo, in order to match erroneous HTML attributes as described above, I continue the search pattern with , that is, a string which does not contain = or &gt;, followed by a &#39;. In other words, the next apostrophe is expected before any = or &gt; sign.\n\nAccording to my understanding, this should exclude valid HTML attributes, which are followed by the next HTML attribute or the closing &gt; for the HTML tag. But somehow it does not really work like that.\n\nWith this search pattern, for example, I find things like this:\n\n\n\nSo... valid HTML attributes, followed by the next.\n\nBut I thought these things should be excluded by \n\nVery confused.\n",
            "excerpt": "Solved (see first comment by &quot;justhalf&quot;)\n\n**\n\nI know, using <span class=\"highlight\">RegEx</span> for messing with HTML is <span class=\"highlight\">evil</span>.\n\nHowever, my means <span class=\"highlight\">and</span> know-how are restricted, <span class=\"highlight\">and</span> I don&#39;t know what else to do. &hellip; , followed by = <span class=\"highlight\">and</span> the attribute&#39;s value (=&#39;[^&#39;].*?&#39;). Up until here, this should match a valid HTML attribute. &hellip; ",
            "title": "find html attributes containing apostrophes using regex (notepad++)"
        },
        {
            "tags": [
                "javascript",
                "php",
                "regex",
                "perl"
            ],
            "question_score": 6,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 20928677,
            "item_type": "question",
            "score": 6,
            "last_activity_date": 1388905476,
            "creation_date": 1388882923,
            "body": "Are there any security concerns if I run a user defined regular expression on my server with a user defined input string? I&#39;m not asking about a single language, but any language really, with PHP as one of the main language I would like to know about.\n\nFor example, if I have the code below:\n\n\n\nProviding this is not a controlled environment (i.e. the user can&#39;t be trusted), what are the risks of the above code? If a similar code is written for other languages, are there risks in these other languages? If so, which languages consist of threats?\n\nI already found out about &#39;evil regular expressions&#39;, however, no matter what I try on my computer, they seem to work fine, see below.\n\nPHP\n\n\n\nJavaScript\n\n\n\nThis leads me to believe that PHP and JavaScript have a fail-safe mechanism for evil regexes. Based on that, I would have that other languages have similar features.\n\nIs this a correct assumption?\n\nFinally, for any or all of the languages that may be harmful, are there any ways to make sure the regular expressions doesn&#39;t cause damage?\n",
            "excerpt": "php\n\nif(isset($_POST[&#39;<span class=\"highlight\">regex</span>&#39;])) {\n    preg_match($_POST[&#39;<span class=\"highlight\">regex</span>&#39;], $_POST[&#39;match&#39;], $matches);\n    var_dump($matches);\n}\n\n? &hellip; JavaScript have a fail-safe mechanism for <span class=\"highlight\">evil</span> regexes. &hellip; ",
            "title": "User defined regular expression security concerns"
        },
        {
            "tags": [
                "java",
                "javascript",
                "emacs",
                "intellij-idea"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 20913196,
            "is_answered": false,
            "question_id": 20911127,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1388884827,
            "creation_date": 1388785355,
            "body": "I&#39;m hardly an Emacs veteran, but I do have an emacs obsession.\n\nFor Java:\n\n\nsemantic-mode doesn&#39;t seem to work in practice, but can theoretically jump-to-definition\nevil-mode (a bit overkill...) can jump to definitions just fine with evil-goto-definition\n\nthis works very well, and I&#39;d even suggest porting it to a non-evil environment if possible\n\nimenu (this uses a regex engine to find definitions)\n\nis already used as a fallback in semantic-ia-fast-jump\ndoesn&#39;t seem to work well on variables\n\n\n\nFor Javascript: Javascript has some very complicated scope styles, and, unfortunately, such styles are commonplace so regex based solutions can and will jump to the wrong definition at times.\n\n\nsemantic-mode doesn&#39;t work at all\nevil-goto-definition (uses a regex engine) works great as always\nimenu (uses a regex engine)\n\ndoesn&#39;t seem to work well on variables\n\nTern is a battery of (alien) semantic analysers which seems to integrate well with Emacs\n\n\nIn general, I&#39;d really recommend using evil if you can, it&#39;s superb. If you think of evil as being, well, evil, then:\n\n\nFor variables use semantic-ia for jumps in Java, and tern for jumps in JS\nFor functions use imenu. It works well on both Java and JS.\n\n\nAnd finally, here&#39;s some code that I use for almost all of my jumping. It lets you choose any function to jump to and uses imenu, so you can jump to things other than the current symbol-at-point.\n\n\n",
            "excerpt": "very well, <span class=\"highlight\">and</span> I&#39;d even suggest porting it to a non-<span class=\"highlight\">evil</span> environment if possible\n\nimenu (this uses a <span class=\"highlight\">regex</span> engine to find definitions)\n\nis already used as a fallback in semantic-ia-fast-jump\ndoesn&#39;t seem &hellip; semantic-mode doesn&#39;t work at all\n<span class=\"highlight\">evil</span>-goto-definition (uses a <span class=\"highlight\">regex</span> engine) works great as always\nimenu (uses a <span class=\"highlight\">regex</span> engine)\n\ndoesn&#39;t seem to work well on variables\n\nTern is a battery of (alien) semantic &hellip; ",
            "title": "How can one &#39;Go to definition&#39; in Java and JavaScript using Emacs?"
        },
        {
            "tags": [
                "php",
                "mysql",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 0,
            "is_answered": false,
            "question_id": 20245412,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1385564061,
            "creation_date": 1385563410,
            "body": "I have: \n\n\n\nOr I have:\n\n\n\nOr I have:\n\n\n\nAn so on...\n\nHow do I split this into a first part (SELECT-Part, FROM-Part, WHERE-Part, ...) and in a second part with evertything after the first part. \n\nI know, doing regex on SQL ist evil. It&#39;s better not to do this. Nevertheless I would like to see the regex, which can solve that. \n",
            "excerpt": "How do I split this into a first part (SELECT-Part, FROM-Part, WHERE-Part, ...) <span class=\"highlight\">and</span> in a second part with evertything after the first part. \n\nI know, doing <span class=\"highlight\">regex</span> on SQL ist <span class=\"highlight\">evil</span>. &hellip; Nevertheless I would like to see the <span class=\"highlight\">regex</span>, which can solve that. &hellip; ",
            "title": "PHP MySql query: Split into parts with regex"
        },
        {
            "tags": [
                "javascript",
                "html",
                "regex"
            ],
            "question_score": 72,
            "is_accepted": false,
            "answer_id": 6660315,
            "is_answered": false,
            "question_id": 6659351,
            "item_type": "answer",
            "score": 127,
            "last_activity_date": 1384800733,
            "creation_date": 1310452191,
            "body": "jQuery uses a regex to remove script tags in some cases and I&#39;m pretty sure its devs had a damn good reason to do so. Probably some browser does execute scripts when inserting them using .\n\nHere&#39;s the regex:\n\n\n\nAnd before people start crying &quot;but regexes for HTML are evil&quot;: Yes, they are - but for script tags they are safe because of the special behaviour - a  section may not contain  at all unless it should end at this position. So matching it with a regex is easily possible. However, from a quick look the regex above does not account for trailing whitespace inside the closing tag so you&#39;d have to test if  etc. will still work.\n",
            "excerpt": "jQuery uses a <span class=\"highlight\">regex</span> to remove script tags in some cases <span class=\"highlight\">and</span> I&#39;m pretty sure its devs had a damn good reason to do so. Probably some browser does execute scripts when inserting them using innerHTML. &hellip; &lt;\\/script&gt;)&lt;[^&lt;]*)*&lt;\\/script&gt;/gi\n\n\n<span class=\"highlight\">And</span> before people start crying &quot;but regexes for HTML are <span class=\"highlight\">evil</span>&quot;: Yes, they are - but for script tags they are safe because of the special behaviour - a &lt;script&gt; section &hellip; ",
            "title": "Removing all script tags from html with JS Regular Expression"
        },
        {
            "tags": [
                "javascript",
                "django"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 12118596,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1382983266,
            "creation_date": 1345860472,
            "body": "I have this string being stored in a cookie \n\n\n\nAKA\n\n\n\n(for pasting into a console)\n\nbut I can&#39;t parse it with JSON.parse. However, it works with eval (which is evil). The error is .\n\nOf note are the escaped commas. This was generated with the Django messaging API.\n\nDoes anyone know a good regex or other technique that can do this instead?\n\nI first need to unescape the string, (because it&#39;s a proper javascript string) and then I need the array after the dollar (  ).\n",
            "excerpt": "Does anyone know a good <span class=\"highlight\">regex</span> or other technique that can do this instead? &hellip; I first need to unescape the string, (because it&#39;s a proper javascript string) <span class=\"highlight\">and</span> then I need the array after the dollar ( s.substring(s.indexOf(&quot;$&quot;)+1) ). &hellip; ",
            "title": "JSON.parse throws &quot;SyntaxError: Unexpected Number&quot; when trying to parse a single string stored in a cookie"
        },
        {
            "tags": [
                "php",
                "regex",
                "html-parsing"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 19310606,
            "is_answered": false,
            "question_id": 18893680,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1381469196,
            "creation_date": 1381467995,
            "body": "For what it&#39;s worth, this is the regex that you&#39;re looking for:\n\nRaw Match Pattern:\n\n\n\nRaw Replace Pattern:\n\n\n\nThe PHP code is:\n\n\n\nThat being said, be forewarned -- to Andy Lester&#39;s point, this regex is not reliable. Though in my opinion, the issue is not quite &quot;the nature of HTML&quot;, or at least not simply that. The point being made in this admittedly-great resource -- http://htmlparsing.com/regexes -- is that you&#39;re attempting to re-invent the wheel on a very bumpy road. The broader concern is &quot;not that regular expressions are evil, per se, but that overuse of regular expressions is evil.&quot; That quote is by Jeff Atwood, from an exceptional elaboration on the joy and terror of regular expressions here: Regular Expressions: Now You Have Two Problems (He also has an article specifically warning against using regular expressions to parse HTML -- Parsing Html The Cthulhu Way.)\n\nSpecifically in the case of my &quot;solution&quot; above, for instance -- the following input (with line returns) will not be matched, despite being valid HTML:\n\n\n\nThe following inputs, however, are handled as desired:\n\n\n\nbecomes:\n\n\n\nA great resource for explaining the full breakdown of the regex is here: http://www.myregextester.com/index.php\n\nTo replicate the test on that tool:\n\n\nselect the &quot;replace&quot; operation\nput your regex into &quot;match pattern&quot;\nput the replacment into &quot;replace pattern&quot;\nselect the &quot;i&quot; flag checkbox\nselect the &quot;explain&quot; checkbox\nselect the &quot;PHP&quot; checkbox\nput your target content into &quot;source text&quot;\nclick &quot;Submit&quot;\n\n\nFor convenience and posterity, I&#39;ve included the full explanation provided by that tool below, but two of the conceptual highlights are:\n\n\nLookaheads and negative lookaheads -- eg  http://php.net/manual/en/regexp.reference.assertions.php\nNon-capturing subpatterns -- eg  or the outer part of  http://php.net/manual/en/regexp.reference.subpatterns.php\n\n\nMatch Pattern Explanation:\n\n\n",
            "excerpt": "&lt;\\/a&gt;/i&#39;,&#39;&lt;a $1href=&quot;http://$2&quot;$3&gt;$4&lt;/a&gt;&#39;,$content);\n\n\nThat being said, be forewarned -- to Andy Lester&#39;s point, this <span class=\"highlight\">regex</span> is not reliable. &hellip; The broader concern is &quot;not that regular expressions are <span class=\"highlight\">evil</span>, per se, but that overuse of regular expressions is <span class=\"highlight\">evil</span>.&quot; &hellip; ",
            "title": "Replace protocol in links that don&#39;t match a given domain"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 19126447,
            "is_answered": false,
            "question_id": 19126096,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1380670064,
            "creation_date": 1380663629,
            "body": "It looks like what you&#39;ve got is an &quot;evil regex&quot;, which is not uncommon when you try to construct a complicated regex to match one thing (src) within another thing (img).  In particular, evil regexs usually happen when you try to apply repetition to a complex subexpression, which you are doing with .\n\nA better approach would be to use two regexes; one to match all  tags, and then another to match the  attribute within it.\n\nMy Java&#39;s rusty, so I&#39;ll just give you the pseudocode solution:\n\n\n\nNote the use of a backreference to match the appropriate type of closing quote (i.e., this will match  and .  Also note that the quantifiers are lazy here ( instead of just ); this is necessary to prevent too much from being consumed.\n\nEDIT: even though my Java&#39;s rusty, I was able to crank out an example.  Here&#39;s the solution in Java:\n\n\n",
            "excerpt": "It looks like what you&#39;ve got is an &quot;<span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>&quot;, which is not uncommon when you try to construct a complicated <span class=\"highlight\">regex</span> to match one thing (src) within another thing (img). &hellip; the appropriate type of closing quote (i.e., this will match src=&#39;abc&#39; <span class=\"highlight\">and</span> src=&quot;abc&quot;. &hellip; ",
            "title": "attributes pattern matcher takes a long time"
        },
        {
            "tags": [
                "c#",
                "regex",
                "out-of-memory",
                "large-files"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 18923039,
            "is_answered": false,
            "question_id": 18920911,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1379700045,
            "creation_date": 1379700045,
            "body": "You have what&#39;s called &quot;catastrophic backtracking&quot;.\n\nBasically, when you have a variable-length expression (, , etc.) followed by an &quot;overlapping&quot; (that is, both expression could match on the same set of characters) variable length expression, you can get into a tug of war between the two expressions. This usually only happens when the entire expression fails and .NET regex enginge attempts to shift the input text between the overlapping expressions, so often it&#39;s missed in testing.\n\nYour expression has many sub-expressions which could cause this, but here&#39;s an example:\n\n\n\nThe first part, , can match zero or more whitespace characters. The second, , can also match zero or more whitespace characters (in addition to non-whitespace characters). This will cause catastrophic backtracking in the event that your input fails on the first try and there are multiple whitespace characters to match.\n\nI wrote a bit about this issue here as well:\nHow can I recognize an evil regex?\n",
            "excerpt": "This usually only happens when the entire expression fails <span class=\"highlight\">and</span> .NET <span class=\"highlight\">regex</span> enginge attempts to shift the input text between the overlapping expressions, so often it&#39;s missed in testing. &hellip; I wrote a bit about this issue here as well:\nHow can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>? &hellip; ",
            "title": "A long Regex for a large string"
        },
        {
            "tags": [
                "iphone",
                "ios",
                "objective-c",
                "string",
                "nsstring"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 18385622,
            "is_answered": false,
            "question_id": 18385500,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1377187510,
            "creation_date": 1377187510,
            "body": "\n  it strikes me that with longer sets of strings, this may become inefficient and slow.\n\n\nSo, have you benchmarked it? If not, then you don&#39;t have the right to judge it as &quot;inefficient&quot; and &quot;slow&quot;. Premature optimization is evil. Just stick with those nice and simple for loops and the  method.\n\n\n\nBut: to actually answer your question, it&#39;s not impossible to avoid the manual looping. If you use  with a regex like , then you can find all occurrences in one pass. The use of regular expressions would probably be slower than a simple string search, though.\n",
            "excerpt": "Premature optimization is <span class=\"highlight\">evil</span>. Just stick with those nice <span class=\"highlight\">and</span> simple for loops <span class=\"highlight\">and</span> the - [NSString rangeOfString:] method. &hellip; If you use NSRegularExpression with a <span class=\"highlight\">regex</span> like good|great|awesome, then you can find all occurrences in one pass. &hellip; ",
            "title": "Searching for multiple strings in an NSString"
        },
        {
            "tags": [
                "c#",
                "list",
                "ienumerable"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 18238735,
            "is_answered": false,
            "question_id": 4257081,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1376502486,
            "creation_date": 1376502486,
            "body": "By now, I&#39;m sure you&#39;ll see that you&#39;re trying to optimize prematurely, which is, according to many, the root of all evil.\n\nHowever, if you REALLY want to speed this up, regular expressions seem an expensive way to do it.  Everytime you do a Regex.Match(), you&#39;re scanning the string again, which results in at least as many scans as you have tokens.\n\nIf you know the boundaries that define a token (&#39;{&#39; and &#39;}&#39;, for example), you could scan the string once to build the enumerable of tokens (with yield, or list, I don&#39;t think that&#39;ll make much difference).  The caller can then rebuild the string, looking up the values to replace the tokens with.\n\nOf course, this would only work with simple &quot;search and replace&quot; type tokens.  More complex ones would require something more sophisticated, such as a regex.  Perhaps you could extend the TokenDefinition to specify whether the match is a simple one or a regex one.  This would cut down the number of regular expressions performed, but still keep the flexibility required.\n",
            "excerpt": "By now, I&#39;m sure you&#39;ll see that you&#39;re trying to optimize prematurely, which is, according to many, the root of all <span class=\"highlight\">evil</span>. &hellip; Of course, this would only work with simple &quot;search <span class=\"highlight\">and</span> replace&quot; type tokens.  More complex ones would require something more sophisticated, such as a <span class=\"highlight\">regex</span>. &hellip; ",
            "title": "IEnumerable&lt;T&gt; and &quot;yield return&quot; performance question"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 17780324,
            "is_answered": false,
            "question_id": 17780248,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1374469797,
            "creation_date": 1374469797,
            "body": "While I can&#39;t remember any other reason, sending headers earlier than the normal course may have far reaching consequences. Below are just a few of them that happened to come to my mind at the moment:\n\n\nWhile current PHP releases may have output buffering on, the actual production servers you will be deploying your code on are far more important than any development or testing machines. And they do not always tend to follow latest PHP trends immediately.\nBy sending headers inadvertently, you might have introduced a security vulnerability: say, you are doing a redirection, but hence the headers are already sent, the redirection does not work and the rest of the page might be output, thus the visitor may see what she was not supposed to see. While this can be mitigated by using exit, you know the story, only if every one of us utilize good programming habits every time.\nEven if letting the visitor stay in the wrong page does not have a security implication, by breaking a session behavior, or in some other ways I&#39;ve encountered over years, the security and/or session cycle might have taken some sort of blow in the end.\nIf not security, you may have headaches over inexplicable functionality loss. Say, you are implementing some kind payment gateway, and redirect user to a specific URL after successful confirmation by the payment processor. If some kind of PHP error, even a warning, or an excess line ending happens, the payment may remain unprocessed and the user may still seem unbilled. This is also one of the reasons why needless redirection is evil and if redirection is to be used, it must be used with caution.\nYou may get &quot;Page loading canceled&quot; type of errors in Internet Explorer, even in the most recent versions. This is because an AJAX response/json include contains something that it shouldn&#39;t contain, because of the excess line endings in some PHP files, just as I&#39;ve encountered a few days ago.\nIf you have some file downloads in your app, they can break too, because of this. And you may not notice it, even after years, since the specific breaking habit of a download depends on the server, the browser, the type and content of the file (and possibly some other factors I don&#39;t want to bore you with).\n\n\nBonus: a few gotchas (actually currently one) related to these 2 characters:\n\n\nEven some well-known libraries may contain excess line endings after ?&gt;. An example is Smarty, even the most recent versions of both 2.* and 3.* branch have this. So, as always, watch for third party code. Bonus in bonus: A regex for deleting needless PHP endings: replace (\\s*\\?&gt;\\s*)$ with empty text in all files that contain PHP code.\n\n",
            "excerpt": "This is also one of the reasons why needless redirection is <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> if redirection is to be used, it must be used with caution. &hellip; Bonus in bonus: A <span class=\"highlight\">regex</span> for deleting needless PHP endings: replace (\\s*\\?&gt;\\s*)$ with empty text in all files that contain PHP code. &hellip; ",
            "title": "How does the PHP code execute even without closing the ?&gt; PHP tag?"
        },
        {
            "tags": [
                "python",
                "regex",
                "unicode"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 17719039,
            "is_answered": false,
            "question_id": 17712730,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1374138164,
            "creation_date": 1374138164,
            "body": "\n  \\b\n\n\nThere isn&#39;t a word boundary between the letter  and the number —they are both alphanumerics. When Unicode-aware regex is being used this is correctly handled, hence no match. If you don&#39;t want to treat katakana and other non-ASCII letters as being alphanums, remove the  flag which controls this behaviour.\n\nWhen you send a byte string to a regex that was compiled from a Unicode string, it is automatically decoded. For some reason it seems to be decoded as ISO-8859-1 (rather than, say, )... don&#39;t know why that is, but implicit encode/decode is in general evil to be avoided.\n\nThe UTF-8 byte sequence for , when mis-decoded as ISO-8859-1, comes out as . The degree sign is not an alphanum so you get a match.\n",
            "excerpt": "\\b\n\n\nThere isn&#39;t a word boundary between the letter グ <span class=\"highlight\">and</span> the number 1—they are both alphanumerics. When Unicode-aware <span class=\"highlight\">regex</span> is being used this is correctly handled, hence no match. &hellip; When you send a byte string to a <span class=\"highlight\">regex</span> that was compiled from a Unicode string, it is automatically decoded. &hellip; ",
            "title": "python regex not matching decoded unicode string"
        },
        {
            "tags": [
                "c++",
                "regex",
                "c++11",
                "stack-overflow",
                "standard-library"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 17636892,
            "is_answered": false,
            "question_id": 17634817,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1373780960,
            "creation_date": 1373780960,
            "body": "The problem is the back reference (). Back references are evil, or at least very difficult to implement in the general case, and it&#39;s not easy to recognize not-general cases.\n\nIn your case, the problem is that the regex&#39;s first match will be from the first  to the last . That&#39;s not what you intended, but it is the way regexes work. (The &quot;longest left-most rule&quot;.) In theory, it&#39;s still possible to match the regex without killing the stack, but I doubt whether the regex library you&#39;re using is clever enough to make that optimization.\n\nYou can fix the regex to match what you want it to match by making the data part () non-greedy: change it to . That might also fix the stack blow-up problem, because it will cause the regex to match much earlier, before it blows up the stack. But I don&#39;t know if it will work in general; I really don&#39;t know anything about the MS implementation.\n\nIn my opinion, you should avoid back references, even though it means complicating your code a bit. What I would do is to first match:\n\n\n\nand then create the terminating string:\n\n\n\nand then  the terminating string. That means you can no longer use the regex library&#39;s iterator, which is unfortunate, but the loop is still pretty straight-forward.\n\nBy the way, I find it odd that you only recognize the start delimiter if it is at the end of a line, and the end delimiter if it is at the start of a line. My inclination would have been to require both of them to be full lines. If you replace the regex-with-back-reference with my two-step approach, it&#39;s relatively easy to accomplish that. That might be considered another hint that the regex-with-back-reference is not really the right approach.\n",
            "excerpt": "Back references are <span class=\"highlight\">evil</span>, or at least very difficult to implement in the general case, <span class=\"highlight\">and</span> it&#39;s not easy to recognize not-general cases. &hellip; What I would do is to first match:\n\n === ([^=]+) ===\\n\n\n\n<span class=\"highlight\">and</span> then create the terminating string:\n\n &quot;\\n=== END &quot; + match[1].str() + &quot; ===&quot;\n\n\n<span class=\"highlight\">and</span> then find() the terminating string. &hellip; ",
            "title": "Microsoft&#39;s implementation of std::regex"
        },
        {
            "tags": [
                "ruby",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 17500341,
            "is_answered": false,
            "question_id": 17497179,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1373092011,
            "creation_date": 1373092011,
            "body": "If you can always find a string that matches the regex you are given, then it suffices to match it against the regex, and look at the match data length. However, determining whether a regexp has a string that it matches is np-hard[1]. This is only feasible if you know in advance what kind of regexes you&#39;ll be getting.\n\nThe next best best method in the  class is  or . However, we need to parse the regex if we do this.\n\nI can&#39;t speak for the future, but as of Ruby 2.0, there is no better method in the  core class.\n\nA left parenthesis denotes a literal left parenthesis, if preceded by an unescaped backslash. A backslash is unescaped unless an unescaped backslash precedes. So, a character is escaped iff preceded by an odd number of backslashes. \n\nAn unescaped left parenthesis denotes a capturing group iff not followed by a question mark. With a question mark, it can mean various things:  and  denote a named capturing group. Named and unnamed capturing groups cannot coexist in the same regex, however[2].  denote non-capturing groups. This is a special case of .  denote atomic groups. , ,  and  denote lookaround.  denote comments.\n\nRuby regexp engine supports comments in regexes. Considering them in the main regex would be very difficult. We can try to strip them if we really want to support these, but supporting them fully will get messy due to the possibility of inline flags turning extended mode (and thus line comments) on and off in ways that a regular expression cannot capture. I will go ahead and not support unescaped parentheses in regex comments[3].\n\nWe want to count:\n\n\nthe number of left parentheses \nthat are not escaped by a backslash  (read: not preceded by an odd number of backslashes that are not preceded by yet another backslash) and \nthat are not followed by a question mark \n\n\nRuby doesn&#39;t support unbounded lookbehind, but if we reverse the source first, we can rewrite the first assertion slightly: . The second assertion becomes a lookbehind: . \n\nthe whole solution\n\n\n\n\n\n[1]: we can show the NP-hardness by converting the satisfiability problem to it:\n\n\nAND:  ( must be an assertion)\nOR: \nNOT: \natoms: , , , ..., , ...\n\n\nexample(XOR): \n\nthis extends to NP-completeness for any class of regexes that can be tested in polynomial time. This includes any regex with no nested repetition (or repeated backreferences to repetition or recursion) and with bounded nesting depth of optional matches.\n\n[2]:  returns , indicating that unnamed capturing groups are ignored when named capturing groups are present. Tested in Ruby 1.9.3\n\n[3]: Inline comments start with  and end with . They cannot contain an unescaped right parenthesis, but they can contain an unescaped left parenthesis. These can be stripped easily (even though we have to sprinkle the &quot;unescaped&quot; regex everywhere), are the lesser evil, but they&#39;re also less likely to contain anunescaped left parenthesis.\n\nLine comments start with  and end with a newline. These are only treated as comments in the extended mode. Outside the extended mode, they match the literal  and newline. This is still easy, even if we have to consider escaping again. Determining if the regex has the extended flag set is not too difficult, but the flag modifier groups are a different beast entirely.\n\nEven with Ruby&#39;s awesome recursive regexes, merely determining if a previously-open group modifying the extended mode is already closed would yield a very nasty regex (even if you replace one by one and don&#39;t have to skip comments, you have to account for escaping). It wouldn&#39;t be pretty (even with interpolation) and it wouldn&#39;t be fast. \n",
            "excerpt": "If you can always find a string that matches the <span class=\"highlight\">regex</span> you are given, then it suffices to match it against the <span class=\"highlight\">regex</span>, <span class=\"highlight\">and</span> look at the match data length. &hellip; These can be stripped easily (even though we have to sprinkle the &quot;unescaped&quot; <span class=\"highlight\">regex</span> everywhere), are the lesser <span class=\"highlight\">evil</span>, but they&#39;re also less likely to contain anunescaped left parenthesis. &hellip; ",
            "title": "How to check how many variables (masks) declared in Regexp (ruby)?"
        },
        {
            "tags": [
                "nginx",
                "reverse-proxy"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 17391446,
            "is_answered": false,
            "question_id": 17300163,
            "item_type": "answer",
            "score": 8,
            "last_activity_date": 1372624729,
            "creation_date": 1372602919,
            "body": "The 1st way that I know of is using a regex against the $args parameter like so:\n\n\n\nOr the 2nd way is to use the convenient $is_args like so:\n\n\n\nRemember that in both styles you need to put a space between the if and the opening parenthesis; &quot;if (&quot; not &quot;if(&quot; as well as a space after the closing parenthesis and the opening brace; &quot;) {&quot; rather than &quot;){&quot;.\n\nFull example using the 1st style above, nginx.conf:\n\n\n\nFull example using the 2nd style above, nginx.conf:\n\n\n\nNote that the proxy.conf include goes outside of the if statement.\n\nVersion:\n\n\n\nAnd some info on the $args and $is_args variables:\n\nhttp://nginx.org/en/docs/http/ngx_http_core_module.html\n\nReading the docs is always useful, I just discovered that $query_string is the same as $args, so where I have $args above, you could also use $query_string according to the docs.\n\nIMPORTANT\n\nIt is important to note however, that If can be Evil!\n\nAnd therefore either test thoroughly or use the recommendation provided in the link above to change the URL inside location statement in a way similar to the example provided there, something like:\n\n\n",
            "excerpt": "The 1st way that I know of is using a <span class=\"highlight\">regex</span> against the $args parameter like so:\n\n    if ($args ~ &quot;^(\\w+)=&quot;) { \n\n\nOr the 2nd way is to use the convenient $is_args like so:\n\n    if ($is_args ! &hellip; IMPORTANT\n\nIt is important to note however, that If can be <span class=\"highlight\">Evil</span>! &hellip; ",
            "title": "Nginx proxy pass and url rewriting"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "google-chrome"
            ],
            "question_score": 9,
            "is_accepted": true,
            "answer_id": 17116720,
            "is_answered": false,
            "question_id": 17116675,
            "item_type": "answer",
            "score": 17,
            "last_activity_date": 1371241890,
            "creation_date": 1371241494,
            "body": "Because you have catastrophic backtracking:\n\n\n\nThis expression should be modified to remove one of the stars ():\n\n\n\nNote that catastrophic backtracking typically only rears its ugly head when a match cannot be made. That&#39;s why the first example you gave executes without any issues.\n\nYour second example exits before it hits the , so there is no opportunity for the backtracking to take effect.\n\nFor a more thorough explanation of catastrophic backtracking, see my answer to this question:\nHow can I recognize an evil regex?\n",
            "excerpt": "For a more thorough explanation of catastrophic backtracking, see my answer to this question:\nHow can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>? &hellip; ",
            "title": "Why does this regex make Chrome hang?"
        },
        {
            "tags": [
                "javascript",
                "html",
                "user-input"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 17036018,
            "is_answered": false,
            "question_id": 17035884,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1370920829,
            "creation_date": 1370920829,
            "body": "Here&#39;s simple calculator using  and regex:\n\nHTML:\n\n\n\nJavaScript:\n\n\n\nDemo: http://jsbin.com/utujas/1/edit\n\nSome say  is evil, but it&#39;s fine for a simple calculator, otherwise you&#39;d have to resort to something like this: javascript calculator: plus sign alternatives\n",
            "excerpt": "Here&#39;s simple calculator using eval <span class=\"highlight\">and</span> <span class=\"highlight\">regex</span>:\n\nHTML:\n\n&lt;input type=&quot;text&quot; id=&quot;calc&quot;&gt;\n&lt;button id=&quot;calculate&quot;&gt;Calculate&lt;/button&gt;\n\n\nJavaScript:\n\nvar input = document.querySelector(&#39;#calc&#39;)\n  , button = document.querySelector &hellip; +\\-/*]+/.test(key)) e.preventDefault();\n});\n\nbutton.addEventListener(&#39;click&#39;, function() {\n  alert(input.value +&#39; = &#39;+ eval(input.value));\n});\n\n\nDemo: http://jsbin.com/utujas/1/edit\n\nSome say eval is <span class=\"highlight\">evil</span> &hellip; ",
            "title": "Good HTML5 object for mathematical input?"
        },
        {
            "tags": [
                "asp.net",
                "vb.net",
                "string"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 16848466,
            "is_answered": false,
            "question_id": 16848457,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1369967685,
            "creation_date": 1369963819,
            "body": "\n\nThe VB.NET version might look like:\n\n\n\nEdit\n\nIt sounds as if you are trying to parse some Html and then do work on it. I would recommend using the Html Agility Pack for that and read about the evils of attempting to use RegEx to parse your Html.\n",
            "excerpt": "someValueWithLineBreaks.TrimStart( &#39;\\n&#39; );\n\n\nThe VB.NET version might look like:\n\nDim cleanedFieldValue = someValueWithLineBreaks.TrimStart(ControlChars.Lf)\n\n\nEdit\n\nIt sounds as if you are trying to parse some Html <span class=\"highlight\">and</span> &hellip; I would recommend using the Html Agility Pack for that <span class=\"highlight\">and</span> read about the evils of attempting to use <span class=\"highlight\">RegEx</span> to parse your Html. &hellip; ",
            "title": "Removing a &#39;New Line&#39; in ASP"
        },
        {
            "tags": [
                "java",
                "regex",
                "matching",
                "replaceall"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 16618130,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1368827032,
            "creation_date": 1368825798,
            "body": "I&#39;m not understanding something about how Java&#39;s regex matching for \\s works. In the simple class below, \\s seems to match [at least] $ and *, which is worrisome. When I don&#39;t include \\s, the last char of each word gets chopped. And, neither regex seems to catch the ending &quot; in the string. Would somebody please explain what&#39;s going on? Or point me to a useful resource? Thanks. \n\n\n",
            "excerpt": "This is  <span class=\"highlight\">Evil</span> !@#$ Wicked %^&amp;* _ Mean ()+&lt;&gt; <span class=\"highlight\">and</span> ;:&#39; - Nasty. \\\\  =\\&quot;&quot;;\n                String t = &quot;123. ... This is  <span class=\"highlight\">Evil</span> ! &hellip; This is <span class=\"highlight\">Evil</span> $ Wicked * _ Mean <span class=\"highlight\">and</span> Nasty . &quot;\n// t: 123 .. Thi i Evi Wicke Mea an Nast &quot; &hellip; ",
            "title": "Java regex space matches $ and * ??"
        },
        {
            "tags": [
                "python",
                "object",
                "dictionary",
                "valuestack"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 16100306,
            "is_answered": false,
            "question_id": 16100204,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1366376813,
            "creation_date": 1366359663,
            "body": "\n\nor since regex is evil I would recommend:\n\n\n\nAlternatively you could make things much easier and more readable by making  return a dictionary:\n\n\n\nActually we could make this even better using \n\n\n",
            "excerpt": "334&#39;: &#39;|Hatt| |59| |0|   |0|&#39;, &#39;324&#39;: &#39;|Skor| |250| |0| |0|&#39;, &#39;234&#39;: &#39;|Tr&#246;ja| |300| |0| |0|&#39;, &#39;543&#39;: &#39;|Jacka| |400| |0| |0|&#39;}\n&gt;&gt;&gt; def parts(s):\n        return re.findall(r&#39;\\|([^\\|]+)\\|&#39;, s)\n\n\nor since <span class=\"highlight\">regex</span> &hellip; is <span class=\"highlight\">evil</span> I would recommend:\n\n&gt;&gt;&gt; def parts(s):\n        return [x.strip(&#39;|&#39;) for x in s.split()]    \n\n&gt;&gt;&gt; parts(d[&#39;153&#39;])\n[&#39;T-shirt&#39;, &#39;200&#39;, &#39;0&#39;, &#39;0&#39;]\n&gt;&gt;&gt; parts(d[&#39;153&#39;])[1]\n&#39;200&#39;\n\n\nAlternatively you could &hellip; ",
            "title": "Accessing specific value in a list of values"
        },
        {
            "tags": [
                "php",
                "javascript",
                "html",
                "security",
                "xss"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 15906990,
            "is_answered": false,
            "question_id": 15906938,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1365528277,
            "creation_date": 1365523585,
            "body": "I suggest that you use  (with ) to load said HTML, remove every kind of tag and every attribute you don&#39;t want to see, and save back the HTML (using  or ). You can do that by recursively iterating over the children of the document&#39;s root, and replacing tags you don&#39;t want by their inner contents. Since  loads code in a similar way browsers do, it&#39;s a much safer way to do it than using regular expressions.\n\nEDIT Here&#39;s a &quot;purifying&quot; function I made:\n\n\n\nYou would call  with an unsafe HTML string and a predefined whitelist of tags and attributes. The whitelist format is &#39;tag&#39; =&gt; array(&#39;attribute&#39; =&gt; &#39;regex&#39;). Tags that don&#39;t exist in the whitelist are stripped, with their contents inlined in the parent tag. Attributes that don&#39;t exist for a given tag in the whitelist are removed as well; and attributes that exist in the whitelist, but that don&#39;t match the regex, are removed as well.\n\nHere&#39;s an example:\n\n\n\nThe result is:\n\n\n\nObviously, you don&#39;t want to allow any  attribute, and I would advise against  because of weird proprietary properties like . Make sure all URL attributes are validated with a decent regex that matches the full string ().\n",
            "excerpt": "&gt;\n\n\nYou would call purifyHTML with an unsafe HTML string <span class=\"highlight\">and</span> a predefined whitelist of tags <span class=\"highlight\">and</span> attributes. The whitelist format is &#39;tag&#39; =&gt; array(&#39;attribute&#39; =&gt; &#39;<span class=\"highlight\">regex</span>&#39;). &hellip; Attributes that don&#39;t exist for a given tag in the whitelist are removed as well; <span class=\"highlight\">and</span> attributes that exist in the whitelist, but that don&#39;t match the <span class=\"highlight\">regex</span>, are removed as well. &hellip; ",
            "title": "How i can find 100% sure a JS inside of HTML tag?"
        },
        {
            "tags": [
                "javascript",
                "string",
                "parsing",
                "recursion"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 15737691,
            "is_answered": false,
            "question_id": 15737675,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1364791581,
            "creation_date": 1364791084,
            "body": "You need to at least declare all your variables in the function as local variables by adding  in front of their first use.  \n\n\n\nBy not using , your variables are global and each invocation of  will be sharing the same copies of variables which will mess up the recursion as recursive calls will mess up the state of the higher levels calls.  If the variables are all local variables, then each function invocation has it&#39;s own set of variables and one recursive call does not mess up the others.\n\nPlus, it is generally always a good idea to limit the scope of your variables to as local a scope as practical and avoid globals whenever possible.  Implicit globals variables like you have here are particular evil because they can easily lead to accidental misuse.\n\nAs Kolink suggested, you might just want to do a single global  operation using a regex search/replace.  You would need to make sure that any regex special characters in the search string were properly escaped though.\n",
            "excerpt": "Implicit globals variables like you have here are particular <span class=\"highlight\">evil</span> because they can easily lead to accidental misuse. &hellip; You would need to make sure that any <span class=\"highlight\">regex</span> special characters in the search string were properly escaped though. &hellip; ",
            "title": "program with recursive function"
        },
        {
            "tags": [
                "perl",
                "apache"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 15627826,
            "is_answered": false,
            "question_id": 15626447,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1364261681,
            "creation_date": 1364261681,
            "body": "I spent an hour fiddling with regexes, wrapping my head around s and  horrors, even some C code. Then, I did something crucial:\n\n\n\nI profiled the code (with Devel::NYTProf). The non-suprise: Parsing the string took very little time. The regex application in  took ~ 144ms in total. However, the date parsing amassed whopping 3.39s in . That is nearly a 1:25 relation!\n\nConclusion:\n\n\n  Premature optimization is the root of all evil. – D. Knuth\n\n\nUse a nice, readable regex, like\n\n\n\nThis executes about as fast as your (r)index/substr horrors, but is self-documenting to a certain degree, and certainly easier to debug. This is in line with the experience that clean, idiomatic Perl is likely to be the fastest Perl.\n\nThen, you have a choice to either accept that  is slow, or try to optimize it. If you manage a provable speedup, you might want to consider sending a patch upstream. You can also experiment with other libraries, or write your own  function that is optimized for your special use-case. \n",
            "excerpt": "I spent an hour fiddling with regexes, wrapping my head around splices <span class=\"highlight\">and</span> substr horrors, even some C code. &hellip; Conclusion:\n\n\n  Premature optimization is the root of all <span class=\"highlight\">evil</span>. – D. Knuth\n\n\nUse a nice, readable <span class=\"highlight\">regex</span>, like\n\nmy $split1_1_regex = qr/\\A\n        (\\d+)\\.(\\d+)\\.(\\d+)\\. &hellip; ",
            "title": "comon log format splitting"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 15603847,
            "is_answered": false,
            "question_id": 15603786,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1364158625,
            "creation_date": 1364158280,
            "body": "This might be what you want, but I expect evil &#39;regex in HTML&#39;-links in the comments :P. It&#39;s also dependent on the fact if the  only has text and spans in it or also many other (sub)children Dom-Nodes.\n\n\n\nIf you update the question I can give you a more precise answer to narrow down the collisions that can happen with RegEx.\n",
            "excerpt": "This might be what you want, but I expect <span class=\"highlight\">evil</span> &#39;<span class=\"highlight\">regex</span> in HTML&#39;-links in the comments :P. &hellip; It&#39;s also dependent on the fact if the &lt;div&gt; only has text <span class=\"highlight\">and</span> spans in it or also many other (sub)children Dom-Nodes. &hellip; ",
            "title": "How to unwrap text from a span in text block?"
        },
        {
            "tags": [
                "url-rewriting",
                "nginx",
                "subdomain"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 15593378,
            "is_answered": false,
            "question_id": 15589903,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1364082216,
            "creation_date": 1364082216,
            "body": "\nYou need http://wiki.nginx.org/HttpFastcgiModule to setup CodeIgniter.\nUsing 2 server blocks is better than using if block for redirect. See IF is Evil. \nDon&#39;t use $host because that variable value is obtained from the request&#39;s HOST header, and can be easily faked. Always set a server_name directive and use that name instead.\nUsing &quot;return 301&quot; directive is better than a rewrite. Saving cpu time (regex is slow) and easy to follow. Note that a 302 redirect (rewrite...redirect) has side effect because 302 will turn all POST requests to GET requests, which is not good in your case.\nYou don&#39;t need try_files in the main site because the main site just serves static files. But you can use &#39;expires&#39; directive to allow browser to cache the static files.\n\n\n\n\n\n",
            "excerpt": "See IF is <span class=\"highlight\">Evil</span>. \nDon&#39;t use $host because that variable value is obtained from the request&#39;s HOST header, <span class=\"highlight\">and</span> can be easily faked. Always set a server_name directive <span class=\"highlight\">and</span> use that name instead. &hellip; Saving cpu time (<span class=\"highlight\">regex</span> is slow) <span class=\"highlight\">and</span> easy to follow. &hellip; ",
            "title": "nginx config files redirecting to subfolder"
        },
        {
            "tags": [
                "javascript",
                "node.js",
                "socket.io",
                "serverside-javascript"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 15577271,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1363978063,
            "creation_date": 1363976300,
            "body": "So i&#39;m developing a socket.io real-time web-app.\nThe first concern of mine was &quot;What if some evil-minded user tries to inject some code via Dev Tools or Firebug?&quot; and i&#39;ve got my answer here on SO. My next concern is: &quot;What if some evil-minded user tries to inject some code via chat and/or other form of string inputs?&quot; and I&#39;ve came to the conclusion that I can&#39;t figure this out by myself. I know that I can use regex to find if the user is trying to inject code but once the code is sent to server and stored to a string it is executed. (ex: ; [ where the user sent string is the one between * ] ). So my question is: How can i prevent this? in other words How do I sanitize the user input?\n",
            "excerpt": "My next concern is: &quot;What if some <span class=\"highlight\">evil</span>-minded user tries to inject some code via chat <span class=\"highlight\">and</span>/or other form of string inputs?&quot; <span class=\"highlight\">and</span> I&#39;ve came to the conclusion that I can&#39;t figure this out by myself. &hellip; I know that I can use <span class=\"highlight\">regex</span> to find if the user is trying to inject code but once the code is sent to server <span class=\"highlight\">and</span> stored to a string it is executed. &hellip; ",
            "title": "How to secure socket.io from code injection?"
        },
        {
            "tags": [
                "javascript",
                "jquery-ui",
                "jquery"
            ],
            "question_score": -1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 15544572,
            "item_type": "question",
            "score": -1,
            "last_activity_date": 1363862567,
            "creation_date": 1363860680,
            "body": "I have a JSON file with objects containing the file path to an image.  I&#39;m trying to replace the src attr of an image tag using jQuery but no matter what i do, by the time I try to change the source, the file path has quotes around it which ends up leaving encoding around the path and thus fails.\n\nI&#39;ve tried:\n\n\ndecodeURIcomponent\nregex\n\n\nNeither has worked but I am more than willing to accept that they did not work due my error.\n\nHere&#39;s the code as I have it now:\n\n\n\nThe problem portion is this part here:\n\n\n\nNote the two console.logs: the first one for &#39;pic&#39; prints a clean (i.e.w/out quotes) file path.  Oddly enough, the console.log for &#39;image&#39; prints out the same file path but now with the evil double quotes which is the final product that fails.  The regex seen appears to have no effect.\n\nHere&#39;s the JSON returned that I&#39;m working with:\n\n\n\n}\n\nThanks for the help.\n",
            "excerpt": "I&#39;ve tried:\n\n\ndecodeURIcomponent\n<span class=\"highlight\">regex</span>\n\n\nNeither has worked but I am more than willing to accept that they did not work due my error. &hellip; Oddly enough, the console.log for &#39;image&#39; prints out the same file path but now with the <span class=\"highlight\">evil</span> double quotes which is the final product that fails.  The <span class=\"highlight\">regex</span> seen appears to have no effect. &hellip; ",
            "title": "Can&#39;t remove double quotes from image path after JSON.stringify"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "json",
                "syntax-error"
            ],
            "question_score": 40,
            "is_accepted": true,
            "answer_id": 15296279,
            "is_answered": false,
            "question_id": 15296196,
            "item_type": "answer",
            "score": 70,
            "last_activity_date": 1363096816,
            "creation_date": 1362752921,
            "body": "A number can&#39;t start with a not significative .\n\nThis is invalid : \n\nFrom JSON.org : \n\n\n\nYou should fix it at the source but if you can&#39;t, assuming your JSON is always similar to this one (no numbers in strings), then you might probably fix it with a regex :\n\n\n\nYou can&#39;t even here use the evil  because  would be parsed as a octal :\n\n\n\noutputs\n\n\n\nThis probably explains why it was considered safer to forbid numbers starting with non significative  in JSON.\n",
            "excerpt": "&quot;ti&quot;: 0000011410\n\nFrom JSON.org : \n\n\n\nYou should fix it at the source but if you can&#39;t, assuming your JSON is always similar to this one (no numbers in strings), then you might probably fix it with a <span class=\"highlight\">regex</span> &hellip; [\\. }])/g, &#39; &#39;));\n\n\nYou can&#39;t even here use the <span class=\"highlight\">evil</span> eval because &quot;0000011410&quot; would be parsed as a octal :\n\nconsole.log(eval(&#39;({&quot;ti&quot;: 0000011410})&#39;));\n\n\noutputs\n\n{ti: 4872}\n\n\nThis probably explains why &hellip; ",
            "title": "JSON syntax error: &#39;unexpected number&#39; or &#39;JSON.parse: expected &#39;,&#39; or &#39;}&#39; after property value in object&#39;"
        },
        {
            "tags": [
                "html",
                "url",
                "encoding"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 14807731,
            "is_answered": false,
            "question_id": 14806794,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1360568039,
            "creation_date": 1360568039,
            "body": "OWASP provides a list of regular expressions for validating user input, one of which is used for validating URLs. This is as close as you&#39;re going to get to a language-neutral, canonical solution. \n\nMore likely you&#39;ll rely on the URL parsing library of the programming language in use. Or, use a URL parsing regex. \n\nThe workflow would be something like: \n\n\nVerify the supplied string is a well-formed URL.\nProvide a default protocol such as  when no protocol is specified. \nMaintain a whitelist of acceptable protocols (, , , , etc.)   \n\n\nThe whitelist will be application-specific. For an address-book app the  protocol would be indispensable. It&#39;s hard to imagine a use case for the  and  protocols. \n\nEnforce a maximum URL length - ensures cross-browser URLs and prevents attackers from polluting the page with megabyte-length strings. With any luck your URL-parsing library will do this for you. \nEncode a URL string for the usage context. (Escaped for HTML output, escaped for use in an SQL query, etc.). \n\n\n\n  Forbid malicious URLs such as javascript: stuff or links or evil domain names.\n\n\nYou can utilize the Google Safe Browsing API to check a domain for spyware, spam or other &quot;evilness&quot;. \n",
            "excerpt": "It&#39;s hard to imagine a use case for the javascript: <span class=\"highlight\">and</span> data: protocols. &hellip; Forbid malicious URLs such as javascript: stuff or links or <span class=\"highlight\">evil</span> domain names.\n\n\nYou can utilize the Google Safe Browsing API to check a domain for spyware, spam or other &quot;evilness&quot;. &hellip; ",
            "title": "How can I safely add user-supplied URLs to my HTML page?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "replace"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 14599815,
            "is_answered": false,
            "question_id": 14599611,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1359535456,
            "creation_date": 1359535456,
            "body": "It can be done if they are not local variables using  (although I would call this evil):\n\n\n\nPut them in an object with the string matches as the keys and the replacements as values if you can.\n\nI recommend this regex:\n\n\n\nhttp://jsfiddle.net/p4uvW/\n",
            "excerpt": "It can be done if they are not local variables using window (although I would call this <span class=\"highlight\">evil</span>):\n\nstring.replace(<span class=\"highlight\">regex</span>, function (match, group) {\n    return window[group];\n});\n\n\nPut them in an object with &hellip; the string matches as the keys <span class=\"highlight\">and</span> the replacements as values if you can. &hellip; ",
            "title": "Replace word depending on the regex search result"
        },
        {
            "tags": [
                ".net",
                "regex"
            ],
            "question_score": 5,
            "is_accepted": true,
            "answer_id": 14570729,
            "is_answered": false,
            "question_id": 14570615,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1359408854,
            "creation_date": 1359405288,
            "body": "QUESTION 1\n\nThis is causing catastrophic backtracking:\n\n\n\nAnd:\n\n\n\nI&#39;m guessing you meant:\n\n\n\nAnd:\n\n\n\nYour regex does not currently match URLs with equal signs, which is why the catastrophic backtracking happens in the first place:\n\n\n\ndoes not match &#39;?a = 1&#39; because  does not include &#39;=&#39;. You can fix this pretty easily:\n\n\n\n(I threw &#39;%&#39; in there too)\n\nAlso, your regex is matching the whitespace before and after your URL. You may prefer lookarounds to  as this will match a position before or after whitespace rather than the whitespace itself:\n\n\n\nQUESTION 2\n\nThere&#39;s nothing you can do to detect or recover from a catastrophically backtracking regular expression. The best you could try is spinning the regex off into an independent thread and then terminating the thread after a certain timeout. Exactly how to do that would be an entirely different question, but it&#39;s not difficult to find tutorials online for .NET.\n\nSee:\n\n\nMultithreaded Applications (C# and Visual Basic)\nHow can I recognize an evil regex?\n\n",
            "excerpt": ":[\\w=%]*)\n\n\n(I threw &#39;%&#39; in there too)\n\nAlso, your <span class=\"highlight\">regex</span> is matching the whitespace before <span class=\"highlight\">and</span> after your URL. &hellip; See:\n\n\nMultithreaded Applications (C# <span class=\"highlight\">and</span> Visual Basic)\nHow can I recognize an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span>? &hellip; ",
            "title": ".Net Regex to extract Urls from text never returns"
        },
        {
            "tags": [
                "regex",
                "perl",
                "html-parsing",
                "screen-scraping"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 13812884,
            "is_answered": false,
            "question_id": 13812791,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1355194616,
            "creation_date": 1355194189,
            "body": "The code behaves exactly as you told it to. This is what happens:\n\nYou matched the regex exactly once. It did match, and populated the  variable with the value of the first (and only!) capture buffer. The match returns &quot;true&quot;, and the code in the if-branch is executed.\n\nYou want to do two things:\n\n\nMatch with the  modifier. This matches globally, and tries to return every match in the string, not just the first one.\nExecute the regex in list context, so you can save the capture buffers to an array\n\n\nThis would lead to the following code:\n\n\n\nDo also note that parsing HTML with regexes is evil, and you should search CPAN for a module you like that does that for you.\n",
            "excerpt": "This is what happens:\n\nYou matched the <span class=\"highlight\">regex</span> exactly once. It did match, <span class=\"highlight\">and</span> populated the $1 variable with the value of the first (<span class=\"highlight\">and</span> only!) capture buffer. &hellip; @matches) {\n    print &quot;$i: $matches[$i-1]\\n&quot;;\n  }\n}\n\n\nDo also note that parsing HTML with regexes is <span class=\"highlight\">evil</span>, <span class=\"highlight\">and</span> you should search CPAN for a module you like that does that for you. &hellip; ",
            "title": "perl regex multiple groups"
        },
        {
            "tags": [
                "php",
                "html",
                "whitelist"
            ],
            "question_score": 3,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 9897214,
            "item_type": "question",
            "score": 3,
            "last_activity_date": 1354217338,
            "creation_date": 1332880200,
            "body": "Here&#39;s the deal, I&#39;m making a project to help teach HTML to people. Naturally, I&#39;m afraid of that Scumbag Steve (see figure 1).\n\nSo I wanted to block ALL HTML tags, except those approved on a very specific whitelist.\n\nOut of those approved HTML tags, I want to remove harmful attributes as well. Such as  and . Also, according to a whitelist.\n\nI&#39;ve thought of regex, but I&#39;m pretty sure it&#39;s evil and not very helpful for the job.\n\nCould anyone give me a nudge in the right direction?\n\nThanks in advance.\n\n\n\nFig 1.\n\n\n",
            "excerpt": "Such as onload <span class=\"highlight\">and</span> onmouseover. Also, according to a whitelist.\n\nI&#39;ve thought of <span class=\"highlight\">regex</span>, but I&#39;m pretty sure it&#39;s <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> not very helpful for the job. &hellip; ",
            "title": "How to strip specific tags and specific attributes from a string?"
        },
        {
            "tags": [
                "php",
                "regex",
                "html-parsing"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 13370112,
            "is_answered": false,
            "question_id": 13370003,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1352846255,
            "creation_date": 1352846255,
            "body": "Regex is evil for such case. Better you work on the generated html. Here&#39;s how you do it.\n\nEnable output buffering. On the ob_start function add your own callback. Process the generated html with DOMDocument inside the handler. Something like this,\n\n\n",
            "excerpt": "<span class=\"highlight\">Regex</span> is <span class=\"highlight\">evil</span> for such case. Better you work on the generated html. Here&#39;s how you do it.\n\nEnable output buffering. On the ob_start function add your own callback. &hellip; Something like this,\n\nfunction my_handler($contents){\n     $doc = DOMDocument::loadHTML ($contents);\n     // change your document here <span class=\"highlight\">and</span> return it later\n     return $doc-&gt;saveHTML();\n}\nob_start(&#39;my_handler &hellip; ",
            "title": "replace html of tags with php regex"
        },
        {
            "tags": [
                "ruby",
                "regex",
                "ruby-on-rails-3.2"
            ],
            "question_score": -5,
            "is_accepted": false,
            "answer_id": 13202501,
            "is_answered": false,
            "question_id": 13202282,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1351887646,
            "creation_date": 1351887646,
            "body": "The first one is HTML so you should parse it with HTML and another is JSON, so you could use some JSON library. Don&#39;t use regex. It&#39;s evil.\n",
            "excerpt": "The first one is HTML so you should parse it with HTML <span class=\"highlight\">and</span> another is JSON, so you could use some JSON library. Don&#39;t use <span class=\"highlight\">regex</span>. It&#39;s <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Regex html help needed"
        },
        {
            "tags": [
                "javascript",
                "security",
                "eval"
            ],
            "question_score": 7,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 13167403,
            "item_type": "question",
            "score": 7,
            "last_activity_date": 1351718910,
            "creation_date": 1351717486,
            "body": "\n  Possible Duplicate:\n  When is JavaScript’s eval() not evil?  \n\n\n\n\nI am writing a script in which users have to write in a currency amount, some examples could be (user input &gt;&gt; converts to), with USD as default currency:\n\n\n\nI want to make this as smooth as possible, therefore I want to use JavaScript (it&#39;s a web app based on PHP/MySql + JavaScript). I want to use regex to filter the input, run it through  and return it.\n\nIs this a bad idea? I&#39;ve read some topics about  being a security issue. I just don&#39;t see how. A user can easily run JavaScript anyway?\n\nKeep in mind that I will validate all input server-side with PHP at a later stage.\n",
            "excerpt": "Possible Duplicate:\n  When is JavaScript’s eval() not <span class=\"highlight\">evil</span>? &hellip; I want to use <span class=\"highlight\">regex</span> to filter the input, run it through eval() <span class=\"highlight\">and</span> return it.\n\nIs this a bad idea? I&#39;ve read some topics about eval() being a security issue. I just don&#39;t see how. &hellip; ",
            "title": "Is Javascript eval() so dangerous?"
        },
        {
            "tags": [
                "python",
                "string",
                "parsing",
                "substring"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 13167564,
            "is_answered": false,
            "question_id": 13167508,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1351718229,
            "creation_date": 1351718229,
            "body": "Obligatory &quot;don&#39;t parse HTML with regex&quot; warning: https://stackoverflow.com/a/1732454/505154\n\nEvil regex solution:\n\n\n\nThis will return a list with the  attribute for every  tag that only contains a  attribute (since you said you only want to match the first one).\n",
            "excerpt": "Obligatory &quot;don&#39;t parse HTML with <span class=\"highlight\">regex</span>&quot; warning: https://stackoverflow.com/a/1732454/505154\n\n<span class=\"highlight\">Evil</span> <span class=\"highlight\">regex</span> solution:\n\nimport re\nre.findall(r&#39;&lt;img\\s*src=&quot;([^&quot;]*)&quot;\\s*/&gt;&#39;, text)\n\n\nThis will return a list with &hellip; ",
            "title": "python : easy substring/parsing"
        },
        {
            "tags": [
                "java",
                "regex",
                "string",
                "parsing",
                "text"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 12558488,
            "is_answered": false,
            "question_id": 12557081,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1348559042,
            "creation_date": 1348457392,
            "body": "Your second regex is correct, but you don&#39;t need all those brackets.  This will do:\n\n\n\nThis will be much more efficient than @ruakh&#39;s suggestion, , which has to perform two tests at each position.  That&#39;s exactly the problem the Java devs were trying to solve with the intersection operator .  The Unicode Consortium has since endorsed the idea, along with other set operations.\n\nI don&#39;t know what you were trying for with that first regex, but the  and  will both be treated as literal characters, making it equivalent to , which doesn&#39;t sound like what you want.\n\n\n\nEDIT: Don&#39;t get me wrong though, efficiency is not the only reason to prefer this approach. It&#39;s not even the most important one. Premature optimization is as evil in regexes as it is anywhere else.  Concentrate on keeping your regexes as simple and clear as you can, and you shouldn&#39;t have to worry about performance.  My regex is both simpler (in that it only performs one kind of operation) and clearer (more readable) than the lookahead version (but not by much; that  syntax still looks hideous to me).\n",
            "excerpt": "Premature optimization is as <span class=\"highlight\">evil</span> in regexes as it is anywhere else.  Concentrate on keeping your regexes as simple <span class=\"highlight\">and</span> clear as you can, <span class=\"highlight\">and</span> you shouldn&#39;t have to worry about performance. &hellip; My <span class=\"highlight\">regex</span> is both simpler (in that it only performs one kind of operation) <span class=\"highlight\">and</span> clearer (more readable) than the lookahead version (but not by much; that &amp;&amp; syntax still looks hideous to me). &hellip; ",
            "title": "metacharacters in regular expressions"
        },
        {
            "tags": [
                "php",
                "preg-replace",
                "preg-match",
                "preg-match-all"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 12551251,
            "is_answered": false,
            "question_id": 12551081,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1348395899,
            "creation_date": 1348393277,
            "body": "You&#39;re sort of close. You can  the string with  but with spaces included around the . Then the first element would be the function name, in this case  and the second element would be the array but as a string. You&#39;ll need to  that one so that it&#39;ll be a proper array data type.\n\n\n\nAs an alternative, you can also modify the regex so that you don&#39;t have to call .\n\n\n\nEither way, you&#39;ll want to make sure that you sanitize the user input because  can be evil.\n",
            "excerpt": "Then the first element would be the function name, in this case diggin <span class=\"highlight\">and</span> the second element would be the array but as a string. &hellip; =\\s*(.*)\\]/i&#39;, $s, $matches);\n\n\nEither way, you&#39;ll want to make sure that you sanitize the user input because eval can be <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Replace [diggin] with HTML code or PHP code"
        },
        {
            "tags": [
                "c#",
                "regex"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 12112807,
            "is_answered": false,
            "question_id": 12112603,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1346141794,
            "creation_date": 1345823843,
            "body": "Don&#39;t use regex to parse html, it&#39;s evil. \n\nYou could use the HTML Agility Pack, it even has a nice NuGet Package.\n\nAlternatively, you could do this on the client side with a single line of jQuery:\n\n\n\nThis is making use of the Attribute Contains Selector.\n\nIf you want to find the docid in your click function, you could write something like this in your click function:\n\n\n\nNote that this assumes there&#39;s only ever one query string value, if you wanted to make this more robust you could do something like in this answer: https://stackoverflow.com/a/1171731/21200 \n",
            "excerpt": "Don&#39;t use <span class=\"highlight\">regex</span> to parse html, it&#39;s <span class=\"highlight\">evil</span>. \n\nYou could use the HTML Agility Pack, it even has a nice NuGet Package. &hellip; ",
            "title": "Regular expression to find anchor link with special href?"
        },
        {
            "tags": [
                "php",
                "javascript",
                "regex",
                "pattern-matching",
                "web-scraping"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 12152946,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1346138734,
            "creation_date": 1346129419,
            "body": "This is a fun little one I&#39;ve been working on.  I&#39;ve found many solutions, but none are really the right match.  The goal is this &quot;Match p tags only if there are 3 or more in a row&quot;\n\nSo I feel like this should be right, but it&#39;s not.\n\n\n\nBasically in my words this says:  \n\n\nMatch a p tag with anything inside the tag\nMatch anything until you see a closing P tag\nONLY match the preceding (above 2 lines) iff followed by\n\na whitespace char (maybe) and then a &lt; p\nIf that occurs 3 or more times\n\n\n\nThe issue is that this works well in Javascript but not in PHP. PHP says \n\n\n\nI&#39;ve tried different rounds of parens to give it that &quot;nothing to repeat&quot; but that causes false regex.\n\nAnd yes, this is for web scraping but no I&#39;m doing research not doing evil things.\n\nAny ideas maybe?\nthanks!\n",
            "excerpt": "PHP says \n\nCompilation failed: nothing to repeat at offset 28\n\n\nI&#39;ve tried different rounds of parens to give it that &quot;nothing to repeat&quot; but that causes false <span class=\"highlight\">regex</span>. &hellip; <span class=\"highlight\">And</span> yes, this is for web scraping but no I&#39;m doing research not doing <span class=\"highlight\">evil</span> things.\n\nAny ideas maybe?\nthanks! &hellip; ",
            "title": "Regex matching succession of P tags"
        },
        {
            "tags": [
                "php",
                "html",
                "tidy"
            ],
            "question_score": 4,
            "is_accepted": true,
            "answer_id": 11746759,
            "is_answered": false,
            "question_id": 11746455,
            "item_type": "answer",
            "score": 8,
            "last_activity_date": 1344547155,
            "creation_date": 1343759800,
            "body": "DISCLAIMER:\n\nI don&#39;t think my answer is very... neat. It&#39;s more of a hakish way to use HTMLTidy with HTML5 (which currently it does not support). To accomplish that I use regex to parse HTML, which, according to most, is the the root of all evil or the cthulhu way. If someone knows a better way, please enlighten us, since I don&#39;t feel very secure in using regex to parse html. I&#39;ve tested it with many examples but I&#39;m quite sure it&#39;s not bullet proof. \n\nIntro\n\nThe menu tag was deprecated in HTML4 and XHTML1, being replaced by ul (unordered list). It was, however, redefined in HTML5 and hence is a valid tag according to HTML5 specifications. SinceHTMLTidy does not support HTML5 and uses XHTML or HTML specifications, as the OP pointed, it replaces the then deprecated tag menu to ul (or adds the ul tag), even when you specifically tell it not to.\n\nMy suggestion\n\nThis function replaces the menu tag with a custom tag prior to parsing it with tidy. It then replaces the custom tag with menu again. \n\n\n\nTEST:\n\n\n\nOUTPUT:\n\n\n",
            "excerpt": "To accomplish that I use <span class=\"highlight\">regex</span> to parse HTML, which, according to most, is the the root of all <span class=\"highlight\">evil</span> or the cthulhu way. &hellip; Intro\n\nThe menu tag was deprecated in HTML4 <span class=\"highlight\">and</span> XHTML1, being replaced by ul (unordered list). It was, however, redefined in HTML5 <span class=\"highlight\">and</span> hence is a valid tag according to HTML5 specifications. &hellip; ",
            "title": "PHP Tidy removes valid tags"
        },
        {
            "tags": [
                "php",
                "regex",
                "arrays"
            ],
            "question_score": 11,
            "is_accepted": false,
            "answer_id": 11856742,
            "is_answered": false,
            "question_id": 11838359,
            "item_type": "answer",
            "score": 6,
            "last_activity_date": 1344391862,
            "creation_date": 1344391862,
            "body": "First of all, it is a bit debatable, but if you can easily avoid it, just pass  as an argument to the function as most people believe global variables are evil!\n\nNext, for the getting the &quot;s&quot;, I generally do something like this:\n\n\n\nThen just do something like this:\n\n\n\nIt&#39;s essentially the same thing as doing an if/else block, but less lines of code and you only have to write the text once.\n\nAs for the other part, I am STILL confused about what you&#39;re trying to do, but I believe you are looking for some sort of way to convert\n\n\n\ninto:\n\n\n\nThe easiest way is to try to use a combination of  and regex to then get it to do something like I have above.\n",
            "excerpt": "First of all, it is a bit debatable, but if you can easily avoid it, just pass $num_dogs as an argument to the function as most people believe global variables are <span class=\"highlight\">evil</span>! &hellip; return &#39;dogs called fred <span class=\"highlight\">and</span> harry&#39;;\n        break;\n    case 3:\n        return &#39;dogs called fred, harry <span class=\"highlight\">and</span> buster&#39;;\n        break;\n}\n\n\nThe easiest way is to try to use a combination of explode() <span class=\"highlight\">and</span> <span class=\"highlight\">regex</span> &hellip; ",
            "title": "Parsing plain text in such a way that will recognise a custom if statement"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "html",
                "regex"
            ],
            "question_score": 5,
            "is_accepted": true,
            "answer_id": 11661508,
            "is_answered": false,
            "question_id": 11661408,
            "item_type": "answer",
            "score": 8,
            "last_activity_date": 1343272233,
            "creation_date": 1343270147,
            "body": "Try filtering the &#39;s  by nodeType to get only the Text Nodes, then replace them with jQuery-generated anchor elements (any extra text in these nodes will be kept as Text Node):\n\n\n\nFiddle\n\nAs you know, most often it&#39;s not a good idea to parse HTML with Regex (look out for the ponies, they are evil), but if you isolate a part of the HTML you want to parse and it follows a relatively simple pattern, it is a viable option.\n\nedit: Included the  flag (global modifier) in your Regex to allow for matching multiple anchors inside a single Text Node.\n",
            "excerpt": "(look out for the ponies, they are <span class=\"highlight\">evil</span>), but if you isolate a part of the HTML you want to parse <span class=\"highlight\">and</span> it follows a relatively simple pattern, it is a viable option. &hellip; edit: Included the g flag (global modifier) in your <span class=\"highlight\">Regex</span> to allow for matching multiple anchors inside a single Text Node. &hellip; ",
            "title": "jQuery: How to wrap RegEx matched plain text in an anchor tag?"
        },
        {
            "tags": [
                "html",
                "ruby",
                "nokogiri"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 6308348,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1342728203,
            "creation_date": 1307718794,
            "body": "I imagine this is common enough that it&#39;s a solved problem, but being a bit of a newbie with Loofah and Nokogiri I haven&#39;t found the solution yet.\n\nI&#39;m using Loofah, a HTML scrubber library that wraps Nokogiri, to scrub some HTML text for display. However, that text sometimes happen to things like e-mail addresses and such between  and  characters, for example, . Loofah is considering that as an HTML or XML tag, and is stripping it away from the text.\n\nIs there a way to prevent this from happening while still doing a good job of scrubbing away the actual tags?\n\nEdit: Here&#39;s a failing test case:\n\n\n\nWe&#39;re currently using some pretty evil regex hackery to try and accomplish this, but as the comment above states, it doesn&#39;t work for tags &quot;nested&quot; inside non-tags. And we actually want to preserve the  elements as well.\n\nThe sample below isn&#39;t using Loofah, but the application itself does in other places so it wouldn&#39;t be hard to add it here. We&#39;re just not sure of what configuration options we should use, if any.\n",
            "excerpt": "However, that text sometimes happen to things like e-mail addresses <span class=\"highlight\">and</span> such between &lt; <span class=\"highlight\">and</span> &gt; characters, for example, &lt; foo@domain.com &gt;. &hellip; Test::Unit::UI::Console::TestRunner.run(HTMLTest)\n\n\nWe&#39;re currently using some pretty <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> hackery to try <span class=\"highlight\">and</span> accomplish this, but as the comment above states, it doesn&#39;t work for tags &quot;nested&quot; inside &hellip; ",
            "title": "Stripping HTML from text containing &lt; and &gt; characters with Loofah and Nokogiri"
        },
        {
            "tags": [
                "javascript",
                "html"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 11304351,
            "is_answered": false,
            "question_id": 11304090,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1341288741,
            "creation_date": 1341288741,
            "body": "Here&#39;s a simple regex example to parse addition:\n\n\n\nSee JSFiddle\n\nIt&#39;ll still let a lot of nonsense through, but it&#39;s better than the alternative.\n\nDon&#39;t use evil.\n",
            "excerpt": "Here&#39;s a simple <span class=\"highlight\">regex</span> example to parse addition:\n\nfunction parseAdditionString(s) {\n  var arr = s.match(/(\\d+)\\+(\\d+)/);\n  if (arr &amp;&amp; arr.length === 3) {\n    alert(&quot;Sum = &quot; + (Number(arr[1]) + Number(arr &hellip; Don&#39;t use <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "how can i automatically calculate an expression from a text field"
        },
        {
            "tags": [
                "php",
                "javascript",
                "asp.net",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 11219100,
            "is_answered": false,
            "question_id": 11206223,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1340768575,
            "creation_date": 1340768575,
            "body": "Disclaimer:\n\nAs others will or have already pointed out, using regex to parse non-regular languages is fraught with peril! It is best to use a dedicated parser specifically designed for the job, especially when parsing the tag soup that is HTML.\n\nThat said...\n\nIf you insist on using a regular expression, here is a tested PHP script implementing a regex solution that does a &quot;pretty good&quot; job:\n\n\n\n\n\nThis function strips the start and matching end tags for all HTML 4.01 Anchor elements (i.e.  tags) which do NOT have the specific, (case-sensitive)  attribute value containing: . The  value may contain any number of values, but one of them must be exactly: . The Anchor tag names and the CLASS attribute name are matched case insensitively.\n\nExample input ():\n\n\n\nExample output ():\n\n\n\nThe reader wishing to advanced their regex-fu would do well to study this (rather long and complex) regex. It is carefully handcrafted for both accuracy and speed and implements several advanced efficiency techniques. It is, of course, fully commented to allow readability by mere humans. This example clearly demonstrates that &quot;REGULAR EXPRESSIONS&quot; have evolved into a rich,  (non-REGULAR) programming language. \n\nNote that there will always be edge cases where this solution will fail. e.g. Evil strings within CDATA sections, comments, scripts, styles and tag attribute values can trip this up. (See disclaimer above.) That said, this solution will do a pretty good job for many cases (but will never be 100% reliable!)\n",
            "excerpt": "&lt;/p&gt;\n\n\nThe reader wishing to advanced their <span class=\"highlight\">regex</span>-fu would do well to study this (rather long <span class=\"highlight\">and</span> complex) <span class=\"highlight\">regex</span>. &hellip; <span class=\"highlight\">Evil</span> strings within CDATA sections, comments, scripts, styles <span class=\"highlight\">and</span> tag attribute values can trip this up. (See disclaimer above.) &hellip; ",
            "title": "Get all links except with specified class name with regex"
        },
        {
            "tags": [
                "php",
                "security",
                "eval",
                "formula",
                "equation"
            ],
            "question_score": 4,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 11068246,
            "item_type": "question",
            "score": 4,
            "last_activity_date": 1339969624,
            "creation_date": 1339896155,
            "body": "I&#39;m wondering what sorts of things should be checked when using eval() in PHP to parse a formula that is entered by a user filling out a form. I&#39;ve seen lots of answers about eval(), but not all of them seem to agree.\n\nHere&#39;s what I&#39;ve gathered:\n\n\nDon&#39;t use eval for strings (this could be a problem, since it is a formula I need to parse)\nStrip the input coming from the form (I&#39;m not entirely sure what things I need to strip)\nEval may or may not be evil, and is a security risk (are there alternatives for parsing an equation in a string?)\n\n\nWhat do you folks think I should do?\n\nEDIT: I tried the eval method, and while it does work, the sanitation I used did not support more than two operands. Since I really don&#39;t feel like writing my own (possibly insecure) sanitation regex, I&#39;m just going to find and use a pre-written math class instead. Thanks to everyone for the suggestions!\n",
            "excerpt": ", <span class=\"highlight\">and</span> is a security risk (are there alternatives for parsing an equation in a string?) &hellip; Since I really don&#39;t feel like writing my own (possibly insecure) sanitation <span class=\"highlight\">regex</span>, I&#39;m just going to find <span class=\"highlight\">and</span> use a pre-written math class instead. Thanks to everyone for the suggestions! &hellip; ",
            "title": "Safest way to use eval to parse equations entered by a form"
        },
        {
            "tags": [
                "python",
                "string"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 10967667,
            "is_answered": false,
            "question_id": 10964106,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1339321033,
            "creation_date": 1339321033,
            "body": "Assuming default ascii encoding, we can do this quite nicely in one line, without evil regex ;), by iterating over the string and removing values based on their encoding value using , or whatever specification we choose:\n\n\n\nOr we could specify a string of allowed characters and use &#39;in&#39;, like this using the builtin \n :\n\n\n\nThis removes punctuation too (but we could easily avoid that by adding those characters back into a string check definition if we want, )\n",
            "excerpt": "Assuming default ascii encoding, we can do this quite nicely in one line, without <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> ;), by iterating over the string <span class=\"highlight\">and</span> removing values based on their encoding value using ord(i) &lt; 128, or whatever &hellip; in mystring]).split())\n#Output:\nApple - Wikipedia, the free encyclopedia Language:English Aragon sAsturianuAz rbaycanca B n-l m-g Basa Banyumasan\n\n\nOr we could specify a string of allowed characters <span class=\"highlight\">and</span> &hellip; ",
            "title": "Removing certain characters from a long string in python"
        },
        {
            "tags": [
                "php",
                "url",
                "escaping",
                "file-get-contents",
                "sanitize"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 10102189,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1334133192,
            "creation_date": 1334131788,
            "body": "I have simple question. User supplies URL to my PHP script where I fetch the page from the URL and parse it and show some snippet to user. Now I want to sanitize or better escape the URL so it is safe for me to fetch it by using file_get_contents().\n\nMy simplified code looks like this:\n\n\n\nFirst thing what came to my mind is to use regex for catching evil URL, but I don&#39;t think it is efficient and better would be escape the whole URL. But what PHP function can I use for escaping URL for use in file_get_contents() function ? \n",
            "excerpt": "User supplies URL to my PHP script where I fetch the page from the URL <span class=\"highlight\">and</span> parse it <span class=\"highlight\">and</span> show some snippet to user. &hellip; My simplified code looks like this:\n\n$url = $_POST[&#39;url&#39;];\n$html = file_get_contents($url);\n\n\nFirst thing what came to my mind is to use <span class=\"highlight\">regex</span> for catching <span class=\"highlight\">evil</span> URL, but I don&#39;t think it is efficient <span class=\"highlight\">and</span> &hellip; ",
            "title": "How to safely escape URL from user input to be used in file_get_contents?"
        },
        {
            "tags": [
                "asp.net",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 9979816,
            "is_answered": false,
            "question_id": 9979673,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1333382885,
            "creation_date": 1333382885,
            "body": "You don&#39;t need to use regex to search for a specific word. Instead, just do a plain substring search for that specific word.\n\nIn Python, this would look like:\n\n\n\nNote that case folding (converting a string to upper or lowercase) is evil when done to a Unicode string. Don&#39;t do that.\n",
            "excerpt": "You don&#39;t need to use <span class=\"highlight\">regex</span> to search for a specific word. Instead, just do a plain substring search for that specific word. &hellip; Note that case folding (converting a string to upper or lowercase) is <span class=\"highlight\">evil</span> when done to a Unicode string. Don&#39;t do that. &hellip; ",
            "title": "Regex to check if a word doesn&#39;t exist"
        },
        {
            "tags": [
                "php",
                "mysql",
                "regex",
                "search-engine"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 9884287,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1333040629,
            "creation_date": 1332829070,
            "body": "I&#39;m developing a search engine for a CCG. I want the user to be able to find cards based on a query like,  or . There are many variables to search for: brigades (purple, blue), types (heroes, evil characters [ec&#39;s]), special abilities (discard), and identifiers (kings of israel). I&#39;m thinking about regexing to find common search parameters. I know this won&#39;t be easy, and it will take a long time to fine tune, but can someone point me in the right direction? Is regex even a recommend solution? I don&#39;t know if it&#39;s important, but I&#39;m using php and mysql.\n",
            "excerpt": "There are many variables to search for: brigades (purple, blue), types (heroes, <span class=\"highlight\">evil</span> characters [ec&#39;s]), special abilities (discard), <span class=\"highlight\">and</span> identifiers (kings of israel). &hellip; I know this won&#39;t be easy, <span class=\"highlight\">and</span> it will take a long time to fine tune, but can someone point me in the right direction? Is <span class=\"highlight\">regex</span> even a recommend solution? &hellip; ",
            "title": "how to break apart a search query"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 9897478,
            "is_answered": false,
            "question_id": 9897258,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1332881320,
            "creation_date": 1332881320,
            "body": "The reason REGEX for HTML is considered evil, is because it can (usually) easily be broken, forcing you to repeatedly rethink your pattern. If for instance you&#39;re matching\n\n\n\nIt could be broken easily with\n\n\n\nIf you use\n\n\n\nIt can also be easily broken with\n\n\n\nThere&#39;s no end for this. If you can&#39;t use any of the methods you&#39;ve stated, you could try , but it takes a whitelist as a parameter, not a blacklist, meaning you&#39;ll need to manually allow every single tag you want to allow.\n\nIf all else fail, you could resort to RegEx, what I came up with is this\n\n\n\nBut I bet someone around here could probably come and break that too.\n",
            "excerpt": "The reason <span class=\"highlight\">REGEX</span> for HTML is considered <span class=\"highlight\">evil</span>, is because it can (usually) easily be broken, forcing you to repeatedly rethink your pattern. If for instance you&#39;re matching\n\n&lt;script&gt;. &hellip; If all else fail, you could resort to <span class=\"highlight\">RegEx</span>, what I came up with is this\n\n&lt;\\s*script.*/script&gt;\n\n\nBut I bet someone around here could probably come <span class=\"highlight\">and</span> break that too. &hellip; ",
            "title": "Remove tag and content in between using REGEX/PHP"
        },
        {
            "tags": [
                "php",
                "security",
                "upload"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 9749219,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1331980906,
            "creation_date": 1331980124,
            "body": "I&#39;m trying to make a plugin system and the plugin contain PHP code.\nI think if someone evil reach the area that upload this plugin he can upload evil code\nso I want to limit the functions used in plugin file such as if there is eval() or  function the upload should fail.\n\nI think this will be done by the regex, but I have no experiance with it.\n\nSo I want something like that\n\n\n\nsee this example\n\n\n\ni want one like this but for making a white list and not for use functions, but for the function it self &quot; i mean  not \n",
            "excerpt": "I&#39;m trying to make a plugin system <span class=\"highlight\">and</span> the plugin contain PHP code. &hellip; I think this will be done by the <span class=\"highlight\">regex</span>, but I have no experiance with it.\n\nSo I want something like that\n\n&lt;? &hellip; ",
            "title": "How can I limit used functions in uploaded PHP file?"
        },
        {
            "tags": [
                "regex",
                "xpath",
                "xml-parsing",
                "file-search"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 9534160,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1330698997,
            "creation_date": 1330695145,
            "body": "So we have 1500 xhtml pages in lets say 100 subfolders of /myfolder. I want to find evil constellations of\n\n\n\nIn my current case, it is only allowed to have \n\n\n\nand not 2 evil Tags within a good Tag. This is just an example though. Sometimes I must search for something like\n\n\n\nI&#39;ve been browsing for a while now and could not find a tool which would help me to do so.\nWhat free ware / open source solutions are availble in windows?\n\nWhat are the xhtml files like? basically they are web pages created for JSF. We use our own tags and keep doing changes to them and thus, have to keep a good eye on bad constellation who haven&#39;t been thought of\n\nI&#39;m basically asking because I finally ended up doing it with regex, which makes people around here going nuts. \n",
            "excerpt": "&lt;/goodTag&gt;\n\n\n<span class=\"highlight\">and</span> not 2 <span class=\"highlight\">evil</span> Tags within a good Tag. This is just an example though. Sometimes I must search for something like\n\n&lt;outter&gt;\n....\n&lt;someTag someAttribute=&quot;iDoEvil&quot; /&gt;\n... &hellip; We use our own tags <span class=\"highlight\">and</span> keep doing changes to them <span class=\"highlight\">and</span> thus, have to keep a good eye on bad constellation who haven&#39;t been thought of\n\nI&#39;m basically asking because I finally ended up doing it with <span class=\"highlight\">regex</span> &hellip; ",
            "title": "Xpath find files for windows? xml parser to find files in windows"
        },
        {
            "tags": [
                "apache",
                ".htaccess",
                "redirect",
                "http-status-code-404"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 9195658,
            "is_answered": false,
            "question_id": 9195518,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1328712772,
            "creation_date": 1328712772,
            "body": "\n\nThe somewhat cumbersome regex on  ensures, only URLs of the  scheme will be redirected (as opposed to ).\n\nNote the use of  instead of  (the latter is evil and should be avoided).\n",
            "excerpt": "%{SERVER_NAME} [R]\n\n\nThe somewhat cumbersome <span class=\"highlight\">regex</span> on REQUEST_URI ensures, only URLs of the http://example.com/user1 scheme will be redirected (as opposed to /user1/foo/bar). &hellip; Note the use of SERVER_NAME instead of HTTP_HOST (the latter is <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> should be avoided). &hellip; ",
            "title": "Apache .htaccess redirect if folder not present"
        },
        {
            "tags": [
                "php",
                "regex",
                "nested",
                "hierarchy",
                "preg-match-all"
            ],
            "question_score": 4,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 8855975,
            "item_type": "question",
            "score": 4,
            "last_activity_date": 1327905157,
            "creation_date": 1326482259,
            "body": "UPDATE\n\nSo I am still messing with this, and have gotten as far as finding all the instances of tags, though I&#39;d rather JUST find the deepest stacked instance, as life would be easier that way.. Anyway here is what I got..\n\n\n\nAre there ANY regexp guru&#39;s out there that could give me some pointers or a regexp that mimics what I need? Which is only getting the deepest stacked instance of a {{tag}} that ends like this {{//tag}}\n\nORIGINAL\n\nOk, so I have an issue I have seen others have, but with a different approach to it.. Or so I thought.. So I am curious if anyone else can help me solve this issue further..\n\nI have a database full of templates that I need to work with in PHP, these templates are made and used by another system, and so there for can not be changed. With that said, these templates have hierarchy style tags added to them. What I need to do, is get these templates from the database, and then programmatically find these tags, their function name (or tag name), and their inner contents, as well as anything following the function (tag) name within the brackets.. An example of one of these tags is, {{FunctionName some (otherStuff) !Here}} Some content sits inside and it ends {{/FunctionName}}\n\nThis is where it gets more fun, the templates have another random tag, which I am guessing are the &quot;variable&quot; style of these tags, as they are always generally the same syntax. Which looks like this, ${RandomTag}, but also there are times that the function style one is there but without an ending tag, like so.. {{RandomLoner}}\n\nExample Template...\n\n\n\nOk so in no way is this a real template, but it follows all the rules that I have seen thus far.\n\nNow I have tried different things with regex and preg_match_all to pull out the matches, and get each of these into a nice array. So far what I have got is this (used it on the example template to make sure its working still)\n\n\n\nI have tried a couple approaches, (that took me nearly 8 hours to get to)\n\n\n\nIn no way am I a guru with regexp, I actually just learned it over the last day or so, trying to get this to work. I have googled for this, and realize that regexp is not designed for nested stuff, but the (?R) seems to do the trick on simple bracket examples Ive seen on the internets, but they always only take into account of the stuff between the { and } or ( and ) or &lt; and &gt;. After reading nearly the whole regex info website, and playing, I came up with these 2 versions.\n\nSo what I NEED to do (I think), would have a regexp work from the DEEPEST hierarchy tag first, and work its way out (if I can do that with help from php, thats fine with me). I was thinking finding the Deepest layer, get its data, and work backwards til all the contents are in 1 fat array. I assumed that was what the ($R) was going to do for me, but it didn&#39;t.\n\nSo any help on what I am missing would be great, also take into note that mine seems to have issues with {{}} that DONT have an ending version of it. So like my {{Random}} example, was removed for the sake of me parsing the array example. I feel these tags, along with the ${} tags can be left alone (if I knew how to do that with regexp), and just remain in the text where they are. I am more or less interested in the functions and getting their data into a multidimensional array for me to work with further.\n\nSorry for the long post, I just have been banging me head all night with this. I started with the assumption that it was going to be a bit easier.. Til I realized the tags where nested :/\n\nAny help is appreciated! Thanks!\n",
            "excerpt": "Now I have tried different things with <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> preg_match_all to pull out the matches, <span class=\"highlight\">and</span> get each of these into a nice array. &hellip; After reading nearly the whole <span class=\"highlight\">regex</span> info website, <span class=\"highlight\">and</span> playing, I came up with these 2 versions. &hellip; ",
            "title": "regex, php, and the evil nested (?R)"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 9058571,
            "is_answered": false,
            "question_id": 9058565,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1327889108,
            "creation_date": 1327889108,
            "body": "\n\nEval is evil, and parsing code with regexes is more evil.\n\n\n\nYou can even add varargs support:\n\n\n",
            "excerpt": "function concat(a, b) {\n    return function() { \n        a.call(this, arguments); \n        b.call(this, arguments); \n    };\n}\n\n\nEval is <span class=\"highlight\">evil</span>, <span class=\"highlight\">and</span> parsing code with regexes is more <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Is it possible to combine the functions easier?"
        },
        {
            "tags": [
                "javascript",
                "greasemonkey"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 9049963,
            "is_answered": false,
            "question_id": 9049858,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1327798024,
            "creation_date": 1327798024,
            "body": "Several things:\n\n\nDon&#39;t inject JS if you don&#39;t have to (On the Evil Overlord list next to &quot;Don&#39;t turn into a snake; it never helps&quot;).\nDon&#39;t futz with  if you don&#39;t have to.  It busts things and leads to the temptation of trying to regex HTML.\nUse DOM methods to add things, with rare exceptions.\nI&#39;m not sure that a script node, created thus, will be parsed anyway.\nMight as well start using jQuery.  It makes things simpler and more robust.\n\n\nPutting it all together, your script would become something like: \n\n\n",
            "excerpt": "It busts things <span class=\"highlight\">and</span> leads to the temptation of trying to <span class=\"highlight\">regex</span> HTML.\nUse DOM methods to add things, with rare exceptions.\nI&#39;m not sure that a script node, created thus, will be parsed anyway. &hellip; It makes things simpler <span class=\"highlight\">and</span> more robust. &hellip; ",
            "title": "Add my own onclick function with Greasemonkey"
        },
        {
            "tags": [
                "regex",
                "algorithm",
                "named-entity-extraction"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 8706499,
            "is_answered": false,
            "question_id": 8697456,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1325548055,
            "creation_date": 1325548055,
            "body": "A slightly smarter implementation than running every regex on every file:\n\n\n\nBut I don&#39;t know of any programs that do this already - you&#39;d have to code it yourself. This also implies you have the ram to keep the regex state around, and that you don&#39;t have any evil regexes\n",
            "excerpt": "A slightly smarter implementation than running every <span class=\"highlight\">regex</span> on every file:\n\nFor each <span class=\"highlight\">regex</span>:\n    load <span class=\"highlight\">regex</span> into a <span class=\"highlight\">regex</span> engine\n    assemble a list of <span class=\"highlight\">regex</span> engines\nFor each byte in the file:\n    insert &hellip; This also implies you have the ram to keep the <span class=\"highlight\">regex</span> state around, <span class=\"highlight\">and</span> that you don&#39;t have any <span class=\"highlight\">evil</span> regexes &hellip; ",
            "title": "Fast algorithm to extract thousands of simple patterns out of large amounts of text"
        },
        {
            "tags": [
                "php",
                "regex",
                "bbcode",
                "recursive-regex"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 3613401,
            "is_answered": false,
            "question_id": 3613121,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1324417202,
            "creation_date": 1283290505,
            "body": "Your regex, especially the zero-width assertions (lookaround) cause the regex engine to  backtrack catastrophically. Moral of the story: Regex can&#39;t shouldn&#39;t be used to parse languages that are not regular. If you have nested structures, that&#39;s not a regular language.\n\nIn fact, I think BBCode is evil. BBCode is a markup language invented by lazy programmers who didn&#39;t want to filter HTML the proper way. As a result, we now have a loose &quot;standard&quot; that&#39;s hard to implement. Filter your HTML the right way:\n\nhttp://htmlpurifier.org/\n",
            "excerpt": "Your <span class=\"highlight\">regex</span>, especially the zero-width assertions (lookaround) cause the <span class=\"highlight\">regex</span> engine to  backtrack catastrophically. &hellip; Moral of the story: <span class=\"highlight\">Regex</span> can&#39;t shouldn&#39;t be used to parse languages that are not regular. If you have nested structures, that&#39;s not a regular language.\n\nIn fact, I think BBCode is <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Regular expression crashes Apache due to PCRE limitations"
        },
        {
            "tags": [
                "c#",
                "html",
                "regex"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 8049311,
            "is_answered": false,
            "question_id": 8048951,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1320749779,
            "creation_date": 1320749779,
            "body": "I&#39;ve always read that parsing Html with Regular Expression is the Evil. Ok... it&#39;s surely true...\nBut like the Evil, Regex are so fun :)\nSo I&#39;d give a try to this one:\n\n\n",
            "excerpt": "I&#39;ve always read that parsing Html with Regular Expression is the <span class=\"highlight\">Evil</span>. Ok... it&#39;s surely true...\nBut like the <span class=\"highlight\">Evil</span>, <span class=\"highlight\">Regex</span> are so fun :)\nSo I&#39;d give a try to this one:\n\n<span class=\"highlight\">Regex</span> r = new <span class=\"highlight\">Regex</span>(@&quot;&lt;a.*? &hellip; ",
            "title": "C# Regex: Getting URL and text from multiple &quot;a href&quot;-tags"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 12,
            "is_accepted": true,
            "answer_id": 7898901,
            "is_answered": false,
            "question_id": 7898865,
            "item_type": "answer",
            "score": 19,
            "last_activity_date": 1319664603,
            "creation_date": 1319605645,
            "body": "The pattern you are using is known as an evil regex according to OWASP (they know what they&#39;re talking about most of the time):\n\nhttps://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n\nIt basically matches  OR  or  (since the b is optional by addition of ) \n\nA Regex like this is vulnerable to a ReDoS or Regex Denial of Service Attack.\n\nSo yes, sort out what you want to match.  I suggest in the above example you should simply match , no need for groups, repitition or alternation:\n\n\n\nAlso as someone pointed out, who now deleted his post, you should not use += to append to strings.  You should use a StringBuffer instead:\n\n\n",
            "excerpt": "The pattern you are using is known as an <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> according to OWASP (they know what they&#39;re talking about most of the time):\n\nhttps://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS &hellip; A <span class=\"highlight\">Regex</span> like this is vulnerable to a ReDoS or <span class=\"highlight\">Regex</span> Denial of Service Attack.\n\nSo yes, sort out what you want to match. &hellip; ",
            "title": "Java pattern matching going to infinite loop"
        },
        {
            "tags": [
                "java",
                "regex"
            ],
            "question_score": 12,
            "is_accepted": false,
            "answer_id": 7898925,
            "is_answered": false,
            "question_id": 7898865,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1319607209,
            "creation_date": 1319605935,
            "body": "The regular expression  is one that takes an especially long time for the regular expression engine to handle.  These are colorfully called evil regexes.  It is similar to the  example at the link.  This particular one is very slow on a string composed entirely of s.\n\nWhat this code does is check the evil regex against increasingly long strings of s, up to length 200, so it certainly ought to take a long time, and it doesn&#39;t print until the loop ends.  I&#39;d be interested to know where the 10^15 years figure came from.\n\nEdit\n\nOK, the 10^15 (and in fact the entire piece of code in the question) comes from this talk, slide 37.  Thanks to zengr for that link.  The most relevant piece of information to the question is that the check for this regex takes time that is exponential in the length of the string.  Specifically it&#39;s O(2^(n/2)), so it takes 2^99 (or so) times longer to check the last string than the first one.\n",
            "excerpt": "What this code does is check the <span class=\"highlight\">evil</span> <span class=\"highlight\">regex</span> against increasingly long strings of as, up to length 200, so it certainly ought to take a long time, <span class=\"highlight\">and</span> it doesn&#39;t print until the loop ends. &hellip; Edit\n\nOK, the 10^15 (<span class=\"highlight\">and</span> in fact the entire piece of code in the question) comes from this talk, slide 37.  Thanks to zengr for that link. &hellip; ",
            "title": "Java pattern matching going to infinite loop"
        },
        {
            "tags": [
                "c#",
                ".net",
                "regex",
                "regex-greedy"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 3034379,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1319491257,
            "creation_date": 1276473324,
            "body": "I&#39;m writing a regular expression to match data from the IMDb soundtracks data file.  My regexes are mostly working, although they are in places slurping too much text into my named groups.  Take the following regex for example:\n\n\n\nThe performer group includes the string  as well as the performer&#39;s name.  Unfortunately, because the records are not consistently formatted, some performers&#39; names are surrounded by single quotation marks whilst others are not.  This means they are optional as far as the regex is concerned.  \n\nI&#39;ve tried marking the last group as a greedy group using the  group specifier, but this appeared to have no effect on the results.  \n\nI can improve the results by changing the performer group to match a small range of characters, but this reduces my chances of parsing the name out correctly.  Furthermore, if I were to just exclude the apostrophe character, I would then be unable to parse, e.g., band names containing apostrophes, such as Elia&#39;s Lonely Friends Band who performed Run For Your Life featured in Resident Evil: Apocalypse.\n\nUpdate:  Here&#39;s an example input line that the regex should match, as requested.  Other formats are also presented which my existing regex won&#39;t handle.  \n\n\n",
            "excerpt": "just exclude the apostrophe character, I would then be unable to parse, e.g., band names containing apostrophes, such as Elia&#39;s Lonely Friends Band who performed Run For Your Life featured in Resident <span class=\"highlight\">Evil</span> &hellip; Update:  Here&#39;s an example input line that the <span class=\"highlight\">regex</span> should match, as requested.  Other formats are also presented which my existing <span class=\"highlight\">regex</span> won&#39;t handle.  \n\n&quot;  Performed by &#39;Carmen Silvera&#39; (qv)&quot; &hellip; ",
            "title": "Regex expression is too greedy"
        },
        {
            "tags": [
                "regex"
            ],
            "question_score": 8,
            "is_accepted": false,
            "answer_id": 7854263,
            "is_answered": false,
            "question_id": 7854063,
            "item_type": "answer",
            "score": 8,
            "last_activity_date": 1319323694,
            "creation_date": 1319224822,
            "body": "Ginormous regexes can be quite slow and memory hungry. I know, because I have created one. It can tokenize what shouldn&#39;t be tokenized by a regex. :-) if you want a link... Now... I haven&#39;t ever benchmarked &quot;small&quot; regexes so I don&#39;t know their speed. They surely are compact to write.\n\nAh I was forgetting, regexes are The Evil. Their main problem is that they are like an hammer and when you have them, you try to make all the problems be like a nail. So their main problem is in the user (the programmer).\n\nFirst &quot;big&quot; limitation: Javascript implements only a subset of them, with no Unicode support. Normally the language you use server side has a more complete implementation, so you get limited by js. Even quite complete implementations like the .NET one have big limits: no support for surrogate pairs and no support for &quot;composed&quot; characters (characters that use combining mark). But, as always, the problem is in the programmer. How many programmers that know Unicode know the intricacies of Unicode, of the various sets of digits, of the diacritics?\n\nSecond &quot;big&quot; limitation: maintainability. They are complex and unreadable when they are written. But months later? They get worse! And if you have to train a new programmer, now he has to learn one more language: regex.\n\nThird &quot;big&quot; limitation: they hide too much. You see . What does it means? a digit a space and a digit? Surely. But both  and  in the .NET Regexes &quot;hide&quot; a microworld.  &quot;matches&quot; any non-european digit (and there are many many ones in Unicode).  &quot;matches&quot; so many esoteric spaces of which I don&#39;t even know the name... I don&#39;t even want to think about it. They are like icebergs. Only 1/8 is out of the water, while 7/8 is hidden. But it&#39;s that 7/8 that will probably kill you.\n",
            "excerpt": "Ah I was forgetting, regexes are The <span class=\"highlight\">Evil</span>. Their main problem is that they are like an hammer <span class=\"highlight\">and</span> when you have them, you try to make all the problems be like a nail. &hellip; They are complex <span class=\"highlight\">and</span> unreadable when they are written. But months later? They get worse! <span class=\"highlight\">And</span> if you have to train a new programmer, now he has to learn one more language: <span class=\"highlight\">regex</span>. &hellip; ",
            "title": "Limitations of Regular Expressions?"
        },
        {
            "tags": [
                "regex",
                "preg-replace"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 7727498,
            "is_answered": false,
            "question_id": 7726379,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1318342599,
            "creation_date": 1318342599,
            "body": "Disclaimer:\n\nIt is always best to use a dedicated parser when working with (X)HTML. There are certainly files containing markup that can cause this regex solution to fail. Evil edge case strings placed inside comments, CDATA sections, scripts, styles and/or attribute values can trip it up. (Although these should be very rare.)\n\nThat said...\n\nMany here will tell you to NEVER use regex with HTML. However, this question involves a very specific target string, and a carefully crafted regex solution can work pretty well for this one-shot task at hand. Here is how I would do it:\n\n\n\nThis will replace the target URL only when inside the  attribute of  link tags (with the value wrapped in either single or double quotes). It will also strip any path/query/fragment that may be appended to the old target URLs. It allows any number of other tag attributes to appear before the  attribute.\n",
            "excerpt": "<span class=\"highlight\">Evil</span> edge case strings placed inside comments, CDATA sections, scripts, styles <span class=\"highlight\">and</span>/or attribute values can trip it up. (Although these should be very rare.)\n\nThat said... &hellip; However, this question involves a very specific target string, <span class=\"highlight\">and</span> a carefully crafted <span class=\"highlight\">regex</span> solution can work pretty well for this one-shot task at hand. &hellip; ",
            "title": "replace urls in string preg_replace regex php"
        },
        {
            "tags": [
                "c#",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 7716310,
            "is_answered": false,
            "question_id": 7715506,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1318277295,
            "creation_date": 1318266996,
            "body": "Disclaimer:\n\nAs others have pointed out, using regex to parse non-regular languages is fraught with peril! It is best to use a dedicated parser specifically designed for the job, especially when parsing the tag soup that is HTML.\n\nThat said...\n\nIf you insist on using a regular expression, here is a regex solution that will do a pretty good job:\n\n\n\nExample input:\n\n\n\n\n\n  \n\nExample output:\n\n\n\n\n\n  \n\nNote that there will always be edge cases where this solution will fail. e.g. Evil strings within CDATA sections, comments, scripts, styles and tag attribute values can trip this up. (See disclaimer above.) That said, this solution will do a pretty good job for many cases (but will never be 100% reliable!)\n\nEdit: 2011-10-10 14:00 MDT Streamlined overal answer. Removed first regex solution. Modified to correctly ignore classes having similar names like:  and .\n",
            "excerpt": "<span class=\"highlight\">Evil</span> strings within CDATA sections, comments, scripts, styles <span class=\"highlight\">and</span> tag attribute values can trip this up. (See disclaimer above.) &hellip; Removed first <span class=\"highlight\">regex</span> solution. Modified to correctly ignore classes having similar names like: abc-123 <span class=\"highlight\">and</span> 123-abc. &hellip; ",
            "title": "Replace a class by another in an html string"
        },
        {
            "tags": [
                "javascript",
                ".net",
                "asp.net",
                "visual-studio"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 7645200,
            "is_answered": false,
            "question_id": 7645043,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1317719022,
            "creation_date": 1317717248,
            "body": "The mistake that you are making is that  interprets xx/xx/xxxx formatted strings as U.S. style dates with the month first.   is taken as April 10, not October 4.\n\nHere is a transcript:\n\n\n\nIMHO you should avoid ambiguous date formats like this.  If date strings are to be used, force users to enter ISO8601 (yyyy/MM/dd) formatted text.\n\nThere is decent support for ISO8601 in ECMAScript 5 browsers.  Also see the Date.js library.  Or also this SO question for more info.\n\nADDENDUM\n\nThe built-in  function is documented here.  You can see it does not support DD/MM/YYYY.  While an evil programmer could accept a string in the form DD/MM/YYYY and use  and  (or regexes) to rewrite in an acceptable format for , I&#39;ll assume you are not an evil programmer.\n\nThe proper solution is to use a date parser that accepts format strings.  For JavaScript, one such library is Date.js.  It will allow you to write the following:\n\n\n\nand get the date object corresponding to April 20, 2011.\n",
            "excerpt": "While an <span class=\"highlight\">evil</span> programmer could accept a string in the form DD/MM/YYYY <span class=\"highlight\">and</span> use substring <span class=\"highlight\">and</span> concat (or regexes) to rewrite in an acceptable format for Date.parse, I&#39;ll assume you are not an <span class=\"highlight\">evil</span> programmer &hellip; It will allow you to write the following:\n\nDate.parseExact(&quot;20/04/2011&quot;, &quot;dd/MM/yyyy&quot;);\n\n\n<span class=\"highlight\">and</span> get the date object corresponding to April 20, 2011. &hellip; ",
            "title": "javascript validation for dates takes string for comparison"
        },
        {
            "tags": [
                "php",
                "url",
                "tags",
                "file-get-contents"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 7168934,
            "is_answered": false,
            "question_id": 7168918,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1314144009,
            "creation_date": 1314144009,
            "body": "Try the following regex (taken from the jQuery sourcecode).\n\n\n\nAnd before somebody is going to tell me that Regexes+HTML are an evil combination: You are right, but in this specific case it&#39;s perfecly valid since script tags have some specific behaviour such as that the first  will close the script tag; no matter if it&#39;s inside quotes etc.\n\nHowever, if you plan to do anything else with the HTML data, use a HTML parser!\n",
            "excerpt": "Try the following <span class=\"highlight\">regex</span> (taken from the jQuery sourcecode).\n\n$data = preg_replace(&#39;/&lt;script\\b[^&lt;]*(?:(?! &hellip; &lt;\\/script&gt;)&lt;[^&lt;]*)*&lt;\\/script&gt;/gi&#39;, &#39;&#39;, $data);\n\n\n<span class=\"highlight\">And</span> before somebody is going to tell me that Regexes+HTML are an <span class=\"highlight\">evil</span> combination: You are right, but in this specific case it&#39;s perfecly valid since script &hellip; ",
            "title": "PHP How do I remove script tags from URL?"
        },
        {
            "tags": [
                "python",
                "regex"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 7139593,
            "is_answered": false,
            "question_id": 7138560,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1313946174,
            "creation_date": 1313944837,
            "body": "\n  Python violates the Principle of Least Surprise here: they&#39;ve chosen a\n  word with an established meaning and warped it into meaning something\n  different from that. This isn&#39;t quite evil and wrong, but it is\n  certainly stupid and wrong. – tchrist @tchrist\n\n\nI don&#39;t agree. In fact, I think exactly the contrary, it isn&#39;t stupid\n\nIf I say :\n\n\n  a regex&#39;s pattern  matches the string &#39;145caba&#39;\n\n\neverybody will agree with this assertion.\n\nIf I say :\n\n\n  a regex&#39;s pattern  matches the string &#39;ref/ 789lomono\n  145abaca ubulutatouti&#39;\n\n\n80 % of people will agree\nand the other rigorous 20 % of people, in which I am, will be unsatisfied by the wording and will reclaim that the expression be changed to :  \n\n\n   matches SOMEWHERE in the string &#39;ref/ 789lomono\n  145abaca ubulutatouti&#39;\n\n\nThat&#39;s why I find justified to call an action that consists to search if and where a pattern matches in a string:   \n\nand to call the action to verify if a match occurs from the beginning:     \n\nFor me it&#39;s very much logical, not surprising\n\n.\n\nPS \n\nA former answer of mine have been deleted. As I don&#39;t know how to write to the author of the deletion to ask him the reason why he judged my former answer being a rant (!!!?), I re-post what seems to me absolutely impossible to be qualified so\n",
            "excerpt": "This isn&#39;t quite <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> wrong, but it is\n  certainly stupid <span class=\"highlight\">and</span> wrong. – tchrist @tchrist\n\n\nI don&#39;t agree. &hellip; that consists to search if <span class=\"highlight\">and</span> where a pattern matches in a string: search()  \n\n<span class=\"highlight\">and</span> to call the action to verify if a match occurs from the beginning: match()    \n\nFor me it&#39;s very much logical, not surprising &hellip; ",
            "title": "Why doesn&#39;t this regexp match?"
        },
        {
            "tags": [
                "php",
                "string",
                "wordpress"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 5045388,
            "is_answered": false,
            "question_id": 5031682,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1313773051,
            "creation_date": 1298055439,
            "body": "Never, ever use RegEx for HTML, ok? Just accept this. Or read the numerous posts on here why not.\n\nDOMDocument is ugly and evil. Use simple_html_dom instead, it&#39;s much simpler:\n\n\n",
            "excerpt": "Never, ever use <span class=\"highlight\">RegEx</span> for HTML, ok? Just accept this. Or read the numerous posts on here why not.\n\nDOMDocument is ugly <span class=\"highlight\">and</span> <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Find H2 tag in a string and give it a ID"
        },
        {
            "tags": [
                "c#",
                "asp.net-mvc",
                "asp.net-mvc-3",
                ".net-4.0",
                "routes"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 7102404,
            "is_answered": false,
            "question_id": 7043957,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1313641901,
            "creation_date": 1313641901,
            "body": "i think your problem is that you are either not using a constraint to define what location and stage should look like and it is giving you false positives and reading things in where they are not supposed to or you have your route definitions in the wrong order  \n\nmake sure you have the default mvc defined last and if you have multiple custom routes constrain the either using a regex or custom constraint class to define what locations are valid and they should look like    \n\neg http://site.com/ny/test/server/123456     \n\n\nis ny a valid location - make a custom constraint that defines what a\nvalid location is validate it against a database or a list of valid\nlocations\nis test a valid stage - regex could be sufficient but i always try to avoid regex whenever possible as it is evil and hard to maintain. again i would write a custom constraint to define what stages are valid likely validating against a list is sufficient is the case as you shouldnt  have very many stages \nalso to be noted with using stages the way you are in your url you can also add authentication rules in a constraint so that for exaple only people that are ..say.. admin or stakeholder roles be mached to the route and regular or non authenticated users would simply fall through to the next route or can simply give a 404 \n\n\nwriting routes can be tricky so it is advised to contrain your input data as much as you can especially if you are accepting string data \n\nstephen walther has a good post on writing route constraint at his blog \n",
            "excerpt": "to or you have your route definitions in the wrong order  \n\nmake sure you have the default mvc defined last <span class=\"highlight\">and</span> if you have multiple custom routes constrain the either using a <span class=\"highlight\">regex</span> or custom constraint &hellip; is validate it against a database or a list of valid\nlocations\nis test a valid stage - <span class=\"highlight\">regex</span> could be sufficient but i always try to avoid <span class=\"highlight\">regex</span> whenever possible as it is <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> hard to maintain. again &hellip; ",
            "title": "Help with MVC 3 Routes"
        },
        {
            "tags": [
                "php",
                "mysql"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 6838520,
            "is_answered": false,
            "question_id": 6838494,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1311730861,
            "creation_date": 1311730469,
            "body": "You can use prepared statements/PDO to ensure that no malicious queries can be injected into your code.\n\nLinks:\n\n\nPDO::Prepare\nPDOStatement::Execute\n\n\nYou should still validate your inputs with regex so your users can&#39;t just make whatever they want as their username. Say for example, I make my username . I could then run my evil code on all your pages with my username, unless you sanitized either input or output.\n",
            "excerpt": "Links:\n\n\nPDO::Prepare\nPDOStatement::Execute\n\n\nYou should still validate your inputs with <span class=\"highlight\">regex</span> so your users can&#39;t just make whatever they want as their username. &hellip; I could then run my <span class=\"highlight\">evil</span> code on all your pages with my username, unless you sanitized either input or output. &hellip; ",
            "title": "creating a login more securely in phpmysql how other than mysql real escape?"
        },
        {
            "tags": [
                "php",
                "mysql",
                "mysql-real-escape-string"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 6639946,
            "is_answered": false,
            "question_id": 6639909,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1310284843,
            "creation_date": 1310284843,
            "body": "Always assume the client is an evil genius, and smarter than you. \n\nTo avoid SQL injection, always escape client-side data with mysql_real_escape_string, or better yet, use a database wrapper which does it for you.\n\nYour first regex is still useful though, but not for SQL injection. What you might be preventing there is HTML injection - if you ever displayed the input verbatim on a web page, you can prevent anything nefarious like some rogue javascript.\n",
            "excerpt": "Always assume the client is an <span class=\"highlight\">evil</span> genius, <span class=\"highlight\">and</span> smarter than you. &hellip; Your first <span class=\"highlight\">regex</span> is still useful though, but not for SQL injection. &hellip; ",
            "title": "Performing a mysql_real_escape_string on checkboxes, radio buttons or drop-down menus?"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 6536081,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1309446087,
            "creation_date": 1309442966,
            "body": "the mighty Google apparently makes up its own URLS now to try to locate pages. We have spent allot of time making sure our URL navigation is spot on, but &quot;dont be evil&quot; is being evil and claiming that allot of our pages are duplicates.....\n\neg:\n\n/properties/2531/812/\n\n/properties/2531/812/bisto-prego-Monmouth-Monmouthshire-United Kingdom/\n\n/properties/2531/812/bisto-prego-monmouth-monmouthshire-united-kingdom/\n\n/properties/2531/812/bisto-prego-monmouth-monmouthshire-united-kingdom\n\nyou guessed it, the page is actually found at /properties/2531/812/, the rest is simply there for SEO effort.\n\nSo because google is trying it on, we are now seeing loads of duplicate content reports in our webmaster tools.\n\nEasy enough to handle, we will just make our index.php script allot stricter and run a 303 redirect if the url is not as well formed as we would like. That should sort the sheriff out!\n\n\n\nWe can easiliy detect if the seo part of the URI is present, but still having trouble detecting the ? and if there is a trailing slash....\nSo regex question: first off, how to detect presence of ?query=string etc in the url, and secondly how to detect if a trailing slash is present...\n",
            "excerpt": "We have spent allot of time making sure our URL navigation is spot on, but &quot;dont be <span class=\"highlight\">evil</span>&quot; is being <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> claiming that allot of our pages are duplicates..... &hellip; <span class=\"highlight\">and</span> if there is a trailing slash....\nSo <span class=\"highlight\">regex</span> question: first off, how to detect presence of ?query=string etc in the url, <span class=\"highlight\">and</span> secondly how to detect if a trailing slash is present... &hellip; ",
            "title": "more regex: need to setup some redirects to handle duplicate URL reports by big brother (goog)"
        },
        {
            "tags": [
                "java",
                "casting",
                "dynamic-cast"
            ],
            "question_score": 101,
            "is_accepted": false,
            "answer_id": 6496273,
            "is_answered": false,
            "question_id": 2127318,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1309193964,
            "creation_date": 1309193964,
            "body": "For what it is worth, most scripting languages (like Perl) and non-static compile-time languages (like Pick) support automatic run-time dynamic String to (relatively arbitrary) object conversions. This CAN be accomplished in Java as well without losing type-safety and the good stuff statically-typed languages provide WITHOUT the nasty side-effects of some of the other languages that do evil things with dynamic casting. A Perl example that does some questionable math:\n\n\n\nIn Java, this is better accomplished (IMHO) by using a method I call &quot;cross-casting&quot;.\nWith cross-casting, reflection is used in a lazy-loaded cache of constructors and methods that are dynamically discovered via the following static method: \n\n\n\nUnfortunately, no built-in Java methods such as Class.cast() will do this for String to BigDecimal or String to Integer or any other conversion where there is no supporting class hierarchy. For my part, the point is to provide a fully dynamic way to achieve this - for which I don&#39;t think the prior reference is the right approach - having to code every conversion. Simply put, the implementation is just to cast-from-string if it is legal/possible.\n\nSo the solution is simple reflection looking for public Members of either:\n\nSTRING_CLASS_ARRAY = (new Class[] {String.class});\n\na) Member member = targetClass.getMethod(method.getName(),STRING_CLASS_ARRAY);\nb) Member member = targetClass.getConstructor(STRING_CLASS_ARRAY);\n\nYou will find that all of the primitives (Integer, Long, etc) and all of the basics (BigInteger, BigDecimal, etc) and even java.regex.Pattern are all covered via this approach. I have used this with significant success on production projects where there are a huge amount of arbitrary String value inputs where some more strict checking was needed. In this approach, if there is no method or when the method is invoked an exception is thrown (because it is an illegal value such as a non-numeric input to a BigDecimal or illegal RegEx for a Pattern), that provides the checking specific to the target class inherent logic.\n\nThere are some downsides to this:\n\n1) You need to understand reflection well (this is a little complicated and not for novices).\n2) Some of the Java classes and indeed 3rd-party libraries are (surprise) not coded properly. That is, there are methods that take a single string argument as input and return an instance of the target class but it isn&#39;t what you think... Consider the Integer class:\n\n\n\nThe above method really has nothing to do with Integers as objects wrapping primitives ints.\nReflection will find this as a possible candidate for creating an Integer from a String incorrectly versus the decode, valueof and constructor Members - which are all suitable for most arbitrary String conversions where you really don&#39;t have control over your input data but just want to know if it is possible an Integer.\n\nTo remedy the above, looking for methods that throw Exceptions is a good start because invalid input values that create instances of such objects should throw an Exception. Unfortunately, implementations vary as to whether the Exceptions are declared as checked or not. Integer.valueOf(String) throws a checked NumberFormatException for example, but Pattern.compile() exceptions are not found during reflection lookups. Again, not a failing of this dynamic &quot;cross-casting&quot; approach I think so much as a very non-standard implementation for exception declarations in object creation methods.\n\nIf anyone would like more details on how the above was implemented, let me know but I think this solution is much more flexible/extensible and with less code without losing the good parts of type-safety. Of course it is always best to &quot;know thy data&quot; but as many of us find, we are sometimes only recipients of unmanaged content and have to do the best we can to use it properly.\n\nCheers.\n",
            "excerpt": "This CAN be accomplished in Java as well without losing type-safety <span class=\"highlight\">and</span> the good stuff statically-typed languages provide WITHOUT the nasty side-effects of some of the other languages that do <span class=\"highlight\">evil</span> things &hellip; In this approach, if there is no method or when the method is invoked an exception is thrown (because it is an illegal value such as a non-numeric input to a BigDecimal or illegal <span class=\"highlight\">RegEx</span> for a Pattern), &hellip; ",
            "title": "java: How can I do dynamic casting of a variable from one type to another?"
        },
        {
            "tags": [
                "javascript",
                "replace",
                "character",
                "reserved"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 6348948,
            "is_answered": false,
            "question_id": 6348861,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1308079739,
            "creation_date": 1308079739,
            "body": "first of DON&#39;T USE EVAL it&#39;s the most evil function ever and fully unnecessary here\n\n\n\nworks just as well (or use the  constructor)\n\nand when you want to have a  in the regex and a  before the character you want to escape\n\n\n",
            "excerpt": "first of DON&#39;T USE EVAL it&#39;s the most <span class=\"highlight\">evil</span> function ever <span class=\"highlight\">and</span> fully unnecessary here\n\nvar badwords = /foo|bar|baz/ig;\n\n\nworks just as well (or use the new RegExp(&quot;foo|bar|baz&quot;,&quot;ig&quot;); constructor)\n\n<span class=\"highlight\">and</span> when &hellip; you want to have a / in the <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> a \\ before the character you want to escape\n\nvar badwords = /\\/foo|bar|baz/ig;\n//or\nvar badwords = new RegExp(&quot;\\\\/foo|bar|baz&quot;,&quot;ig&quot;);//double escape to escape the &hellip; ",
            "title": "Javascript replace several character including &#39;/&#39;"
        },
        {
            "tags": [
                "javascript",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 6345216,
            "is_answered": false,
            "question_id": 6345151,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1308062362,
            "creation_date": 1308061974,
            "body": "No regex required:\n\n\n\nActually parsing HTML with regular expressions is evil. Although it might be easy to come up with an expression for your specific case, it might not work well for a different string.\n",
            "excerpt": "No <span class=\"highlight\">regex</span> required:\n\nvar t_ = document.createElement(&#39;div&#39;),\n    a;\nt_.innerHTML = htmlString; // &lt;- string containing your HTML\na = t_.children[0];\n\nvar text = a.textContent || a.innerText; // W3C vs IE &hellip; Actually parsing HTML with regular expressions is <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "How to extract text from Link in Javascript?"
        },
        {
            "tags": [
                "javascript",
                "regex",
                "html-entities"
            ],
            "question_score": 3,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 1,
            "is_answered": true,
            "question_id": 6337459,
            "item_type": "question",
            "score": 3,
            "last_activity_date": 1308008377,
            "creation_date": 1308006618,
            "body": "I&#39;m using regex snippets to parse smileys into images, and encountering problems with the semicolon.  For example, a smiley like ;) turns into a WINK icon, matching against \n\n\n\nand works in most cases.  But text like &quot;) is also matching into &quot;WINK, because the quotation mark is actually an html entity ().\n\nI tried prefixing the regex with a greedy non-capturing match to discard semicolons in entities:\n\n\n\nBut the resulting pattern still matches against the semicolon in  that should be skipped, because it backtracks to satisfy the non-optional latter portion.  I also realized there&#39;d still be problems with other legitimate matches, such as EVIL: .\n\nSo what it appears I really need is the negation of preceding html entities missing a semicolon:\n\n\n\nBut it is still matching and I&#39;m not sure why.\n\nIt would be ideal to still get returned matches that can be replaced wholesale without further inspection, but I&#39;m open to suggestions.  What is not suitable is first parsing out the html entities, because sometimes they&#39;re necessary and/or part of a legitimate smiley (as with EVIL).\n\n\n\nEDIT (some Google food):\n\nI discovered (and Bryan also noted below) that Zero-width positive lookbehind, , would work as desired (not Zero-width negative lookahead ).\n\nAs per regular-expressions.info, the latter &quot;will only succeed if the regex inside the lookahead fails to match&quot; which sounds right, but isn&#39;t when the section is optional anyway.\n\nIn contrast, the former &quot;matches at a position if the pattern inside the lookahead can be matched ending at that position&quot; which isn&#39;t at all clear, but does the trick.  Because the match is using lookbehind, there&#39;s no chance of backtracking to satisfy the latter portion of the regex.\n\nSo a full regex looks like:\n\n\n\nand that matches these:    while failing this:  \nIt does however still match , so more tweaking would be ideal (such as additionally matching semicolons in place of the ampersands, if that doesn&#39;t cause other smileys with entities in them to break).  People typing out html entities in chat isn&#39;t likely to come up much anyway.\n\nEither way would be &quot;good enough&quot;--except that javascript doesn&#39;t support negative lookbehind.  But it&#39;s worth explaining for the sake of other regex implementations.\n",
            "excerpt": "What is not suitable is first parsing out the html entities, because sometimes they&#39;re necessary <span class=\"highlight\">and</span>/or part of a legitimate smiley (as with <span class=\"highlight\">EVIL</span>). &hellip; EDIT (some Google food):\n\nI discovered (<span class=\"highlight\">and</span> Bryan also noted below) that Zero-width positive lookbehind, (?&lt;!<span class=\"highlight\">regex</span>), would work as desired (not Zero-width negative lookahead (?!<span class=\"highlight\">regex</span>)). &hellip; ",
            "title": "Skip preceding html entities in javascript regex"
        },
        {
            "tags": [
                "javascript",
                "if-statement"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 6211401,
            "is_answered": false,
            "question_id": 6211103,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1306997679,
            "creation_date": 1306997679,
            "body": "@Anurag&#39;s answer is great, that&#39;s the best you can do,  is supported by every browser that is around (being buggy in IE 5.5-7 but for getting  it works fine).\n\nI just wanted to add a few things:\n\n\nDon&#39;t use &#39;s string syntax, always pass in a function (you can pass in a closure to run more than one functions), which is considered best practice. The string variation works like , the widely known evil bastard. So your code should look like (same applies to ):\n\n\nOthen than using , which is the best approach, you can also write a regex approach. I only add this for fun and broadening the view, please use @Anurag&#39;s solution.\n\n\n\nThis will try to match in a case-insensitive way, looking for  in the end of the string, having either the beginning of the string or  before it.\n\njsFiddle Demo\n\n",
            "excerpt": "The string variation works like eval(), the widely known <span class=\"highlight\">evil</span> bastard. &hellip; I only add this for fun <span class=\"highlight\">and</span> broadening the view, please use @Anurag&#39;s solution. &hellip; ",
            "title": "Basic Javascript Question"
        },
        {
            "tags": [
                "php",
                "curl"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 6028813,
            "is_answered": false,
            "question_id": 6028705,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1305624318,
            "creation_date": 1305624318,
            "body": "You could grab all the URLs using a regular expression\n\n\n",
            "excerpt": "You could grab all the URLs using a regular expression\n\n// insert general warning about how parsing HTML using <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span> :-)\npreg_match(&#39;/href=&quot;([^&quot;]+)&quot;/&#39;, $html, $matches);\n$urls = array_slice($matches &hellip; , 1);\n\n// Now just loop through the array <span class=\"highlight\">and</span> fetch the URLs with cUrl... &hellip; ",
            "title": "php Curl clicked links"
        },
        {
            "tags": [
                "javascript",
                "html",
                "xpath",
                "hyperlink",
                "selenium"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 5985639,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1305243761,
            "creation_date": 1305242509,
            "body": "I&#39;m using Selenium RC to write test cases for a website that&#39;s at least partially dynamically generated or otherwise dependent on a database. I&#39;d like to be able to tell my Python program making calls to Selenium to do string operations on the target of a specific link, but I can&#39;t be sure what the target (the href=&#39;&#39; field) will be at &quot;compile time&quot; (or, well, whatever the Python equivalent is. Can someone help me out there?).  \n\nNow, I am sure what the xpath of that link is going to be; &quot;//table[@id=&#39;search-results&#39;]/tbody/tr[2]/td[3]/a/img&quot; . And I am running Selenium, which has an eval() function (the root of all evil) that runs arbitrary lines of javascript. Is there any way I can get the target of this link from the xpath and Selenium, or do I have to find some way to download the entire page source (how do I do this? There was supposed to be a Selenium command to download the entire page source, but I got an &quot;element doesn&#39;t exist&quot; error when I tried running it) and then break out regexes to mess with the entire page source?\n",
            "excerpt": "<span class=\"highlight\">And</span> I am running Selenium, which has an eval() function (the root of all <span class=\"highlight\">evil</span>) that runs arbitrary lines of javascript. &hellip; Is there any way I can get the target of this link from the xpath <span class=\"highlight\">and</span> Selenium, or do I have to find some way to download the entire page source (how do I do this? &hellip; ",
            "title": "Is there a way to get a link&#39;s destination in JavaScript from the xpath of the link?"
        },
        {
            "tags": [
                "php",
                "validation",
                "filter",
                "profanity"
            ],
            "question_score": 6,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 5780721,
            "item_type": "question",
            "score": 6,
            "last_activity_date": 1304573985,
            "creation_date": 1303750375,
            "body": "Last year I was working on a Christmas project which allowed customers to send emails to each other with a 256 character free-text field for their Christmas request. The project worked by searching the (very-large) product database for suggest products that matched the text field, but offered a free text option for those customers that could not find the product in question.\n\nOne obvious concern was the opportunity for customers to send rather explicit requests to some unsuspecting customer with the company&#39;s branding sitting around it.\n\nThe project did not go ahead in the end, for various reasons, the profanity aspect being one.\n\nHowever, I&#39;ve come back to thinking about the project and wondering what kinds of validation could be used here. I&#39;m aware of clbuttic which I know is the standard response to any question of this nature.\n\nThe solutions that I considered were:\n\n\nRun it through something like WebPurify\nUse MechanicalTurk\nWrite a regex pattern which looks for the word in the list. A more complicated version of this would consider plurals and past tenses of the word as well.\nWrite an array of suspicious words, and score each one. If the submission goes above a score, the validation fails.\n\n\nSo there are two questions:\n\n\nIf the submission fails, how do you handle it from a UI perspective?\nWhat are the pros and cons of these solutions, or any others that you can suggest?\n\n\nNB - answers like &quot;profanity filters are evil&quot; are irrelevant. In this semi-hypothetical situation, I haven&#39;t decided to implement a profanity filter or been given the choice of whether or not to implement one. I just have to do the best I can with my programming skills (which should be on a LAMP stack if possible).\n",
            "excerpt": "The solutions that I considered were:\n\n\nRun it through something like WebPurify\nUse MechanicalTurk\nWrite a <span class=\"highlight\">regex</span> pattern which looks for the word in the list. &hellip; What are the pros <span class=\"highlight\">and</span> cons of these solutions, or any others that you can suggest?\n\n\nNB - answers like &quot;profanity filters are <span class=\"highlight\">evil</span>&quot; are irrelevant. &hellip; ",
            "title": "Design pattern for blocking undesirable content"
        },
        {
            "tags": [
                "nginx"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 5706046,
            "is_answered": false,
            "question_id": 5409413,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1303144739,
            "creation_date": 1303144739,
            "body": "You want to use try_files to check for the existence of files instead of if statements here (because If&#39;s are Evil in Nginx).\n\nTo to a single directory, it would be like:\n\n\n\nWhat this does is try the uri as a file first. If that doesn&#39;t work, it&#39;ll try as a directory. If neither work, it&#39;ll default to index.php of /xxx/. The extra index line is to keep it from showing a blank page if you go directly to whatever.com/xxx\n\nUsing regex, we can expand this rule to work with more than one directory:\n\n\n\nThis should grab the full directory structure and rout it to the appropriate index.\n\n\nabc.com/yyy/nonexistant.php ==&gt; abc.com/yyy/index.php\nabc.com/yyy/zzz/nonexistant.php ==&gt; abc.com/yyy/zzz/index.php\n\n\nIf you only wanted the second example to go to yyy/index.php, use this regex in the location instead:\n\n\n",
            "excerpt": "You want to use try_files to check for the existence of files instead of if statements here (because If&#39;s are <span class=\"highlight\">Evil</span> in Nginx). &hellip; $uri&amp;$args;\n   index index.php\n}\n\n\nThis should grab the full directory structure <span class=\"highlight\">and</span> rout it to the appropriate index. &hellip; ",
            "title": "rewrite rule nginx"
        },
        {
            "tags": [
                "python",
                "regex"
            ],
            "question_score": -1,
            "is_accepted": false,
            "answer_id": 5683634,
            "is_answered": false,
            "question_id": 5682772,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1302913961,
            "creation_date": 1302913961,
            "body": "Most people are giving you answers often qualified with &quot;Don&#39;t use regex! Regex is evil and comes from Perl! We Python users have trancended mere text manipulation!&quot; but no one is explaining why you&#39;re experiencing this problem.\n\nYour regex is working. It takes any alphabet, whitespace, or hyphen character and turns it into the number . The problem is that it thinks the negative sign in  is &quot;evil text&quot; to turn into a number.\n\nOne way to approach this is to provide an anchor for your regex - Make it match the commas (or beginning/ending of the string) surrounding the text. So it would see  and turn it into  but would see  and know that it&#39;s not text.\n\nAnother approach is to filter based on &quot;does it not contain digits&quot; instead of &quot;does it contain these things I need&quot; - because what if, later, you need to filter out other punctuation marks? Using  would match &quot;things that aren&#39;t digits or commas&quot;, which would turn  into  but keep  the same.\n\nA third approach is to split the string on commas, then test and change each individual segment - probably to see if it contains digits - and then join them back together.\n\nIf you choose the first or second approaches, I leave it up to you to write a regex that either matches a leading comma or the beginning of a string (and a trailing comma or the end of the string - both are similar). It&#39;s not terribly difficult.\n",
            "excerpt": "Most people are giving you answers &lt;snark&gt;often qualified with &quot;Don&#39;t use <span class=\"highlight\">regex</span>! <span class=\"highlight\">Regex</span> is <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> comes from Perl! We Python users have trancended mere text manipulation!&quot; &hellip; Your <span class=\"highlight\">regex</span> is working. It takes any alphabet, whitespace, or hyphen character <span class=\"highlight\">and</span> turns it into the number 1. &hellip; ",
            "title": "Regular Expressions Using Python&#39;s Re"
        },
        {
            "tags": [
                "asp.net",
                "regex"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 5676823,
            "is_answered": false,
            "question_id": 5676533,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1302880244,
            "creation_date": 1302871017,
            "body": "In your previous question, you mentioned you wanted from 0 to 50 characters. If that&#39;s still the case, here&#39;s what you want:\n\n\n\nAs of right now, I think these are the only regexes posted that allow for less than one letter with the first pattern, and less than two letters with the second pattern.\n\nRegexes are not a &quot;bad&quot; thing, they&#39;re just a specialized tool that isn&#39;t suited for every task. If you&#39;re trying to validate input in ASP.NET, I would definitely use a RegularExpressionValidator for this particular pattern, because otherwise you&#39;ll have to waste your time writing a CustomValidator for a pretty meager performance boost. See my answer to this other question for a little guidance on when and when not to use regex. \n\nIn this case, the reason I&#39;d use a regex validator has less to do with the pattern itself and more to do with ASP.NET. A RegularExpressionValidator can just be dragged and dropped into your ASPX code, and all you&#39;d have to write would be 10-21 characters of regex. With a CustomValidator, you&#39;d have to write custom validation functions, both in the codebehind and the JavaScript. You might squeeze a little more performance out of it, but think about when validation comes into play: only once per postback. The performance difference is going to be less than a millisecond. It&#39;s simply not worth your time as a developer -- to you or your employer. Remember: Hardware is cheap, programmers are expensive, and premature optimization is the root of all evil.\n",
            "excerpt": "See my answer to this other question for a little guidance on when <span class=\"highlight\">and</span> when not to use <span class=\"highlight\">regex</span>. &hellip; Remember: Hardware is cheap, programmers are expensive, <span class=\"highlight\">and</span> premature optimization is the root of all <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "What&#39;s the best way to constraint validation to not allow any spaces in ASP.NET"
        },
        {
            "tags": [
                "javascript",
                "jquery",
                "dom"
            ],
            "question_score": 14,
            "is_accepted": false,
            "answer_id": 5550805,
            "is_answered": false,
            "question_id": 5550633,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1302003325,
            "creation_date": 1302001442,
            "body": "\nYou should remove the  elements:\n\n\n\n\n\nSecond attempt:\n\nnode-validator can be used in the browser:\nhttps://github.com/chriso/node-validator\n\n\n\nAlternatively, PHPJS has a strip_tags function (regex/evil based):\nhttp://phpjs.org/functions/strip_tags:535\n",
            "excerpt": "Second attempt:\n\nnode-validator can be used in the browser:\nhttps://github.com/chriso/node-validator\n\nvar str = sanitize(large_input_str).xss();\n\n\nAlternatively, PHPJS has a strip_tags function (<span class=\"highlight\">regex</span> &hellip; /<span class=\"highlight\">evil</span> based):\nhttp://phpjs.org/functions/strip_tags:535 &hellip; ",
            "title": "Append html to jQuery element without running scripts inside the html"
        },
        {
            "tags": [
                "regex",
                "perl"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 5399585,
            "is_answered": false,
            "question_id": 5399457,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1300841038,
            "creation_date": 1300840683,
            "body": "The regex you gave matches a single character after  (which will probably be a newline) and immediately expects to see .  Also, from the looks of it, you&#39;re using &quot;blah&quot; as a wildcard for &quot;anything&quot;?\n\n\n\nNote that a regex is not going to handle nested s properly (this is a simpler version of why you shouldn&#39;t try to parse HTML with a regex).  You can force it to work for this simple case with some evil, but it&#39;s still getting rather too close to the Old Ones for comfort.  Best for that case is to use a real parser.\n\nOr you can eschew reinventing the wheel and use unifdef.\n",
            "excerpt": "The <span class=\"highlight\">regex</span> you gave matches a single character after #ifdef blah (which will probably be a newline) <span class=\"highlight\">and</span> immediately expects to see ^#else. &hellip; HTML with a <span class=\"highlight\">regex</span>). &hellip; ",
            "title": "Perl regex multiline zero or more occurrences"
        },
        {
            "tags": [
                "java",
                "regex",
                "multiline"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 5329330,
            "is_answered": false,
            "question_id": 5329046,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1300297812,
            "creation_date": 1300296898,
            "body": "Parsing HTML or XML with regex is evil and error-prone.\n\nUse an XML parser and things will work much better.\nHere&#39;s a solution for your problem using Dom4J:\n\n\n\n\n\nApart from that you are also making a mistake (see my comments):\n\n\n\nYour regex might or might not work if you read the entire file to a String, but it can&#39;t work if you apply it on individual lines.\n",
            "excerpt": "Parsing HTML or XML with <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span> <span class=\"highlight\">and</span> error-prone.\n\nUse an XML parser <span class=\"highlight\">and</span> things will work much better. &hellip; = null) {\n     n.reset(aLine);\n     // yet you want to replace a multi-line pattern\n     String result = n.replaceAll(&quot;&quot;);\n     out.write(result);\n     out.newLine();\n}\n\n\nYour <span class=\"highlight\">regex</span> might or might not &hellip; ",
            "title": "Java Multi-line regex to replace multiple instances in a file"
        },
        {
            "tags": [
                "algorithm",
                "language-agnostic",
                "reflection",
                "java"
            ],
            "question_score": 11,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 5,
            "is_answered": true,
            "question_id": 5285306,
            "item_type": "question",
            "score": 11,
            "last_activity_date": 1300057254,
            "creation_date": 1299961842,
            "body": "I am aware that by default Java does not have the so-called  (what I pronounce as &quot;evil&quot;) method.  This sounds like a bad thing—knowing you do not have something which so many others do.  But even worse seems being notified that you can&#39;t have it.  \n\nMy question is: What is solid reasoning behind it?  I mean, Google&#39;ing this just returns a massive amount of old data and bogus reasons—even if there is an answer that I&#39;m looking for, I can&#39;t filter it from people who are just throwing generic tag-words around. \n\nI&#39;m not interested in answers that are telling me how to get around that; I can do that myself: \n\nUsing Bean Scripting Framework (BSF)\n\nFile  (in  folder) contents:\n\n\n\nAnd Java code:\n\n\n\nUsing designed bridges like JLink\n\n\n\nThis is equivalent to:\n\n\n\nOther methods\n\n\nUsing Dijkstras shunting-yard algorithm or alike and writing an expression evaluator from scratch. \nUsing complex regex and string manipulations with delegates and HashMultimaps.\nUsing Java Expressions Library\nUsing Java Expression Language\nUsing JRE compliant scripting language like BeanShell.\nUsing the Java Assembler and approach below or direct bytecode manipulation like Javaassist.\nUsing the Java Compiler API and reflections.\nUsing  as root \n\n",
            "excerpt": "I am aware that by default Java does not have the so-called eval (what I pronounce as &quot;<span class=\"highlight\">evil</span>&quot;) method.  This sounds like a bad thing—knowing you do not have something which so many others do. &hellip; Using complex <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> string manipulations with delegates <span class=\"highlight\">and</span> HashMultimaps.\nUsing Java Expressions Library\nUsing Java Expression Language\nUsing JRE compliant scripting language like BeanShell. &hellip; ",
            "title": "Why do people say that Java can&#39;t have an expression evaluator?"
        },
        {
            "tags": [
                "python",
                "elementtree",
                "celementtree"
            ],
            "question_score": 3,
            "is_accepted": true,
            "answer_id": 5162766,
            "is_answered": false,
            "question_id": 5160965,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1299105233,
            "creation_date": 1299032786,
            "body": "&quot;simple string methods&quot; are the root [pun intended] of all evil -- see examples below.\n\nUpdate 2 Code and output now show that proposed regexes also don&#39;t work very well.\n\nUse ElementTree. The function that you are looking for is . Enable &quot;start&quot; events. Bale out on the first iteration.\n\nCode:\n\n\n\nAbove ElementTree-related code works with Python 2.5 to 2.7. Will work with Python 2.2 to 2.4; you just need to get ElementTree and cElementTree from effbot.org and do some conditional importing. Should work with any lxml version.\n\nOutput:\n\n\n\nUpdate 1 The above was demonstration code. Below is more like implementation code... just add exception handling. Tested with Python 2.7 and 2.2.\n\n\n",
            "excerpt": "&quot;simple string methods&quot; are the root [pun intended] of all <span class=\"highlight\">evil</span> -- see examples below.\n\nUpdate 2 Code <span class=\"highlight\">and</span> output now show that proposed regexes also don&#39;t work very well.\n\nUse ElementTree. &hellip; Tested with Python 2.7 <span class=\"highlight\">and</span> 2.2. &hellip; ",
            "title": "How to obtain the root of a tree without parsing the entire file?"
        },
        {
            "tags": [
                "javascript",
                "asp.net",
                "datetime",
                "epoch"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 4928906,
            "is_answered": false,
            "question_id": 4928809,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1297130576,
            "creation_date": 1297130576,
            "body": "You can do it with regex and Date constructor.\n\nNot sure if it better, but it is safer. Eval can be evil sometimes...\n\nSo, you could do something like this:\n\n\n\nYou could also do the regex with replace:\n\n\n",
            "excerpt": "You can do it with <span class=\"highlight\">regex</span> <span class=\"highlight\">and</span> Date constructor.\n\nNot sure if it better, but it is safer. Eval can be <span class=\"highlight\">evil</span> sometimes... &hellip; So, you could do something like this:\n\nvar millisecs = signupDate.match(/\\d+/)[0];\nvar date = new Date(parseInt(millisecs));\n\n\nYou could also do the <span class=\"highlight\">regex</span> with replace:\n\nvar millisecs = signupDate.replace &hellip; ",
            "title": "Invoking javascript time &quot;object&quot;"
        },
        {
            "tags": [
                "java",
                "optimization",
                "if-statement"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 4830992,
            "is_answered": false,
            "question_id": 4830592,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1296234458,
            "creation_date": 1296234458,
            "body": "Interesting question. Like many people here, micro optimization causes more evil than good. But without throwing any design patten at you or idea for optimization, this is what  I would do.\n\nI will create am Enum for all operations. I will also create a member function in this enum that takes a var args parameter and a operation enum and iteratively apply the enum operation on the arguements.\n\nI will also create an String utility class (for input processing), that Iterates thro all the operation enum values and performs a regular expression check on input string to identify the operation specified by a given string ( regex because I want to make sure of Postfix notation).  Once it identifies the operation, then it delegates to the enum&#39;s member function to perform the operation.\n",
            "excerpt": "Like many people here, micro optimization causes more <span class=\"highlight\">evil</span> than good. But without throwing any design patten at you or idea for optimization, this is what  I would do. &hellip; by a given string ( <span class=\"highlight\">regex</span> because I want to make sure of Postfix notation). &hellip; ",
            "title": "Is an if-else tree the best way to go in the following case?"
        },
        {
            "tags": [
                "python",
                "html",
                "regex",
                "search",
                "variables"
            ],
            "question_score": 1,
            "is_accepted": false,
            "answer_id": 4581788,
            "is_answered": false,
            "question_id": 4581620,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1294095390,
            "creation_date": 1294023284,
            "body": "Parsing html by regex is nasty, error-prone, and generally evil.\n\n\n\nreturns something like\n\n\n\nNow we are dealing with plain strings and should use regex,\n\n\n\nresults in\n\n\n",
            "excerpt": "Parsing html by <span class=\"highlight\">regex</span> is nasty, error-prone, <span class=\"highlight\">and</span> generally <span class=\"highlight\">evil</span>. &hellip; should use <span class=\"highlight\">regex</span>,\n\nimport re\n\ndef getPrice(s):\n    res =  re.search(r&#39;\\d+\\. &hellip; ",
            "title": "Get parts of html code as a new string in python"
        },
        {
            "tags": [
                "php",
                "html",
                "regex",
                "string"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 4488636,
            "is_answered": false,
            "question_id": 4488573,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1292840018,
            "creation_date": 1292840018,
            "body": "This is one case where I have to agree with the dreaded regex are evil meme. For straightforward extraction purposes, regular expressions are often suitable. But if you want to process malformed and or nested HTML, it&#39;s not an option without significant fuss.\n\nHence I&#39;d recommend using phpQuery or QueryPath for such occasions. It&#39;s also pretty simple:\n\n\n",
            "excerpt": "This is one case where I have to agree with the dreaded <span class=\"highlight\">regex</span> are <span class=\"highlight\">evil</span> meme. For straightforward extraction purposes, regular expressions are often suitable. &hellip; But if you want to process malformed <span class=\"highlight\">and</span> or nested HTML, it&#39;s not an option without significant fuss.\n\nHence I&#39;d recommend using phpQuery or QueryPath for such occasions. &hellip; ",
            "title": "Regex match HTML wrapped around HTML"
        },
        {
            "tags": [
                "javascript",
                "asp.net",
                "validation"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 4445662,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1292381566,
            "creation_date": 1292372938,
            "body": "I&#39;m looking for a way to use custom ASP.NET validators to validate input, without using UpdatePanels, and without a full postback.\n\nThe validators do several things - not just length/regex, but some other non-standard stuff as well.\n\nJavascript is required for our users, so I don&#39;t have to worry about normal users who have javascript turned off.\n\nI see several options, but none are ideal:\n\n1) Suck it up and use UpdatePanels. I&#39;m in the &quot;UpdatePanels are evil&quot; group, so I&#39;d prefer not to do this.\n\n2) Without using validation controls, manually validate the fields by passing the values to a PageMethod static method, via jQuery or any other AJAX framework. This would require client and server coding each time I needed to use a validator.\n\n3) Use jQuery (or any other javascript framework) validation for client validation, then if they somehow get by that, have server-code validation controls for full postback. This would require all of the validation rules to be written in javascript as well as C#. I don&#39;t care about the full failed postback at this point, because the javascript validation would catch real users who weren&#39;t trying to screw me over.\n\nIs there alternative out there for using real CustomValidator controls, with partial postback, C# code only, for validating input without UpdatePanels and without a lot of redundant javascript?\n\nThanks\n",
            "excerpt": "The validators do several things - not just length/<span class=\"highlight\">regex</span>, but some other non-standard stuff as well. &hellip; I see several options, but none are ideal:\n\n1) Suck it up <span class=\"highlight\">and</span> use UpdatePanels. &hellip; ",
            "title": "ASP.NET validation using AJAX without update panels"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 4444489,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1292364068,
            "creation_date": 1292362605,
            "body": "I am trying to analyze a piece of text via JavaScript and, reading up, have learned that parsing HTML with Regex is quite evil. I&#39;d like to remove a more sinister part of my text before I analyze it.\n\nIf I&#39;ve got a chunk of text like the item below, how might I (1) slice everything from  to  and (2) store that text in a new var?\n\n\n",
            "excerpt": "I am trying to analyze a piece of text via JavaScript <span class=\"highlight\">and</span>, reading up, have learned that parsing HTML with <span class=\"highlight\">Regex</span> is quite <span class=\"highlight\">evil</span>. &hellip; If I&#39;ve got a chunk of text like the item below, how might I (1) slice everything from [caption] to [/caption] <span class=\"highlight\">and</span> (2) store that text in a new var? &hellip; ",
            "title": "How can I remove a chunk of text from a Javascript string?"
        },
        {
            "tags": [
                "c#",
                "regex",
                "linq"
            ],
            "question_score": 3,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 4329097,
            "item_type": "question",
            "score": 3,
            "last_activity_date": 1291237986,
            "creation_date": 1291237282,
            "body": "I&#39;m looking for the most elegant way to parse this. I&#39;m just hitting a wall when it comes to my regex knowledge and maybe a regex is not even the best answer?\nI have three example sentences to give an example of what I want to do. I want to to parse these into four parts. Attacker, attack-type, damage and target.\n\nGandalfs&#39;s heavenly wrath DISMEMBERS you!\nThe Holy Prelate&#39;s slash wounds Frodo.\nYour divine power decimates the evil Warlock!\n\nAttacker:\nOne or several words that are always first and the words can be identified by either being &quot;Your&quot; or end in &#39;s.\nAttack-type: One or several words that can only be identified by that they are between the &quot;attacker&quot; and the &quot;damage&quot;.\nDamage: One or more (rare but exists) words that are unique and limited. I have a list with possible words. {&quot;wounds&quot;, &quot;decimates&quot; etc}. They do not exists anywhere else so no risk that the attacker is named &quot;wounds&quot; or something like that.\nTarget: One or several words that can be identified that they are all the words after the damage.\n",
            "excerpt": "I&#39;m just hitting a wall when it comes to my <span class=\"highlight\">regex</span> knowledge <span class=\"highlight\">and</span> maybe a <span class=\"highlight\">regex</span> is not even the best answer?\nI have three example sentences to give an example of what I want to do. &hellip; Attacker, attack-type, damage <span class=\"highlight\">and</span> target.\n\nGandalfs&#39;s heavenly wrath DISMEMBERS you!\nThe Holy Prelate&#39;s slash wounds Frodo.\nYour divine power decimates the <span class=\"highlight\">evil</span> Warlock! &hellip; ",
            "title": "How do I parse a log from a game with regex and/or linq?"
        },
        {
            "tags": [
                "regex",
                "pattern-matching"
            ],
            "question_score": 5,
            "is_accepted": false,
            "answer_id": 4219645,
            "is_answered": false,
            "question_id": 4218552,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1290126758,
            "creation_date": 1290114861,
            "body": "\n  Is there a regex to match a string of increasing contiguous numbers, e.g. 123, 56789, etc?\n\n\nBut of course there is, since the answer to all questions beginning, “Is there a (Perl) regex to match…?” is always “Why, certainly there is!” The operative question is always, “What is the Perl regex to match…?”   ☺\n\nShort Answer\n\nThat Perl regular expression is this one:\n\n\n\nIf works by having two different  conditional groups, with recursion on group 1 as the THEN clause of the second of those. That’s what  does. \n\nNifty, eh?  \n\nRecursive patterns like these are awesomely cool and incredibly powerful; it’s up to you to use this power in the service of good, not evil.   ☺\n\nI use a lightly less clever form of it in the program given below. I’ll leave the other one there where it started just so you can see that in Perl  There’s More Than One Way To Do It.  \n\nFull Demo Program\n\nNotice that this works no matter what the string of Unicode digits, including non-ASCII (welcome to the Brave New Millennium) and even way up in the Astral Plane where languages stuck on UCS-2, or sometimes even UTF-16, cannot even think about.\n\nThis output:\n\n\n\nIs produced by this program:\n\n\n\nPS: Some say that the reason that There’s More Than One Way To Do It in Perl is to make up for all those other  languages in which there  are no ways to do it — which is often most of them.   ☻\n",
            "excerpt": "Is there a <span class=\"highlight\">regex</span> to match a string of increasing contiguous numbers, e.g. 123, 56789, etc? &hellip; Recursive patterns like these are awesomely cool <span class=\"highlight\">and</span> incredibly powerful; it’s up to you to use this power in the service of good, not <span class=\"highlight\">evil</span>. &hellip; ",
            "title": "Regular expression to match 12345"
        },
        {
            "tags": [
                "jquery",
                "mysql",
                "django",
                "json",
                "filter"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 4196050,
            "is_answered": false,
            "question_id": 4195268,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1289922866,
            "creation_date": 1289922866,
            "body": "Even though users can&#39;t execute any obvious evil queries (deleting or getting secret data), you may have to worry about someone hitting your database often with complex queries (think multiple joins and some regexes or other selects on non-indexed columns) and these can take a long time to answer.\n\nIt also depends on the size of your database how many complex queries it can handle at one time, but this might make your site slower.\n",
            "excerpt": "Even though users can&#39;t execute any obvious <span class=\"highlight\">evil</span> queries (deleting or getting secret data), you may have to worry about someone hitting your database often with complex queries (think multiple joins <span class=\"highlight\">and</span> &hellip; some regexes or other selects on non-indexed columns) <span class=\"highlight\">and</span> these can take a long time to answer. &hellip; ",
            "title": "Escape dangerous code when allowing user MySQL filter creation"
        },
        {
            "tags": [
                "python",
                "regex"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 3908889,
            "is_answered": false,
            "question_id": 3908727,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1286821323,
            "creation_date": 1286821323,
            "body": "Since I think regex is evil...\n\n\n\n...I advocate simply parsing the filename.\n",
            "excerpt": "Since I think <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span>...\n\ndef return_extension(filename):\n    &#39;&#39;&#39;(This functions assumes that filenames such as `.foo` have extension\n    `foo`.)\n    &#39;&#39;&#39;\n    tokens = filename.split(&#39;.&#39;) &hellip; ",
            "title": "python regex question"
        },
        {
            "tags": [
                "php",
                "parsing",
                "dom"
            ],
            "question_score": 1,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 2,
            "is_answered": true,
            "question_id": 3808746,
            "item_type": "question",
            "score": 1,
            "last_activity_date": 1285632827,
            "creation_date": 1285631743,
            "body": "\n  Possible Duplicate:\n  Dynamically replace the “src” attributes of all &lt;img&gt; tags  \n\n\n\n\nFunny story: I posted this very question a short time ago, but instead of getting something I could, you know, use, all I got was a lot of dogma about the evils of using regex to parse HTML. So here goes again.\n\nI have some HTML and want to replace the &quot;src&quot; attributes of all the img tags so that they point to copies of the identical images (although with different file names) on another host.\n\nFor instance, given these three tags\n\n\n\nI would like them replaced with\n\n\n\nI am trying to use PHP Simple HTML DOM Parser, but I&#39;m not getting it. \n\n\n\nWhat do I do next?\n",
            "excerpt": "attributes of all &lt;img&gt; tags  \n\n\n\n\nFunny story: I posted this very question a short time ago, but instead of getting something I could, you know, use, all I got was a lot of dogma about the evils of using <span class=\"highlight\">regex</span> &hellip; I have some HTML <span class=\"highlight\">and</span> want to replace the &quot;src&quot; attributes of all the img tags so that they point to copies of the identical images (although with different file names) on another host. &hellip; ",
            "title": "Dynamically replace the “src” attributes of all &lt;img&gt; tags (redux)"
        },
        {
            "tags": [
                "php"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 3747677,
            "is_answered": false,
            "question_id": 3747633,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1284966728,
            "creation_date": 1284934178,
            "body": "Looks simple. When you detect a motive like a number inside curly brackets it should be replaced by the square of the number. If no replacement where done you are finished. If some replacement where done you do it again (because what was just replaced may be now inside curly brackets) and so on.\n\nThe first part (replacement) can be done using regex, the second part can be done either recursively either or iteratively.\n\nBelow some code snippet that should help you understand the details (not the full answer, but not far). The goal of the exercice seems to be to help you understand  parameters.\n\n\n\nAs others proposed full solutions, here his mine:\n\n\n\nIf your are preoccupied with compatibility issues (because hardened php installation may forbid use of /e) just use  instead of  like below (use anonymous function available as of PHP 5.2.3, for older php version, you can use ).\n\n\n\nFor curious readers, as someone else suggested a python version, below is a possible perl equivalent:\n\n\n\nThere security mechanisms in Perl to avoid injections because of evil user inputs different than blindly rejecting all evals. For those interested you can have a look here.\n\nAnd two other shorter python versions, recursive:\n\n\n\nand non recursive\n\n\n",
            "excerpt": "The first part (replacement) can be done using <span class=\"highlight\">regex</span>, the second part can be done either recursively either or iteratively. &hellip; \\n&quot; ;\n} \n\n\nThere security mechanisms in Perl to avoid injections because of <span class=\"highlight\">evil</span> user inputs different than blindly rejecting all evals. For those interested you can have a look here. &hellip; ",
            "title": "Recursive Function"
        },
        {
            "tags": [
                "php",
                "regex"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 3601456,
            "is_answered": false,
            "question_id": 3601374,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1283180508,
            "creation_date": 1283179757,
            "body": "Well, it&#39;s because the function was already defined in a prior function call (That&#39;s the danger in declaring a function inside of another function).  There are a few options.\n\nConditionally declaring the function\n\n\n\nDeclaring an anonymous function:\n\nPHP 5.3+ :\n\n\n\nPHP 5.2+ :\n\n\n\nUsing a class:\n\n\n\nAlso, I&#39;d suggest not using the  modifier for the regex (it&#39;s just not necessary, and it&#39;s basically just , which is typically seen as evil).  You should instead just use :\n\nAssuming  is a valid callback:\n\n\n",
            "excerpt": "(it&#39;s just not necessary, <span class=\"highlight\">and</span> it&#39;s basically just eval, which is typically seen as <span class=\"highlight\">evil</span>). &hellip; Do stuff here\n}\n$string = preg_replace_callback($<span class=\"highlight\">regex</span>, $callback, $string); &hellip; ",
            "title": "PHP : Function in preg_replace says that the function was already declared"
        },
        {
            "tags": [
                "javascript",
                "xss"
            ],
            "question_score": 10,
            "is_accepted": false,
            "answer_id": 3571109,
            "is_answered": false,
            "question_id": 3571080,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1282780117,
            "creation_date": 1282780117,
            "body": "Instead of checking for evil things like script includes, I would go for regex-based whitelisting of the few commands you expect to be used.  Then involve a human to authorize and add new acceptable commands to the whitelist.\n",
            "excerpt": "Instead of checking for <span class=\"highlight\">evil</span> things like script includes, I would go for <span class=\"highlight\">regex</span>-based whitelisting of the few commands you expect to be used. &hellip; Then involve a human to authorize <span class=\"highlight\">and</span> add new acceptable commands to the whitelist. &hellip; ",
            "title": "Is it possible to sanitize Javascript code?"
        },
        {
            "tags": [
                ".net",
                "xml",
                "datacontractserializer"
            ],
            "question_score": 0,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 1,
            "is_answered": false,
            "question_id": 1469395,
            "item_type": "question",
            "score": 0,
            "last_activity_date": 1282030081,
            "creation_date": 1253756150,
            "body": "I&#39;m working on getting some objects serialized through an mvc site and returning things via xml, json, etc and I&#39;m looking for the best way to not send the empty elements.\n\nIn a perfect world, simply attaching EmitDefaultValue:=False to DataMembers in a DataContract would suffice, but in some situations, it just doesn&#39;t fly.\n\nA String default is Nothing, but I don&#39;t want to serialize them if they are Nothing or String.Empty. Same goes for lists and collections. I don&#39;t want them to serialize if they&#39;re Nothing or if they&#39;re empty with a count of 0.\n\nThere seems to be a few not so pretty options.\n\n\nCustom  that buffers itself and drops empty elements\nBefore an object is serialized, cycle through the prop, setting Empty to Nothing, Count-0 to Nothing\nXSLT that drops empty elements\nRegex the output string on the way out\n\n\nAll of these seem some what evil, 1 being the least evil but the leave trivial to do. Is there some other tricks out there?\n",
            "excerpt": "Custom XmlTextWriter that buffers itself <span class=\"highlight\">and</span> drops empty elements\nBefore an object is serialized, cycle through the prop, setting Empty to Nothing, Count-0 to Nothing\nXSLT that drops empty elements\n<span class=\"highlight\">Regex</span> &hellip; the output string on the way out\n\n\nAll of these seem some what <span class=\"highlight\">evil</span>, 1 being the least <span class=\"highlight\">evil</span> but the leave trivial to do. &hellip; ",
            "title": "DataContractSerializer, EmitDefaultValue and empty tags"
        },
        {
            "tags": [
                "java",
                "regex",
                "string",
                "pattern-matching"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 3355051,
            "is_answered": false,
            "question_id": 3354796,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1280334241,
            "creation_date": 1280334241,
            "body": "You are being wilfully evil by trying to parse HTML with Regexes. Don&#39;t.\n\nThat said, you are being extra evil by trying to do everything in one regexp. There is no need for that; it makes your code regex-engine-dependent, unreadable, and quite possibly slow. Instead, simply match tags and then check your first-stage hits again with the trivial regex . Of course, that character string might occur elsewhere in an HTML tag, but see (1)... you have alrady thrown good practice out of the window, so why not at least make things un-obfuscated so everyone can see what you&#39;re doing?\n",
            "excerpt": "There is no need for that; it makes your code <span class=\"highlight\">regex</span>-engine-dependent, unreadable, <span class=\"highlight\">and</span> quite possibly slow. &hellip; Instead, simply match tags <span class=\"highlight\">and</span> then check your first-stage hits again with the trivial <span class=\"highlight\">regex</span> /target=/. &hellip; ",
            "title": "Regex exclusion behavior"
        },
        {
            "tags": [
                "php",
                "html",
                "eval",
                "custom-tags"
            ],
            "question_score": 5,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 3,
            "is_answered": true,
            "question_id": 3326446,
            "item_type": "question",
            "score": 5,
            "last_activity_date": 1280000702,
            "creation_date": 1279998197,
            "body": "Overview\n\nAround the end of 2009, I wrote a simple templating system for PHP/HTML to be used in-house by our designers for brochure-ware type websites. The goal of the system is to allow templating in otherwise pure HTML via custom tags that are processed by PHP. For example, a templated page might look like this:\n\n\n\nThe template itself might look something like this:\n\n\n\nBesides the Page and Content/Container tags, there are a few other tags included in the core for stuff like flow control, iterating over a collection, outputting dynamic values, etc. The framework is designed so it&#39;s very easy to add your own set of tags registered under another prefix and namespace.\n\nCustom Tags to PHP\n\nHow do we parse these custom tags? Since the&#39;re no guarantee that the HTML file is well-formed XML, solutions like XSLT/XPATH won&#39;t be reliable. Instead, we use a regex to look for tags with registered prefixes, and replace those with PHP code. The PHP code is a stack-based design... upon encountering an opening tag, an object representing the tag is created pushed onto the stack, and its &quot;initialization function&quot; (if any) runs. Whenever a registered closing tag is encountered, the most recent object is popped off the stack, and its &quot;rendering function&quot; runs.\n\nSo, after the framework replaces the templating tags with PHP, our example page might look something like this (in realty it&#39;s a bit uglier):\n\n\n\nThe good, the bad, and \n\nNow, how to execute our newly-generated PHP code? I can think of a few options here. The easiest is to simply  the string, and that works well enough. However, any programmer will tell you &quot;eval is evil, don&#39;t use it...&quot; so the question is, is there anything more appropriate than  that we can use here? \n\nI&#39;ve considered using a temporary or cached file, using  output streams, etc, but as far as I can see these don&#39;t offer any real advantage over . Caching could speed things up, but in practice all the sites we have on this thing are already blazingly fast, so I see no need to make speed optimizations at this point.\n\nQuestions\n\nFor each of the things on this list: is it a good idea? Can you think of a better alternative?\n\n\nthe whole idea in general (custom tags for html / php)\nconverting tags to php code instead of processing directly\nthe stack-based approach \nthe use of  (or similar)\n\n\nThanks for reading and TIA for any advice. :)\n",
            "excerpt": "Instead, we use a <span class=\"highlight\">regex</span> to look for tags with registered prefixes, <span class=\"highlight\">and</span> replace those with PHP code. &hellip; However, any programmer will tell you &quot;eval is <span class=\"highlight\">evil</span>, don&#39;t use it...&quot; so the question is, is there anything more appropriate than eval that we can use here? &hellip; ",
            "title": "PHP - templating with custom tags - is this a legit use of eval?"
        },
        {
            "tags": [
                "php",
                "string",
                "if-statement"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 3192041,
            "is_answered": false,
            "question_id": 3191911,
            "item_type": "answer",
            "score": -1,
            "last_activity_date": 1278478931,
            "creation_date": 1278478931,
            "body": "OK, you could use evil Eval. But if your condition is actually as simple as you propose, you could just use a regex to test the condition... No eval necessary.\n",
            "excerpt": "OK, you could use <span class=\"highlight\">evil</span> Eval. But if your condition is actually as simple as you propose, you could just use a <span class=\"highlight\">regex</span> to test the condition... No eval necessary. &hellip; ",
            "title": "PHP - if condition inside string"
        },
        {
            "tags": [
                "php",
                "preg-replace"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 3079882,
            "is_answered": false,
            "question_id": 3079874,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1277049669,
            "creation_date": 1277049669,
            "body": "Escape the slash in the second expression (). If your query becomes more complex, you might have to use a capturing group as well (parentheses).\n\nOh and parsing html with regex is evil. In before the XHTML Regex bandwagon storms this post. :)\n",
            "excerpt": "Oh <span class=\"highlight\">and</span> parsing html with <span class=\"highlight\">regex</span> is <span class=\"highlight\">evil</span>. In before the XHTML <span class=\"highlight\">Regex</span> bandwagon storms this post. :) &hellip; ",
            "title": "Php preg_replace"
        },
        {
            "tags": [
                "c#",
                "regex",
                "email",
                "multipart"
            ],
            "question_score": 2,
            "is_accepted": false,
            "has_accepted_answer": true,
            "answer_count": 4,
            "is_answered": true,
            "question_id": 3072288,
            "item_type": "question",
            "score": 2,
            "last_activity_date": 1276888788,
            "creation_date": 1276886615,
            "body": "Before you guys go telling me that Regex is the epitome of all evil... I already know. If I had more hair it would be ripped out already.\n\nSo onto the question. I have made a parser using regex that strips out the desired parts of an html email. Why on earth would I want to do that? Because I&#39;m still a beginner programmer ok, if you can suggest a better way then by all means... do. The parser works perfectly on normal html parts of an email, however if someone sends me and email with just one attachment (or more)...\n\nALL HELL BREAKS LOOSE!\n\nInstead of getting what a normal html email looks like, I get the plain text version with the html version concatenated onto the end like so:\n\n\n\nSo my question is... How can I separate the html version from the text version using regex (or by easier means)?\n",
            "excerpt": "Before you guys go telling me that <span class=\"highlight\">Regex</span> is the epitome of all <span class=\"highlight\">evil</span>... I already know. If I had more hair it would be ripped out already.\n\nSo onto the question. &hellip; Search=2C chat <span class=\"highlight\">and</span> e-mail from your inbox=\n..\nhttp://www.windowslive.com/campaign/thenewbusy? &hellip; ",
            "title": "Using regex to separate a multipart email"
        },
        {
            "tags": [
                "php",
                "html",
                "arrays"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 2930663,
            "is_answered": false,
            "question_id": 2930532,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1275063799,
            "creation_date": 1275063288,
            "body": "eval() is evil(). And there are some faster options to avoid it in this case.\n\nIf you just want to convert the syntax, then I have a regex:  \n\n\n\nIf your input string not only contains the path, but also an value (attach a dummy value if you must), then you can just use parse_str() to extract the array names into a real PHP array:\n\n\n\nTell something more about your input data.\n\n\n\nOkay, just figured out what you mean. You want to submerge in the $_POST array. Then use step-wise references like so:\n\n\n",
            "excerpt": "eval() is <span class=\"highlight\">evil</span>(). <span class=\"highlight\">And</span> there are some faster options to avoid it in this case. &hellip; If you just want to convert the syntax, then I have a <span class=\"highlight\">regex</span>:  \n\n  $name = &#39;$&#39; . preg_replace(&quot;/\\[([^\\]]+)\\]/&quot;, &#39;[&quot;$1&quot;]&#39;, $path);\n\n\nIf your input string not only contains the path, but also an value (attach &hellip; ",
            "title": "get the array with html array path"
        },
        {
            "tags": [
                "security",
                "clojure",
                "keyword"
            ],
            "question_score": 8,
            "is_accepted": true,
            "answer_id": 2883569,
            "is_answered": false,
            "question_id": 2869371,
            "item_type": "answer",
            "score": 7,
            "last_activity_date": 1274457067,
            "creation_date": 1274457067,
            "body": "Per http://clojure.org/reader, there are rules for which characters are valid in symbols and keywords.  (For now, alphanumeric characters and , , , , , and .)  You should never create a symbol containing any other characters.  However, right now, these rules are completely unenforced by the compiler.\n\nAt best you could end up with invalid keywords.  At worst you could end up with evil/dangerous ones, as \nMichał Marczyk said.  Keep in mind that  can be used to run arbitrary code at read-time, so you don&#39;t even have to evaluate a string for bad things to happen, you only have to read it.\n\n\n\n(See  for how to disable this behavior, but read-eval is enabled by default.)\n\nI think general rules for sanitizing user input apply here.  Define precisely what you want to allow, and disallow everything else by default.  Maybe allow something like the regex , with possibly other alphanumerics depending on the language you speak.\n",
            "excerpt": "At worst you could end up with <span class=\"highlight\">evil</span>/dangerous ones, as \nMichał Marczyk said. &hellip; Define precisely what you want to allow, <span class=\"highlight\">and</span> disallow everything else by default.  Maybe allow something like the <span class=\"highlight\">regex</span> #&quot;[a-zA-Z0-9*+!-_?] &hellip; ",
            "title": "Security implications of Clojure keyword creation from user data?"
        },
        {
            "tags": [
                "javascript",
                "html",
                "xhtml",
                "custom-attribute"
            ],
            "question_score": 261,
            "is_accepted": false,
            "answer_id": 2819608,
            "is_answered": false,
            "question_id": 992115,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1273673799,
            "creation_date": 1273673799,
            "body": "We&#39;ve made a web-based editor that understands a subset of HTML - a very strict subset (that understood nearly universally by mail clients).  We need to express things like  in the database, but we can&#39;t have that in the DOM, otherwise the browser where the editor runs, freaks out (or is more likely to freak out than it is likely to freak out over custom attributes).  We wanted drag-and-drop, so putting it purely in the DOM was out, as was jquery&#39;s  (the extra data didn&#39;t get copied properly).  We probably also needed the extra data to come along for the ride in .  In the end we settled on using  during the editing process, and then when we POST it all, we remove  and do a regex search-and-destroy .\n\nAt first the guy writing most of this was the validation-nazi on this issue and tried everything to avoid our custom attribute, but in the end acquiesced when nothing else seemed to work for ALL our requirements.  It helped when he realized that the custom attribute would never appear in an email We did consider encoding our extra data in , but decided that would be the greater of two evils.\n\nPersonally, I prefer to have things clean and passing validators etc., but as a company employee I have to remember that my primary responsibility is advancing the company&#39;s cause (making as much money as quickly as possible), not that of my egotistical desire for technical purity.  Tools should work for us; not us for them.\n",
            "excerpt": "We wanted drag-<span class=\"highlight\">and</span>-drop, so putting it purely in the DOM was out, as was jquery&#39;s .data() (the extra data didn&#39;t get copied properly). &hellip; In the end we settled on using &lt;td width=&quot;1234&quot; rs-width=&quot;@INSWIDTH_42@&quot;&gt; during the editing process, <span class=\"highlight\">and</span> then when we POST it all, we remove width <span class=\"highlight\">and</span> do a <span class=\"highlight\">regex</span> search-<span class=\"highlight\">and</span>-destroy s/rs-width=/width=/ &hellip; ",
            "title": "Custom attributes - Yea or nay?"
        },
        {
            "tags": [
                "regex",
                "perl",
                "security"
            ],
            "question_score": 12,
            "is_accepted": false,
            "has_accepted_answer": false,
            "answer_count": 5,
            "is_answered": true,
            "question_id": 242118,
            "item_type": "question",
            "score": 12,
            "last_activity_date": 1273651677,
            "creation_date": 1225163047,
            "body": "Assuming a Perl script that allows users to specify several text filter expressions in a config file, is there a safe way to let them enter regular expressions as well, without the possibility of unintended side effects or code execution? Without actually parsing the regexes and checking them for problematic constructs, that is. There won&#39;t be any substitution, only matching.\n\nAs an aside, is there a way to test if the specified regex is valid before actually using it? I&#39;d like to issue warnings if something like  was entered.\n\nThanks, Z.\n\n\nEDIT:\nThanks for the very interesting answers. I&#39;ve since found out that the following dangerous constructs will only be evaluated in regexes if the  pragma is used:\n\n\n\nThe default is ; so unless I&#39;m missing something, it should be safe to read regular expressions from a file, with the only check being the eval/catch posted by Axeman. At least I haven&#39;t been able to hide anything evil in them in my tests.\n\nThanks again. Z.\n",
            "excerpt": "Without actually parsing the regexes <span class=\"highlight\">and</span> checking them for problematic constructs, that is. There won&#39;t be any substitution, only matching. &hellip; At least I haven&#39;t been able to hide anything <span class=\"highlight\">evil</span> in them in my tests.\n\nThanks again. Z. &hellip; ",
            "title": "Is it safe to read regular expressions from a file?"
        },
        {
            "tags": [
                "java"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 2685040,
            "is_answered": false,
            "question_id": 2684517,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1271870062,
            "creation_date": 1271870062,
            "body": "Asides from the regex suggestion (which is a good one), it would seem to make more sense to deal with arrays of characters rather than single-char Strings.\n\nIn particular, the  call (shudder) could/should be replaced by .  This lets you iterate over each individual character, which more clearly indicates your intent, is less prone to bugs as you know you&#39;re treating each character at once, and is more efficient*.  Likewise your valid character sets should also be characters.\n\nYour logic is pretty strangely expressed; you&#39;re not even referencing the specialChars set at all, and the looping logic once you&#39;ve found a match seems odd.  I think this is your bug; the matching seems to be the wrong way round in that if the character matches the first valid char, you set flag to  and continue round the current loop; so it will definitely not match the next valid char and hence you break out of the loop with a  flag.  Always.\n\nI would have thought something like this would be more intuitive:\n\n\n\nThis doesn&#39;t take sequences into account (e.g. the strings &quot;--------**  &quot; and &quot;1&quot; would be valid because all individual characters are valid) but then neither does your original code.  A regex is better because it lets you specify the pattern, I supply the above snippet as an example of a clearer way of iterating through the characters.\n\n*Yes, premature optimization is the root of all evil, but when better, cleaner code also happens to be faster that&#39;s an extra win for free.\n",
            "excerpt": "Asides from the <span class=\"highlight\">regex</span> suggestion (which is a good one), it would seem to make more sense to deal with arrays of characters rather than single-char Strings. &hellip; *Yes, premature optimization is the root of all <span class=\"highlight\">evil</span>, but when better, cleaner code also happens to be faster that&#39;s an extra win for free. &hellip; ",
            "title": "How to validate phone number(US format) in Java?"
        },
        {
            "tags": [
                "javascript"
            ],
            "question_score": 1,
            "is_accepted": true,
            "answer_id": 2444576,
            "is_answered": false,
            "question_id": 2444565,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1269332442,
            "creation_date": 1268616360,
            "body": "You could use some regex parsing to check that there&#39;s nothing evil in the string, then just .\n\nWith just simple arithmetic operations, a safe regex would be:\n\n\n\nNote this won&#39;t validate that the expression is balanced in terms of operands and operators (i.e. it would okay &quot;+2*&quot;), but it will stop any weird code injections.\n",
            "excerpt": "You could use some <span class=\"highlight\">regex</span> parsing to check that there&#39;s nothing <span class=\"highlight\">evil</span> in the string, then just eval. &hellip; With just simple arithmetic operations, a safe <span class=\"highlight\">regex</span> would be:\n\ns.match(/^[-*/+0-9]+$/)\n\n\nNote this won&#39;t validate that the expression is balanced in terms of operands <span class=\"highlight\">and</span> operators (i.e. it would okay &hellip; ",
            "title": "Can I get an arithmetic expression as a string computed with the JavaScript Math object?"
        },
        {
            "tags": [
                "c#",
                "asterisk",
                "telephony"
            ],
            "question_score": 4,
            "is_accepted": false,
            "answer_id": 2380275,
            "is_answered": false,
            "question_id": 2375885,
            "item_type": "answer",
            "score": 0,
            "last_activity_date": 1267715193,
            "creation_date": 1267715193,
            "body": "I do have an idea but you will probably not like the answer :)\n\nWe tried to do this and failed so we did something evil :)\n\nWhat we did were to write agi scripts and them call them using the Manager interface and then scrape the command line.\n\nStuff like core show channels concise etc, its ikky but it works.. we used regex to parse the string output and then grabbed the info from there, the only issue with doing stuff like that is that you have to watch every time you patch as the output from the command line tends to change patch to patch.\n\nIf you do discover a way doing this using the c# api and not using agi i&#39;d be very interested but we just couldn&#39;t do what we wanted with the api without resorting to agi scripts in the end.\n",
            "excerpt": "I do have an idea but you will probably not like the answer :)\n\nWe tried to do this <span class=\"highlight\">and</span> failed so we did something <span class=\"highlight\">evil</span> :)\n\nWhat we did were to write agi scripts <span class=\"highlight\">and</span> them call them using the Manager interface &hellip; Stuff like core show channels concise etc, its ikky but it works.. we used <span class=\"highlight\">regex</span> to parse the string output <span class=\"highlight\">and</span> then grabbed the info from there, the only issue with doing stuff like that is that you have &hellip; ",
            "title": "Detect incoming call with Asterisk and who the call is going to"
        },
        {
            "tags": [
                "php",
                "javascript"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 2146181,
            "is_answered": false,
            "question_id": 2145847,
            "item_type": "answer",
            "score": 2,
            "last_activity_date": 1264589458,
            "creation_date": 1264589458,
            "body": "Bit of a mine-field as MS word counts are considered wrong and unreliable by profesionals who depend on word counts -- journalists, translators, and, lawers who are often involved in legal procedures where motions and submisions must be less than a specific number fo words.\n\nHaving said that this article-\nhttp://dotnetperls.com/word-count\n\ndescribes a pretty good regex algorithm implemented in C# -- but should be faily easy to transalate into php.\n\nI think his small inaccuracies are based on two factors -- MS Word misses out words not conatined in &quot;regular paragraphs&quot; so footnotes, text box and table wrapped words may or may not be counted. Also I think the EVIL smart quotes feature messing with hypens may affect the results. So it may be worth changing all the &#39;el-dash&#39; and &#39;em-dash&#39; characters back to the normal minus sign.    \n",
            "excerpt": "Having said that this article-\nhttp://dotnetperls.com/word-count\n\ndescribes a pretty good <span class=\"highlight\">regex</span> algorithm implemented in C# -- but should be faily easy to transalate into php. &hellip; Also I think the <span class=\"highlight\">EVIL</span> smart quotes feature messing with hypens may affect the results. So it may be worth changing all the &#39;el-dash&#39; <span class=\"highlight\">and</span> &#39;em-dash&#39; characters back to the normal minus sign. &hellip; ",
            "title": "Count words like Microsoft Word does"
        },
        {
            "tags": [
                "python",
                "python-exec"
            ],
            "question_score": 46,
            "is_accepted": false,
            "answer_id": 1933723,
            "is_answered": false,
            "question_id": 1933451,
            "item_type": "answer",
            "score": 17,
            "last_activity_date": 1261246830,
            "creation_date": 1261246830,
            "body": "When you need exec and eval, yeah, you really do need them.\n\nBut, the majority of the in-the-wild usage of these functions (and the similar constructs in other scripting languages) is totally inappropriate and could be replaced with other simpler constructs that are faster, more secure and have fewer bugs.\n\nYou can, with proper escaping and filtering, use exec and eval safely. But the kind of coder who goes straight for exec/eval to solve a problem (because they don&#39;t understand the other facilities the language makes available) isn&#39;t the kind of coder that&#39;s going to be able to get that processing right; it&#39;s going to be someone who doesn&#39;t understand string processing and just blindly concatenates substrings, resulting in fragile insecure code.\n\nIt&#39;s the Lure Of Strings. Throwing string segments around looks easy and fools na&#239;ve coders into thinking they understand what they&#39;re doing. But experience shows the results are almost always wrong in some corner (or not-so-corner) case, often with potential security implications. This is why we say eval is evil. This is why we say regex-for-HTML is evil. This is why we push SQL parameterisation. Yes, you can get all these things right with manual string processing... but unless you already understand why we say those things, chances are you won&#39;t.\n",
            "excerpt": "You can, with proper escaping <span class=\"highlight\">and</span> filtering, use exec <span class=\"highlight\">and</span> eval safely. &hellip; This is why we say eval is <span class=\"highlight\">evil</span>. This is why we say <span class=\"highlight\">regex</span>-for-HTML is <span class=\"highlight\">evil</span>. This is why we push SQL parameterisation. &hellip; ",
            "title": "Why should exec() and eval() be avoided?"
        },
        {
            "tags": [
                "c#",
                "string"
            ],
            "question_score": 2,
            "is_accepted": false,
            "answer_id": 1564322,
            "is_answered": false,
            "question_id": 1564296,
            "item_type": "answer",
            "score": 5,
            "last_activity_date": 1255498139,
            "creation_date": 1255496739,
            "body": "Since you give an xml example, just use an xml parser:\n\n\n\n\n\nxml is not a simple text format, and  isn&#39;t really a very good fit; using an appropriate tool will protect you from a range of evils... for example, the following is identical as xml:\n\n\n\nIt also means that when the requirement changes, you have a simple tweak to make to the code, rather than trying to unpick a regex and put it back together again (which can be tricky if you are access a non-trivial node). Equally, xpath might be an option; so in your data the xpath:\n\n\n\nis all you need.\n\nIf you haven&#39;t got .NET 3.5:\n\n\n",
            "excerpt": "Since you give an xml example, just use an xml parser:\n\n\n\nstring s = (string) XElement.Parse(xml).Attribute(&quot;content&quot;);\n\n\nxml is not a simple text format, <span class=\"highlight\">and</span> <span class=\"highlight\">Regex</span> isn&#39;t really a very good fit; using &hellip; <span class=\"highlight\">and</span> put it back together again (which can be tricky if you are access a non-trivial node). &hellip; ",
            "title": "Using String methods instead of Regex"
        },
        {
            "tags": [
                "jquery",
                "events",
                "focus",
                "blur",
                "setting"
            ],
            "question_score": 3,
            "is_accepted": false,
            "answer_id": 1560340,
            "is_answered": false,
            "question_id": 1560251,
            "item_type": "answer",
            "score": 6,
            "last_activity_date": 1255441248,
            "creation_date": 1255441248,
            "body": "Using regular expressions in Javascript to prevent SQL injection is the mother of all (or at least most) evil.  DO NOT DO THIS!!!  Instead, use parameters in your server side code.  If you don&#39;t know how, ask us.  If you try to prevent SQL Injection the way you&#39;re doing it it will not work and you are liable to lose data, or worse.  All your enemy needs to do is disable Javascript (or craft his own HTTP request) and your filter will be useless.  In addition, I don&#39;t think it&#39;s possible to fully block SQL injection with a single regex.\n\n\n\nTo answer the question, try writing  or  in the handler.  However, it won&#39;t work perfectly; it is not possible to fully control focus like this in Javascript.\n",
            "excerpt": "Using regular expressions in Javascript to prevent SQL injection is the mother of all (or at least most) <span class=\"highlight\">evil</span>.  DO NOT DO THIS!!!  Instead, use parameters in your server side code. &hellip; All your enemy needs to do is disable Javascript (or craft his own HTTP request) <span class=\"highlight\">and</span> your filter will be useless. &hellip; ",
            "title": "Stopping the jQuery blur event within the blur function"
        },
        {
            "tags": [
                "linq-to-sql"
            ],
            "question_score": 0,
            "is_accepted": false,
            "answer_id": 1418013,
            "is_answered": false,
            "question_id": 1417961,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1252856135,
            "creation_date": 1252856135,
            "body": "This is probably a problem with your data architecture.  This is why we keep the data clean in the tables all of the time -- so you don&#39;t have to do evil things like this.\n\nYou have a couple of options here:\n\n\nClean up your actual data and add protections on the data layer to keep your phone numbers pure.\nCreate a view or computed column in your data which cleans up the phone number on the data layer, then map to that clean phone number and query off of that column instead.\nCall ToList() on a subset of your rows before running your regex-based query and then use Linq to Objects to run the regex against those rows.  This may be prohibitive if you can&#39;t narrow down your rows enough before using Linq to Objects.\n\n",
            "excerpt": "This is why we keep the data clean in the tables all of the time -- so you don&#39;t have to do <span class=\"highlight\">evil</span> things like this. &hellip; Call ToList() on a subset of your rows before running your <span class=\"highlight\">regex</span>-based query <span class=\"highlight\">and</span> then use Linq to Objects to run the <span class=\"highlight\">regex</span> against those rows. &hellip; ",
            "title": "LINQ Dynamic WHERE but Clean Special Chars first"
        },
        {
            "tags": [
                "java",
                "regex",
                "string",
                "rawstring"
            ],
            "question_score": 92,
            "is_accepted": false,
            "answer_id": 1257633,
            "is_answered": false,
            "question_id": 1256667,
            "item_type": "answer",
            "score": 1,
            "last_activity_date": 1249943980,
            "creation_date": 1249943980,
            "body": "I personally consider regex strings data and not code, so I don&#39;t like them in my code--but I realize that&#39;s impractical and unpopular (Yes, I realize it, you don&#39;t have to yell at me).\n\nGiven that there is no native way to do this, I can come up with two possibilities (well, three but the third is, umm, unnatural).\n\nSo my personal preference would be to just parse a file into strings.  You could name each entry in the file and load them all into a hash table for easy access from your code.\n\nSecond choice, create a file that will be pre-processed into a java interface; it could escape the regex as it does so.  Personally I hate code generation, but if the java file is 100% never human edited, it&#39;s not too bad (the real evil is generated files that you are expected to edit!)\n\nThird (tricky and probably a bad idea): You might be able to create a custom doclet that will extract strings from your comments into a text file or a header file at compile time, then use one of the other two methods above.  This keeps your strings in the same file in which they are being used.  This could be really hard to do correctly, and the penalties of failure are extreme, so I wouldn&#39;t even consider it unless I had an overwhelming need and some pretty impressive talent.\n\nI only suggest this because comments are free-form and things within a &quot;pre&quot; tag are pretty safe from formatters and other system uglies.  The doclet could extract this before printing the javadocs, and could even add some of the generated javadocs indicating your use of regex strings.\n\nBefore downvoting and telling me this is a stupid idea--I KNOW, I just thought I&#39;d suggest it because it&#39;s interesting, but my preference as I stated above is a simple text file...\n",
            "excerpt": "I personally consider <span class=\"highlight\">regex</span> strings data <span class=\"highlight\">and</span> not code, so I don&#39;t like them in my code--but I realize that&#39;s impractical <span class=\"highlight\">and</span> unpopular (Yes, I realize it, you don&#39;t have to yell at me). &hellip; The doclet could extract this before printing the javadocs, <span class=\"highlight\">and</span> could even add some of the generated javadocs indicating your use of <span class=\"highlight\">regex</span> strings. &hellip; ",
            "title": "Raw Strings in Java - for regex in particular. Multiline strings"
        },
        {
            "tags": [
                "database",
                "linq-to-sql",
                "validation"
            ],
            "question_score": 2,
            "is_accepted": true,
            "answer_id": 1093668,
            "is_answered": false,
            "question_id": 1093595,
            "item_type": "answer",
            "score": 3,
            "last_activity_date": 1246987755,
            "creation_date": 1246987755,
            "body": "IMHO, validation is best done at multiple levels. I do not see a problem with performing a different type of validation in the UI layer, Business logic layer and lastly the Database itself.\n\nIn my mind, the ideal scenario would be one where the UI layer validates user submitted data for possible malicious input, illegal values, Regex pattern matches and required fields. The second layer would validate the type of data and whether it meshes together to form concrete updatable objects that can be propagated to the data store. The database would impose basic constraints such as the one you mentioned for all operations.\n\nAlso, the level of validation required would decrease with each level... starting from rigorous in the UI layer to basic in the database layer.\n\nI believe in one rule - &quot;All input is evil until proven otherwise.&quot; \n",
            "excerpt": "In my mind, the ideal scenario would be one where the UI layer validates user submitted data for possible malicious input, illegal values, <span class=\"highlight\">Regex</span> pattern matches <span class=\"highlight\">and</span> required fields. &hellip; I believe in one rule - &quot;All input is <span class=\"highlight\">evil</span> until proven otherwise.&quot; &hellip; ",
            "title": "Validation: do it in the class, or in the database?"
        },
        {
            "tags": [
                "parsing",
                "legacy-code"
            ],
            "question_score": 0,
            "is_accepted": true,
            "answer_id": 473076,
            "is_answered": false,
            "question_id": 473027,
            "item_type": "answer",
            "score": 4,
            "last_activity_date": 1232727850,
            "creation_date": 1232720962,
            "body": "I would select from information_schema.tables and save the results to file to build a table list and then use a bat file or command line regex tool to use the table list as a source for comparisons against the files in the source code directory. You could output what files had a hit, and what table names were hit (what line the hit was on if you&#39;re interested). I&#39;m not a grep whiz, but I think that would be the right sort of tool to use. \n\nEDIT\nDepending on how the data access was handled, you might want to expand the search list to include stored procs from information_schema.routines\n\nEdit 2 Approach using finstr, a cursor, and maybe the dark side\n\nPlease note that while the below should work, if pointed at the wrong directory, it could cause havoc. Also, it will only work if the source code is accessible from the server and xp_cmdshell is enabled. Maybe the whole idea is evil, I don&#39;t know.\n\n\n",
            "excerpt": "I would select from information_schema.tables <span class=\"highlight\">and</span> save the results to file to build a table list <span class=\"highlight\">and</span> then use a bat file or command line <span class=\"highlight\">regex</span> tool to use the table list as a source for comparisons against &hellip; Also, it will only work if the source code is accessible from the server <span class=\"highlight\">and</span> xp_cmdshell is enabled. Maybe the whole idea is <span class=\"highlight\">evil</span>, I don&#39;t know. &hellip; ",
            "title": "Search a codebase for references to table names"
        }
    ]
}