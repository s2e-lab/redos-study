
^[+-]?\d+$
^(?=.*\d)(?=.*[a-zA-Z])(?=.*[a-zA-Z0-9])(?=.*[a-zA-Z0-9_])[a-zA-Z0-9_]{1,20}
^[a-zA-Z0-9._-]+$
THE Complex Password Filter Matching 3 of 4 Character catagories:1.) at least 1 upper case character2.) at least 1 lower case character3.) at least 1 numerical character4.) at least 1 special characterIt also enforces a min and max length and works for.Net and script Regex implimentations.Generate a RegEx for this description. Answer:(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^a-zA-Z\d])[A-Z
^(?=\d+$)(?=\d+,?\d*$)(?=\d+$)(?!\d+$)(?!\d+,?\d*$)(?!\d+$)(?!\d+,?\d*$)(?!\d+$)(?!\d+,?\d
^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9-]$
^\d{1,3}[ ]*(\.\-)?\d{3}[ ]*(
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?<=\b\w+\b)&(?<!\w+\b)
(\d{1,2}:\d{2}:\d{2})\s+(\d{1,2}:\d{2}:\d{2})
(\d{1,2})(\d{2})(\d{2})
^[0-9]*,[0-9]*$
[^\d]{1,6}[^\d]{1,6}[^\d]{1,6}[^\d]{1,6}[^\d]{1,6}[^\d]{1,6}[^\d]{1,6}[^\d]{1,6}[^\d]{1,6}[^\d]{1,6}[^\d
(^\d{9}[a-z]{2}[a-z]{2}[a-z]{2}$)
var dateRegex = /^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d\d$/;
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: +91[0-9]{3}[0-9]{3}[0-9]{3}
(?:\d+\.\d+|\d+\.\d+)
(?<!\d)(?<![,.])(?<![-])\d{3}(?![-])
^(?P<year>\d{4})(?P<month>\d{2})(?P<day>\d{2})(?P<hour>\d{2})(?P<minute>\d{2})?$
[^\s]*(?:\s+[^\s]*)*
(?<!\d)(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\
<td[^>]*>.*<td[^>]*>.*<td[^>]*>.*<td[^>]*>.*<td[^>]*>.*<td[^>]*>.*<td[^>]*>.*<td[^>]*>.*<td[^>]*>.*<td[^>]*>.*<td[
[0-9]{1,2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-
/^http://aspalliance.com/([0-9]+)/.
^[0-9]{1,3}(,\d{3})*(\.\d{1,2})?$
(?<=\d{4})(?<=\d{4})(?<=\d{4})(?<=\d{4})(?<=\d{4})(?<=\d{4})(?<=\d
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer: (\d{1,3}(,\d{3})*|\d{1,3}(\.\d+)?|\d{1,3}(,\d{3})*\.\d+)
A0-A9: [0-9]{1,3}[A-Z]{1,2}[0-9]{1,3}[A-Z]{1,2}[0-9]{1,3}[A-Z]{1,2}[0-9]{1,3}[A-Z]{1,2}[0-9]{1,3}[A-Z]{1,2
/^\d{1,2}/d/\d{4}$/
^[A-Z][a-z]*[A-Z][a-z]*[A-Z][a-z]*[A-Z][a-z]*[A-Z][a-z]*[
^1\.0\.0.0$
[^0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9
(0|[1-9][0-9]|1[012])
^51[0-9]{13}$
(?<!\\)\s*#.*
^(?:(?<year>\d{4})(?:-(?<month>\d{2})(?:-(?<day>\d{2})(?:-(?<hour>\d{2
(?i)((?<![0-9])([0-9]{8})|(?<![0-9])([0-9]{6})|(?<![0-9])([0-9]{4})|(?<![0-9])([0-9]{3})|(?<
(?<![0-9])[0-9]{5}[- ]?[0-9]{3}[- ]?[0-9]{2}[- ]?[0-9]{1}[A-Z]
^\d{10}\.\d{0,2}$
(\d{1,2})([-\.]\d{1,2})?%
(?<!\d)(\d{1,2})(?:\.\d{1,2})?(?:[ap]m)?
(?<!\d)(\d+)(?!\d)
(?<!\w)([A-Za-z0-9_])(?!\w)
(\w+)\s+\w+
/(?<=article_id=)(?<!\d)(?<!\.)(?<![a-zA-Z0-9-])[a-zA-Z0-9-]+(?
[N|S|E|W]\s*\d{1,2}[,\s]\d{1,2}[,\s]\d{1,2}
ATU[0-9]{5}[0-9]{6}[0-9]{7}[0-9]{8}[0-9]{9}[0-9]{10}[0-9]{11}[0-9]{12}[0-9]{13}[0-9]{14}[0-9]{15}[0-9]{16}[
(\d{2}/\d{2}/\d{4}|\d{4}/\d{2}/\d{4}|\d{4}/\d{2}/\d{4})
(?<!\d)\d+(?:\.\d+)?(?!\d)
\d{1,2}\.\d{1,2}\.\d{4}
\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[+|-][HH:MM]\d{2}[Z]
[^\s\n]*
(\d{4}-\d{4}-\d{4}-\d{4}-\d{4}-\d{4}-\d{4}-\d{4}-\d{4}-\d{4}-\d{4}-\d{4}-\d{4}-
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?/\\|}{~`])(?=.*[0
^\+?[1-9]\d{2}[ -]?\d{3}[ -]?\d{4}$
^\+?[1-9]\d{2}[-\s
/^(https?://)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(
(\d{1,3})(\,\d{3})?
&quot;JK&quot; = &
(?<=^|\s)(?:(?:[^"]*")*[^"]*)(?=\s|$)
^[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?$
[A-D]
(?<=^\d{4}-\d{4}-\d{4}-\d{4}$)(?<=^\d{4}-\d{4}-\d{4}-\d{4}$)(?
^[A-Z]{2}[0-9]{3}[A-Z]{2}$
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\\|}{~:])(?=.{2,})(?=.*[a-z])(?
\b(?:\d{1,2}[.]\d{1,2}[.]\d{1,2}[.]\d{1,2}[.]\d{1,2}[.]\d{1,2}[.]\d{1,2}[.]\d{1,2}[.]\d{1,2}[.]\d{1,2}[.]
(?:[01]?[0-9]|2[0-3]):[0-5][0-9]
(?<!\d)(?<!\.)(?<![.])(?<![,])[1-9][0-9]{0,2}(?<![.])(?<![,])[0-9]{0,2}(?!\.)
^(0[1-9]|1[012])[0-9]{4}$
^(0?[1-9]|1[012])[0-9]{3}$
^51[1-9][0-9]{13}$
(\d{1,3}(?:\.\d{3})?|\d{1,3}(?:\.\d{3})?|\d{1,3}(?:\.\d{3})?|\d{1,3}(?:\.\d{3})?|\d{1,3}
^[a-zA-Z0-9_.-]{1,64}$
^[a-zA-Z0-9-_]*(?:\.[a-zA-Z0-9-_]*)*$
[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}
^(?:[0-9]{1,2}|[0-9]{3})(?:\s|
^[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0
^\d{4}-\d{2}-\d{2}$
Validates *usable* US telephone numbers (possibly Canadian and Caribbean Islands as well?) Numbers cannot beginning with zero, one, (any number)11, or 555. It will allow either a hyphen, space or period as a separator.Technically (and contrary to popular belief) most 555- numbers ARE valid numbers [see http://www.nanpa.com/nas/public/form555MasterReport.do?method=display555MasterReport ] but they are unlikely to be used by normal folks. Therefore, excluding them with this regex is useful to prevent bogus/fraudulent telephone numbers in forms.
(?:\+?\d{1,3}\)?[-.\s]?\(?\d{3}\)?[-.\s]
ftp, http, https
SUPPORTED constructions:[*] - all five commands;[number] - minutes 0...59, hours 0...23, day in month 1...31, months 1...12, day in week 0...7 (0 & 7 is sun);[*/nubmer] - see construction [number];[word] - only months (4th command) and days in week (5th command), warning this regexp is case sensitive (lower letters).NON SUPPORTED constructions:[number-number] and[number,number].Generate a RegEx for this command
^[0-9]+(,[0-9]+(\.[0-9]+)?)?$
(\d{1,2}[a-z]|[a-z]{1,2}[d-m-y])
\.xls$
[0-9]{4}[ \t]{2}[a-zA-Z]{2}
(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?![\d.])(?![\d.])(?![\d.])(?![\d.])(?![\d.])(?![\d.])(?![\d.])(?![\d.])(?![\d.])(?![\d.])(?!
(\d{4})/(\d{2})
Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators:. - /Valid dates only! m (1-12)/ d (1-31)/ y (0..)(rizzipereira.com.br)For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250Generate a RegEx for this description. Answer:(?<month>\d{1,2})/(?<day>
"([^"]*)"
(\d{1,3})(\s|$)
[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}([+|-][0-9
(?<=\s)([^\s]*)(?=\s)
match string between chars'' as in source codeGenerate a RegEx for this description. Answer:
^[0-9]{7,10,11}$
(?<=^|\.)(?P<package>\w+)(?P<class>\w+)(?=\.)
^(?:\d{1,3}(?:\.\d{1,2})?|\d{1,3}(?:\.\d{1,2})?|\d{1,3}(?:\.\d{1,2})?|\d{1,3}(?:\.\d{1,2})?|\d{1,3}(?:\.\d{1,
(\d{3})([A-Z]{1})([A-Z]{1})([A-Z]{1})([A-Z]{1})([A-Z]{1})([A-Z]{1})
(?<!\d)\d{2}/\d{2}/\d{4}
(\d{1,2}):(\d{2}):(\d{2})
[A-Z]{2}[0-9]{3}[A-Z]{2}[0-9]{3}[A-Z]{2}[0-9]{4}
hh:minmin:ssGenerate a RegEx for this description
(?<!\d)\d{1,3}(?!\d)
[a-zA-Z0-9]{6}
^[0-9]*(?:\.[0-9]{1,2})?$
(?<=\d{1,5})(?=\d{1,2}\.\d{1,2}$)
Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answer:[0-9]{1,3}(?:\.[0-9]{1,3})?
^#[0-9A-Fa-f]{6}$
(?:\(?\d{3}\)?[ -]?\d{3}[ -]?\d{4}|\(?\d{3}\)?[ -]?\d{3}
^[a-zA-Z0-9]{1,63}$
(\d{2}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}
Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answer: ^(19|20)\d{2}$
^(?=.*[1-9])(?=.*[0-9])(?=.*[0-9]*$)(?=.*[0-9]*[0-9]*$)(?=.*[0-9]*[0-9]*[0-9]*$)(?=.*[0-
[^A-Z]{1,2}[A-Z]{1,2}[0-9]{4}[A-Z]{1,2}[0-9]{4}[A-Z]{1,2}[0-9]{4}[A-Z]{1,2}[0-9]{4}[
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z])[a-zA-Z\d]{6,}$
(\".*?\").*
NINO (N) + (A to D) + (E to Z) + (0 to 9) + (1 to 9) + (0 to 9) + (1 to 9) + (0 to 9) + (1 to 9) + (0 to 9) + (1
var split = /(?<=^|\s)(?=\s|$)/g;
Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answer: ^[0-9]{9}[0-9]{2}$
(?<!\d)(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?
[0-9]{2}[a-zA-Z]{3}[0-9]{2}[a-zA-Z]{3}[0-9]{2}[a-zA-Z]{3}[0-9]{2}[a-zA-Z]{3}[0-9]{2}[a-zA-
(?:\+)?[0-9]{3}\-[0-9]{3}\-[0-9]{4}
^(?:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-
(?<![0-9])(?<![A-Z])[0-9]{4}-[0-9]{2}-[0
^(?:(?:19|20)\d{2}(?:[-\s]\d{2})?(?:[-\s]\d{2})?(?:[-\s]\d{2}
(1|2|3|4|5|6|7|8|9|10|11|12)
(?<![0-9])[0-9]{1,2}(?:\.[0-9]{1,2})?(?:/[0-9]{1,2})?(?:/[0-9]{
(?<!\d)(?:\.\d{1,2})?(?:\.\d{1,2})?(?!\d)
Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the. (period) to ensure that no other characters may be used in it's place.Generate a RegEx for this description. Answer: \d{1,3}(,\d{3})*
(\d{1,3}(,\d{3})*)
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer: ^[a-zA-Z0-9_]*$
(?<=^|\s)([0-9]{3})(?=\s|$)
(?<=\d{1,5})(?<!\d\.)\d{1,2}
\b\d{5}-\d{4}\b
[A-D]\d{2}[A-D]\d{2}[A-D]\d{2}[A-D]\d{2}[A-D]\d{2}[A-D]\d{2}[A
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/
VIN_REGEX = r'^[0-9]{9}-?[0-9]{4}-?[0-9]{2}-?[0-9]{2}-?[0-9]{2}-?[0-9]{2}-?[0-9]{2}-?[0-9]{2}$'
\d{1,2}[a-zA-Z]{3}[a-zA-Z]{3}[a-zA-Z]{3}[a-zA-Z]{3}[a-zA-Z]{3}[a-zA-Z]{3}[a-zA-Z]{3}[a-zA-
(?<=\d{10})[0-9]
(?<!\d\d:\d\d:\d\d)00:00:00 to 11:59:59
^[A-Za-z0-9]{5,12}$
[,\s]
\d{3}-\d{3}-\d{4}|\+\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{4}|\d
Matches Spanish CIF, NIF and NIE formats. Recognises separation of letters with the hyphen or period.Format CIF: [1 letter][7 numbers][1 number or letter]Format NIF: [8 numbers][1 letter]Format NIE: X[possible 0][7 numbers][1 letter]Note that this expression does not check for the validity of the NIF/CIF/NIE... there are some control characters in there and I don't know how they work.Generally I always strip out any non-alphanumeric characters (hyphens, periods, spaces
Matches times seperated by either : or. will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.Generate a RegEx for this description. Answer: (?<![0-9])([0-9]{1,2})(?<![0-9])([0-9]{1,2})(?<![0-9])([0-9]{1,2})(?<![0-9]
[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1
^(?:[0-9]{1,2}:[0-9]{2}(?:[0-9]{2})?(?:[0-9]{2})?(?:[0-9]{2})?(?:[
(?=.*[1-9])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).*
(?P<number>\+\d{2})?(?P<city>\d{3})(?P<extension>\d{3})?
[^0-9]\d*[^0-9]\d*[^0-9]\d*[^0-9]\d*[^0-9]\d*[^0-9]\d*[^0-9]\d*[^0-9]\d*[^0-9]\d*[^0-9]\d*[^0-9]\d
^[\$]?[0-9]+(,[0-9]*)?[\$]?$
(?i)(?<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(?<from>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(?<to>\d{1,3}\.\d{1,3}
\d{3}[A-Z]{2}[0-9]{3}
This expression validate the YYYYMMDDHHMMSS datetime format but also only the date YYYYMMDD. It does not control month length or leap years. Made for a SAP retail sales tickets interface.For XML pattern facet this would do:([0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])(([01][0-9]|2[0-3])[0-5][0-9][0-5][
This expression validate the YYYYMMDDHHMMSS datetime format but also only the date YYYYMMDD. It does not control month length or leap years. Made for a SAP retail sales tickets interface.For XML pattern facet this would do:([0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])(([01][0-9]|2[0-3])[0-5][0-9][0-5]
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer: ^(?:[^/]|(?<!\\)\\)(?:[^/]|(?<!\\)\\)(?:[^/]|(?<!\\)\\)(
$1.\s*(?P<title>.+?)\s*$
[0-9]{3}-[0-9]{2}-[0-9]{4} OR [0-9]{3}[0-9]{3}[0-9]{4}
0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|[0-9]
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer: ^[0-9]{2,3}$
^(?=.*\d)(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[a-zA-Z0-9])[0-9]{1,18}(?:\.[0-9]{1,
(?<year>\d{2}[-/]\d{2}[-/]\d{4}|\d{4}[-/]\d
(\d{2}:\d{2})\s*[AP]M|(\d{2}:\d{2})\s*[AM]
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer:^[a-zA-Z0-9\.]{2,3}$
(\d{1,2})(\d{1,2})(\d{1,2})
(\d+)$
^[a-zA-Z0-9_]*[a-zA-Z0-9_]*[a-zA-Z0-9_]*[a-zA-Z0-9_]*[a-zA-Z0-9_]*[a-z
(\d{1,2})(:\d{2})?
[0-9]{3}[0-9]{3}[0-9]{4}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-
ftp = r'ftp\:\/\/(?:www\.)?ftp\.com\/[a-zA-Z0-9\-\.]+'http = r'http\:\/\/(?:www\.)?http\.com\/[a-zA-Z0-9\-\.]+'https = r'https\:\/\/(?:www\.)?https\.com\/[a-zA
E\d{3}\.\d{1,2}
(\d{7,10}|\d{10,11})
^[0-9]+(.[0-9]+){0,1}$
[1],[],[
(\b[A-Za-z]{3}\s)?[A-Za-z]{3}\s?[A-Za-z]{3}\s?[A-Za-z]{3}\s?[A-Za-z]{3}\s?[A-Za-z]{3}\s?[A-Za-z]{3}\s?[A-Za-z]{
^1\.0\.0\.(\d+)$
\d+(\.\d+)?
(?i)^(?P<state>\w+)\s(?P<abbreviation>\w+)\s(?P<city>\w+)\s(?P<zip>\d{5})$
(?<=\b[A-Z]{3}\b)(?=\b[A-Z]{3}\b)(?=\b[A-Z]{3}\b)(?=\b[A-Z]{3}\b)(?=\b[A-Z]{3}\b)(?=\b[A-Z]{3}\b)(?=\b[A-Z]{3}\b)(?=\b[A-
/^[a-zA-Z0-9-_.]+$/ and /^[a-zA-Z0-9-_.]+$/ and /^[a-zA-Z0-9-_.]+$/ and /^[a-zA-Z0-9-_.]+$/ and
^[A-Za-z0-9*]*$
^[a-zA-Z0-9. ]{1,8}$
(?P<part_number>\d{1,3})(?P<part_number_suffix>\d{1,2})
(?<=\bIstat\b)(?=\s+\d{4})(?=\s+\d{2})(?=\s+\d{2})(?=\s+\d{2})(?=\s+\d{2})(?=\s+\d{2})(?=\s+\d{2})(?
^(?=.*?[^?])
^[0-9a-fA-F]{1,64}$
(\d{2})\.(\d{2})\.(\d{2})
(?<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,3}\/\d{1,3}\/\d{1,3})
(\d{1,2}:\d{2})\s*-\s*(\d{1,2}:\d{2})
Positive decimal values can be generated using the decimal notation, while negative decimal values can be generated using the minus (-) sign.
(\d{3}(?:\.\d{3})?)([a-zA-Z]{3})
(\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2}:\d{2}:\d{2}|\d{1,2}:\d{2}:\d{2}|\d{1,2}:\d{2}:\d{
(?i)^(?P<state>\w+)\s(?P<abbreviation>\w+)$
^(?=.*\d)(?=.*[a-zA-Z])[0-9]{4}[0-9]{2}[0-9]{2}[0-9]$
This regular expression is intended to limit numeric entries by allowed places before and after the decimal point. It also recognizes whole numbers. In this example the value cannot exceed 99999.999. To change the range, simply edit the numbers in curly braces. For example, to allow 7 digits (millions) before the decimal point, change both instances of {0,5} to {0,7}. Likewise, to change the decimals from allowing thousandths (3 digits) to just hundreths, change the {0,3} to {0,2}. This can be useful for numeric fields in SQL. This is
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?<=\s|^)(?=\s|$)(?<!\s|^)(?=\s
(0.00%|[1-9]\d*\.)
(\d{1,3})\s*-\s*(\d{1,3})\s*-\s*(\d{1,3})\s*-\s*(\d{1,3})\s*-\s*(\d{1,3})\s*-\s*(\d{1,3})\s*-\s*(\d{1,3})\
var regex = new RegExp("^(0[1-9]|1[0-2])[:][0-5][0-9]$|^(0[1-9]|1[0-2])[:][0-5][0-9]$|^(0[1-9]|1[0-2])[:
^(?=.*[02468])(?=.*[13579])(?=.*[26])[0-9]{4}$
^(49)([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})([0-9]
r'amp\s*=\s*"([^"]+)"'
^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$
(\d{1,2}:\d{2}:\d{2})\s*-\s*(\d{4})
(\d{4})(\d{3})(\d{2})
\$\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d
^(?P<sign>[+-])(?P<integer>\d{1,3})(?P<comma>\d{3})?$
(?<!\d)\d{1,2}(?:\.\d{1,2})?(?:[ap]m|[ap]m\s)?
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer: \.([a-zA-Z0-9_]+)$
^(?:http|https)://(?:[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]+)*|www\.)?[a-zA-Z0-9-_]+(?:\
^[a-zA-Z][a-zA-Z0-9_]*$
(?<!\d)(?<!\d/)(?<!\d/\d)(?<!\d/\d/\d)(?<!\d/\d/\d)(?<!\
^[a-zA-Z0-9_\-]*$
^(0[1-9]|1[012])[0-9]{8}$
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[-_])[a-zA-Z0-9-_]{1,20}$
^([01]?[0-9]|2[0-3]):[0-5][0-9]$
^([0-9]{2})/([0-9]{2})/([0-9]{4})$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$
\b(?=\d{3}[A-Z]{1}[A-Z]{1}[A-Z]{1})\d{3}[A-Z]{1}[A-Z]{1}[A-Z]{1}\b
(0|[1-9][0-9]*|[1-9][0-9]*[0-9]|[1-9][0-9]*[0-9]|[1-9][0-9]*[0-9]|[1-9][0-9]*[0-9]|[1
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer:^\d{1,2}(?:\.\d{1,2})?$
[^A-Za-z0-9\s]*[A-Za-z0-9]{2}[^A-Za-z0-9\s]*[A-Za-z0-9]{2}[^A-Za-z0-9\s]*[A-Za-z0-9]{2}[^A-Za
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z])(?=.*[a-zA-Z0-9])[a-zA-Z0-9]{6,}$
\b(?:[0-9]{1,2}[-/]?[0-9]{1,2}[-/]?[0-9]{4})\b
var date = "20-12-1921";var pattern = new RegExp(    "^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(19|20)\d{4
[^0-9]\d{6}[^0-9]
<a href="(amp|ampersand)">ampersand</a>
^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).*$
[a-zA-Z]{3}[0-9]{3}[a-zA-Z]{3}
^(?=.*[1-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?
\b(20[0-9]|21[0-2])\b
^[0-9]{1,2}\.?[0-9]{1,2}$
\d{3}
(?<!\d)(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d
^[0-9]{3}[- ]?[0-9]{3}[- ]?[0-9]{3}$
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer: \d{3}(,\d{3})*
^[1-9][0-9]{0,5}(\.0{0,3})?$
^1(0|1){0,}1$
^[0-9,]+$
(^[A-Z]{2}\s[A-Z]{2}$)
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{6,})(?!.*(.).*\1)(?!.*(.).*\2)(
/^(http://aspalliance.com/)(\d+)/
(?<=\$)(?:\d{1,2}(?:,\d{3})*|\d{1,2}(?:,\d{3})?)
^[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,
\d{2}[-\d]{4}
^(0?[1-9]|1[0-2])[0-5][0-9]$
(?<!\d)\d{4}-(?!\d)
^[a-zA-Z0-9_]{1,15}$
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(
(\d{4})(\d{2})(\d{2})(\d{2})
(?<![\d\.])([0-9]+(,[0-9]+)*)(?![\d\.])
(?P<percentage>[0-9]{1,2})(?P<scale>[0-9]{1,2})(?P<length>[0-9]{1,2})
^(?P<month>\d{3})(?P<year>\d{4})(?P<suffix>\d{3})(?P<suffix_increase>\d{4})(?P<
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[-]).{3,20}$
(\d{3})(\d{2})(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(
"^(.*?)$"
(?<=\s|^)(?=\s|$)(?<!\w)(?=\w)(?<!\d)(?=\d)(?<!\S)(?=\S)(?<!\W)(?=\W)(?<!\_)(?=\_)(?<!\~)(?=\~)(?<!\@)(?=\@)(?<!\#)(?
^[A-Z]{2}\d{2}[A-Z]{3}[A-Z]{2}[A-Z]{3}[A-Z]
(?i)(?<!\d)(?<!€)(?<!EUR)(?<!\$)(?<!\£)(?<!\€O)(?<!\EURO)(?<!\$O)(?<!\£O)(?<!\€O)(?<!\EURO)(?<!\$O)(?<!\£O)(?<!\€O)(?<!
(?<=\d{1,2})(?<=\d{1,2})(?<=\d{1,2})(?<=\d{1,2})(?<=\d{1,2})(?<=\d{1,2})(?<=\d{1,2})(?<=\d{1,2})(?<=\d{
^[a-zA-Z0-9_\-\.]+@[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,6}$
^(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[
(\w+\.){2}
[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}
(?<![0-9])(?<![0-9])([0-9]{4})-([0-9]{2})-([0-9]{2}) (
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[a
^[0-9]{2}[-][0-9]{3}[-][0-9]{4}$
\s*,\s*
^(?:(?:[0-9a-fA-F]{0,4}:){7}[0-9a-fA-F]{0,4}|(?:[0-9a-fA-F]{0,4}:){1,7}:|(?:[0-9a-fA-
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\[\]{};
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer:(?i)(?P<protocol>https?://)?(?P<domain>[^\s]+)
^\(\d{3}\)\s\d{3}-\d{4}$
(\b[A-Za-z]{3}\s\d{1,2}\b)|(\b[A-Za-z]{3}\s\d{1,2}\s\d{1,2}\b)|(\b[A-Za-z]{3}\s\d{1,2}\s\d{1,2}\s\d{1,2}\b)
^(?:(?:[0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|[0-9a-fA-F]{
^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}$
\d{1,2}\/\d{1,2}\/\d{4}
$1.\s*\(.*?\)\s*$
```pythonimport mysql.connector
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{1,20}$
^[-]?\d{1,3}[.\d]{1,3}[-]?\d{1,3}$
^[+]?[0-9]*\.[0-9]*$
This will validate a partial postcode beginning with the postal district on up to the whole postcode, returning the two halves in sub-expressions. The main purpose is to return a valid postal district from a partial or whole postcode. The real value in this regex lies in the fact that it will process the postcode correctly regardless of whether or not the space in present after the district. So the accepted formats are A1 1AA, A11 1AA, A1A 1AA, AA1 1AA, AA11 1AA, AA1A 1AA GIR 0AA (and the same 6 formats without the space after
^[A-Z]{1}[0-9]{2}[A-Z]{1}$
^[a-zA-Z0-9]{1,3}\.[a-zA-Z0-9]{1,3}$
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<=\S)(?=\S*\s)(?<!\S)(?=\S*\s\S*)(?<!\S\s\S*)(?<!\S\s\S\S*)(?<!\S\s\S\S\S*)(?<!\S\s\S\S\S\S*
^(?:[1-9][0-9]{0,2}|1[0-2][0-9]|2[0-8][0-9]|3[01])$
^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$
(0\.00|0\.01|0\.02|0\.03|0\.04|0\.05|0\.06|0\.07|0\.08|0\.09|0\.1|0\.11|0\.12|0\.13|0\.14|0\.15|0\.16|0\.17|0\.18|0\.19|0\.2|0\.21|0\.22|0\.23|0\.24|0
^[a-zA-Z][a-zA-Z0-9-]{3}$
BG\d{6}
(\d{1,2}\.\d{0,2})
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[a-zA-Z\d@$!%*?&]{8,}$
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer:^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[\.])(?=.*[\/])[A-Z
^(?=.{4}-\d{2}-\d{2}$)(?=.{2}-\d{2}-\d{2}$)(?=.{2}-\d{2}:\d{2}$)(?=
r'^\d{1,2}(\.\d{1,2})?$'
(\d{3})\s\d{3}-\d{4}
(0|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])
var split = Regex.Split(input, @"(?<!\\)(?<![^\\])\\s+");
\b(?<!\d)\d{1,2}\b
hh:minmin:ss\d{2}
(?<=\d)(?=\d\.)
^\d{1,3}(,\d{3})*\.\d{1,3}$
N:59:59.99,E:59:59.99
(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?
^\d{5}-?\d{4}-?\d
var regex = /<!--[^>]*?-->/g;
^(?!(xx|yy|...))[a-zA-Z0-9_]*$
/^[A-Z][a-z]{1,}[A-Za-z0-9]{0,}[A-Za-z0-9]{0
/^[a-zA-Z]{4,32}$/
(\d{3}[-\s]?\d{3}[-\s]?\d{4}|\d{3}[-\s]?\d{3}[-\s]?\d{4}|\d{3}[-\s]?\d{3}[
\b(19|20)\d{2}\d{2}\d{2}\b
^(?=.{1,10}$)(?=.{1,11}$)(?=.{1,12}$)(?=.{1,13}$)(?=.{1,14}
Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the "days part" of a class schedule field. The string should only accept any of the ff set of letters: 'M' 'T' 'W' 'TH' 'F' 'S' 'SU'. Only one instance of these set of letters is accepted.Generate a RegEx for this description. Answer:^(M|T|W|TH|F|S|SU)$
^[a-zA-Z0-9]+$
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\w\d-])(?=.*[\w\d-\s])(?=.*[\w\d-\s\.])(?=.*[\w\d-\s\
[^"]+
import re
^[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}$
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]{8}$
[a-zA-Z0-9_]{1,20}
^[A-Z]{1,2}\d{1,2}\s[A-Z]{1,2}$
^(0|[1-9][0-9]|1[012])[0-9]{3}$
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(2000|2001|2002|2003|2004|2005|2006|2007|2008)$
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer: \$[0-9]{1,2}(,\d{3})*(\.\d{2})?(,\d{3})*(\.
^\(?[1-9]\d{2}[-\s]?\d{3}[-\s]?\d{4}$
^[A-Z]{2}[0-9]{1,2}[A-Z]{1}$
^(?!127\.0\.0\.1$)(?!.*\.)(?!.*\.\.)(?!.*\.\.)(?!.*\.\.)(?!.*\.\.)(?!.*\.\.)(?!.*\.\.)(?!.*\.\.)(?!.*\.\.)(?!.*\.\.)(?!.*\.\.)(?!.*\.\.)(?!.*\.\
^(\d{3}[-\s]?\d{3}[-\s]?\d{4}|\d{3}[-\s]?\d{3}[-\s]?\d{3}[-\s]?\d{4}|\d{
\d{1,2}(,\d{1,2})?
(\d{1,2}:\d{2}:\d{2})(\s+[a-zA-Z]{1,3}[a-zA-Z]{1,3}[a-zA-Z]{1,3}[a-zA-Z]{1,3}[a-zA-Z]{1,3}[a-zA-Z
^(19|20)\d{2}(?:-\d{2})?(?:-\d{4})?$
^([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2}$
[A-Z]{3}[0-9]{2}[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9
(\d{1,2})([-/.])(\d{1,2})([-/.])(\d{1,2})
(\d{3}|\d{3}-\d{4}|\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{4}|
^\+?1[0-9]{3}[-\s]?[0-9]{3}[-\s]?[0-9]{4}$
(?<![0-9]{1,3}\.)(?<![0-9]{1,3}\.)(?![0-9]{1,3}\.)(?<![0-9]{1,3}\.)(?![0-9]{1,
/^[+-]?(?:0|[1-9]\d*)(?:\.\d+)?$/
(^[01]?[0-9]|2[0-3]):[0-5][0-9]|6[0-2]$)
^[0-9]{3}-[0-9]{3}-[0-9]{4}$
(?<![A-D])[A-D]{1}(?![A-D])
(?P<coords>\d+\.\d+\.\d+), radius in "Q" field
[^\d\s]{1,3}[\d
([0-9]{1,2}:[0-9]{2}:[0-9]{2})\s*[a-zA-Z]{1,2}
(\d+\.\d+|\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\
^1\d{0,}1\d{0,}$
^[0-9]{1,2}[\.]?[0-9]{1,2}$
^[0-9]{1,3}(,\d{3})*(\.\d{2})?$
(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?
\d{1,2}\.\d{1,2}\.\d{4}(?:[-\s]\d{1,2}\.\d{1,2}\.\d{4})?
^(0[1-9]|1[0-2])[0-9]{3}(:?[0-5][0-9])?$
(\d{1,2})([\+\-])(\d{1,2})([\+\-])(\d{1,2})
(\d{1,2}|\d{1,2}:\d{2}|\d{1,2}:\d{2}:\d{2})
\d{3}$
[0-9]{5}
(?<start>\d{1,3})(?<stop>\d{1,3})Blah, blah, blah.;
Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answer:(?<latitude>\d{1,3}\.\d{1,3}\.\d{1,3}\.
^[a-zA-Z0-9_]{8,20}$
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])\d{3}|\d{4}$
\b(CAS|EC)\d{3}[A-Z]{2}\d{3}\b
^(?=.*\d)(?=.*[1-9]\d*)(?=.*[1-9]\d*\.)(?=.*[1-9]\d*\.)(?=.*[1-9]\d*\.)(?=.*[1-9]\d*\.)(?=.*[1
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: ^[a-zA-Z][a-zA-Z0-9!@#$%^&amp;*]{6,50}$
[0-9]\.[0-9]{2}
^(?=.*[0-9])(?=.*[1-9][0-9])(?=.*[1-9][0-9][0-9])(?=.*[1-9][0-9][0-9][0-9])[0-
[Your answer here]
^(?:\d+(?:\.\d+)?|\d+\.\d+|\d+\.\d+\.\d+|\d+\.\d+\.\d+|\d+\.\d+\.\d+\.\d+|\d+\.\d+\.\
(\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+)
Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators:. - /Valid dates only! m (1-12)/ d (1-31)/ y (0..)(rizzipereira.com.br)For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250Generate a RegEx for this description. Answer: (\d{1,2})/(\d{1,2})/(\d
(\d{4})([A-Za-z])(\d{3})
^(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2})$
Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answer:^(0[1-9]|1[012])[0-9]{2}[0-9]{2}[0-9]{4}$
^[a-zA-Z][a-zA-Z0-9_]{3,15}$
(?<=\s)([A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{2}[A
[0-9]{1,3}[a-zA-Z0-9]{1,3}[a-zA-Z0-9]{1,3}[a-zA-Z0-9]{1,3}[a-zA-Z0-9]{1,3}[a-zA-Z0-9]{1,3}[a
(\d{3})(\d{3})(\d{4})
\d{4}-\d{2}-\d{2} \d{2}(?:\d{2})?
\d{3}[A-Z]{1}[0-9]{3}
\d{1,2}\.\d{1,2}
(\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2}\/\d{1,2}\/\d{4}-\d{1,2}-\d{4})
[a-zA-Z0-9_]{1,63}
^(?=.*[3-9])(?=.*[4-9])(?=.*[5-9])(?=.*[6-9])(?=.*[7-9])(?=.*[8-9])(?=.*[
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[a-zA-Z0-9])[a-zA-Z0-
[a-zA-Z][a-zA-Z0-9]{2}[a-zA-Z0-9]{3}
^[0-9]{2}[0-9]{3}[0-9]{1}[0-9]{1}[0-9]{1}$
[a-zA-Z0-9-\s]
(http\:\/\/)?(www\.)?[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,}
(?i)([0-9]{8}|[0-9]{9}[0-9]{6}|[0-9]{9}[0-9]{5}[0-9]{4}[0-9]{3}[0-9]{2}[0-9]{1}[0-9]
(\d+)\.(\d+)\.(\d+)\.(\d+)\.(\d+)\.(\d
(00\d|1\d|2[0-3]|[4-9]\d|[1-9]\d|[1-9]\d|[1-9]\d|[1-9]\d|[1-9]\d|[1-9]\d|[1-9]\d|[1-9]\d|[1-9]\
(?<!\d)(?:\d{3}(?:,\d{3})*|\d{3}(?:\d{3})*(?!\d))(?!\d)
(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
(0.00%|[1-9][0-9]*[0-9]{0,2}%)
(\d{5})(\d{4})(\d{3})(\d{2})(\d{1})
[^\.]+\.
^(?=.*[1-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9]
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer: [0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0
(?<![0-9])([0-9]{1,2}|[0-9]{3})\/(?:[0-9]{1,2}|[0-9]{3})\/(?:[0
/^[a-zA-Z0-9]{1,63}$/ and /^[a-zA-Z0-9]{1,63}$/.
^[0-9]*$
[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}[0-
^[0-9,]*\.[0-9]*$
(?<!\d)(1[0-2]|3[0-1])(?!\d)
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{2,}$
^(?:[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[
r'^[0-9]{1,3}(,[0-9]{3})*$'
(\d{1,2})\.(\d{1,2})\.(\d{1,2})
^[0-9]{1,3}[-][0-9]{1,3}[-][0-9]{1,3}$
^(?=.*[1-9])(?=.*[0-9])(?=.*[0-9][0-9])(?=.*[0-9][0-9][0-9])(?=.*[0-9][0-9][0-9][0-9])(?=.*[0-9][0-9][0-9][0-9][0
(?<![a-zA-Z0-9])[^a-zA-Z0-9]
[0-9]{2}[-/][0-9]{2}[-/][0-9]{4}
(?<![\d,.])(?<![\d,.])(?![\d,.])(?![\d,.])(?![\d,.])(?![\d,.])(?![\d,.])(?![\d,.])(?![\d,.])(?![\d,.])(?![\d,.])(?![\d,.])(?![\d,.])(?!
(\d{2}:\d{2}:\d{2})([ap]m)?
ATU[0-9]{5}[0-9]{5}[0-9]{5}[0-9]{5}[0-9]{5}[0-9]{5}[0-9]{5}[0-9]{5}[0-9]{5}[0-9]{5}[0-9]{5}[0-9]{5}[
(?<![\d\.])(?<![\d\.]\.)(?<![\d\.]\.)(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\
[a-zA-Z0-9]{3,20}
[a-zA-Z][a-zA-Z0-9 ]*
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{6,}$
(\d{3})([a-zA-Z]{2})([a-zA-Z]{2})([a-zA-Z]{2})([a-zA-Z]{2})([a-zA-Z]{2})([a-zA-Z]{2})([a-zA-Z]{2})([a-zA-Z
^[a-zA-Z0-9]{1,15}$
[0-9]{1,2}[1-9]|[1-9]{1,2}[0-9]|[1-9]{1,2}[1-9]
^(?P<H>[0-9]{1,2}):(?P<nn>\d{1,2}):(?P<ss>\d{1,2})$
^\+1?[0-9]{3}[\s-]?[0-9]{3}[\s-]?[0-9]{4}$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{5,15}$
^(49)([0-9]{13,16})$
^[+-]?\d*\.?\d*$
(\d{4})-(\d{2})-(\d{2})
^https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+\.jpg$
[A-Za-z][A-Za-z0-9]{5,}
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer:^\d*(25|50|75|0|00)$
^[A-Z]$
(?<month>\d{1,2})(?<day>\d{1,2})(?<year>\d{4})
(\d{1,2}:\d{1,2}:\d{1,2})(?:\.\d{1,2})?
^(0[1-9]|1[012])/(0[1-9]|[12][0-9])/(2000|2001|2002|2003|2004|2005|2006|2007|2008)/([0-9]{4})/([0-9]{2})/([0-9]{4})$
[0-9]{2}/[0-9]{4}
^(?:\d+(?:\.\d{1,2})?|\d+)(?:\,\d+(?:\.\d{1,2})?|\d+)(?:\,\d+(?:\.\d{1,2})?|\d+)$
(?<!\{)([^\}]*)\}(?!\})
(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])\/(19|20)\d\d
\b(snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|
^[A-Z]{1,2}$
(?<=\d)(?=\d{3})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\
[0-9]{8}[A-Z]
(?:\+)?[1-9]\d{2}[ -]?[1-9]\d{2}[ -]?
(?<![0-9])(?<![a-zA-Z])[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}(?![0-9]
\b(0|[1-9]\d{0,2})\b
(?<month>\d{1,2})\s(?<day>\d{1,2})\s(?<year>\d{4})
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer: /[^\s\.]+/
[^\.]+$
/^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
[a-zA-Z0-9.]{1,8}
^\d{3}[-\s]?\d{3}[-\s]
[0-9]{1,2}(\.\d{1,2})?
(\d{2}:\d{2})\s*\/\s*(\d{2}:\d{2})\s*\/\s*(\d{2}:\d{2})\s*\/\s*(\d{4})
VIN_REGEX = r'^[A-Z]{3}[0-9]{3}[A-Z]{2}[0-9]{4}$'
^\(?(\d{3})\)?[ -]?(\d{3})\)?[ -]?(\d{4})$
<h1-6>
^[1-9][0-9]{3}[0-9]$
[\\d]{1,3}[\\.\\/]?[\\d]{1
[A-Z]{8}[R]
^(?P<ip_address>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$
^\+?[0-9]{1,2}\s?[0-9]{1,2}\s?[0-9]{1,2}\s?[0-9]{1,2}\s?[0-9]{1,2}$
(0-9) [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9]
(\d{3}-)\d{3}-\d{4}
[0-9]{7,10,11}
^(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$
^[-+]?[0-9]*\.?[0-9]*[eE][-+]?[0-9]+$
^[a-zA-Z ]{1,20}$
Get the style attribute inner text contained inside " or'caracters with the "style=" prefix.Generate a RegEx for this description. Answer: r"^(?P<style>.*?)$"
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[-])[a-
^[1-9][0-9]{0,5}(\.\d{0,3})?$
/^[+-]?[0-9]*\.?[0-9]+$/
^(([0-9]|1[0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|1[0-9]|2[0-4][0-9]|25[0-5])$
(?<!\d)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)
\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b
^[a-zA-Z0-9_]{0,30}[a-zA-Z0-9_]@
^[a-zA-Z0-9-.]+$
^(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])\/(19[7
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z]
[A-Z][a-z]{0,2}[A-Z]
^(?:(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2}))(?:\s+(?P<hour>\d{2}):(?P<minute>\d{2}):(?P<second>\d{2}))$
\((.*?)\)
\d{2}\.\d{2}\.\d{4}
^[1-9]\d*(\.\d+)?$
(\d+\.?\d*|\d+)(,\d+)?(\.\d+)?(e[+-]?\d+)?)
(?<!\d)(\d{1,3})(?!\d)
\d{4}[A-Z]\d{2}
^(?:(?:0[1-9]|1[012])\/(?:0[1-9]|[12][0-9]|3[01])|(?:1[012])\/(?:0[1-9]|
(\w+\.\w+)
\d{1,2}-\d{1,2}-\d{4}
(?i)(?<!\d)(?:[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}|[0-9]{1,2}/[0-9]{1,2}
ftp = r'ftp\:\/\/[^\s]+'http = r'http\:\/\/[^\s]+'https = r'https\:\/\/[^\s]+'
(0|[1-9][0-9]|[1-9]\d|1[0-9]\d|2[0-4][0-9]|25[0-5])\.(0|[1-9][0-9]|[1-9]\d|1[0-9]\d|2[
[0-9]{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}
<img\1 /><img\2 /><img\3 /><img\4 /><img\5 /><img\6 /><img\7 /><img\8 /><img\9 /><img\10 /><img\11 /><img\12 /><img\13 /><img\14 /><img\15 /><img\16 /><img\17 /><
^[A-D]{1,2}[0-9]{3,4}$
Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answer:^(19|20)\d{2}$
(?<=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=
123.\d{2}\.\d{2}\.\d{2}
^[0-9]{1,7}(\.0{1,2})?$
\b(?<!\d)\d{1,2}\s\d{1,2}\s\d{4}\b
match string between chars'' as in source codeGenerate a RegEx for this description. Answer: (?<=\s)([a-zA-Z0-9_]+)
^(?!(?:[^\d]*\d){3,})(?!(?:[^\d]*\d){4,})(?!(?:[^\d]*\d){5,})(?!(?:[^\d]*\d){6,})(?!(?:[^\
^[a-zA-Z]*$
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\[\]{
(\d{5}-\d{4}|\d{5}-\d{4}-\d{4}-\d{4}-\d{4})
(\d{1,2})([\d\s]*)([\d\s]*)([\d\s]*)
/^[a-zA-Z0-9-]{1,63}$&\.([a-zA-Z0-9-]{1,63})\.([a-zA-Z0-9-]{1,63})$/
^(?:(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,
(?<![\d,\.])(?<![\d,])[\d,]+(?<![\d,])[
^[0-9]{5}\.\d{2}$
^(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[
(0|[1-9][0-9]*)
^[0-9,]*(?:\.[0-9,]*)?(?:(?:\.[0-9,]*)?(?:\.[0-9,]*)?(?:\.[0-9,]*)?(?:\.[0-9,]*)?(?:\.[0-9,]*)?$
(?<=\d{3})(?<!\d)\d{3}(?!\d)
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer: (?<![0-9])(?<![0-9].[0-9])(?![0-9])[0-9]{1,4}(?:\.[0-9]{1
^(?=.*[0-9])(?=.*[1-9][0-9])(?=.*[1-9][0-9][0-9])(?=.*[1-9][0-9][0-9][0-9])(?=.*[1-9][0-9][0-9][0-9][0-9])(?=.*[1
^(?=.*[0-9])(?=.*[A-Z]
\d{2}/\d{2}/\d{4}
(?<!\d)\d{7}(?!\d)
^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+-][0-9
/^[0-9]*(?:\.[0-9]{0,2})?$/
(^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d{4}$|^(0
(?<=\$)(?:\d+(?:,\d+)?|\d+)(?=\$)
^(00[1-9]|[1-9]\d|1[0-2]\d|2[0-4]\d|25[0-5])[ -]?\d{3}[
Get the style attribute inner text contained inside " or'caracters with the "style=" prefix.Generate a RegEx for this description. Answer: r'^(?P<style>.*?)$'
(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\\|}{~:]).*
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer:^(?:[^/]|(?:[^/]|(?:[^/]|(?:[^/]|(?:[^/]|(?:[^/]|
(\d{1,2})\.(\d{1,2})
(?<=^|\s)(?P<prefix>\d{1,3})(?P<suffix>\d{1,3})(?P<blank>\d{1,3})?(?=\s|$)
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: (?<!\d)(?<!\w)(?<!\s)(?<!\S)(?<![^\w\s])
(http\:\/\/)?[a-zA-Z0-9\-\.]+\.[a-zA-Z]+(\.[a-zA-Z]
^(?:(?:[1-9]\d|1[0-
^(?P<server>\w+)\.(?P<port>\d+)\.(?P<protocol>\w+)$
(?<!\d)(?<!\.)(?<!\,)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!
A[K-W]\d{1,3}
(?:\d{7}|\d{10}|\d{11
\d+\.\d+
^(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])\/(19|20)\d{2}$
[0-9]+(,[0-9]+(,[0-9]+)?)?(\.|,)?[0-9]*e[0-9]+
[^\d\s]{3,}(?:\s[^\d\s]{3,})*
(\d{1,2})([AP]M)(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})
^(?!.*[a-z])(?!.*[A-Z])(?!.*\d)(?!.*[\W_])[a-zA-Z\d\W_]*$
grep -Eo '^[a-zA-Z0-9_\-\.]+$'
(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?
(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6}
[A-Za-z ]{2,}
^(?:YES|yes|Yes|YEs|yEs|yeS|NO|no|no|nOGenerate a RegEx for this description. )+$
^[0-9]{1,2}[0-9]{0,2}[0-9]{0,2}$
^[0-9]{5}[- ]?[0-9]{4}$
(0?[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])/(19|20)\d\d
/^[0-9]{1,2}(,?[0-9]{3})*$/
^[0-9]{1,5}\.[0-9]{1,5}\.[0-9]{1,5}\.[0-9]{1,5}$
^\d{1,3}(,\d{3})*$
r'^(\d+)\s*(inches|feet)$'
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer:^[0-9]{1,3}\.?[0-9]{1,3}$
(49152|65535)
(?<!\d)(?:\d{1,2}(?:\.\d{1,2})?|\d{1,2}(?:\.\d{1,2})?|\d{1,2}(?:\.\d{1,2})?|\d{1,2}(?:\.\d{1,2})?|\d{1,2}(?:\.\d
\[(?P<number>[0-9]{3})\] (?P<area>[
\d+(\.\d+)?|\d+(,\d+)?|\d+(\.\d+)?e[+-]?\d+
(?<=^|\.)(?<![A-Za-z0-9_])[A-Za-z0-9_]+(?=\.)
Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answer: \d{0,2}\.\d{0,2}
var regex = new RegExp("^([0-9]{1,2}:[0-9]{2})([a-z]{1,2})([a-z]{1,2})([a-z]{1,2})([a-z]{1,2})([a
^\d{4}[\s\S]{2}[a-zA-Z]{2}$
[a-zA-Z0-9!@#$%^&*()_+-=[]{};:,.<>?/\\|`~]
[^0-9]{32}-[^0-9]{32}-[^0-9]{32}
^\d{4}[ \-]\d{2}[a-zA-Z]$
^(?P<hours>\d{1,2})(:(?P<minutes>\d{2}))?$
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer: r'^[a-zA-Z0-9_\-\.]+\.(jpg|gif)$'
(?<!\d)(?<!\d/)(?<!\d/\d)(?<!\d/\d/\d)(?<!\d/\d/\d)(?<!\d/\d/
[A-Z]{8}[a-z]
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer:^[0-9]{1,4}\.?[0-9]{1,4}$
^[A-Za-z0-9\W]*$
(\w+)\s*
(?<![0-9])(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}(?![0-9])
^[0-9]{1,3}\.?[0-9]{1,3}$
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{8,16}$
[0-9]{4}[a-z]{2}
0x[0-9A-Fa-f]{2}
^(?:\+
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer: (?<!\d)(1|2|3|4|5|6|7|8|9|0)(?!\d)
^(?:\d+(?:,\d+)?|\d+)(?:\.\d+)?$
[0-9]{1,3}(?:\.[0-9]{1,3})?
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:    public static string CurrencyFormat(string value)    {        var currencyPattern = @"^(?<currency>[A-Z]{3})(?<number>[0-
[a-zA-Z0-9, ]+, [a-zA-Z0-9, ]+, [a-zA-Z0-9, ]+, [a-zA-Z0-9, ]+, [a-zA-Z0-9, ]+, [a-zA-Z0-9, ]+, [a-zA-Z0-9, ]+,
^(4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|A[0-9]|B[0-9]|C[0-9]|D[0-9]|
(1-365).*
^[+-]?[0-9]*\.?[0-9]*[0-9]*$
\b(1|2|3|4|5|6|7|8|9|10)\b
\d{4}[a-zA-Z]{2}
^[0-9]{1,7}(,\d{1,2})?$
/^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])$/
\d+(?:\.\d+)?
(?<=\".*?\").*
(?<![0-9])([1-9]?[0-9]|1[012])\/(?![0-9])([1-9]?[0-9]|0[1-9]|1[012])\/(?![0-9])([1-9]?[0-9]|0[1-9]|1[012])\/(?!
This regular expression is intended to limit numeric entries by allowed places before and after the decimal point. It also recognizes whole numbers. In this example the value cannot exceed 99999.999. To change the range, simply edit the numbers in curly braces. For example, to allow 7 digits (millions) before the decimal point, change both instances of {0,5} to {0,7}. Likewise, to change the decimals from allowing thousandths (3 digits) to just hundreths, change the {0,3} to {0,2}. This can be useful for numeric fields in SQL. This example
/^[1-9][0-9]*(?:\.[0-9]{0,2})?$/
(?<!\d)\d{3}-\d{3}-\d{4}
ftp = r'ftp\.'http = r'http\.'https = r'https\.'
IP Address: (?P<ipv4>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})IP Address: (?P<ipv6>\[(?P<ipv6_prefix>[0-9a-f]{1,4}):(?P<ipv6_port>\d{1,5})\])
(\w+)\s*(?:(?<=\s)\w+\s*)*
(\d{1,2})\s*((am|pm)\s*)?(\d{1,2})\s*((am|pm)\s*)?(\d{1,2})
^[0-9]*(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$
(?<!\d)(-?\d+)(?!\d)
^(?:[1-9]\d{0,2}|1\d{2}[0-9]|2[0-4][0-9]|25[0-5])$
^(?:\?.*)$
^[A-Za-z0-9_]{8,20}$
(?i)(?<!\d)(?<![a-z])(?<![A-Z])[a-zA-Z0-9]{9}(?!\d)(?![a-zA
(\d{1,2}:\d{2}:\d{2})(\s\d{1,2}:\d{2}:\d{2})(\s\d{1,2}:\d{2}:\d{2})(\s\d{1,2}:\d{2}:\d{2})(\s\d{1,2}:\d{2}:\
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer:^(?![^a-zA-Z0-9\-\.])(?![^a-zA-Z0
^[0-9]{7}$
\d{1,5}(?:\.\d{1,2})?
(?<![0-9])[0-9]+(,[0-9]+)*
(?<!\\.)[a-zA-Z0-9_\\-]+(?!\\.)
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer:^[a-zA-Z0-9]*\.
(\d{1,3}(,\d{3})*)?
^(?:[0-9a-fA-F]{1,4}:){5}[0-9a-fA-F]{1,4}$
^\d{1,7}\.\d{1,9}$
^(?=.*\d)(?=.*\.\d+$)(?=.*[+-]\d+$)(?=.*[0-9]*\.\d+$)(?=.*[0-9]*[+-]\d+$)(?=.*[0-9]*[+-]\d+[0-9]*\.\d+$)(?=.*[
(1\s|\-|\.)\s*(\d{3})\s*(\d{3})\s*(\d{4})
^(?:(?:0[1-9]|1[012])\/(?:0[1-9]|[12][0-9]|3[01]))(?:[
^[a-zA-Z0-9-_]*$
^\+?[1-9][0-9]{1,2}\s?[0-9]{1,3}\s?[0-9]{1,4}\s?[0-9]{1,5}\s?[0-9]{1,6}\s?[0-9]{1
A(?P<prefix>[A-Z])(?P<zone>[0-9]{1,3})(?P<suffix>[0-9]{1,3})(?P<prefix_suffix>[A-Z])(?P<suffix
(?<=^|,)(?=\s|$)(?=\s|,)(?=\s|$)(?=\s|,)(?=\s|$)(?=\s|,)(?=\s|$)(?=\s|,)(?=\s|$)(?=\s|,)(?=\s|$)(?=\s|,
^(0|[1-9]\d{0,2})(\.|\.){3}$
(?<!\d)(?<!\.)(?<![,])\d{1,3}(?<![,])\d{3}(?<![,])\d{3}(?<![,])\d{3}(?<![,])\d{3}(?<![,])\d{3}(?<![,])
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z0-9])(?=.*[!@#$%^&*()_+-=?/\[\]{};:,.<>\|`~])[a-zA-Z0-9!@
\b(1[0-9]|2[0-3])\b
^(0[1-9]|1[012])[-/.](0[1-9]|[12][0-9]|3[01])[-/.](
^(?=.*[0-9])(?=.*[a-
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%
(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<!\d)(?<![a-zA-Z])[a-zA-Z0-9]{4}[a-zA-Z0-9]{2}[a-zA-Z0-9]{3}[a-zA-Z0-9]{2}[a-zA-Z0-9]{1}[
^(?:http|https)://[^\s]+\.[^\s]+/[^\s]+\.[^\s]+/[^\s]+\.[^\s]+/[^\s]+\.[^\s]+/[^\s]+
[a-zA-Z]{4}[0-9]{10}
(0-59) minutes 0-59 AM|PM
^(?P<year>\d{4})(?P<month>\d{2})(?P<day>\d{2})(?P<hour>\d{2})(?P<minute>\d{2})(?P<second>\d{2})(?P<nn>\d{2})$
\b(19|20)\d{2}\b
^\$?[0-9]+(.[0-9]*)?(,\d+)?$
^(19|20)\d{2}[-/]\d{2}[-/]\d{4}$
(?i)([a-z]{2}[0-9]{7}|[a-z]{4}[0-9]{10})
(?<![0-9])([0-9]{1,2}:[0-9]{2})(?![0-9])
(\d{3})-(\d{3})-(\d{4})
A0-A9: [0-9]{1,3}[A-Z]{1,3}[0-9]{1,3}[A-Z]{1,3}[0-9]{1,3}[A-Z]{1,3}[0-9]{1,3}[A-Z]{1,3}[0-9]{1,3}[A-Z]{1,3
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: ^[a-zA-Z][a-zA-Z0-9!@#$%^&amp;*-.]{6,50}$
(\d{1,2})([\d]{1,2})([\d]{1,2})([\d]{1,2})([\d]{1,2})([\d]{1,2})([\d]{1,2})([\d]{1,2})([\d]{1,2})([\d]{1,2})
[a-zA-Z0-9,, ]{1,100}
(^0[1-9]\d{0,3}$|^[1-9]\d{0,3}[-\s]?[1-9]\d{0,3}$|^[1-9]\d{0,3}[-\s]?[1-9]\d{0,3}[-\s]
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer:#!/usr/bin/env pythonimport re
^[A-Z]{2}[0-9]{2}[A-Z]$|^[A-Z]{2}[0-9]{4}[
^[+-]?\d*\.\d+$
^[0-9]{3}[- ]?[0-9]{3}[
(?i)(?<![0-9])(?<![0-9].[0-9].[0-9].[0-9].[0-9].[0-9].[0-9].[0-9].[0-9].[0-9].[0-9].[0-9].[0-9].[0-9].[0-9].[0-9
^#.*$
(?<![\d\s])(?<![\d\s-])[\d\s-]{3}\d{3}\s[\d\s-]{3}\d{
^(?:(?:19|20)\d\d-\d\d-\d\d)|(?:(?:19|20)\d\d-\d\
^(https?://)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(
match string between chars'' as in source codeGenerate a RegEx for this description. Answer: (?<=\s)([A-Za-z0-9]+)
\d{2}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]
^(0[1-9]|1[0-2])[0-9]{3}(:|\s)([0-9]{3})$
(?i)(?<![0-9])(?<![0-9][0-9])(?<![0-9][0-9][0-9])[0-
[a-zA-Z0-9,, ]
^[0-9]{3}[0-9]{4}$
^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
^[0-9]{1,3}(?:\.[0-9]{1,2})?$
(\d+(\.\d+)?|\d+)([,.]\d+)?
(\+\d{1,3}\)?[\d\s]{1,3}\s?[\d\s]{1,3}\s?[\d\s]{1,3}\s?[\d\s]{1,3}\s?[\d\s]{1,3}\s?
(?i)(0?[1-9]|1[0-2])(?:\s*[0-5][0-9]|60)(?:\s*[0-5][0-9]|60)
(?<=\s|&quot;)(?<!\s)(?<!&quot;)(?<!&quot;)(?<!\s)(?<!&quot;)(?<!&quot;)(?<!\s)(?<!&quot;)(?<!\s
[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]
(?<![0-9])[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[@#$%^&+=]).{2,}$
^\d{1,2}:\d{2}$
\d{1,2}[-/]\d{
Matches valid South African ID numbers based on all criteria (except of course the checksum digit at the end).Matches the format defined as:YYMMDDSSSSCAZ.YY - Year,MM - Month,DD - Day,SSSS - Gender,C - Denotes citizenship (0 or a 1),A - Always an 8,Z - Checksum digit (doesn't validate if the checksum itself is valid).Also supports the following ways of entering it:YYMMDDSSSSCAZ |YYMMDD SSSS CAZ |YY
(?i)(?<!\d)(\d{4})-(\d{2})-(\d{2} \d{2}:\d{2}:\d{2})(?!\d)
^[0-9]{1,2}$
\d{4}[a-z]{2}
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer:^https?://[a-zA-Z0-9\-\.]+$
^\s*\d{1,2}(\.\d{1,2})?$
^(?:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2
^51[0-9]{14}$
(?<![0-9, ])([0-9]+(,[0-9]+)*)(?![0-9])
(\d{2})([02468])
\p{L}+
\d{4}-\d{2}-\d{2} \d{1,2} \d{1,2}
Regex for current available mobile numbers mention athttps://fa.wikipedia.org/wiki/%D8%B4%D9%85%D8%A7%D8%B1%D9%87%E2%80%8C%D9%87%D8%A7%DB%8C_%D8%AA%D9%84%D9%81%D9%86_%D8%AF%D8%B1_%D8%A7%DB%8C%D8%B1%D8%A7
/^[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]+)*$/
(.*)
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer: [0-9]{1,4}\.?[0-9]{1,4}
^[A-Z]{2}[0-9]{3}[-]?[0-9]{4}$
(?<Q>\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2})\.\s*(?<R>\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2})\.\s*(?<R>\d{1,2}\.\d{
\d{4}-\d{2}-\d{2} \d{2} \d{2}-\d{4}
(?<![0-9])(?<![-])[0-9]{1,2}(?<![-])[0-9]{1,2}(?<![-])[0-9]{1,2}(?<![-])[0-9]{1,2}(?<![-])[0-9]{1,2}(?<![-])[0-9]{
[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?
This should be the pattern described in the documentation for the.NET TimeSpan.Parse method - generally parses time spans.From the.NET docs:public static TimeSpan Parse(string s);The s parameter contains a specification of the form:[ws][-][d.]hh:mm:ss[.ff][ws]Items in square brackets ([ and ]) are optional, colons and periods (: and.) are literal characters, and other items are as follows.Item Descriptionws optional white space&quot;-&quot; optional minus sign indicating a
^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@#$%^&+=\-_\.])(?=.*[a-zA-Z0-9_\-\.])[a-zA-Z0-9_\-\.]
^[A-Z]{2}[0-9]{2}[A-Z]{2}$
^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])\s\d{4}$
^[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*$
[0-9]{1,7}-?[0-9]{1,7}-?[0-9]{1,7}-?[0-9]{1,7}-?[0-9]{1,7}-?[0-9]{1,7}-?[0-9]{1,7}
^(?:[1-9]\d|1[0-2]\d|2[0-3]\d|3[0-1]\d|4[0-9]\d|5[0-9]\d|6
(?:\d{4}-)?(?:\d{4}-)?(?:\d{4}-)?(?:\d{4}-)?
[0-9]{1,2}:[0-9]{2}:[0-9]{2}[0-9]{2}
^[1-9][0-9]*\.?[0-9]*$
(\d{1,3}[,\s]\d{1,3}[,\s]\d{1,3}[,\s]\d{1,3}[,\s]\d{1,3}[,\s]\d{1,3}[,\s]\d{1,3}[,\s]\d{1,3}[
\d{7,10,11}
(?<!\d)(?
[0-9]{1,2}[a-z]{1,2}[0-9]{1,2}[a-z]{1,2}[0-9]{1,2}[a-z]{1,2}[0-9]{1,2}[a-z]{1,2}[
^(?:http|ftp)s?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+?(?:\.[-\w.]+)?(?:/?\S*)$
^(?=.*[A-Fa-f0-9]{8})(?=.*[A-Fa-f0-9]{4})(?=.*[A-Fa-f0-9]{4})(?=.*[A-Fa-f0-9]{4})(?=.*[A-Fa-f0-9]{12}
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{2,4}(?:\d{1,2})?(?:[,.]\d{1,2})?(?:[,.]\d{4})$
[0-9]{1,2}(?:\.[0-9]{1,2})?%
^[EeV]\d{3}\.\d{1,2}$
[\\"/]
<input type="text" name="textarea" maxlength="20" />
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: (?<=^|\s)(?P<national_code>\+91)(?:\s|$)
Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answer:^[0-9]+(.[0-9]*)?$
^(?:\d{1,3}(?:,\d{3})*|\d{1,3}(?:\.\d{3})*|\d{1,3}(?:\.\d{3})*|\d{1,3}(?:\.\d{3})*|\d{1,3}(?:\.\d
(?<= )(?= )
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer: [^.]*(?:\.jpg|\.gif)
\b(CAS|EC)\d{3}[A-Z]\d{2}\b
[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3
(?=^[a-zA-Z0-9]*$)(?=^[a-zA-Z0-9]*[a-zA-Z0-9]*$)(?=^[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*$)(?=^[a-zA-Z0-9]*
^(?P<month>Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|
^(?=.*\d)(?=.*[a-zA-Z])[a-zA-Z0-9]{1,31}$
ESN_REGEX = r'^[0-9a-fA-F]{8}$'
(Example) "^[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}$"
^(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:    public static Regex CurrencyExpression = new Regex(@"^\$([0-9,]*)([.,]?[0-9]*)?$", Regex
D.M.YYYY or D.MM.YYYY or DD.MM.YYYY or DD.M.YYYY
^[A-Za-z0-9]{1,3}[A-Za-z0-9]{1,3}[A-Za-z0-9]{1,3}[
(?<countryCode>\d{3})(?<prefix>\d{3})(?<suffix>\d{3})
^1(0|1){0,}$
^[a-zA-Z0-9-]+[a-zA-Z0-9- ]*[a-zA-Z0-9- ]*[a-zA-Z0-9- ]*$
^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,6}
(\d{3})\s*[-.]\s*(\d{3})
(\d{1,2})([\d]{1,2})([\d]{1,2})([\d]{1,2})([\d]{1,2})([\d]{1,2})([\d]{1,2})([\d]{1,2})([\d]{1,2})
VIN_REGEX = r'^[0-9]{9}-\d{3}-\d{2}-\d{4}$'
(0|[1-9][0-9]|100|[1-9][0-9]|1000)
var regex = /^(?:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} \d{2}|\d{4}-\
[0-9]{4}
^[a-zA-Z]{5}[0-9]{6}[0-
(?<![0-9])([0-9]{1,2})(?:\.[0-9]{1,2})?(?![0-9])
(\d{1,3}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\d{1,3}\.\d{1,3}\.\d{1
\d+(?:\.\d+)?%
(?:\d{1,2}\s)?[A-Z]{2}\d{3}
^(?=.*[a-f])(?=.*[A-F])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[a-fA-F0-9a-fA-F
^(1[0-9]|2[0-3])\/(1[0-9]|2[0-9]|3[01])\/(19|20)\d{2}$
/[^a-zA-Z0-9]/g
^[0-9]{3}$
(\d{3})\s(\d{3})\s(\d{4})
[0-9]{1,2}\.\d{1,2}\.\d{1,2}
"^[0-9]{1,2}\.?[0-9]{1,2}$"
^[a-zA-Z0-9]{1,20}$
\(?(\d{3})\)?[ -]?(\d{3})[ -]?(\d{4})
/^[1-9][0-9]{0,2}$/
^[a-zA-Z][a-zA-Z0-9\-\']{3}$
[a-zA-Z0-9\s]
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z])(?=.*[a-zA-Z0-9]{6,})[a-zA-Z0-9]{6,}$
^(?=.*\d)(?=.*[a-zA-Z])[a-zA-Z0-9]{4}-\d{2}-\d{2} \d{2}:\d{2}$
var regex = /<!--.*?-->/g;
^\d{4}/\d{2}/\d{2}$|^\d{4}/
/^\d{4}$/
Matches times seperated by either : or. will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.Generate a RegEx for this description. Answer:^(0|[1-9]|1[0-2])[0-9]{2}:[0-5][0-9]{2}:[0-5][0-9]{2}$
^[0-9]{1,3},[0-9]{3,4}$
[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=
(\d{5}|\d{5}-\d{4})
^(?P<server>[a-zA-Z0-9\-\.]+)\.(?P<port>[0-9]+)$
A1[1-9]\d{1,2}[A-Z]\d{1,2}
^(?=.*[1-9])(?=.*[0-9])(?=.*[0-9]{7})(?!.*0).*$
^[A-Za-z0-9\W]{1,}$
^[0-9]{3}-\.[0-9]{3}-\.[0-9]{3}$
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer:^(?:http|ftp|sftp|https|www)://(?:[-\w.]|(?:%[\da-fA-F]{2}))+$
\d{1,3}
^(0|[1-9]\d|1[012])[0-5]\d$
\d{2}/\d{2}/\d{4}(?:\s|$)
(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/(\d{1,3}\.\
This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.NET :Regex.Replace(Html, "<[^>]*>", string.Empty);Generate a RegEx for this description. Answer: Regex.Replace(Html, "<[^>]*>", string.Empty);
A(?P<prefix>\w)(?P<zone>\d)(?P<suffix>\d)
0-9(?:\.0*)?
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer:^(https?://)?[a-zA-Z0-9-_\.]+$
d|dd|mm|yyyy
(?<![A-Za-z0-9_])[A-Za-z0-9_]{1,3}(?![A-Za-z0-9_])
A1[1-9]\d{1,2}[A-Z]\d{1,2}[A-Z]\
0(?:\.0+)?
(?<!\w)(?<![a-zA-Z])ing(?![a-zA-Z])
(^[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{8}$)
^(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2})\s(?P<hour>\d{2}):(?P<minute>\d{2}):(?P<second>\d{2})$
^(?:\d+\.\d+|\d+)(?:,\d+)?$
^[\d]{3}[-\s]?[\d]{3}[
(?<Q>\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{
(\d{4}-\d{2}-\d{2})
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z0-9])[0-9a-zA-Z0-9]{8}$
^(49)(?!\d)
(?<![0-9])(?<![0-9])(?:[0-9]{2}|[1-9])(?<![0-9])(?<![0-9])(?:[0-9]{
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer: (?<!\d)\d{3}(?!\d)
^[0-9]{5}[0-9]{6}[0-9]{3
^\(?(\d{3})\)?[-\s]?\
\d{1,2}[-/.]\d{1,2}[-/.]\d{4}
\d{1,3}(,\d{3})*(\.\d{2})?
\d{4}\.\d{2}\.\d{2}\.\d{2}
(\+\d{1,3}[\s\(\)\[\]]{0,1}(\d{3}[\s\(\)\[\]]{0,1}(\d{4}))
^\+?[1-9][0-9]{2}[0-9]{3}$
[^0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9
(?<=\d{1,2})(?=\d{1,2})(?<!\d{1,2})(?=\d{1,2})(?<!\d{1,2})(?<!\d{1,2})(?<!\d{1,2})(?<!\d{1,2})(?<!\d{1,2})(?
(?P<part_number>\d{1,3})(?P<part_type>\w{1,2})(?P<part_number_suffix>\d{1,2})
(0[1-9]|1[0-2])[0-9]{2}:[0-5][0-9]
(?<!\.)(?<!\d)(?<!\.)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<
(0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9
^\+?[
(?<!\{)(?<!\})(?<!\[)(?<!\])(?<!\()(?<!\))(?<!\{)(?<!\})(?<!\[)(?<!\])(?<!\()(?<!\))(?<!\{)(?<!\})(?<!\[)(?<!\
^(?:(?:0[1-9]|1[012])-(?:0[1-9]|[12][0-9]|3[01])-(?:0[1-9]|1[012])|(?:0[1-9]|1[012])-(?:[12][0-9]|3[01])-(?:
^\$?[0-9]{1,2}(,\d{1,2})?(\.\d{1,2})?$
(^[0-9]{1,3}\.){3}[0-9]{1,3}$
Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answer: ^[0-9]{9}$
\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b
[^a-zA-Z0-9]{9}[^a-zA-Z0-9]
(?<!\d)(?<![\d\.])(?<![\d\.])(?!\d)(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(
^[a-zA-Z0-9_\-\.]+@[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,}$
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer: \d{1,3}(?:,\d{3})*
\d{4}-\d{2}-\d{2} \d{2} \d{2} \d{2} \d{2} \d{2} \d{2} \d{2} \d{2} \d{2} \d{2} \d{2} \d{2} \d{2
(\d{3}[-\s\d]{3}[-\s\d]{3}[-\s\d]{4}[-\s\d]{2}[-\s\d]{2})
/^[a-zA-Z0-9._-]{5,15}$/
^[a-zA-Z0-9!@#$%^&*()_+-=[]{};:,./<>?\|`~]*$
(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<
^[0-9]{1,3}(\.\d{0,2})?$
var regex = /^(?:(?:(?:[0-9]{1,2}(?:\.[0-9]{1,2}){3})|(?:[0-9]{1,2}(?
^[a-zA-Z0-9]{1,3}\.{1,3}[a-zA-Z0-9]{1,3}\.{1,3}[a-zA-Z0-9]{1,3}\.{1,3}[a-zA-Z0-9]{1,3}\.{1,3}$
(\d{1,2}):(\d{2})(am|pm)
^(?:[1-9][0-9]|1[012])/(?:[0-9]{4}|20[0-9]{2})(?:[0-
^[1-9]\d$
[A-Za-z0-9]+( [A-Za-z0-9]+)*
This will match the Standard time format that 00:00:00 AM to 11:59:59 PM.
(?<![0-9])([0-9]{2})/([0-9]{2})/([0-9]{4})
(.*)\.txt
(?<!\d)(?<!\.)\d{1,3}(?:,\d{3})*(?:\.\d{2})?
(?<!\d{4}-\d{2}-\d{2})(?<!\d{2}-\d{2}-\d{2})(?<!\d{4}-\d{2}-\d{2})(?<!\d{2}-\d{2}-\d{2})(?<!\d{
^(19|20)\d{2}-\d{2}-\d{4} \d{2}:\d{2}:\d{2}$
(?<=\s*\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d
^\d+\.\d+$|^\d+$|^\d+\.\d+$
(\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}|\d{1,2}\.\d{1,2}\.\d{1,2}|\d{1,2}\.\d{1,2}\.\d{1,2}|\d{1,2}\.\d{1,2}
/^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(19|20)\d{2}$/
(?<![0-9])(?<![0-9]\.[0-9])(?<![0-9]\
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[0-9]{4}-[0-9]{2}-[0-9]{2}$
^[0-9A-Fa-f]{8}$
(?i)(?=^.{10,20}$)(?=^[a-zA-Z0-9._-]+$)(?=^[a-zA-Z0-9._-]+$)(?=^[a-zA-Z0-9._-]+$)(?=^[a-zA-Z0-9._-]+$)(?=^[a-zA-Z0-9._-]+$)(?=^[a
^(0?[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|[12][0-9]|3[01])$
\b(?<feet>\d{1,2})\s*(?<inches>\d{1,2})\b
Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answer:
\d+\.\d{2}
(\d{1,2}:\d{2}:\d{2})([ap]m|[a-z]{2})(\d{1,2})([ap]m|[a-z]{2})(\d{1,2})([ap]m|[a-z]{2})(\d{1,2})([ap]m|[a-z]{2})(\d{1,2})([
\d{2}[a-z]{3}[A-Z]{3}[0-9]{4}
[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9
var date = new Date();var year = date.getFullYear();var month = date.getMonth() + 1;var day = date.getDate();var dayOfMonth = date.getDay();var dayOf
^[+-]?\d+(\.\d+)?$
(\d{1,2}/\d{1,2}/\d{4}|\d{1,2}:\d{1,2}:\d{2}|\d{1,2}:\d{2}:\d{2}|\d{1,2}:\d{2}:\
(?<=\d{1,3})(?=\d{1,3})(?<!\d)(?=\d)(?!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!
/\d{1,2}/\d{1,2}/\d{4}/
(http\:\/\/)?(www\.)?[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,4}
var date = "20-02-2000";var regex = new RegExp("^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(19[0-9]|20[0-
(\d{3}-\d{2}-\d{4})
[0-9]{3}-[0-9]{2}-[0-9]{4} OR [0-9]{3}-[0-9]{5}-[0-9]{6}
^(?:\d{1,3}(?:\.\d{0,5})?|\d{1,5}(?:\.\d{0,3})?|\d{1,3}(?:\.\d{0,2})?|\d{1,3}(?:\.\d{0,1})?|\d{1,3}
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d{2}:\d{2}$
^0[1-9][0-9]{0,9}$
^(?:(?:19|20)\d{2}-\d{2}-\d{4} \d{2}:\d{2}:\d{2}(?:[ap]m|am|pm))
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=\[\]{};\'\"\\\/\|\?\.\,\:<>\~\`\{\}\~\~\~\~\~\~\~\~\~\~\~\~\
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$
^[A-Z][a-z]*[A-Z][a-z]*[A-Z][a-z]*$
(?<!\d)(?<![\d\.])(?<![\d\.]\d{4})(?!\d)
[^0-9]{4}-[0-9]{2}-[0-9]{2}
^[a-zA-Z0-9]{1,30}$
[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}
^(?:(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA
^[0-9]{9}[ -]?[0-9]{4}[ -]?[0-9]{3}[ -]?[0-9]{2}[ -]?[0-9]{1
(\w+\.){2}$
^[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]$
(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[a-zA-Z\d@$!%*#?&]{8,}$
^[a-zA-Z]{4,32}$
\b(?=\d{1,3})(?=\d{1,3})(?=\d{1,3})(?=\d{1,3})(?=\d{1,3})(?=\d{1,3})(?=\d{1,3})(?=\d{1,3})(?=\d{1,3})(?=\d{1
^(?=.*\d{4}-\d{2}-\d{2}$)(?=.*\d{2}:\d{2}:\d{2}$)(?=.*\d{1,2}:\d{2}:\d{2
^[0-9]{9}[ -]?[0-9]{4}[ -]?[0-9]{4}[ -]?[0-9]{4}[ -]?[0-9]{4
^[a-zA-Z0-9_.-]{4,10}$
^(?:\d+|0+)(?:\.\d+)?$
[^0-9]{4}[0-9]{2}[0-9]{2}
(\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{3}-\d{4})
/^http://aspalliance.com/([0-9]+)$/
(?<![0-9])(?<![1-9][0-9])(?<![1-9][0-9][0-9])[0-9]{1,2}(?![0-9])
^4[0-9]{12,15}$
\d+\.\d+\.\d+\.\d+
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(0[1-9]
^[+]?\d+(\.\d+)?$
(?<!\d)(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(\d{4})(?!\d)
^[01]*$
(?<whole_places>\d{0,8})(?<decimal_places>\d{0,2})
(\w+)\s*\((\d+)\)\s*\((\d+)\)\s*\((\d+)\)\s*\((\d+)\)\s*\((\d+)\)\s*\((\d+)\)\s*\((\d+)\)\s*\((\d+)\)\s*\((\d+)\)\s*\((\d+)\)\s*\((\d+)\)\s*\((\d+)\
^\+?[0-9]{1,2}\s?[0-9]{1,2}\s?[0-9]{1,2}\s?[0-9]{1,2}\s?[0-9]{1,2}\s?[0-
^(?=.*\d{4})(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[-])[a-zA-Z0-9-]{4,20}$
/?(.*?)$/
^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$
\b(snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake|snake
(?<!^)(?<!^)([1-9]|1[0-2])(?:[0-9]|[1-9])(?:\s*am|\s*pm)?
^[0-9]{1,2}.[0-9]{1,2}$
^\$?\d+(\.\d{1,2})?$
(?<!\d)\d{1,2}\/\d{1,2}\/\d{4}(?!\d)
[A-Za-z0-9]{1,20}
^(?=.{3,4}$)(?:[0-9]{3}|[0-9]{4})$
^(0|[1-9][0-9]|1[012])[0-9]{2}:[0-9]{2}$
[A-Za-z0-9_]{1,20}
(?<![0-9])(?!0)(?!0$)(?!0$)(?!0$)(?!0$)(?!0$)(?!0$)(?!0$)(?!0$)(?!0$)(?!0$)(?!0$)(?!0$)(?!0$)(?!0$)(?!0$)(?!0$)(?!0$)(?!0$)(?!0$)(?!0$)(
[^\d-]\d{3}[^\
(?<![0-9])([1-9][0-9]|1[0-9]|2[0-3])[0-9]{4}
^(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}|(?:[0-9]{1,3}\.){3}[0-9]{1,3}|(?:[0-9]{1,3}\.){3}[0-9]{1,3
[^0-9]{3}
(?<![0-9])([0-9]{2})([0-9]{4})(?![0-9])
(?<=^|\s)(?P<prefix>\d{1,3})(?=\s|$)
(hh:mm:ss)
^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (
(?<=\b\d{3}\b)(?=\b\d{3}\b)(?=\b\d{4}\b)
0.00(?:\.0+)?(?:\.00)?(?:\.0+)?(?:\.00)?(?:\.0+)?(?:\.00)?(?:\.0+)?(?:\.00)?(?:\.0+)?(?:\.00)?(?:\.0+)?(?:\.00)?(?:\.0+)?(?:\.00)?(?:\.0+)?(?
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer:^[a-zA-Z0-9\.]+$
^[A-Za-z]{2}[0-9]{3}(?:[, ]?[0-9]{3}){0,2}$
(?<=^[0-9]{10})(?=\d{3}$)
(\d+\.\d+|\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+)
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<![0-9])([0-9]{1,3}\.){3}[0-9]{1,3}(?![0-9])
^(?=.*[3-9])(?=.*[4-9])(?=.*[5-9])(?=.*[6-9])(?=.*[7-9])(?=.*[8-9])[0-9]
This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.NET :Regex.Replace(Html, "<[^>]*>", string.Empty);Generate a RegEx for this description. Answer: <[^>]*>
\b[A-Z][a-z]{2}[0-9]{2}\b
(?<![0-9])([0-9]{4}[0-9]{3}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]
Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the. (period) to ensure that no other characters may be used in it's place.Generate a RegEx for this description. Answer: \d{1,3}(?:,\d{3})*
^\d{1,2}/\d{1,2}/\d{4}$|^\d{1,2}:\d{1,2}:\d{1,2}(\.\d{1,3})?$
^[0-9]{2}[0-9]{2}[0-9]{4}[-0-9]{4}$
\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}
Zip+4 Zipcode RegEx. You may ommit the +4 digits but you must also then ommit the hyphen/dash as well. In 1983, the Postal Service™ began using an expanded ZIP Code™ number called called the &quot;ZIP+4&#174;&quot; Code. The nine digits of a ZIP+4 code (e.g., 12345-6789) is broken down as follows: [123]Sectional Center or Large City. [45]Post Office™ facility or Delivery Area. [-]Required &quot;dash&quot; or [
\$\d{1,2}\.\d{2}
(0?1-31)?
[0-9]{1,3}[a-zA-Z0-9]{1,3}[a-zA-Z0-9]{1,3}[a-zA-Z0-9]{1,3}[a-zA-Z0-9]{1,3}[a-zA-Z0-9
(?<!\d)\d{2}/\d{2}/\d{4}(?!\d)
(?i)(?:[01]?[0-9]|2[0-3]):[0-5][0-9]|6[0-9]|[1-9]?[0-9]|[1-9]?[0-9]?[0-9]|[1-9]?[0-9]?[0-9]
^(?=.*[1-9]\d*)(?=.*[1-9]\d*[0-9])(?=.*[1-9]\d*
(?<![0-9])([0-9]{1,3}\.){3}[0-9]{1,3}(?![0-9])
s&#227;o requeridos!Generate a RegEx for this description.
(1) (2) (3) (4) (5) (6) (7)
^(?:\+?1[-\s]?\d{1,3}\s?\d{1,3}\s?\d{1,3})\s?$
(0[1-9]|1[012])[0-5][0-9]|6[0-1]
[^ ]{5}
(?<!\d)\d*(?<![\d\.])\d+(?![\d\.])
[^\d\.]+
^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.[a-zA-
^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\\|}{~`\[\]\{\}\:\;\,\.\,\?\!\@\$\^
^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\\|}{~:]).*$
[^A-Za-z]{1,}[0-9]{1,}
ip:port checker
^[0-9]{3}[0-9]{3}[0-9]{3}$
\s*[a-zA-Z0-9_]*
(^[0-9]{1,3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}$)
\b\d{1,2}[-/.]\d{1,2}[-/.]\d{4}\b
(\d{1,3}(?:\.\d{3})?|\d{3}(?:\.\d{3})?)
^\(?[1-9][0-9]{2}[0-9]{2}[0-9]{2}$
(?P<number>\d+)
^(0[1-9]|1[012])\/([0-9]{2})/([0-9]{4})$
\d{5}(?:\d{5}){4}
(?<!\d)(?<![a-zA-Z])[0-9]{1,2}(?<![a-zA-Z])[0-9]{1,2}(?<![a-z
(\d{1,20})
^[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}$
^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(0[1-9]|
^(0|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])$
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer:(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.]
(\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2}\/\d{1,2}\/\d
[0-9]{1,3}[a-zA-Z]{0,1}[0-9]{1,3}[a-zA-Z]{0,1}[0-9]{1,3}[a-zA-Z]{0,1}[0-9]{1,3}[a-zA
(?<!\d)(?<!\d-)(?<!\d-\d)(?<!\d-\d-\d)(?<!\d-\d-\d-\d)(?<!\d-\d-\d-\d-\d)(?<!\d-\d-\d-\d-\d-\d)(?<!
\b(?<!\\.)(?:[a-zA-Z0-9_]|[a-zA-Z0-9_][a-zA-Z0-9_\-]*[a-zA-Z0-9_])\b
(?<![0-9])(?<![A-Z])(?<![a-z])(?<![A-Za-z])[0-9]{3}[A-Za-z]{2}[0-9]{3}[A-Za-z]{2}[0
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?{}[]|\:;'<>,./\s\t\n])[a-zA-Z0-9!@#$%^&*()_+-=?{}[]|\:;'<>,./\s
^[a-z]{2}[A-Z]{2}$
\b(?:\d{2}[-\s]?\d{3}[-\s]?\d{4})\b
[0-9]{4}/[0-9]{2}/[0-9]{2}
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: ^[0-9]*$
[1-9]\d{0,2}
\b(0|[1-9]\d|1[0-2]\d|2[0-4]\d|25[0-5])\b
(?<=\s)(?=\d)(?<!\d)(?=\d)(?!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<
[A-Z]{2}[0-9]{3}[A-Z]{2}[0-9]{3}[A-Z]{2}[0-9]{3}[A-Z]{2}[0-9]{3}[A-Z]{2}[
(?<year>\d{4}-\d{2}-\d{2})
^(4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|10[0-9]|11[0-9]|12[0-9]|13[0-9]|
(\d{1,2})(\.\d{1,2})?(?:\s|$)
^[A-Z]{2}[a-z]{1}$
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer:^[a-zA-Z0-9_\-.]+$
(\d{4}-\d{2}-\d{2}|\d{4}-\d{2}-\d{2}|\d{4}-\d{2}-\d{2}|\d{4}-\d{2}-\d{2}|\d{4}-\d{2}-\d
\d{1,3}(,\d{3})*(\.\d{1,2})?
(\+\d{3}|\d{3}[-.]\d{3}|\d{3}[-.]\d{3}[-.]\d{3})
[0-9]{1,2}:[0-9]{2}:[0-9]{2}(?:[ap]m|[ap]\.m|[ap]\.s|[ap]\.p)
(?<=\d{3})(?=\d{2})(?=\d{4})(?=\d{3})(?=\d{2})(?=\d{4})(?=\d{3})(?=\d{2})(?=\d{4})(?=\d{3})(?=\d{2})(?=\d{4})(?=\
^6[789]\d{8}$
(^[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}$|^[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2
^([1-9]|1[012])[0-9]{2}:[0-5][0-9]$
(\d{1,2}\/\d{1,2}\/\d{4})
(\d{2}\/\d{2}\/\d{4})|(\d{2}\/\d{2}\/\d{2})|(\d{2}\/\d{2}\/\d{2})|(\d{2}\/\d{2}\/\d{2})|(\d{2}\/\d{2}\/\d{2})|(\d
(?P<time>\d{1,2}:\d{2}(?:-\d{2})?(?:\s*am|\s*pm))
The RegEx should match the following format: [0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f
[a-zA-Z]
^(?:\(?[0-9]{3}\)?[0-9]{3}[0-9]{4}|[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3
(^[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer:^(?!.*[^a-zA-Z0-9\-\.])(?!.*[^a-zA-
^(?=.{4,8}$)[a-zA-Z0-9]{1,}$
^\+?(\d{1,3})\s?[-\s]?(\d{3})[-\s]?(\d{4})$
(\d{3})(\d{2})(\d{4})
(?<!\d)(?<![\d.])(?<![\d.]\d)(?<![\d.]\d\d)(?<![\d.]\d\d\d)(?<![\d.]\d\d\d\d)(?<![\d.]\d\d\d\d\d)(?<![\d.]\d\d\d\d\d\
Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the. (period) to ensure that no other characters may be used in it's place.Generate a RegEx for this description. Answer: \d{1,3}(?:,\d{3})*(?:,\d{3})*(?:,\d{4})
A-Z, a-z, 0-9, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
HTML Pattern MatchingPLEASE HELP/&lt;[^&gt;]*&gt;/igThe above pattern is only successful when html tag are simple (they don't include any javascript). This mean that the pattern will fail if something like this is within the tag &lt;input type=button value=test onclick='if(n.value&gt;5)do_this();'&gt;. It will not match the entire open n close sign.How do you write a pattern that will pass all these tag so that the pattern will match from the open to the close tag
^[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}$
/^[0-9]*[1-9]/
[^0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[
^(?P<month>\d{1,2})(?P<year>\d{2})$
[a-zA-Z0-9]{1,3}\.\w{1,3}\.\w{1,3}\.\w{1,3}
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer:^[0-9]*$
(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d\d
(0|[1-9][0-9]{0,2}|100[0-9]{1,2}|1[0-9]{1,3}|[1-9]{1,3}[0-9]{1,2}|[1-9]{1,3}[0-9]{1,2}[0-9
\b[A-Za-z0-9- ]+\b
^(0[1-9]|1[012])\/(0[
^[A-D]{2}[0-9]{3}[A-D]{2}$
/^[^']*$/
(?<![0-9])([0-9]{1,2})([a-z])([a-z])([a-z])([a-z])([a-z])([a-z])([a-z])([a-z])([a-z])([a-z]
XXX-XX-XX-XXX ; XXX-XXX-XX-XX ; XXX XX XX XXX ; XXX XXX XX XX
\b(?i)([\d\.]+)([Ee][\d\.]+)[\s\S]*\b
/^[0-9]{1,3}\s[0-9]{1,3}\s[0-9]{1,3}\s[0-9]{1,3}\s[0-9]{1,3}\s[0-9]{1,3}$/
(\d+)([a-zA-Z])(\d+)([a-zA-Z])(\d+)
Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators:. - /Valid dates only! m (1-12)/ d (1-31)/ y (0..)(rizzipereira.com.br)For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250Generate a RegEx for this description. Answer:^(0[1-9]|1[012])\/(0[1
[\\"/]?[0-9]{1,3}[\\"/]?
^(?:\d{1,2}(?:\d{1,2})?|\d{1,3}(?:\d{1,2})?|\d{1,4}(?:\d{1,2})?|\d{1,5}(?
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$
(\d{1,}|\*\d{1,}|\*\d{1,}|\*\d{1,}|\*\d{1,}|\*\d{1,}|\*\d{1,}|\*\d{1,}|\*\d{1,}|\*\d
^[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{4}$
^\d{5}-\d{4}-\d{5
[0-9]{3}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2
(^[0-9]{1,2}:[0-9]{2}:[0-9]{2}$|^[0-9]{1,2}:[0-9]{2}:[0-9]{2}$|^[0-9]{1,2}:[0-9]{2}:[0-9]{2}$|^[0-9]{1,2}:[0
[^a-zA-Z0-9]{2}[a-zA-Z0-9]{9}[^a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-
^[0-9]{1,5}[A-Za-z]{1,5}$
[\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d]
grep -E '^[0-9a-fA-F]{1,16}$'
\b(Istat Ateco Code|Istat Declaration Ateco)\b
\d{1,2}/\d{4}
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+\-=?/\\|~\[\]])(?=.*[0-
^\$[0-9,]+(,[0-9]{3})*$
(?<=^|\.)(?P<package>.+?)(?<!\.)(?P<class>.+?)(?=$|\.)
[0-9]{1,2}\.\d{1,2}
([0-9]{8}|[0-9]{9}|[0-9]{10}|[0-9]{11}|[0-9]{12}|[0-9]{13}|[0-9]{14}|[0-9]{15}|[0-9]{16}|[0
^03\d{11}$
(\d{1,3}[a-zA-Z]{1,3}[a-zA-Z]{1,3}[a-zA-Z]{1,3}[a-zA-Z]{1,3}[a-zA-Z]{1,3}[a-zA-Z]{1,3}[
\$\d+(\.\d{2})?
(?<=\$)(?:\d{1,2}(,\d{3})*)(?:\.\d{2})?
\d{3}[A-Z]{1}\d{3}[A-Z]{1}
[A0-A9]\d{0,2}[A0-A9]\d{0,2}[A0-A9]\d{0,2}[A0-A9]\d{0,2}[A0-A9]\d{0,2}[A0-A9]\d{0,2}[A0-A9]\d{0,2}[A0-A9]
(?<![0-9])(?<![0-9][0-9][0-9])[0-9]{5}(?![0-9])
(?<!\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\
(?<![a-zA-Z])[a-zA-Z0-9]|[a-zA-Z0-9]
(\d{1,2}:\d{2}:\d{2})\s*$
Regular expression for US (ZIP and ZIP+4) and Canadian postal codes. It allows 5 digits for the first US postal code and requires that the +4, if it exists, is four digits long. Canadain postal codes can contain a space and take form of A1A 1A1. The letters can be upper or lower case, but the first letter must be one of the standard Canadian zones: A,B,C,E,G,H,J,K,L,M,N,P,R,S,T,V,X,Y.Generate a RegEx for this description.
^(?:[1-9]\d|1[0-2]
\d{2}/\d{2}/\d{4}|\d{2}/\d{2}/\d{2}|\d{2}/\d{2}/\d{4}
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[-])[0-9]{4}[-][0-9]{4}[-][0-9]{4}$
(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})
^(0[1-9]|1[012])[-/.](0[1-9]|[12][0-9]|3[01])[-/.](19|20)\d\d$
(?<!\d)(?:\d+|\.)
^[A-Za-z]{1}[0-9]{1,2}[A-Za-z]{1}[0-9]{1,2}[A-Za-z
^[A-Za-z]{4}[0-9]{10}$
^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?/\[\]{};:,<>\|~]).{8,25}$
(?<=\/\/).*?(?=\/\*)(?<=\*\/)(?<=\*)(?<=\/)(?<=\/\/).*?(?=\*\/\*)(?<=\*\/)(?<=\/)(?<=\/\/).*?(?=\*\/\*)(?<=\/)(?<
^\+?[0-9]{1,2}\s?[0-9]{1,2}\s?[0-9]{1,2}\s?[0-9]{1,2}$
^(?=.*[1-9])(?=.*[4-9])(?=.*[5-9])(?=.*[6-9])(?=.*[7-9])(?=.*[8-9])(?=.*[
(?<start>\d+)(?<stop>\d+)(?<blah>\w+);
^\(?[0-9]{1,3}\)?[0-9]{3}[0-9]{3}$
^(?=.*[a-fA-F0-9]{32})(?=.*[a-fA-F0-9]{32}).*$
<td[^>]*>(.*?)</td>
^\+?[1-9]\d{2}(?:\s|-|\.)?[1-9]\d{3}$
^(?:[0-9]{1,2}[a-zA-Z]{1,2}[0-9]{1,2}[a-zA-Z]{1,2}[0-9]{1,2}[a-zA-Z]{1,2}
[^\d]{3}-[^\d]{3}-[^\d]{4}
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (https://tools.twainscanning.com/getmyregex)
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[0-9]{3}$
^[0-9a-f]{1,4}:[0-9a-f]{1,4}:[0-9a-f]{1,4}$
\d{1,2}/\d{1,2}/\d{4} \d{1,2}:\d{1,2}
Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answer:(?<![0-9])[0-9]{2}[0-9]{2}[0-9]{4}
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9-]{3,4}$
^(?:\d+\.\d+|\d+\.\d+\.\d+|\d+\.\d+\.\d+|\d+\.\d+\.\d+\.\d+|\d+\.\d+\.\d+\.\d+\.\d+)$
Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answer:^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?
[\s\S]*
^[1-9][0-9]{0,3}$
\d{3}[A-Z]{1}[A-Z]{1}[A-Z]{1}
(?<![0-9])(?<![1-9][0-9])(?![0-9])(?![1-9][0-9][0-9])(?![1-9][0-9][0-9][0-9])(?![1-9][0-9][0-9][0-9][0-9])[0-9]{
^[a-zA-Z0-9_\-\.]+ing$
^(19|20)\d{2}(?:[-/](19|20)\d{2})?$
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[-]).*$
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d
(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53
\b\d{1,3}[-.]?\d{3}[-.]?\d{4}\b
[0-9]{2}:[0-9]{2}:[0-9]{2}
^[A-Z]{1,2}[0-9]{3}[A-Z]{1,2}[0-9]{4}$
(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?/\\|}{~:]*)(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?/\\|}{
^(?=.*\d)(?=.*,)\d+(?:\.\d+)?$
(0|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.[0-9]{1,3}|[1-9][0-9]{1,3}\.\d{1,3}|[1-9]\d{1,3}
(?<comment>//.*?)(?<region>/*.*?\*/)
(?<!\d)(?<![,\s])(?<![,\s])\d+(?![,\s])
^\+?[0-9]{1,3}\s?[0-9]{1,3}\s?[0-9]{1,3}\s?[0-9]{1,3}\s?[0-
(?<!\d)\d+(?:\.\d+)?
^[1-9][0-9]|1[0-2]$
(0[1-9]|1[012])
Regex to validate strong password for.NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.Generate a RegEx for this description. Answer:
(\d{3}[-\.\s]?\d{3}[-\.\s]?\d{4})
(\d{2}\/\d{2}\/\d{4})([\d\w]{3})
[0-9]{1,7}(\.\d{1,9})?
^[0-9]{8}$
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<=\[\s*)(.*?)\s*\]\s*
(\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}|\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}|\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}
(\b[A-Z][a-z]{2}\b|\b[A-Z][a-z]{3}\b|\b[A-Z][a-z]{4}\b|\b[A-Z][a-z]{5}\b|\b[A-Z][a-z]{6}\b|\b[A-Z][a-z]{7}\b|\b[A-Z
Accurate Australian postal code verification.Australia has 4-digit numeric postal codes with the following state based specific ranges.ACT: 0200-0299 and 2600-2639.NSW: 1000-1999, 2000-2599 and 2640-2914.NT: 0900-0999 and 0800-0899.QLD: 9000-9999 and 4000-4999.SA: 5000-5999.TAS: 7800-7999 and 7000-7499.VIC: 8000-8999 and 3000-3999.WA: 6800-69
(?<Q>\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2})\/(?<R>\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2})\/(?<Z>\d{1,2}\.\d{1,2}\.\
(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})
/^\d{3}$|^\d{4}$/
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer: (0|[1-9][0-9]*|1[0-9]*[0-9]|1[0-9]*[0-9]|1[0-9]*[0-
^[1-9]\d*|10$
(?<=\$)(\d{1,3}(?:\.\d{3})?)(?=\s*\,\s*\d{2}(?:\.\d{3})?$)
Positive decimal values can be generated using the following RegEx: [0-9]+(.[0-9]+)*. Negative decimal values can be generated using the following RegEx: -[0-9]+(.[0-9]+)*.
^[A-D]{1,3}[A-D]{1,3}[A-D]{1,3}[A-D]{1,3}[A-D]{1,3}[A-D]{1,3}[
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: [^\s]*(?P<source>[^\s]*)\s+(?P<type>\w+)\s+(?P<count>\d+)
^(?=.{4,8}$)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,}$
(?<![0-9])(?<![1-9][0-9])[0-9]{1,3}(?![0-9])(?<![1-9][0-9])(?![1-9][0-9][0-9])[0-9]{1,3}(?![0-9])(?<
[a-zA-Z0-9_.-]+
(\b[A-Z][a-z]{2}\b|\b[A-Z][a-z]{3}\b|\b[A-Z][a-z]{4}\b|\b[A-Z][a-z]{5}\b|\b[A-Z][a-z]{6}\b|\b[A-Z][a-z]{7}\b)
[^a-zA-Z0-9]
^[0-9]{1,3}[.][0-9]{1,3}$
^(?P<year>\
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[a-zA-Z\d@$!%*?&]{5,15}$
[0-9]{7}
^(?=.*[1-9]\d*$)(?=.*[0-9]\d*$)(?=.*[0-9]\d*$)(?=.*[0-9]\d*$)(?=.*[0-9]\
[0-9]{2}[0-9]{1}[0-9]{8}
[a-zA-Z0-9_]
^\+31[\s\-]*[0-9]{9}$
<img src="&lt;img\1 /&gt;" />
(\d{1,2}):(\d{2})(?::(\d{2}))?
^(?=.*[a-z])(?=.*[A-Z])(?=.*
(?<!\d)(?:\.\d{1,2})?(?!\d)
^(?=.*[0-9])(?=.*[1-9])(?=.*[2-9])(?=.*[3-9])(?=.*[4-9])(?=.*[5-9])(?=.*[6-9])(?=.*[7-9])(?=.*[8-9])(?=.*[9])[0-9]*$
^(0[1-9]|1[012])[0-9]{3}$
^(0[1-9]|1[012])[0-9]{2}:[0-9]{2}:[0-9]{2}$
(?<!\d)(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?<!\.)\d{
(?<!\d)(?<!\*)(?<!\[)(?<!\])(?<!\^)(?<!\#)(?<!\_)(?<!\~)(?<!\@)(?<!\#)(?<!\
var date = new Date("01-01-1900");var dateFormat = "dd-mm-yyyy";var dateParts = date.toString().split(dateFormat);var datePartsLength = dateParts.length;var datePartsLength2 = datePartsLength - 1
\s+
[^\d]{3}[\d]{3
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\[\]{};:,.<>\|`~])[a-zA-Z0-9
^[0-9]{1,3},[0-9]{1,3},[0-9]{1
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer: [^\.]+\.jpg|[^\.]+\.gif
<td>(.*)</td>
(\d{1,2})(\d{1,2})(\d{1,2})$
\b(?:[0-9]{1,2}[a-z]{1,2}[0-9]{1,2}|[0-9]{1,2}[a-z]{1,2}[0-9]{1,2}[a-z]{1,2}|[
\b(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(
/^#.*$/
(^(?:(?:0?[1-9]|1[012])-(?:0?[1-9]|[12][0-9]|3[01])-(?:0?[1-9]|1[012])|(
^[0-9]+(\.[0-9]+)?$
^(?=.*5)(?=.*[0-9]{5})(?=.*[0-9]{5})(?=.*[0-9]{5})(?=.*[0-9]{5})(?=.*[0-9]{5})(?=.*[0-9]{5})(?=.*[0-9]{5})(
^(?=.{1,10}$)(?=.{1,10}$)(?=.{1,10}$)(?=.{1,10}$)(?=.{1,10
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[a-zA-Za-z0-9])[0-9a-zA-Za-z0-9]{10}$
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:(?<!\d)\$(?<![\d\.])(?<![\d\.]\.)(?<![\d\.]\.)(?
(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\
\d
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer: (\d+(?:\.\d+)?(?:[eE][+-]\d+)?)
^\d+[#\s]?\d+[#\s]?\d+$
(a-h)(1-8)([a-zA-Z])
^(?:[0-9]|1[0-9]|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]|2[0-4][
var re = new RegExp("(?<=['\"])\\s+", "g");
(?<!\d{1,2}[-\s]{1}[0-9]{1,2}[-\s]{1}[0-9]{1,2}[-\s]{1}[0-9]{1,2}[-\s]{1}[0-9]{1,2}[-\s]{1}[0-
^[a-zA-Z][a-zA-Z0-9_]{4,15}$
^\+?[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9
^\$[\d,]{1,2}\.\d{1,2}$
\d{4}-\d{2}-\d{2} \d{4}
\d{1,10}
(0-9)(0-9)(0-9)(0-9)(0-9)(0-9)(0-9)(0-9)(0-9)(0-9)(0-9)(0-9)(0-9)(0-9)(0-9)(0-9)(0-9)(0-9)(0-9)(0-9)(0-9)(0-
/\d{1,2}\/\d{2,4}/
^(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Za-z0-9])[A-Z0-9]{3}-[A-Z0-9]{3}-[A-Z0-9]{4}
^(?!SEP)(.*)$
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer: [0-9]{1,4}\.?[0-9]{0,3}
(\d{1,2})\s*:\s*([ap]m|am|pm)\s*
(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
(?<!\d)(?<![a-zA-Z])[0-9]{1,2}(?<![a-zA-Z])[0-9]{1,2}(?<![a-zA-Z])[0-9]{1,2}(?<![a-zA-
match string between chars'' as in source codeGenerate a RegEx for this description. Answer: \s*
(?<Q>\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+
(\d+\.\d+|\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+)
^(?:(?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])|(?:1[012])[-/.](?:0[1-9]|[12][0-9]|3[01]))(?:[-
(?<![\(\)\s-])[0-9]{3}[-\s]?[0-9]{3}[-\s]?[0-9]{4}(
^[0-9]{1,3}[,.]?[0-9]{1,2}$
ip:port checkerip:port checkerip:port checkerip:port checkerip:port checkerip:port checkerip:port checkerip:port checkerip:port checkerip:port checkerip:port checkerip:port checkerip:port checkerip:port check
[Insert answer here]
(\w+)\s(\w+)\s(\w+)\s(\w+)\s(\w+)\s(\w+)\s(\w+)\s(\w+)\s(\w+)\s(\w+)\s(\w+)\s(\w+)\s(\w+)\s(\w+)\s(\w+)\s(\w+)\s(\w+)\s(\w+)\s(\w+)\
^[0-9]+(?:\.[0-9]+)+$
(?i)\b[A-Za-z0-9_]{1,30}\b
(?<=\s|^)([a-zA-Z0-9_]+)
(?<=\$)(\d{1,3})(?:\.\d{3})?(?:\.\d{3})?(?:\.\d{3})?(?:\.\d{3})?(?:\.\d
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer:^(?!.*[.!#$%&'()*+,-./:;<=>?@[\\]^_`
/(.*)$2/
^\+?1[\s\d]{3}\-?3[\s\d]{4}$
(?i)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]{8}
^(?:\?[^\?\s]*)?$
^(?=.*GMT)(?=.*GMT|GMT+1)(?=.*GMT|GMT-1)(?=.*GMT|GMT+2)(?=.*GMT|GMT-2)(?=.*GMT|GMT+3)(?=.*GMT|GMT-3)(?=.*GMT|GMT+4)(?=.*GMT|GMT-4)(?=.*GMT|GMT+5)(?=.*GMT|GMT-5)(?=.*GMT|GMT+6
^(?:(?:(?:1[012]|0?[1
(?<=\d{1,3})(?=\d{1,3})(?<!\d{1,3})(?=\d{1,3})(?<!\d{1,3})(?<!\d{1,3})(?<!\d{1,3})(?<!\d{1,3})(?<!\d{1,3})(?<!\d{1,3})(?
^(00[1-9]|[1-9]\d|1[0-9]\d|2[0-8]\d|3[01])[ -]?(00[1-9]
/[a-zA-Z0-9-_]+
/^[0-9]{4}$/
[^a-zA-Z0-9\s-]
[a-zA-Z0-9!@#$%^&*()_+-=[]{};:,.<>?/\|`~]
[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z
^1\.0\.0\.0$
(\d{1,6})(\d{1,6})(\d{1,6})(\d{1,6})
[6]\d{7}
^[0-9]{1,3}(?:\.[0-9]{1,3})?(?:\.[0-9]{1,3})?(?:\.[0-9]{1,3})?$
(\d{3}-\d{3}-\d{4})
(?<![0-9])([A-D])(?![0-9])
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer:
^[a-zA-Z0-9._-]{5,15}$
^(?=.*[1-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(
^[0-9]{1,3}[ \-\,]?[0-9]{3}[ \-\,]?[0-9]{3}[ \-\,]?[0-9]{3}[ \-\
(?i)(?=.*\.)(?=.*\.)(?=.*\.)(?=.*\.)(?=.*\.)(?=.*\.)(?=.*\.)(?=.*\.)(?=.*\.)(?=.*\.)(?=.*\.)(?=.*\.)(?=.*\.)(?=.*\.)(?=.*\.)(?
(?i)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).*
0x[0-9a-fA-F]+
^([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2}
(\+2[0-9]|[0-9]{1,2})([0-9]{3})?[0-9]{3}[0-9]{4}[0-9]{3}[0-9]{3}[0-9]{4}
[a-zA-Z]{8}[a-zA-Z]
h:mm or hh:mm
^(?=.*[0-9])(?=.*[A-Z])(?=.*[X-])
var date = new Date(2015, 4, 1);var regex = new RegExp(    "^(0[1-9]|1[012])\/(
^\$[0-9,]{1,3}(\.\d{1,2})?$
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{11,20}$
var date = "21-02-2016";var regex = new RegExp("^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(19[0-9]|20[0-
(?<![\d,])(\d+)(?![\d,])
^(?:(?:0[1-9]|1[012])-(?:0[1-9]|[12][0-9]|3[01])-(?:0[1-9]|1[012])|(?:
(^[0-9]{1,8}[SC]\d{6}$)
[0-9]{1,3}[-0-9]{1,3}[0-9]{1,3}
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-
(\d{1,2})\s*:\s*(\d{1,2})\s*:\s*(\d{1,2})\s*(am|pm)
^([0-9]{1,2}):([0-9]{2}):([0-9]{2})$
^(?:http|https)://(?:[a-zA-Z0-9\-_\.]+\.[a-zA-Z0-9\-_\.]+)/?(?:[a-zA-Z0-9\-_\.]+\
^(\d{4})(\d{2})(\d{2})$
[0-9]*[.][0-9]*[+-]?[0-9]*
^(?:[0-9]{1,2}\s)?[0-9]{1,2}\s
^(?:\d{1,2}\s)?\d{1,2}\/\d{1,2}
(\d{1,2}):(\d{2}):(\d{2}) / (\d{2}):(\d{2}) / (\d{2})
(\d{3})-(\d{2})-(\d{4})
(\d{4})/(\d{2})/(\d{2})
(?<![^\w\s])[a-zA-Z0-9\s]+(?![^\w\s])
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer:[0-9]{3}[0-9]{2}[0-9]{1}
(\d{1,2}|\d{3}|\d{4}|\d{5}|\d{6})
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=\\[\\]{};\'\"\\,./:?\\|\\~\\`\\`\\`\\`\\`\\`\\`\\`\\`\\`\\`\\`\\`\\
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]{8})(?=.*[a-z]{1})(?=.*[A-Z]{1}
(^[0-9]{5}[.][0-9]{2}$)
^(1[0-9]|2[0-9]|3[01])\/(1[0-9]|2[0-9]|3[01])\/(19|20)\d{2}$
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[-]).{4}-\
(?<![a-zA-Z0-9-])[0-9]{1,3}[a-zA-Z0-9
[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}
^\+?1\s\d{3}\-\d{3}\s\d{4}$
(?<!\d)(?<![0-9]\.)(?<![0-9])(?!\.)(?<![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-
ATU12345678
^(00[1-9]|1[012])[ -]?[0-9]{3}[ -]?[0-9]{3}[ -]?[0-9]{3}[
^[a-zA-Z][a-zA-Z0-9\-\_]{6,17}$
^[0-9]{1,3}[0-9]{3}[0-9]{3}$
^\+1[0-9]{3}(?:\s[0-9]{3})?$
^(?:(?:[1-9]|1[0-2]):[0-5][0-9])?(?:[0-5][0-9])?(?:[0-5][0-9])?(?:[0
(\d{2})\s(\d{2})\s(\d{4}).
[0-9]+(?:\.[0-9]+)?(?:\.[0-9]+)
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer:^(http|https)://[a-zA-Z0-9\-\.]+/
(?<!\d)(0*)(\d+)(?!\d)
(?<!\d)\d{10}(?!\d)
(?<!\d)(?<![+-])\d{1,3}(?!\d)
(?<!\d)(\d{4})(?!\d)
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?.])(?=.*[\s])[0-9a-zA-Z!@#$%^&*()_+-=?.]{12,20}$
(?<month>\d{1,2})/(?<day>\d{1,2})/(?<year>\d{4})
^[0-9]{3}[ -]?[0-9]{3}[ -]?[0-9]{3}[ -]?[0-9]{4}$
^\d{3}[-\s]?\d{4}$
\d{4}-\d{2}-\d{2} \d{2} \d{2} \d{2} \d{4}
(0.00%|0.01%|0.02%|0.03%|0.04%|0.05%|0.06%|0.07%|0.08%|0.09%|0.1%|0.11%|0.12%|0.13%|0.14%|0.15%|0.16%|0.17%|0.18%|0.19%
^[A-Z]{5}-[A-Z]{4}
(\d+)(\s*)(\d+)(\s*)(\d+)(\s*)(\d+)(\s*)(\d+)(\s*)(\d+)(\s*)(\d+)(\s*)(\d+)(\s*)(\d+)(\s*)(\d+)(\s*)(\d+)(\s*)(\d+)(\s*)(\d+)(\
\b(0?[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])/\d{4}\b
\s*[0-9a-fA-F]+\s*
^(0[1-9]|1[0-2]|2[0
^(?:http|ftp)s?://[\w\-\.]+(?:\.[\w\-\.]+)*(?:\.[a-z]{2,6})?(?:\/[\w\-\.]+)*(?:\.[a-z
\d{1,2}/\w{3}/\d{4}
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer: (?<!\d)(?<![.])(?<![.]\.)(?<![.]\.)(?<![.]\.)(?<![.]\.)(?<![.]\.)(?<![.]\.)(?<![.]\.)(?<![.]\.)(?<![.]\.)(?<![.]\.)
[1]|
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer: ^(http|https)://[a-zA-Z0-9\-\.]+[a-zA-Z0-9\-\.]+[a-zA-Z0-9\-\.]+$
(?<![0-9])[0-9]{9}[0-9]{3}[0-9]{2}[0-9]{1}
[0-9]{1,5}
[^\d]{1,3}[^\d]{1,3}[^\d]{1,3}[^\d]{1,3}[^\d]{1,3}[^\d]{1,3}[^\d]{1,3}[^\d]{1,3}[^\d]{1,3}[^\d]{1,3}[^\d]{1,3}
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
^[A-Za-z0-9]{5} [A-Za-z0-9]{5} [A-Za-z0-9]{5} [A-Za-z0-9]{5} [A-Za-z0-9]{5}$
\d{4}-\d{4}-\d{4}-\d{4}
[1-20]
(\.(jpg|jpeg))
(\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{4}|\
(?<![0-9])[0-9]{3}-[0-9]{2}-[0-9]{4}|[0-9]{3}-[0-9]{2}-[0-9]{4}|[0-9]{3}-[0-9]{2}-[0-9]{4}|[0-9]{3}-[0
[\d{3}-\d{2}-\d
[N|S|E|W]\s*\d+
/^[0-9]*$/
(?<!\d)(?<![\d\.])(?<![\d\.])(?<![\d\.])(?!\d)(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\
Regex.IsMatch(Text, "[\u0600-\u06FF]");
[Zip Code]\d{5}[-\s]\d{4}[-\s]\d{3}[-\s]\d{2}[-\s]\d{1}
[A-Za-z0-9-_ ]+
Fred Flintstone, Barney Rubble, Mr. Flintstone, and Mr. Flintstone.
^([0-9a-fA-F]{2}[:-]){5}([0-9a-fA-F]{2})$
(\d{3}|\d{4})(\+|-)(\d{3}|\d{4})
(\d+\.\d+|\d+)(,\d+)?
^(?:[0-9]{4}-){3}[0-9]{2}-(?:[0-9]{2}:[0-9]{2}:[0-9]{2}|[
/^[+-]?[0-9]{1,2}(,?[0-9]{3})*$/
^(0|[1-9][0-9]*)([0-9]*)([0-9]*)([0-9]*)([0-9]*)([0-9]*)([0-9]*)([0-9]*)([0-9]*)([0-9]*
(?<!\d)([0-9]{1,2})(?:-[0-9]{1,2})?(?:\.(?:\d{1,2}))?(?:\s*(am|pm|AM|PM|AM|PM|AM|PM|AM|PM|AM|PM|AM|PM|AM|
[a-zA-Z0-9_]{1,}
(?<=\d{1,5})(?=\d{1,2})(?=\d{1,2}\.\d{1,2})(?=\d{1,2}\.\d{1,2}\.\d{1,2})
/^[a-zA-Z0-9_\-\.]+$/
^[0-9]+(.[0-9]*)?$
[^\d-]{32}-[^\d-]{32}-[^\d-]{32}
\d{4}-\d{2}-\d{2}(?:\.\d{1,2})?
^[a-fA-F0-9]{32}$
^(?=.*[€])(?=.*[EUR])(?=.*[EURO]).{3,20}$
^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(0[1-
\b\d{1,3}[a-fA-F0-9]{1,3}\b
(\.(jpg|jpeg))$
VIN_REGEX = r'^[A-Z]{3}[0-9]{3}[0-9]{4}$'
(?<![a-zA-Z0-9])
[^\s]+
^[a-zA-Z0-9 ]+$
^(?P<description>.*?)$
(^-?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?)
(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0
(?<![0-9])([0-9]{1,3}\.){3}[0-9]{1,3}
/^[0-9]*[1-9][0-9]*$/
^(?:[1-9]\d{0,2}|100[0-9]{0,2}|1[0-9]{0,2}|1000[0-9]{0,2}|1[0-9]{0,2}|10000[0-9]{0,2}|1[0-9]{0,2}|
^[0-9a-fA-F]{3}[0-9a-fA-F]{3}$
^\+?(\d{1,3}\s?\d{3}[-\s]?\d{3}[-\s]?\d{4}$
^[0-9]{1,3}(?:[0-9]{3})?$
^(0[1-9]|1[012])[- /.](0[1-9]|1[012])[- /.](19|20)\d{2}$
(?<start>\d{1,2}:\d{1,2}:\d{1,2}:\d{1,2
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: strFirstName\b(?:(?<!^|\s)(?<!_)(?<!-)[A-Z][a-z]*(?!_)(?!-)[A-Z][a-z]*\b)
(?:\+?[1-9]\d{1,2}|[1-9]\d{1,3}[-\s]?)\s?[1-9]\d{1
This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.NET :Regex.Replace(Html, "<[^>]*>", string.Empty);Generate a RegEx for this description. Answer:Regex.Replace(Html, "<[^>]*>", string.Empty);
^(?:\d+\.\d+|\d+\.\d+\d+)\d*$
\b(0[1-9]|[1-9]\d|2
(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d
(?<=\s|^)(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?
(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(19|20)\d\d
(?<!\d)(?:\d+|\.)(?!\d)
(?<=\s)([a-zA-Z0-9_]+)
(100-199)(0-9)(0-9)
\s
^[0-9]{1,7}(\.0{0,1})?$
^[^xx]*$
^(0[1-9]|1[0-2])[0-5][0-9]$
^(?P<year>\d{4})(?P<month>\d{2})(?P<day>\d{2})(?P<hour>\d{2})(?P<minute>\d{2})(?P<second>\d{2})?$
^(?=.*\d{4})(?=.*[A-Za-z]{1})(?=.*[0-9]{1})(?=.*[
a-zA-Z0-9
(?<=^[0-9]{10})(?=\D)
(?<=^|\s)(?=[A-Z])(?<![A-Z])(?<![a-z])[A-Z]{2}(?<![a-z])(?<![A-Z])(?<![a-z])(?<![A-Z])(?<![a-
^(/w|/W|[^&lt;&gt;])+$
^(?:\d{1,2}\.){1,2}\d{1,2}(?:[,;]\d{1,2})*$
^[0-9]{5}[0-9]{2}$
[0-9]{5}[ -]?[0-9]{4}
^[a-z]{2}(?:-[a-z]{2})?$
^(?=.*\d)(?=.*\.)(?=.*[0-9])[0-9]*(?:\.[0-9]*)?$
(.*) (\(.*\))
^(?=.*[^,])(?=.*[^,])(?=.*[^,])(?=.*[^,])(?=.*[^,])(?=.*[^,])(?=.*[^,])(?=.*[^,])(?=.*[^,])(?=.*[^,])(?=.*
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:    public static string CurrencyExpression(string currency)    {        var currencyRegex = new Regex(@"^(?<currency>[A-Z]{3})(
\$\d+(\.\d+)?
^(?=.*\d)(?=.*[1-9])[0-9]{1,2}\.?[0-9]{1,2}$
(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/[0-9]{4}
^(49)([0-9]{4})([0-9]{4})([0-9]{4})([0-9]{4})([0-9]{4})([0-9]{4})([0-9]{4})([0-9]
(\d{3}(?:\.\d{3})?)(?:\s|$)
[a-zA-Z0-9\s-]+
^[A-Za-z0-9]{5}[0-9]{6}[
^[0-9]{3}[0-9]{3}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{3}$
^(0?[1-9]|1[012])[0-9]{2}$
This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answer:grep -E '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'
^(?:(?:(?:0[1-9]|1[012
^(?:(?:[01]?[0-9]|2[0-3]):[0-5][0-9]):
^[A-Za-z0-9]{1,2}[A-Za-z0-9]{1,2}[A-Za-z0-9]{1,2}[
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<![0-9])(?<![a-zA-Z])(?<![0-9])(?<![a-zA-Z])(?<![0-9])(?<![a-zA-Z])(?<![0-9])(?<![a-zA-Z]
^[0-9]{3}[0-9]{3}[0-9]{4}$
(\w+)\s*=\s*(.+)
^[a-zA-Z]{4,15}$
/^([0-9]{1,2})([,.])([0-9]{1,2})([,.])([0-9]{1,2})([,.])([0-9]{1,2})([
[^0]{2}[0-9]{4}[^0]{2}
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer: ^\$[0-9]{1,3}(,\d{3})*$
(?<![\d\.])(?<![\d\.]\.)(?![\d\.])(?![\d\.])(?![\d\.]\.)(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\
[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9
^(0[1-9]|[1-9]\d|1[0-2])[0-5]?[0-9]?[0-9]$
^[a-zA-Z0-9]*(?:\.[a-zA-Z0-9]*)*$
^(?!(?:[^0-9]|[0-9]{2}[0-9]|[0-9]{3}[0-9]|[0-9]{4}[0-9]|[0-9]{5}[0-9]|[0-
(0|[1-9][0-9]|1[012])[0-9]{2}
(0|[1-9][0-9]?|1[0-2])[0-9]{2}
^[A-Z]{1}[0-9]{4} [A-Z]{1}[0-9]{2} [A-Z]{1}[0-9]{1} [A-Z]{1}$
(\d{2}-\d{2}-\d{4}).*
^[0-9]+(,[0-9]+)*$
(?<=^|\s)([^\s]*)(?=\s|$)
This expression is an attempt to match the most obvious features of a valid date in American/US format of the form mm/dd/yyyy for any year 1900 through 2003. It can easily be adapted for different date ranges. It matches any date where the day part is any number 01-31, the month part is any number 01-12, and the year part is any number 1900-2003. The only invalid dates that it matches are ones where the day part may be in the range 01-31 but that range might not be valid for the specified month. An example of an invalid date that it would allow to pass through is
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z0-9])[a-zA-Z0-9]{8,}$
(\d{1,2})([ap]m)(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})
(?<!\n)(?<!\r)(?<!\t)(?<!\f)(?<!\v)(?<!\b)(?<!\s)(?<!\[)(?<!\])(?<!\{)(?<!\})(?<!\()(?<!\))(?<!\&)(?<!\;)(?
(Example)
[^0-9]*([0-9]{1,3}[,.]{0,1}[0-9]{3})|[0-9]{1,3}[,.]{0,1}[0-9]{3}[^0-9]*
Accepts valid EIN numbers. It could use a bit of tweaking because these are the current valid prefixes allowed. 1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62
(\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2})
(0|1|2|3|4|5|6|7|8|9|*|\*|\*|\*|\*|\*|\*|\*|\*|\*|\*|\*|\*|\*|\*|\
```pythonpostcode_regex = re.compile(r'^[A-Z]{1,2}\d{1,2}\s[A-Z]{1,2}\d{1,2}$')```
(?<![0-9])(?<![a-zA-Z])(?<![a-zA-Z0-9])([0-9]{1,2})([a-zA-Z]{1,2})([0-9]{1,2})([a-zA-Z0-9]{1
^[1-5][0-9]$
(?<=^|\s)(?=\d{4})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(
0x[0-9a-fA-F]{2}
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer: (?:\d{1,99}\.5)?
(?i)(?<![a-zA-Z0-9_])[a-zA-Z0-9_]{3,}
Zip+4 Zipcode RegEx. You may ommit the +4 digits but you must also then ommit the hyphen/dash as well. In 1983, the Postal Service™ began using an expanded ZIP Code™ number called called the &quot;ZIP+4&#174;&quot; Code. The nine digits of a ZIP+4 code (e.g., 12345-6789) is broken down as follows: [123]Sectional Center or Large City. [45]Post Office™ facility or Delivery Area. [-]Required &quot;dash&quot; or -
^(?P<package>\w+)\.(?P<class>\w+)(?:\.(?P<extension>\w+))?$
(\d{3})-(\d{2})-(\d{4}) OR (\d{4})-(\d{2})-(\d{3})
^[0-9]{1,3}$
\S+
(\d{3}-\d{3}-\d{4}|\(\d{3}\)\s\d{3}\s\d{4})
(\d+)[^\d]*
^(?:(?:[1-9]\d|1[012])\d{2}|(?:1[012]\d|0[1-9]))$
Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the "days part" of a class schedule field. The string should only accept any of the ff set of letters: 'M' 'T' 'W' 'TH' 'F' 'S' 'SU'. Only one instance of these set of letters is accepted.Generate a RegEx for this description. Answer: ^[MWFTHFS]{1,2}$
[^\x00-\x7F]
^\+31(0|[1-9]\d*)([ -]\d{3}[ -]\d{3}[ -]\d{4}$
\d{4}(?:,\d{4})*
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[-])[0-9a-zA-Z0-9-]{4}$
(\d{2}/\d{2}/\d{4})
^(?=.*[0-
var searchField = "\"(.*?)\"";
^[0-9]{0,7}(\.0{0,1})?$
/^[a-zA-Z0-9-]{1,63}$/ and /^[a-zA-Z0-9-]{1,63}$/.
[0-9]+(\.\d+)?[+-]?[0-9]+(\.\d+)?
^[0-9]{1,2}:[0-9]{1,2}$
\d{1,2}[-\s]?\d{1,2}[-\s]?\d{1,2}[-\s]?\d{1,2}[-\s]?\d{1,2}[-\s]?\d{1,2}[-\s]?\d{1,2}[-\s
(?<=\d{1,3})(?=\d{1,3})(?=\d{1,3})(?=\d{1,3})(?=\d{1,3})(?=\d{1,3})(?=\d{1,3})(?=\d{1,3})(?=\d{1,3})(?=\d{1,3}
(\d{2}:\d{2})\s*-\s*(\d{2}:\d{2})
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?/\\|}{~`~])[a-zA-Z0-9!@#$%^&*()_+-=?/\\|}{~`~]{8,}$
^(?=\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} \d{2}:\d{2} \d{2}
(?<=package\s)(?<!\.)(?<![a-zA-Z0-9_])[a-zA-Z0-9_]+(?=\
(0|[1-9][0-9]*|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(0|[1-9][0-9]*|1[0-9]{2}|2[0-4][0-9]|25[0-5])
^[A-F0-9]{1,3}$
[^a-zA-Z0-9]{32}-[^a-zA-Z0-9]
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer:^(?:[^/]*[^/]*[^/]*[^/]*[^/]*[^/]*[^/]*[^/]*
^(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Za-z0-9])[A-Za-z0-9]{6}$
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: strFirstName\b(?P<firstName>\w+)\b(?P<lastName>\w+)\b
'([^']+)'
(?<year>\d{4}-\d{2}-\d{2}(?:\.\d{2})?|\d{4}-\d{2}-\d{2}(
^\d{1,3}(\.\d{1,3})?(\.\d{1,3})?(\.\d{1,3})?(\.\d{1,3})?(\.\d{1,3})?(\.\d
^
(?<year>\d{4}-\d{2}-\d{2})\s\d{1,2}:\d{2}:\d{2}(?:\s\d{1,2}:\d{2}:\d{2})?(?:\s\d{1,2}:\d{2}:\d{2})?(?:\s\d{1,
(?<=\d+)(?=\s+)(?:\d+\.\d+|\d+\.\d+\s+\d+\.\d+)
[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+-][0-9]
/^\d{1,3}$/
^[A-Z]{2}\d{2}[A-Z]{2}$
&quot;J K&quot; &amp
^[0-9a-f]{1,4}[0-9a-f]{1,4}[0-9a-f]{1,4}[0-9a-f]{1,4}$
[0-9]{2}:[0-9]{2}:[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}
(^[1-9]\d*(\.\d+)?$)
(?<=\d{3}-){3}\d{4}
[^0-9]{3}-[^0-9]{3}-[^0-9]{4}
\d{5}(?:\.\d{3})?
^\$[0-9,]*\.[0-9,]{2}$
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?<!\w)(?<!\s)(?<!\d)(?<!\W)(?<!
^[0-9]*\.[0-9]{1,2}$
^[a-zA-Z0-9_]*$
\d{1,2}(?:\.\d{1,2})?
[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}
/^\d{8}$/
<?xml version="1.0" encoding="UTF-8"?><note>  <title>My Title</title>  <author>My Author</author>  <date>2021-01-01</date>  <content>
^\s*#.*$
^[0-9]{1,5}(\.\d{0,3})?$
^[0-9]{3}[ -]?[0-9]{3}[ -]?[0-9]{4}$
(\d{1,2}[-\s]\d{1,2}[-\s]\d{1,2})
(0|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9
^\d{3}[-.]\d{3}[-.]\d{4}$
(?<!\d{1,2}:\d{1,2}:\d{1,2})\s*(?<!\d{1,2}:\d{1,2}:\d{1,2})\s*(?<!\d{1,2
(\d{1,2}:\d{2})(?:-(\d{1,2}:\d{2}))?
^(?:\+?[0-9]{1,3}\)?[0-9]{1,3}[0-9]{1,3}$
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19[0-9]|20[0-9]|21[
^(?=.*[0-9])(?=.*[5-9])(?=.*[5-9])(?=.*[5-9])(?=.*[5-9])(?=.*[5-9])(?=.*[5-9])(?=.*[5-9])(?=.*[5-9])(?=.*[5-9]
\$[0-9]{1,2}(,\d{3})?(\.\d{2})?
0.00 - 0.25
/^http://aspalliance.com/\d+/article/(\d+)$/
(0[1-9]|[12][0-9]|3[01])/[0-9]{2}/[0-9]{4}
^(?P<prefix>\d{1,3}\.){3}\d{1,3}$
\d+ [a-zA-Z ]+
(\w+\.){2}\w+
hh:minmin:ssGenerate a RegEx for this description.
\d{3}-\d{3}-\d{4}
^\+?[1-9]\d{1,3}(?:[ -]\d{3}){2}$
^(?!0)(?!\.)(?!\.)[0-9]*$
(\W)
[^0-9]{8}[^0-9]{6}
(?<=\[)(?<tag>\w+)\s+(?<attribute>\w+)\s+(?<-tag>\w+)\s+(?<-attribute>\w+)\s+(?<-tag>\w+)\s+(?<-attribute>\w+)\s+(?<-tag>\w+)\s+(?<-attribute>\w+)
[a-zA-Z0-9_\-\.]+
^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[@#$%^&+=]).*$
\d{3}-\d{2}-\d{4}
(\d{2}\/\w{3}\d{4}|\d{2}\/\w{3}\d{3}|\d{4})/\d{2}/\d{2}
(?<!\d)(?<!\d\d\d\d)(?<!\d\d\d\d\d\d\d\d\d)(?!\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\
^(?:\?[^\?\s]*\?[^\?\s]*)?$
(?<!\d)([A-Z]{2}[a-z]{2}[0-9]{3})(?!\d)
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\\|}{~`~])[a-zA-Z0-9!@#$%^&*
[0-9]{3}[0-9]{3}[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-
^[789]\d{9}$
^[a-zA-Z0-9-]{0,64}$
grep -E '^[0-9a-fA-F]{1,4}[0-9a-fA-F]{1,4}[0-9a-fA-F]{1,4}[0-9a-fA-F]{1,4}[0-9a-fA-F]{
[XX]{3}[.][0-9]{3}[.][0-9]{3}
(?:\d{1,3}(?:\.\d{3})?|\d{1,3}(?:\.\d{3})?|\d{1,3}(?:\.\d{3})?|\d{1
^0[1-9]\d{3}[-\s]?\d{3}[-\s]?\d{4}$
^[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9
[0-9]{1,2}\.?[0-9]{0,2}
^(?![^xx]*xx)(?![^yy]*yy)(?![^zz]*zz)(?![^ab]*ab)(?![^cd]*cd)(?![^ef]*ef)(?![^gh]*gh)(?![^ij]*ij)(?![^kl]*kl)(?![^mn]*mn)(?![^op]*op)(?![^qr]
(?<=\s)([A-Z]{1,2}\s+[A-Z]{1,2}\s+[A-Z]{1,2}\s+[A-Z]{1,2}\s+[A-Z]{1,2}\s+[A-Z]{1,2}\s+[A-Z]{1,2}\s+[A-Z]
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer:^(?=.*[0-9])(?=.*[0-9.])(?=.*[0-9.])(?=.*[0-9.])(?=.*[0-9.])(?=
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: strFirstName\s*=\s*(?P<strFirstName>[A-Za-z0-9_]+)
\b(?P<month>\d{2})\s(?P<day>\d{2})\s(?P<year>\d{4})\b
[a-zA-Z0-9.\-,\s]+
[^A-Z]{3}[0-9]{3}[A-Z]{1}[0-9]{2}[A-Z]{1}[0-9]{3}
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?<=\s|^)(?=\s|$)(?<!\w)(?=\w)(?!
(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9
\b(?:[0-9]{1,3}[a-zA-Z]{1,3}[0-9]{1,3}|[0-9]{1,3}[a-zA-Z]{1,3}[0-9]{1,3}[a-zA-Z]{1,3}|[0-9]{1,3}[a-zA
^[0-9]{2}[0-9]{2}[0-9]{4}[-][0-9]{4}[-][0-9]{4}$
^[0-9]{10}[0-9]{3}[0-9]{3}[0
var regex = /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/;
(?<!\d)(?<![.])(?<![,])\d+(?![.])
\b(0[1-9]|1[012])[-/](0[1-9]|[12][0-9]|3[01])[-/](0[1-9]|1[012])\b
-(19[0-9]|20[0-9])[-0-9]{2}[-0-9]{2}[-0-9]{2}
(\w+)\s*=\s*(\w+)
(^[0-9]{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$)
(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|
(\d{1,3}(?:[,.]\d{3})*)
0.00(?:\.00)?|0.01(?:\.00)?|0.02(?:\.00)?|0.03(?:\.00)?|0.04(?:\.00)?|0.05(?:\.00)?|0.06(?:\.00)?|0.07(?:\.00)?|0.08(?:\.00)?|0.09(?:\.00)?|0.1
var regex = /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} \d{2}$/;
(\+\d{1,2})?(\d{3})?(\d{3})?(\d{4})
(?<!\d)(?<![^,])\d{3}(?![^,])
[^\d]{3}\.[^\d]{3
[a-zA-Z0-9.]{1,4}
(^[0-9]{3}[-\s]?[0-9]{3}[-\s]?[0-9]{4}$|^[0-9]{3}[-\s]?[0-9]{3}[-\s]?[0-9]
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?<=^|\s)(?=\s|$)(?<=\s|^)(?=\s
^\d{5}(-\d{4})?$
[a-zA-Z ]{2,}
^[A-Za-z]{3,4}$
^(?!.*[0-9]{4}$)(?!.*[0-9]{2}[0-9]{2}$)(?!.*[0-9]{2}[0-9]{2}[0-9]$)(?!.*[0-9]{3}$)(?!
(?<!\d)(?:\.\d{1,3}(?!\d))(?!\d)
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer: ^(?!.*[^a-zA-Z0-9_\-\.])(?!.*[^a-z
This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answer: \d{5}
^[0-9]{1,2}[a-zA-Z]{1,2}[0-9]{1,2}$
^[0-9]{1,7}(?:\.[0-9]{1,9})?$
<?xml version="1.0" encoding="UTF-8"?><note>  <title>    <title>      <title>        <title>          <title>            <title>              <title>                <title>
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[-]).*[0-9]{1,3}(?=.*[a-z])(?=.*[A-Z])(?=.*[-]).*[0-9]{1,3}$
(222) (555)
(\d{1,2}:\d{2})?[ap]m
^[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}$|^[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}$|^
(1[0-9]|2[0-3])[0-9]|[1-9]?[0-9]
<a href="(http://www.example.com/amp)">amp</a>
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer: (\d+(?:\.\d+)?)(?:[eE][+-]?\d+)
^\d{4}-\d{4}-\d{4}-\d{4}$
(0|[1-9][0-9]*|[1-9][0-9]*[0-9]|[1-9][0-9]*[0-9][0-9])
^(0[1-9]|[1-9]\d|[1-9]\d{2})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d
(?<=^|\s)([A-Z]{2})(?=\s|$)
(\d{1,2})([a-zA-Z])(\d{1,2})([a-zA-Z])(\d{1,2})([a-zA-Z])(\d{1,2})([a-zA-Z])(\d{1,2})([a-zA-Z])(\d{1,2})
(?:\+)?[1-9]\d{2}[-\s]?[1-9]\d{2}[-
$1.\s*\[(.*?)\]\s*\(.*?\)\s*\(.*?\)\s*\(.*?\)\s*\(.*?\)\s*\(.*?\)\s*\(.*?\)\s*\(.*?\)\s*\(.*?\)\s*\(.*?\)\s*\(.*?
/^(https?:\/\/)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)
^(?:(?:[1-9]\d|1[0-2])(?:[0-9]\d|20))(?:[0-9]\d
/^[+-]?\d+(?:\.\d+)?$/
^(0[1-9]|1[0-2])[0-9]{2}:[0-5][0-9]$
^(?=.*[€])(?=.*[EUR])(?=.*[EURO]).*$
^(?P<sign>[+-])(?P<number>[0-9]{1,3})(?P<comma>[,]{0,1})(?P<group>\d{3})$
```pythonimport re
\d{1,2}[-/]\d{1,2}[-/]\d{4}
^(?!.*[0-9]{3}$)(?!.*[0-9]{4}$)(?!.*[0-9]{5}$)(?!.*[0-9]{6}$)(?!.*[0-9]{7}$)(?!.*[0-9]{8}
\b(?<!\\)(?<![a-zA-Z0-9_])[a-zA-Z0-9_]+(?![a-zA-Z0-9_])\b
VIN_REGEX = r'^[A-Z]{3}[0-9]{2}[A-Z]{3}[0-9]{4}$'
<[a-zA-Z0-9_]*-?[a-zA-Z0-9_]*>
/^\(?[0-9]{3}\)?[-\s]?[0-9]{3}[-\s]?[0-9]{4}$/
Get the style attribute inner text contained inside " or'caracters with the "style=" prefix.Generate a RegEx for this description. Answer: r'(?<=style=").*?(?=")'
A0-A10
^(0[1-9]|1[012])[0-9]{3}(.|[0-9]){3}(.|[0-9]){2}(.|[0-9]){
/^[+-]?[0-9]+(.[0-9]{0,2})?$/
var date = new Date();var regex = new RegExp(    "^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19
^(?:[0-9a-fA-F]{6}|[0-9a-fA-F]{3}[0-9a-fA-F]{3}[0-9a-fA-F]{3}[0-9a-fA-F]{3}[0-9a-fA-F]{3}[0-9a-fA-F]{
(\d{2}:\d{2}:\d{2})(\s|$)
[Zip Code]\d{5}[-\s]?\d{4}[-\s]?\d{3}[-\s]?\d{2}[-\s]?\d{1}
^\d{1,3}[ ]*[(\.\-]?\d{3}[ )
\".*?\"
[Insert your answer here]
^(?=.*\d)(?=.*\.)\d{1,2}(?:\.\d{1,2})?$
^\d{1,3}(\.\d{3})?$
^(0[1-9]|1[012])\d{9}$
(0\.00|0\.01|0\.02|0\.03|0\.04|0\.05|0\.06|0\.07|0\.08|0\.09|0\.10|0\.11|0\.12|0\.13|0\.14|0\.15|0\.16|0\.17|0\.18|0\.19|0\.20|0\.21|0\.22|0\.23|0\.24|0
^[0-9a-fA-F]{3}$|^[0-9a-fA-F]{6}$
[0-9]{5}-?[0-9]{4}
/[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]+)*
(?<month>\d{3})(?<day>\d{2})(?<year>\d{4})(?<suffix>\d{3})(?<suffix2>\d{4})
A(K|N|W)(\d{1,3})(\d{1,3})
hh:mm or hh:mm or hh:mm or hh:mm
var regex = new RegExp("^[a-zA-Z0-9-_]*$");
0?1-31
(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?
\d{2}[a-z]{3}/\d{2}[a-z]{3}/\d{4}
<img[^>]*>
^(0|1)st|2nd|3rd|4th|5th|6th|7th|8th|9th|10th|11th|12th|1st|2nd|3rd|4th|5th|6th|7th|8th|9th|10th|11th|12th|1st|2nd|3rd|4th|5th|6th|
^(?=.*[0-9]{10})(?=.*[8-9]{10})(?=.*[0-9]{10})(?=.*[0-9]{10})(?=.*[0-9]{10})(?=.*[0-9]{10})(?=.*[0-9]{10})(?=.*
^\+?[1-9]\d{1,2}(\.
Fred Flintstone, Barney Rubble, Charlie Bucket, and Big Bird.
(0[1-9]|1[0-2])[0-9]{2}:[0-9]{2}:[0-9]{2}
(?<![0-9])([0-9]{1,2}|[1-9]{2})(?![0-9])
(0|[1-9][0-9]*(?:\.[0-9]{1,3})?|1[0-9]{2}(?:\.[0-9]{3})?|100[0-9]{2}(?:\.[0-9]{3})?|1000[0-9]{2}(?:\.[0-9]{3})?|10000[
(?<code>[A-Z]{4})(?<number>[0-9])
^(?=.*\d)(?=.*[a-zA-Z])[0-9]{4}[0-9]{2}[0-9]{2}$
\"[^\"]*\"
A letterGenerator.
[^a-zA-Z0-9@]
(?<![0-9])(?<![0-9]/[0-9]/[0-9])(?<![0-9]/[0-9]/[0-9]/[0-9])[0-
(\d+)(\.\d+)?
[a-zA-Z0-9]{8,}
^[0-9]{1,2}(\.\d{1,2})?(,\d{1,2})?(\.\d{1,2})?$
^[^\s@]*@[^\s@]*@[^\s@]*$
<td[^>]*>(.*)</td>
(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|
\s*
[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9
(?<!\d{4})(0?[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])/([0-9]{4}|[12][0-9]|3[01])/([0-9]{4}|[
(?:\d{4}-\d{2}-\d{2})(?:\d{2})(?:\d{2})(?:\d{2})(?:\d{2})(?:\d{2})(?:\d{2})(?:\d{2})(?:\d{2})(?:\d{2})(?
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer: r'^(.+?)(\.jpg|\.gif)$'
(?<=\/\/).*?(?=\/\*)(?<=\*\/).*?(?=\*\/\*\/\*\/\*\/\*\/\*\/\*\/\*\/\*\/\*\/\*\/\*\/\*\/\*\/\*\/\*\/\*\/\*\/\*\/
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[-._~!@#$%^&*()_+{}[]|;:\"<>,.?/])[a-
^\(?[1-9][0-9]{2}[0-9]{3}$
[0-9]+(.[0-9]+)+
(?<!\d)(?<![-\s])\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d{3}
(\d{1,3})(\s\d{1,3})(\s\d{1,3})
^[a-zA-Z0-9]*[a-zA-Z0-9]*$
^(?P<Degree>\d+)\s*(?P<Minute>\d+)\s*(?P<Second>\d+)\s*(?P<Direction>N|S|E|W)$
(?=.*[02468])(?=.*[13579])(?=.*[26])[0-9]{6}
(?i)(?<!\d)\d{9}(?!\d)
[\\"/]{1,2}[0-9]{1,3}[\\
\d{2}/\d{2}/\d{4} OR \d{2}/\d{2}/\d{4} \d{2}:\d{2}:\d{2}
^(0[1-9]|[1-9][0-9]|[1-9]0[0-9]|[1-9]0[0-9]|[1-9]0[0-9]|[1-9]0[0-9]|[1-9]0[0-9]
[Insert RegEx here]
[^€]*
Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the. (period) to ensure that no other characters may be used in it's place.Generate a RegEx for this description. Answer: \d+\.\d+
^[0-9]{3}[ -]?[0-9]{3}[ -]?[0-9]{4}[ -]?[0-9]{3}[ -]?[0-9]{4}$
^(0[1-9]|1[012])[-/.](0[1-9]|1[012])[-/.](19[2-9]|20[0-9])$
^(?=.*[1-9])(?=.*[0-9])(?=.*[1-9][0-9])(?=.*[1-9][0-9][0-9])(?=.*[1-9][0-9][0-9][0-9])(?=.*[1-9][0-9][
(\d{1,2})/(\w{3})/(\d{4})
(?i)(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@#$%^&+=]).*
(DD/MM/YYYY OR DD/MM/YYYY HH:MM:SS)
(?:\d{1,2}[-/ ]\d{1,2}[-/ ]\d{4})
\b[A-Z][a-z]{3}\b
^(0[1-9]|1[0-2])\/(0[1-9]|[12][0-9]|3[01])\/(19|20
^(0[1-9]|1[012])\/(19|20)\d{2}$
\b(CAS|EC)\d{3}\b
\d{3}[-\s]\d{3}[-\s]\d{4}
(?=\d{1,3}(?:\d{3})?)(?:\d{3})?(?:\d{3})?(?:\d{3})?(?:\d{3})?(?:\d{3})?(?:\d{3})?(?:\d{3}
^[0-9]{10}[0-9]{0,2}$
^(?!0*$)(?!0*\.0*$)(?!0*\.0*\.0*$)(?!0*\.0*\.0*\.0*$)(?!0*\.0*\.0*\.0*\.0*$)(?!0*\.0*\.0*\.0*\.0*$)(?!0*\.0*\.0*\.0*\.0*$)(?!
/(?<!if\s)(?<!\sif\s)(?<!\sif\s)(?<!\sif\s)(?<!\sif\s)(?<!\sif\s)(?<!\sif\s)(?<!\sif\s)(?<!\sif\s)(?<!\sif\s)(?<!\sif\s)(?<!\s
[DD/MM/YYYY]\d{4}[-/.]\d{2}[-/.]\d{2}
(?<!\d)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(
^1\.0\.0\.(0|1|2|3|4|5|6|7|8|9)$
^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$
\b\d{1,2}(\.\d{1,2})?\b
/^(0[1-9]|1[012])[- /0-9]{4}$/
(0|[1-9][0-9]*[0-9]?)
^[a-z]{2}[A-Z]?$
^[0-9]{1,3}(?:[.,]0{3})?$
^(19|20)\d\d/\d\d/\d\d(19|20)\d\d$
(?<![0-9])(?<![0-9]\.)(?<![0-9]\.)[0-9]{1,5}[0-9]{1,2}(?![0-9])
[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[0-9]{4}-\d{2}-\d{2}$
[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[
^\+?\d{3}[-\.\s]?\d{3}[-\.\s]?\d{4}$
(\d{1,2}:\d{2}:\d{2})([a-zA-Z]{1,3})([a-zA-Z]{1,3})([a-zA-Z]{1,3})([a-zA-Z]{1,3})([a-zA-Z]{1,3})([a-zA
(?<area>\(\d{3}\))?(?<number>\d{3})(?<space>\s+)?(?<dash>\-)?(?<number>\d{4})
(\(.*?\))
^(?:(?:[0-9]{1,2}|2[0-4][0-9]|25[0-
(?:\(?[0-9]{3}\)?[ -]?[0-9]{3}[ -]?[0-9]{4}[ -]?[0-9]{
/^[a-zA-Z0-9-_.]+$/; /^[a-zA-Z0-9-_.]+$/; /^[a-zA-Z0-9-_.]+$/; /^[a-zA-Z0-9-_.]+$/;
(\d+)(\.(\d+))?(?:\.(\d+))?(?:\.(\d+))?(?:\.(\d+))?(?:\.(\d+))?(?:\.(\d+))?(?:\.(\d+))?(?:\.(\d+))?(?:\.(\d+))?(?:\.(\d+))?(?:\.(\d+))
(\d+)\.(\d+)
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer: \$0.00|\$0.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|
[0-9]{1,2}\.?[0-9]{1,2}
\b(?=\d{7})(?=\d{8})(?=\d{9})\b
^1(0|1)*$
(?<![^\d\s])([a-zA-Z0-9]{2}[a-zA-Z0-9]{2}[a-zA-Z0-9]{2}[a-zA-Z0-9]{2}[a-zA-Z0-9]{2}[a-zA-Z0-9]{
/^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(2000|2001|2002|2003|2004|2005|2006|2007|2008)$/
(\d{3})(\d{3})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\
^([A-Z][a-z]*)([A-Z][a-z]*)([A-Z][a-z]*)$
^[0-9]{3}[A-Z]{3}[0-9]{4}$
^(?=.*\d{4})(?=.*[a-z]{1,3})(?=.*[A-Z]{1,3})(?=.*
(?<![\d,])(?<![\d,]\.)(?<![\d,]\.)(?<
[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0
[^\s]{1,3}[\d]{1,2}[\d]{1,2}[\d]{1,2}[\d]{1,2}[\d]{1,2}[\d]{1,2}[\d]{1,2}[\d]{1,2}[\d]{1,2}[\d]{1,2}[\
^(?=\d{4}-\d{2}-\d{2}$)(?=\d{2}:\d{2}:\d{2}$)(?=\d{2}:\d{2}:\d{2}$)(?=
^[0-9]*\.[0-9]{0,2}$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[a-zA-Z]).{6,20}$
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?<=\b\w+\b)(?=\b\w+\b)(?<!\b\
[\s,]
0-49151
[0-9]{1,2}%
A0-A9: [0-9]{1,2}[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2
(?<=^|\s)(?=\s|$)
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer: ^[a-zA-Z0-9\.]+$
\d+(\.\d+)?(,\d+)?(\.\d+)?(,\d+)?(\.\d+)?(,\d+)?(\.\d+)?(,\d+)?(\.\d+)?(,\d+)?(\.\d+)?(,\d+)?(\.\d+)?(,\d+
(?<=\b[a-z])(?=\s[a-z])(?<=\s[a-z])(?=\s[a-z])(?<=\s[a-z])(?=\s[a-z])(?<=\s[a-z])(?=\s[a-z])(?<=\
[^\d]{1,2}
[^\\/\\]*\\.xls
(\d{2}:\d{2})(\s\d{2}:\d{2})?
r'^(?P<ipv4>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(?P<ipv6>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\d{1,3}\.\d{1,3}\.
r'^#.*$'
(?<=\d{1,2})(?<!\d{1,2}\.\d{1,2})(?<!\d{1,2}\.\d{1,2}\.\d{1,2})
^[0-9a-fA-F]{3}$
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: (\+91)?[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}
^\+?\d{1,3}\-?\d{1,3}\-?\d{4}$
^(?:[1346]|[1-5]|10)$
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer: (\d+(\.\d+)?)([+-]\d+(\.\d+)?)
[DD/MM/YYYY]{1,2}[0-9]{2}:[0-9]{2}:[0-9]{2}
/^(?![^xx]*xx)(?![^yy]*yy)(?![^zz]*zz)(?![^ab]*ab)(?![^cd]*cd)(?![^de]*de)(?![^ef]*ef)(?![^gh]*gh)(?![^ij]*ij)(?![^kl]*kl)(?![^mn]*mn)(?![^op]
(?i)(?:(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-f
(?:\d{3}-)?\d{3}-\d{4}
/^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d{4}$/
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer:^\d+\.\d{1,2}[2550]$
^[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-
(?<!\d)(?<![a-zA-Z])[a-zA-Z0-9]+(?!\d)
(?<!Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)(?<!Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)(?<!Jan|
^(0?[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[
(?<![0-9,])[0-9]+(,[0-9]+)*
^(?:[0-9]{3}[0-9]|[0
\b[0-9]{5}[-\s]?[0-9]{4}\b
^\+?1[0-9]{3}\s?[0-9]{3}\s?[0-9]{4}$
A-F: [A-F]{1,2}
(\d+)([,.]\d+)?
\w+_\w+
(?<!\d)(?<!\.\d)\d{1,3}(?!\.)(?!\d)
^(1[0-2]|0?[1-9])\/(1[0-2]|0?[1-9])\/(19|20)\d\d$
^\d{1,2}(\.\d{1,2})?%$
(?<!\d)(?<![\d\.])(\d{1,3})(?![\d\.])(?![\d])
(?<month>\d{3})(?<day>\d{2})(?<year>\d{4})(?<suffix>\d{3})
^(?P<month>\d{1,2})\s+(?P<day>\d{1,2})\s+(?P<year>\d{4})\s+(?P<suffix>\d{
(?<!\d)\d{5}(?!\d)
^(?P<country>\w+)\s*(?P<code>\d+)\s*(?P<city>\w+)\s*(?P<state>\w+)\s*(?P<province>\w+)\s*(?P<postal_code>\d+)\s
(?<=^[A-Z]{3}[0-9]{3}[A-Z]{3}$)(?<![A-Z]{3}[0-9]{3}[A-Z]{3}[A-Z]{3})(?![A-Z]{
^(?:[0-9a-fA-F]{3}){3}[0-9a-fA-F]{3}[0-9a-fA-F]{3}$
var re = /<!--.*?-->/g;
^0[1-9]\d{3}[-\s]?0[1-9]\d{3}$
(?<!\.)(?!0+$)(?!0+$)(?!0+$)(?!0+$)(?!0+$)(?!0+$)(?!0+$)(?!0+$)(?!0+$)(?!0+$)(?!0+$)(?!0+$)(?!0+$)(?!0+$)(?!0+$)(?!0+$)(?!0+$)(?!0+$)(?!0+$)(
var date = new Date(2014,11,29);var regex = new RegExp(/^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01
^\d{5}-\d{4}$
feet(?:\s*\d+)(?:\s*\&quot;\s*\d+)?
(\d{1,10}\.\d{0,2}|\d{1,10}\.\d{0,2}|\d{1,10}\.\d{0,2}|\d{1,10}\.\d{0,2}|\d{1,10}\.\d{0,2}|\d{1,10}\.\d{0,2}|
THE Complex Password Filter Matching 3 of 4 Character catagories:1.) at least 1 upper case character2.) at least 1 lower case character3.) at least 1 numerical character4.) at least 1 special characterIt also enforces a min and max length and works for.Net and script Regex implimentations.Generate a RegEx for this description. Answer:^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za
^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}
(0-9)\\d{0,2}\\d{0,2}\\d{0,2}\\d{0,2}\\d{0,2}\\d{0,2}\\d{0,2}\\d{0,2}\\d{0,2}\\d{0,2}\\d{0,2}\\d{0,2}\\d{0,
^(?=.*[0-9])(?=.*[A-Z])(?=.*[a-z]).{8}$
[0-9]{1,3}[,][0-9]{1,3}[,][0-9]{1,3}
(100-199)(\d{1,2})(\d{1,2})
^#[A-Fa-f0-9]{6}$
^[0-9a-fA-F]+$
(?i)([a-zA-Z]{2}[0-9]{9}[a-zA-Z]{2}[0-9]{2}[a-zA-Z]{2}[0-9]{2}
(\d{1,2}:\d{2}:\d{2})(\.\d{1,2})?
^[0-9]{3}-?[0-9]{3}-?[0-9]{4}$
^[A-Z]{3}[0-9]{3}[A-Z]{3}$
r'^[a-zA-Z0-9_\-\.]+\.xls$'
^(?:(?:(?:[1-9]|1[0-2])|(?:[1-9]|2[0-9]))|(?:[1
(?<![a-zA-Z0-9_])[a-zA-Z0-9_]+(?![a-zA-Z0-9_])
(?<!\d)(?<!\d\.)\d{1,3}(?<!\d\.)\d{4}(
This will validate a partial postcode beginning with the postal district on up to the whole postcode, returning the two halves in sub-expressions. The main purpose is to return a valid postal district from a partial or whole postcode. The real value in this regex lies in the fact that it will process the postcode correctly regardless of whether or not the space in present after the district. So the accepted formats are A1 1AA, A11 1AA, A1A 1AA, AA1 1AA, AA11 1AA, AA1A 1AA GIR 0AA (and the same 6 formats without the space).
^\d+\.\d+$
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[-])[0-9a-zA-Z-]*$
^\(?[1-9]\d{2}[-\s
^[0-9]{1,2}[-]?[0-9]{1,2}[0-9]{1,2}$
^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$
(?<!\d)(?<!\d\.)(?<!\d\.)(?<!\d)(?<!\d)(?<!\d\.)(?<!\d)(?<!\d\.)(?<!\d)(?<!\d\.)(?<!\d)(?<!\d\.)(?<!\d)(?<
^[A-Z]{2}[0-9]{3}[A-Z]{1}[0-9]{3}[A-Z]{1}[0-9]{3}[A-Z]{1}[0-9]{3}[A-Z]{1}[0-9]{
```pythonimport refilename = "my_file.txt"pattern = r"^[a-zA-Z0-9_.-]+$"if re.match(pattern, filename):    print(f"{filename} is valid")else:    print(f"{filename} is not valid")```
^(?:[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]){3}
(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d
^[0-9]{5}.[0-9]{2}$
(\d{2})([A-Za-z]{3})(\d{4})
[0-9]{1,3}[-0-9]{1,3}
^[0-9]{1,2}[a-zA-Z]{1,2}[0-9]{1,2}[a-zA-Z]{1,2}[0-
^(?:\s*if\s*\(\s*(.*?)\s*\)\s*\|\s*(.*?)\s*\)\s*$
Matches times seperated by either : or. will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.Generate a RegEx for this description. Answer:^(0|[1-9][0-9]|1[012])[0-9]{2}:[0-5][0-9]{2}:[0-5][0-9]{2}$
^(?:(?:[0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-f
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=\[\]{};:<>,.?/\\\|])(?=.*[a-zA-Z0-9!@#$%^&*()_+-=\[\]{};:<>,.?/\\\
A-Z, a-z, 0-9, _, _, _, _, _, _
(?<!\d)\d
[A-Za-z0-9-]{1,20}
^(?:\d{1,3}(?:\.\d{1,2})?|\d{1,3}(?:\.\d{1,2})?(?:\.\d{1,2})?|\d{1,3}(?:\.\d{1,2})?(?:\.\d{1,2})?(?:\.\d{1,2})?(
(?<![0-9])[0-9]{3}-[0-9]{3}-[0-9]{4}
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19[6-9]|20[0-9]|2[0-9]|[1-9])$
(?<=^|\s)([A-Z]{1,2})(?=\s|$)
(?<!\{)(?<!\})(?<!\[)(?<!\])(?<!\()(?<!\))(?<!\{)(?<!\})(?<!\[)(?<!\])(?<!\()(?<!\))(?<!\{)(?<!\})(?<!\[)(?<!\]
This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answer:grep -E '^([0-9a-fA-F]{2}[:-]){5}([0-9a-fA-F]{2})$'
^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[12][0-9]|3[01])-(19|20)\d{2}$
(\d{1,3}(\.\d{3})?)([a-zA-Z]{1,3})([a-zA-Z]{1,3})([a-zA-Z]{1,3})([a-zA-Z]{
^[A-Z][a-z]*[A-Z][a-z]*$
^(?=.*[1-9])(?=.*[0-9])(?=.*[1-9][0-9])(?=.*[1-9][0-9][0-9])(?=.*[1-9][0-
\d{1,2}\/\d{2,4}
(?<!\d)\d{3}(?!\d)
[0-9]{1,3}%, [0-9]{1,3}%, [0-9]{1,3}%, [0-9]{1,3}%, [0-9]{1,3}%, [0-9]{1,3}%, [0-9]{1,3}%, [0-9]{1,3}%, [0-9]{1,3}%, [0-9]{1,
^(0[1-9]|1[012])[-/.](0[1-9]|[12][0-9]|3[01])[-/
[a-zA-Z0-9!@#$%^&*()_+-=[]{};:,./<>?\|`~]
^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer:^(https?://)?(.+?)$
^[0-9]*\.[0-9]{0,2}(e[+-]?[0-9]+)$
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer: ^[a-zA-Z0-9]{2,3}$
(?<!\d)(?<![,.])(?<![,.]\d{3})(?![,.])(?!N/A)(?!N/A\d)(?!N/A\d\d)(?!N/A\d\d\d)(?!N/A\d\d\d\d)(?!N/A
^[A-Z]{2}\d{5}[A-Z]{2}$
^[^-_\s]*$
[0-9]{1,2}[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}
Indian VAT percentage format: [0-9]{2}[0-9]{3}[0-9]{2}
^(?:(?:0?[1-9]|1[012])|(?:3[01]|[12][0-9]|0?[1-9]))/(?:(?:0?[1-9]|1[012])|(?:3[01]|[12][0-9]|0?[1-
(\d{1,2})\s*:\s*([AP]M)\s*
^[a-zA-Z][a-zA-Z0-9]*$
[^0-9]*
\d{1,2}[a-z]{1,2}\s\d{1,2}[a-z]{1,2}\s\d{4}
(?<=\d)(?=\.\d)
^(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}|(?:[0-9]{1,2}\.){3}[0-9]{1,2}|(?:[0-9]{1,3}\.){1,3}[0-9]{1,
(?<=\s)(?=\d)(?<!\d)(?=\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d
^[0-9]*[a-zA-Z]*$
^9792[0-9]{14}$
A1[1-9]\d[A-Z]\d[A-Z]\d[A-Z]\d[A
\d{2}\/\d{2}\/\d{4}
[A-Z]{2}[0-9]{3}-[0-9]{3}-[0-9]{4}
(0|1|2|3|4|5|6|7|8|9|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)
^[a-zA-Z]{5}[0-9]{6}[0-9
(?i)(?=\d{9})(?=\d{9})(?=\d{9})(?=\d{9})(?=\d{9})(?=\d{9})(
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: (\d+)([a-zA-Z]+)
(?<![0-9])([0-9]|1[0-2]):[0-5][0-9]|6[0-9]|7[0-2]
^[4]{1,12}[0-9]{1,15}$
^(?:http|ftp)s?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+?(?:/[-\w.]|(?:%[\da-fA-F]{2}))+?(?:/[-\w.]|(?:%[\da-fA-F]{2}))*$
^[1-9][0-9]?$|^0$|^[1-9][0-9]?$
^(0[1-9]|1[012])[-/.](0[1-9]|1[012])[-/.](19|20)\d\d$
YYYY-MM-DD-99-9999
\b(?P<month>\d{1,2})\s(?P<day>\d{1,2})\s(?P<year>\d{4})\b
^(?=.*\d)(?=.*[a-zA-Z])(?=.*[\d\s])(?=.*[a-zA-Z\s])[a-zA-Z\d\s]{1,20}$
^(?=.*[1-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[
\d{2}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}
The VAT Number format verification (The Netherlands) with support for optional member state definition.
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{4,8}$
(?<=\d{1,2})(?=\d{1,2})(?<!\d{1,2})(?=\d{1,2})(?!\d{1,2})(?<!\d{1,2})(?<!\d{1,2})(?<!\d{1,2})(?<!\d{1,2})(?<!
Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators:. - /Valid dates only! m (1-12)/ d (1-31)/ y (0..)(rizzipereira.com.br)For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250Generate a RegEx for this description. Answer: (?<month>\d{1,2})/(?<day>\
\w+\.xls
^[A-D]\d{3}$
^\+?[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{
^(?P<year>\d{4})(?P<month>\d{2})(?P<day>\d{2})(?P<dayofmonth>\d{1,2})(?P<day
Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators:. - /Valid dates only! m (1-12)/ d (1-31)/ y (0..)(rizzipereira.com.br)For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250Generate a RegEx for this description. Answer:(?i)(?<month>\d{1,2})(?<
(?i)(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[a-zA-Z\d@$!%*?&]{8,}
^(0[1-9]|1[012])[0-9]{3}(-(0[1-9]|1[012])[0-9]{3})?$
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d{4}$
/^[a-zA-Z ]{1,20}$/
Regex.IsMatch(Text, @"^[\u0600-\u06FF]+$");Generate a RegEx for this description.
(1|2)\.?\d{0,2}
[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1
^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
^[0-9]+(,[0-9]+(,[0-9]+)?)?(\.\d+)?$
[a-z]{3}[0-9]{3}[a-z]{3}
\d{5}[A-Z]{1}
\$[0-9,]*\.[0-9]*
(?<!\d)(\d{4})(\d{2})(\d{2})(?!\d)
/^(19[1-9]|20)\d{2}-\d{2}-\d{4} \d{2}:\d{2}:\d{2}( a.m.| p.m
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?/\[\]{};:,.<>\|`~])[0-9a-zA-Z!@#$%^&*()_+-=?/\[\]{};:,.<>\|`~]{10}$
(?<!\d)\d{4}/\d{2}/\d{2}
(?<=\")[^\"]*(?=\")
^0[1-9]\d{3}[-\s\.]?[1-9]\d{3}[-\s\.]?[1-9]\d{4}$
^(?P<year>\d{4})(?P<month>\d{2})(?P<day>\d{2})(?P<hour>\d{2})(?P<minute>\d{2})(?P<second>\d{2})$
[0-9]{8}-[0-9]{4}-[0-9]{4}-99-9999
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<![\w\s])(?<![\w\s]\s)(?<![\w\s]\s\s)(?<![\w\s]\s\s\s)(?<![\w\s]\s\s\s\s)(?<![\w\s]\s\s\s\s\
(\b[A-Za-z]{3}\b|\b[A-Za-z]{2}\b|\b[A-Za-z]{1}\b|\b[A-Za-z]{0}\b)
^(?:(?!SEP).)*$
^[0-9]{2}[0-9]{2}[0-9]{4}-[0-9]{4}-[0-9]{4}$
(?<![0-9])(?<![0-9][0-9])(?<![0-9][0-9][0-9])[0-9]{2}(:[0-9]{2})?
/^[a-z0-9-_.]{1,63}$/i
(?:\d{4}-)?(?:\d{4}-)?(?:\d{4}-)?(?:\d{4}-)?(?:\d{4}-)?(?:\d{4}-)?(?:\d{4
(?<start>\d+)(?<stop>\d+)Blah, blah, blah.;
^[+]?(\d+\.\d+)?$
(?<![\w\s])([a-zA-Z0-9]{3,})(?![\w\s])
\b(?<!\w)\w+\b
(\d{2}\.\d{2}\.\d{4})([-\s]\d{2}[-\s]\d{2}[-\s]\d{4})
^[\d,]*(?:\d{1,3}(?:\.\d{1,3})?|\d{1,3}(?:\.\d{1,3})?|\d{1,3}(?:\.\d{1,3})?|\d{1,3}(?:\.\d{1,3})?
[a-z][a-z]
(\d{2}H)
Applied to a.RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.Generate a RegEx for this description. Answer:
^[0-9]{10}[0-9]{1}[0-9]{1}[0
(\d{1,2})\s*:\s*(\d{1,2})\s*
^[+-]?\d*\.\d+[eE][+-]?\d+$
\d{1,2}\.\d{2}\.\d{4}
[^0-9.]+
^[0-9]{1,3}(?:\.[0-9]{1,3})?$
\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}
\b(?=\d{1,3}\.){3}\d{1,3}\b
(?<=\d{1,2})(?<!\d)(?<!\d\.)\d{1,2}(?<!\d\.)\d{1,2}(?<!\d\.)\d{1,2}(?<!\d\.)\d{1,2}(?<!\d\.)\d{1,2}(?<
[A-F0-9]{3}[A-F0-9]{3}[A-F0-9]{3}[A-F0-9]{3}[A-F0-9]{3}[A-F0-9]{3}[A-F0-9]{3}[A-F0-9]{
^[a-zA-Z0-9_]{1,3}[a-zA-Z0-9_]{1,3}[a-zA-Z0-9_]{1,3}[a-zA-Z0-9_]{1,3}[a-zA-Z0-9_]{1,3}[a-
[^\s]*
(?:\+2|\+22)([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer: \$[0-9]{1,3}(,\d{3})*(\.\d{2})?
^[0-9]{1,2}[a-zA-Z]{1,2}$
\b[A-Z]{2}[0-9]{3}[A-Z]{2}\b
(1[0-9]|2[0-3])\d{3}
(?<!\d)\d{2}:\d{2}:\d{2}(?!\d)
/^[+-]?\d+(?:\.\d{1,2})?$/
(077|078|079) [0-9]{8}
\d{1,2}(?:[, ]\d{1,2})
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer: /^[a-zA-Z0-9]{2,3}\.com$/
(?<![a-zA-Z0-9])[a-zA-Z0-9]{1,20}(?![a-zA-Z0-9])
(^[1-9]\d{1,2}/\d{1,2}$)
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer:(?i)(^(?:http|ftp|sftp|https|www\.)[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,4}$)
(?<Q>\d+\.\d+\.\d+\.\d+)\s*(?<R>\d+\.\d+\.\d+\.\d+)
Get the style attribute inner text contained inside " or'caracters with the "style=" prefix.Generate a RegEx for this description. Answer: r'^(?P<style>\w+)\s*=\s*"(?P<value>.*?)"$'
(?P<dollars>\$\d{1,3}(\.\d{1,2})?)(?P<cents>\d{2}(\.\d{2})?)(?P<total>\d{2})
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: ^[a-zA-Z][a-zA-Z0-9!@#$%^&*]{5,50}$
^\+?[1-9]\d{2}[ -]?[1-9]\d{2}[ -]?[1-9]\d{4}$
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|
[^a-zA-Z0-9, ]+
(?<!\n)(?<!\r)(?<!\t)(?<!\f)(?<!\v)(?<!\b)(?<!\s)(?<!\[)(?<!\])(?<!\{)(?<!\})(?<!\()(?<!\)))(?<!\*)(?<!\+)(?
(^\d{1,2}/\d{4}$)|(^\d{1,2}/\d{4}$)/\d{4}$)
(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0
(\d*)\*(\d*)\*(\d*)
[a-zA-Z0-9_]{1,30}
(\d{2}/\d{2}/\d{4} \d{2}:\d{2}:\d{2})
(1-20)
[0-9]{2}-[0-9]{2}-[0-9]{4}
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer: (0|[1-9][0-9]*(?:\.[0-9]{1,2})?|1[0-9]{2}(?:\.[0-9]{1,2})?|100(?:\.[0-9]{1,2})?|1[0-9]{2}(?:\.[0-9]{1,2})?|
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: [0-9]{1,3}[a-zA-Z]{1,3}[0-9]{1,3}[a-zA-Z]{1,3}[0-9]{1,3}[a-zA-Z]{1,3}[0-9]{1,3}[a-zA-Z]{1,3}[0-9]{1,
\d{1,2}(?:\.\d{1,2})?(?:[a-zA-Z]\s)?feet(?:[a-zA-Z]\s)?inches(?:[a-zA-Z]\s)?
(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<
^[a-zA-Z0-9]{1,3}\.\w{1,3}$
rut_pattern = re.compile(r'^\d{4}-\d{2}-\d{2}$')
^[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}[0-9]{1,2}$
^1\.(0|1|2|3|4|5|6|7|8|9)\.0\.(0|1|2|3|4|5|6|7|8|9)$
(?<=^|\s)(?=\d{1,2}\.\d{
(?<!\d)(?<![-\s])(?<![-\s])(?<![-\s])(?<![-\s])(?<![-
^[A-D]{1}[0-9]{3}[0-9]{3}$
(\d{4}[A-Z]|\d{4}[0-9])
\d{4}-\d{2}-\d{2}(?:\.\d{1,2})?(?:\.\d{1,2})
(?<=\w+ing\b)\w+
(^[1-9]|0[1-9]|1[0-2]|2[0-3]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0
(?<!\d)(?:\d+[,\s]*\d+)?
rut_regex = re.compile(r'^[0-9]{3}-\d{3}-\d{4}$')
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer: (?:\d{1,99}\.\d{1,99}\.\d{1,99}\.\d{1,99}|\d{1,99}\.\d{1,99}\.\d{1,99}\.\d{1,99}|\d{1,99}\.\d{1,99}\.\d{1,99}\.\d
[^\d]{8}[^\d]{6}
[1-12]\d|[1-9]\d
\d{2}\/\w{3}\d{4}
(?<!\d{1,2}[a-z]{1,2}[a-z]{1,2}[a-z]{1,2}[a-z]{1,2}[a-z]{1,2}[a-z]{1,2}[a-z]{1,2}[a-z]{1,2}[a-
(?<=^[a-z])(?=\d{1,3})(?=\d{1,3}$)
(?<letter>\w)(?<digit>\d)(?<alternative>LD|LDD|LDL|LDLL|LDLD|LDDD)(?<
(0.5, 0.5)
A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z
(0[1-9]|1[012])[0-9]:[0-9]:[0-9]
(?<![a-zA-Z])[a-zA-Z0-9]*(?![a-zA-Z])
var date = new Date(new Date().getFullYear(), 0, 1);var regex = /^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|
\b(40|49)\b
[^a-zA-Z0-9\s]
0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|[1-9][0-9]|[1-9][0-9][0-9
(\d{9}|[A-Z]{3}[A-Z]{3}[A-Z]{3}[A-Z]{3}[A-Z]{3}[A-Z]
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8}$
^(0[1-9]|1[012])[0-9]{2}[0-9]{2}[0-9]{2}[0-
^[0-9]{1,3}\.[0-9]{1,3}\.[
^([0-9]{1,2}):([0-9]{2})$
^(?:\d{1,3}(?:,\d{3})*|\d{1,3}(?:\.\d{3})*|\d{1,3}(?:\.\d{3})*)$
\b(?:(?<!\d)\d{1,2}(?:\.\d{1,2})?(?:,\d{1,2})?(?:,\d{1,2})?)\b
^(0|[1-9][0-9]*)(\.[0-9]{1,2})?$
(\d{1,3})([a-zA-Z])(\d{1,3})
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer: (0|[1-9][0-9]*|1[0-9]?[0-9]|1[0-9]?[0-9]?[0-9]|1[0-
^[0-9]*[0-9]*$
(\d{2})\s(\w{3})\s(\d{4})
^\d{1,3}(?:\.\d{3})?$
\p{L}|\p{M}|\p{P}|\p{S}|\p{Z}|\p
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&
^(?P<MM>\d{2})(?P<YY>\d{4})$
(192.168.0.17 - 192.168.0.32)
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer: ^[a-zA-Z0-9_\-\.]+\.(jpg|gif)$
[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}
^(?!800|900)(?:\d{3}-)?\d{3}-\d{4}$
\b[A-Z]{2}\d{3}\b
^(0[1-9]|1[012])/(0[1
^\d{5}-\d{4}-\d{3
(?<!\S)(?:\s*\S*\s*){0,1}
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: ^[a-zA-Z][a-zA-Z0-9!@#$%^&*-.]*$
^[0-9]{1,2}\s[A-Za-z]{1,4}$
(?<=\s*)([a-zA-Z0-9_\-\.]+)(?=\s*)
^([0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[
^(?:[0-9]{1,2}[0-9]{1,2}[0-9
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: (?<=\+91)(?=\d{3})(?=\d{3}-\d{4})
/^[a-zA-Z ]+$/
(?i)(?=.*[aeiou])(?=.*[^aeiou])[aeiou]
\b(19|20)\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer: (?<!\$)\d+(?:\.\d+)?(?:[eE][+-]?\d+)?
\d+(\.\d+)?(?:[eE][+-]?\d+)?
/^[a-zA-Z0-9-_.]+@[a-zA-Z0-9-_.]+\.[a-zA-Z]{2,63}$/
\d+\.\d+|\d+
(\d{1,2}:\d{2}:\d{2})
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z0-9])[0-9a-zA-Z0-9]{6}$
^[a-zA-Z0-9]{1,3}\.?[a-zA-Z0-9]{1,3}\.?[a-zA-Z0-9]{1,3}\.?[a-zA-Z0-9]{1,3}\.?[a-zA-Z0-9]{1,3}\.?[a
(?<=N\s)(\d{1,2}:\d{2}:\d{2}\.\d{1,2}),(?<=E\s)(\d{1,2}:\d{
/^\$?[0-9]{1,3}(\.\d{0,3})?$/
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8}$
^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\[\]{};:,.<>\|\`~\`])[A-Za-z0-9!@#$%^&*()_+-=?/\
(?i)(?<!\d)(?:(?:[1-9]|1[0-2])\d|2[0-3]):(?:[0-5]\d|60)
^(0[1-9]|1[012])-(0[1
Checks for Date in the typical MySQL DB Format. Not mutch but simple to for converting to German date format:$date = &quot;2003-12-03&quot;;if (ereg (&quot;([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})&quot;, $date, $regs)){echo &quot;$regs[3].$regs[2].$regs[1]&quot;; // prints 03.12.2003
[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9
(?<!\{)((?<!\})(?<!\[)(?<!\])(?<!\{)(?<!\})(?<!\[)(?<!\])(?<!\{)(?<!\})(?<!\[)(?<!\])(?<!\{)(?<!\})(?<!\[)(?<!
(?<!\d)\d{4}(?!\d)
(?<![0-9])(?<![0-9]\.[0-9])(?![0-9])
(\d{1,2})\s*%\s*(\d{1,2})
/^[a-zA-Z0-9-_]{1,63}$/
0[1-9]|1[0-2]|2[0-3]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|[1-9]
(?<=\d+)(?:\.\d+)?(?:\s*\d+)?(?:\s*\d+)?(?:\s*\d+)?(?:\s*\d+)?(?:\s*\d+)?(?:\s*\d+)?(?:\s*\d+)?(?:\s*\d+)?(?:\s*\d+
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+\-=\[\]\{\}\|\\\:\;\,\.\?\,\!\,\:\/\,\;\,\:\\\\,\:\/\,\;\,\:\/\,\;\,\:\
(?<=\d+)(?=\s|$)
[0-9]{1,3}[a-zA-Z0-9]{1,3}[a-zA-Z0-9]{1,3}[a-zA-Z0-9]{1,3}[a-zA-Z0-9]{1,3}[a-zA-
(\d{2})([a-z])(\d{2})([a-z])(\d{2})([a-z])(\d{2})([a-z])(\d{2})([a-z])(\d{2})([a-z])(\d{2})([a-z])(\d{2
(\d{3})\s(\d{3})-(\d{4})
[0-9]{1,3}
(\d{2}:\d{2} / \d{2}:\d{2} / \d{2} / \d{2})
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer: (?<=\$\d{1,3})(?=\d{1,2})(?=\d{1,3})(?=\d
(\d{1,3}\s\d{1,3}\s\d{1,3}\s\d{1,3}\s\d{1,3}\s\d{1,3}\s\d{1,3}\s\d{1,3}\s\d{1,3}\s\
(?<!\')[^\']*
\d{1,2}(?:[-/]\d{1,2}){1,2}
\b(1[0-9]|2[0-3])\/(0[1-9]|[12][0-9]|3[01
(?<!\d)(?<!\.)(?<!\,)(?<!\.)(?<!\d)(?<!\.)(?<!\,)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<
(^[A-Z]{2}[0-9]{2}[A-Z]{2}$)
\d{2}/\d{2}/\d{4} \d{1,2}
\b(?=\d{3}-\d{2}-\d{4})\d{3}-\d{2}-\d{4}\b
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer:
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:    public static double CurrencyToDouble(string currency)    {        Regex currencyRegex = new Regex(@"^[A-Z]{3}\s*[0
^\+?\
^(?:\d{1,3}\.){3}\d{1,3}$
\$[0-9]+(,[0-9]+)+
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?<=\b\w+\b)(?<!\w+\b)(?:&quot;|&
^[a-zA-Z][a-zA-Z0-9-]{0,3}$
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z])(?=.*[a-zA-Z0-9]{6,}).{6,}$
\d{1,2}[-/.]\d{1,2}
r'^[a-zA-Z0-9\-\_\.]+$'
(^[A-Z][a-z]*[A-Z][a-z]*[A-Z][a-z]*[A-Z][a-z]*[
(?<=\d{4})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})
^[0-9]+$
(?<![0-9])(?<![0-9][0-9])[0-9][0-9]|[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{
r'^\d{1,2}(\.\d+)?(?:[a-zA-Z]\s*)?(?:[a-zA-Z]\s*)?(?:[a-zA-Z]\s*)?(?:[a-zA-Z]\s*)?(?:[a-zA-Z]\s*)?(?:[a-zA-Z]\s*)?$'
[A-Z]{1}\d{3}
[0-9]{1,2}[0-9]{0,2}[0-9]{0,2}
^[0-9]{4}[0-9]{2}[0-9]{2}$
^[a-zA-Z0-9_.-]+$
^[0-9]{10}[ -]?[0-9]{3}[ -]?[0
^(?=.*[1-9][0-9]{0,7}$)(?=.*[1-9][0-9]{0,7}$).{1,9}$
ftp_pattern = re.compile(r'^ftp\.?://')http_pattern = re.compile(r'^http\.?://')https_pattern = re.compile(r'^https\.?://')
[1-9][0-9]|1[012]
The RegEx should be CC\d{3} or CC\d{3}-\d{3} or CC\d{3}-\d{3}-\d{4}.
(0|1|2|3|4|5|6|7|8|9|[0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9])
(?![a-zA-Z0-9])
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: (\d+)([\s\S]*)([\s\S]*)
(?<!\d)(?<!-)(?<!-)[A-Z]{2}[0-9]{3}-[0-9]{3}-[0-9]{4}
[^\d]{3}[^\d]{3}[^\d]{3}[^\d]{3}[^\d]{3}[^\d]{3}[^\d]{3}[^\d]{3}[^\d]{3}[^\d]{3}[^\d]{3}[^\d
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer: ^[0-9]*(25|50|75|0|00)$
\d{1,3}$
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[.])[0-9]{3}(?:\.[0-9]{3}){3}$
^(?=.*\d{4}-\d{2}-\d{2})(?=.*\d{2}:\d{2})(?=.*\d{2}:\d{2}:\d{2})(?=.*\d{2
^(?P<month_of_birth>\d{3})\s(?P<year_of_birth>\d{4})\s(?P<month_of_birth_suffix>\d{3})\
(\d{3})(\d{3})(\d{4})\s+\d{1,2}
(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}
^(?:http|https)://(?:[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*|www\.)?[a-zA-Z0-9-]+\.[a-zA
(?<!\d)(?:\+\d{1,3}\)?[-\s]?\d{3}[-\s]?\d{4}
(?<!\d)(?<![a-zA-Z])\d{3}(?![a-zA-Z])
^(?P<year>\d{4})(?P<month>\d{2})(?P<day>\d{2})(?P<hour>\d{2})(?P<minute>\d{2})(?P<second>\d{2})(?P<millisecond>\d{2})?$
^(?!.*SEP)(.*)$
^[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*$
^\(?[1-9]\d{2}[-\s]?[1-9]\d{3}[-\s]?[1-9]\d{4}$
^[a-zA-Z]{5}[a-zA-Z0-9\-]{6,17}$
^6[0-9]{7}$
[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[
var regex = new RegExp("^(?=.*\\d)(?=.*[a-zA-Z])(?=.*[\\d\\-\\w])(?=.*[\\w\\-\\d])(?=.*[\\w\\-\\d\\-\\w])(
\(?\d{3}\)?[ -]?\d{3}[ -]?\d{4}
^(?:\+[0-9]{1,3}\)?[0-9]{3}[0-9]{4}$
^(?P<country>[A-Z]{2})(?P<code>[A-Z]{2})(?P<year>[0-9]{4})(?P<month>[0-9]{2})(?P<day>[0-9]{2})$
<a href="(amp)">amp</a>
^[0-9]{1,3}(?:[,.]|\s)([0-9]{3})(?:[,.]|\s)?$
This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answer: ^\d{5}(,\d{5})*$
Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is valid:!#$%^&amp;amp;amp;amp;*-+~/'`|{}@xyz.comSorry looks like this site is mangling the quote and ampersand characters - you'll have to fix that yourself.
Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answer:(0[1-9]|1[012])[0-9]{4}
(0[1-9]|1[012])[0-9]{3}
^[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}$
/^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/
^[A-Z][a-z]{2}[0-9]{3}$
(http\:\/\/[^\s]+\.[^\s]+\.[^\s]+\.[^\s]+\.[^\s]+\.[^\s
[\d\d-\d\d-\d\dT\d\d:\d\d:\d\d]
^[A-Za-z0-9\*\(\)]*$
03\d{11}
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d{2}:\d{2}:\d{2}$
(?<=^|\s)(?:(?:[^"]*"){0,2}|[^"]*)(?=\s|$)
[^a-zA-Z0-9_]{8}[a-zA-Z0-9_]{6}
[^\d]\d{3}[^\d
[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9
^[^*]*(Asterisk)
^[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}$
^\d{2}:\d{2}:\d{2}$
/^[A-Z]{3}[0-9]{3}[A-Z]{2}$/
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z])(?=.*[\W]).{8,25}$
XXX-XX-XX-XXX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-
^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])\.(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|[12][0-9]
^[0-9]+(,[0-9]+)+$
^[0-9]+,$
^[A-Za-z0-9]{1,3}\s[A-Za-z0-9]{1,3}\s[A-Za-z0-9]{1,3
[a-z]{3}[0-9]{3}[a-z]{3}[0-9]{3}[a-z]{3}[0-9]{3}[a-z]{3}[0-9]{3}[a-z]{3}[0-9]{3}[a-z]{3}[0-9]{3}[a-
grep -E '^[0-9a-fA-F]{1,32}$|^[0-9a-fA-F]{1,16}[0-9a-fA-F]{1,16}$|^[0-9a-fA-F]{1,16}[0-9a-
(^\d{4}[- ]\d{4}[- ]\d{4}[- ]\d{4}$)
/^\d+$/
0-9a-zA-Z_0-9
(?<!\d)(\d{4})(?!\d)(\d{2})(?!\d)(\d{2})(?!\d)(\d{2})(?!\d)(\d{2})(?!\d)(\d{2})(?!\d)(\d{2})(?!\d)(\d{2
(?<=\d{1,5})\s(?=\d{1,5})
(?i)(?<![A-Z])(?<![a-z])(?<![0-9])[A-Za-z0-9]{6}(?![A-Za-z0-9])
^[a-zA-Z0-9_]{0,31}$
^[0-9]{0,99}(?:\.[0-9]{0,99})?$
[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
^(0[1-9]|1[012])/(0[1-9]|[12][0-9
Fred Flintstone, Barney Rubble, Mr. Flintstone, and Mr. Rubble.
^[0-9]{5}-?[0-9]{4}$
(?i)(?=.*[A-Z])(?=.*[a-z])
^(?:\s*if\s*\|\s*if\s*\|\s*if\s*\|\s*if\s*\|\s*if\s*\|\s*if\s*\|\s*if\s*\|\s*if\s*\|\s*if\s*\|\s*if\s*\|\s*if\s*\|\s
^[0-9]{3}[-\s]?[0-9]{3}[-\s]?[0-9]{4}$
\d{1,2}:\d{2}
^[a-zA-Z0-9]{5,12}$
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer: \$[0-9]{1,3}(?:\.[0-9]{1,3})?(?:[eE][+-]?[0
(?<!\d)(?<![\d\.])(?<![\d\.]\.)(?!\d)(?![\d\.])(?![\d\.]\.)(?!\d)(?![\d\.]\.)(?!\d)(?![\d\.]\.)(?!\d)(
(?<!\d{4})(?<!\d{2})(?<!\d{2})(?<!\d{2})(?<!\d{2})(?<!\d{2})(?<!\d{2})(?<!\d{2})(?
^[a-zA-Z0-9_-]{1,63}$
(?<=\$)([0-9]{1,3}(?:\.[0-9]{1,3})?)(?:\.[0-9]{1,3})?(?:\.[0-9]{1,3})?(
(\d{2})\s(\d{2})\s(\d{4})
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:
\b(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\b
(0|[1-9][0-9]|[1-9]\d|1[0-9]\d|2[0-4][0-9]|25[0-5])
var date = "01-02-2020";var regex = new RegExp(    "^([0-9]{2})-([0-9]{2})-([0-9]{4})$",    "i");
<td>.*<\/td>
^[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$
^(?=.*[4])(?=.*[5])(?=.*[6])(?=.*[7])(?=.*[8])(?=.*[9])(?=.*[0])(?=.*
(?<!\{)([^\}]*)\{(.*?)\}(?!\})(?!\})(?!\})(?!\})(?!\})(?!\})(?!\})(?!\})(?!\})(?!\})(?!\})(?!\})(?!\})(?!\})(?!\})(?!\})(?!\})(?!\})(?!\
^[12345]$
(?<![0-9])([0-9]{3}[-0-9]{3}[0-9]{4}|[0-9]{3}[-0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-
(?<=\d{1,3}\.)(?=\d{1,3}\.)(?<=\d{1,3}\.)(?=\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
(?<!\d)(?<![\d\.])(?<![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(
^(00[1-9]|[1-9][0-9]|[1-9][0-9]0|[1-9][0-9]0[0-9]|[1-9
^[0-9]{4}/[0-9]{4}$
/^\d{1,2}(?:\.\d{1,2})?$/
(\d{4}-\d{2}-\d{2}|\d{4}-\d{2}-\d{4}|\d{4}-\d{2}-\d{3}|\d{4}-\d{2}-\d{3}|\d{4}-\d{2}-\d
^(?:[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-
[0-9]{1,9}(\.0)?
(\d+)\s*\+\s*(\d+)\s*
^\d{2}/\d{2}/\d{4}$
[a-zA-Z0-9]{8}[a-zA-Z0-9]{8}[a-zA-Z0-9]{8}[a-zA-Z0-9]{8}[a-zA-Z0-9]{8}[a-zA-Z0-9]{8}[a-zA-Z0-
[a-zA-Z_][a-zA-Z0-9_]*
^(?:[0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}$
(?<!\d)(?<!\d\.)(?<!\d\.)(?<!\d)(?<!\d\.)(?<!\d)(?<!\d\.)(?<!\d)(?<!\d\.)(?<!\d)(?<!\d\.)(?<!\d)(?<!\d\.)(?<!\
[^A-Za-z0-9]{1,}[A-Za-z0-9]{1,}[A-Za-z0-9]{1,}[A-Za-z0-9]{1,}[A-Za-z0-9]{1,}[A-Za-z0-9]{1,}[A
/^[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]+)*$
(?<!\d)(\d{3}-\d{3}-\d{4})(?!\d)
^(?!.*SEP.*)(?!.*SEP.*$).*$
<h1-6>(.*?)</h1-6>
[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-
^[a-zA-Z0-9_\-\.]{0,20}$
[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{2}[A-Z]{
[a-zA-Z]{1,}
r'^[A-Z]{1,2}[a-z]{1,2}[0-9]{1,2}$'
[a-zA-Z0-9_]*
[^\.]+\.jpg|[^\.]+\.jpeg
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*_)[a-zA-Z\d_]{4,15}$
^[0-9]+(?:\.[0-9]+)?$
\d{2}/\d{2}/\d{4}(?:\s\d{2})?(?:\s\d{2})?(?:\s\d{4})
[0-9]{3}[ -]?[0-9]{3}[ -]?[0
(0|[1-9][0-9]?|1[0-2]?[0-9]|2[0-3]?[0-9]|3[0-1]?[0-9]|4[0-9]?[0-9]|5[0-9]?[0-9]|6[0-9]?[0-9]|7[0-9]?[0-9
import refrom datetime import datetime
^\d{2}:\d{2}$
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer:^(?!.*[.\?\!\:@\$\%\^\&\*\(\)\_\
r'^\d{1,2}[ ]?\d{1,2}[ ]?\d{4}$'
(?i)([a-z]{3}[0-9]{3}[a-z]{3}[0-9]{3})([a-z]{3}[0-9]{3
^(?=.*\d)(?=.*\.\d+$)(?!.*\d)(?!.*\.\d+$)(?!.*\d)(?!.*\.\d+$)(?!.*\d)(?!.*\.\d+$)(?!.*\d)(?!.*\.\d+$)(?!.*\d)(?!.*\.\d+$
^(?:\s*#.*)?$
XXX-XX-XX-XXX ; XXX-XXX-XX-XX ; XXX XX XX XXX ; XXX XXX XX XX ; XXX XXX XX XX
(?i)(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\
(^[0-9]{5}[0-9]{2}$)
^[0-9]{1,3}\s[0-9]{1,3}\s[0-9]{1,3}\s[0-9]{1,3}\s[0-9]{1,3}\s[0-9]{
(0[1-9]|1[012])[0-9]{2}:[0-9]{2}:[0-9]{2}
(\d{3})(\.'\d{3})?
[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9
ATU\d{5}[-\d]{2}[-\d]{2}[-\d]{4}
(^[0-9]{7,8,9}[0-9]{1,10}$)
(?<=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?P<source>\w+)\s+(?P<type>\w+)\s+(?P<count>\d+)
(
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer:^[a-zA-Z0-9_\-\.]+$
^[0-9]{2}[0-9]{3}[0-9]{2}[0-9]{1}[0-9]{1}$
(?:\+?\d{1,3}\)?[-\.\s]?\d{3}[-\.\s]?\
^(?:\d+\.\d+|\d+$)$
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer:
(?<=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(
^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?
(\d{1,2}:\d{2}:\d{2})([ap]m)?
^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,
(?i)(?=\d{9}[0-9]|[0-9]{9}[0-9])(?=\d{9}[0-9]|[0-9]{9}[0-9])(?=\d{9}[0-9]|[0-9]{9}[0-9])(?=\d{9}
^\d+(\.\d+)?(,\d+)?$
(?<!\d)(?<!\d\d\d)(?<!\d\d\d\d)(?<!\d\d\d\d\d)(?<!\d\d\d\d\d\d\d)(?<!\d\d\d\d\d
(?<![\w\s])[a-zA-Z0-9]+(?![\w\s])
^(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Za-z0-9])[A-Z]{3}[0-9]{3}[a-z]{3}[0-9]{4}$
(\w+\.\w+\.\w+)
\b(?:\d{1,2}(?:,\d{1,2})*)
\b(0[1-9]|1[012])\b
^[A-D]{1,2}[A-D]{1,2}[A-D]{1,2}[A-D]{1,2}$
(?<!\")(?:[^"]*|"[^"]*"|'[^']*'|[^']*)\s*
^(0[1-9]|1[0-2])[0-9]{3}(?:[0-9]|[1-9][0-9]|1[0-2][0-9]|2[0-
^(?=.*\d)(?=.*\d\d)(?=.*\d\d\d)(?=.*\d\d\d\d)(?=.*\d\d\d\d\d
(^[0-9]{1,3}(\.\d{0,3})?$|^[0-9]{1,3}(\.\d{0,3})?(\.\d{0,3})?$|^[0-9
[0-9]{1,2}[A-Za-z]{1,2}[0-9]{1,2}
(?<!\d)(?<![a-zA-Z])\d{1,2}(?![a-zA-Z])
/[^/]+
(?=\d{3})(?=\d{4})(?=\d{3}|\d{4})
r'^\d{1,2}(\.\d+)?(?:[a-z]|\d)$'
^(?![a-z0-9]*[a-z0-9]*[a-z0-9]*[a-z0-9]*[a-z0-9]*[
/^https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+\.\w{2,}$/
(?<![0-9])(?<![.])(?<![,])[0-9]+(?:\.[0-9]+)+
^[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z]{2,}$
var date = new Date(year, month, day);var regex = new RegExp(    "^" +    (year.length == 4? "0" + year : year) +    "-" +    (month.length == 2? "0" + month
(?<!\d{4}-\d{2}-\d{2})\d{2}-\d{2}(?:\s\d{2})?(?!\d{4}-\d{2}-\d{2})\d{2}(?:\s\d{2})?(?!\d{4}-\d{2}-\d{2
^[a-zA-Z0-9-_.]+$
(\$\d{1,3}(,\d{3})*(\.\d{2})?|\d{3}(,\d{3})*(\.\d{2})?|\d{3}(,\d{3})*
(?P<Q>\d+\.\d+\.\d+\.\d+)\s*(?P<R>\d+\.\d+\.\d+\.\d+)\s*(?P<R_1>\d+\.\d+\.\d+\.\d+)\s*(?P<R_2>\d+\.\d+\.\d+\.\d+)\s*(?P<
(?<=\$)([0-9]{1,3})(?=\,|$)
/^[0-9]{2}[0-9]{2}[0-9]{4}-[0-9]{3}[0-9]{4}$/
grep -E '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
[a-z][a-z][a-z]
[a-zA-Z0-9.\s-]
^(1[01]|0[01]|1[01]|0[01]|1[01]|0[01]|1[01]|0[01])$
^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
^(?P<query>.*?)?$
(?i)(?=.*[0-9])[0-9]{4}(?=.*[a-z])[a-z]{2}(?=.*[A-Z])[A-Z]{3}(
\d{6}[7-9]\d{8}
^(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.[0-9]{1,3}$
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer: ^[a-zA-Z0-9.\-_]*$
<?xml version="1.0" encoding="UTF-8"?><note>    <title>        <title>            <title>                <title>                    <title>                        <title>                            <title>                                <title>
(?<!\d)(?:\d+\.\d+|\d+\.\d+\d+)(?!\d)
$1\s*\[\s*(.*?)\]\s*$
^(0[1-9]|1[0-9]|2[0-8]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9
\d{1,2}[a-zA-Z]{3}[0-9]{4}[-]\d{1,2}[a-zA-Z]{3}[0-9]{4}
^(?:\s*\d+\s*\w+\s*\w+\s*\w+\s*\w+\s*\w+\s*\w+\s*\w+\s*\w+\s*\
(\d{1,365}).*
^(?=.*SEP)(?!.*SEP.*$).*$
[0-9]*(?:\.[0-9]*)?(?:\.[0-9]*)?(?:\.[0-9]*)?
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer: \$[0-9]*\.[0-9]*(,|\.)[0-9]*(,|\.)[0-9]*(
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{6}$
^[a-zA-Z0-9]{6}$
(\w+)\s*\(([^)]+)\)
(?<=^\d{10})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3
(\d{1,2})(\.\d{1,2})?
^(?:(?:\d{4}-\d{2}-\d{2})|(?:\d{4}-\d{2}-\d{2}-\d{2}))(?:\s+(?:\d{2}:\d{
(?<=^|\s)([a-z]{2})(?=\s|$)
[YYYYMM]\d{2}
\d{3}[A-Z]\d{3}
(\d{1,2})([\+\-]\d{1,2})?
(?<![0-9])(?<![0-9]\.[0-9])(?![0-9])[0-9]+(?:\.[0-9]{1,2})?
^(?:\d{4}-\d{2}-\d{2}(?:\.\d{2})?|\d{4}-\
^([0-9]{1,2}):([0-9]{2})([0-9]{2})?$
[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}
[^A-Za-z0-9\s]*
(?<!\d)(?<!\.)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?
^\+1[0-9]{3}[0-9]{3}[0-9]{4}$
^[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[
([A-Z]{3}[0-9]{2}[A-Z]{3}[0-9]{2}[A-Z]{3}[0-9]{2}[A-Z]{3}[0-9]{2}[A-Z]{3}[0-9]{2}[A-Z]{3}[0-9]
(00) [0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0
^([0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2
Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answer:
(?<=\d+\.\d+)(?=\d+\.\d+)
(\w+)\s*\((\w+)\)\s*\((\w+)\)\s*\((\w+)\)\s*\((\w+)\)\s*\((\w+)\)\s*\((\w+)\)\s*\((\w+)\)\s*\((\w+)\)\s*\((\w+)\)\s*\((\w+)\)\s*\((\w+)\)\s*\((
(?<!0)(?<!\d)(?<!\d\d\d)(?<!\d\d\d\d)(?<!\d\d\d\d\d)(?<!\d\d\d\d\d\d)(?<!\d\d\d\d\d\d\d)(?<!\d\d\d\d\d\d\d\d
^[A-F0-9]{1,6}$
[^\s]{1,3}[\s]{1,2}[\d]{4}[\d]{2}[\d]{2}[\d]{2}[\d]{2}[\d]{2}[\d]{2}[\d]{2}[\d]{2}[\d]{2}[\d]{2}[\d]{2
Matches times seperated by either : or. will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.Generate a RegEx for this description. Answer: (0|[1-9][0-9]|1[0-2])[0-9]{2}:[0-5][0-9]|[0-5][0-9]
^[0-9a-fA-F]{1,16}$
^[^*]*(Asterisk)[^*]*$
^(?=.*[0-9])(?=.*[A-Z])(?=.*[-])[
^(?=.*\d)(?=.*[a-zA-Z])(?=.*[0-9])[0-9]{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$
^(?!127\.0\.0\.1)(?!.*\.)(?!.*\.)(?!.*\.)(?!.*\.)(?!.*\.)(?!.*\.)(?!.*\.)(?!.*\.)(?!.*\.)(?!.*\.)(?!.*\.)(?!.*\.)(?!.*\.)(?!.*\.)(?!.*\.)(?!.*
^[a-zA-Z][a-zA-Z0-9-]{6,17}$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6,20}$
[0-9]
(".*?\"|".*?\")
0?[1-9]|[12][0-9]|3[01]
(?<![0-9])(?<![A-D])[0-9]{3}[A-D]
d{1,2}(?:\.\d{1,2})?
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:    public static Regex CurrencyExpression = new Regex(@"^(?<currency>[$£€])(?<value>\d+\.\d+)(?<unit
(?<=\/\/)(.*?)(?=\*/)
(?<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/(?<port>\d{1,3})
`^[0-9]{0,2}[a-zA-Z]{0,2}[0-9]{0,2}$`
[0-9]{4}-[0-9]{2}-[0-9]{4}-99-9999
(?<![0-9])([0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{
/^[0-9]*[1-9]\.[0-9]*$/
Matches times seperated by either : or. will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.Generate a RegEx for this description. Answer:^(0|[1-9][0-9]|1[012])[0-5][0-9]$|^(0|[1-9][0-9]|1[012])[0-5][0-9]$|^(0|[1-9][0
^(?:(?:0[1-9]|1[012])-(?:0[1-9]|[12][0-9]|3[01])-(?:0[1
(\d{1,3}(,\d{3})*)(\.\d{2})?
ESN_REGEX = r'^[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{
^(?![^xx]*xx)(?![^yy]*yy)(?![^zz]*zz)(?![^...]*...)(?![^...]*...)(?![^...]*...)(?![^...]*...)(?![^...]*...)(?![^...]*...)(?![^...]*...)(?![^...]*...)(?![^...]*
(?<![\d.])([1-9]\d*)(?![\d.])
^[A-Z]{2}\d{2}[A-Z]{1}[0-9]{4}$
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer: (\d+(\.\d+)?)([,\s]?)
(0\.00%|0\.[0-9]{1,2}%)
^[a-zA-Z]$
(?i)([a-z]{2})([0-9]{9})([a-z]{2})([0-9]{9})([a-z]{2})([0-9]{9})([a-
^[^a-zA-Z0-9]*a[^a-zA-Z0-9]*$
(?<=\d{1,3}-\d{1,3}-\d{1,3}-\d{1,3}-\d{1,3}-\d{1,3}-\d{1,3}-\d{1,3}-
(\d{3})([\s-]\d{3})([\s-]\d{4})
(?<!\d)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<
^[a-zA-Z0-9]{8}$
\d{2}/\d{2}/\d{4}|\d{2}/\d{2}/\d{4}-\d{2}-\d{4}
(\d*[a-z]\d*[a-z]\d*[a-z]\d*[a-z]\d*[a-z]\d*)
(?<!^)(?<![a-zA-Z0-9_])[a-zA-Z0-9_]+(?![a-zA-Z0-9_])
[PESEL]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9
\d{4}(,\d{4})?
[1]\
(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$
(100-199)
\b(CAS|EC)\d{3}[A-Z]\d{3}\b
^[0-9]{1,3}[a-zA-Z]{1,3}[0-9]{1,3}[a-zA-Z]{1,3}[0-
^(0[1-9]|1[012])[ -]?[0-9]{3}[ -]?[0-9]{3}[ -]?[0-9]{4}$
(?<![0-9])(?<![0-9])(?![0-9])[0-9]{1,3}(?<![0-9])(?![0-9])
^\d+(\.\d+)?$
^(?:\d+[\s\w]*)(?:\s+[\d\s\w]*)?#(?:\s+[\d\s\w]*)?$
r'^\d{5}(-\d{4})?$'
^(?:[1-9][0-9]|1[0-2])$
^\d{1,2}:\d{2}:\d{2}$
^(?:(?:\d{1,2}(?:\.\
^(?=.{1,10}$)(?=.{1,10}$)(?=.{1,10}$)(?=.{1,10}$)(?=.{1,10}$
\b(0|[1-9][0-9]*)\b
(192.168.0.17-192.168.0.32)
(?<![a-zA-Z0-9-])[a-zA-Z0-9]+(?=[a-zA-Z0-9-])
^[1-9][0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}$
(?i)(?<!\d)([1-9]|1[012])[ap]m(?!\d)
[^-1000.000-1000.000]
\d{4}-\d{2}-\d{2} \d{2} \d{2} \d{4}
^\(\d{1,2}\)\s*[-\s]?\d{3}[-\s]?\d{3}[-\s]?\d{4}$
/^(?P<year>\d{4})(?P<month>\d{2})(?P<day>\d{2})(?P<dayofmonth>\d{2})(?P<dayofyear>\d{2})(?P<monthofyear>\d{2})(?P<dayofmonthofyear>\d{2})(?P<month
(^\$[0-9]{1,3}\.[0-9]{1,3}$|^\$[0-9]{1,3}\.[0-9]{1,3}$|^\$[0-9]{1,
^(?P<ipv6>[0-9a-fA-F]{1,4}:){7,7}(?P<ipv6_suffix>[0-9a-fA-F]{1,4}
(?=.*[01])(?=.*[10])
(?<=\$)([0-9]{1,3})(?=\,|\.)
^[0-9]{1,7}(,[0-9]{1,2})?$
\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\
[A-Za-z0-9-\s]{1,20}
^(?P<year>\d{4})(?P<month>\d{2})(?P<day>\d{2})(?P<hour>\d{2})(?P<minute>\d{2})(?P<second>\d{2})(?P<nn>\d{1})$
&quot;(?<classname>.*?)&quot;
^[A-Za-z]{3,4}[- ]?[A-Za-z]{3,4}$
^[0-9]*\.[0-9]*$
^\s*(?:\d+\s*[#]\s*\d+\s*[#]\s*\d+\s*[#]\s*\d+\s*[#]\s*\d+\s*[
(ESN)^[0-9a-f]{6}$
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z])(?=.*[^a-zA-Z0-9])[a-zA-Z0-9\s]{8,25}$
^\d{4}[ \t]{1,2}[a-zA-Z]{2}$
^[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{2}[0-9]{2}[0-9]{2}$
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer: (?<!\d)\d{3}(?!\d),(?<!\d)\d{3}(
Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answer:var regex = new RegExp("^(?=.*[NSEW])(?=.*[0-9]{1,2
^[0-9]{1,3}(,|\.)[0-9]{1,3}(,|\.)[0-9]{1,3}$
^\+?[1-9]\d{1,2}(?
(\d{2}[a-z]{3})\s\d{2}\s\d{4}
(?<![0-9])(?<![0-9][0-9])(?<![0-9][0-9][0-9])[0-9]{1,2}(?<![0-9])(?<![0-9][0-9][0-9][0-9])[0-9]{1,2}(?<![0-9])(?<![0-9][
[^A-Za-z0-9]{2}[A-Za-z0-9]{9}[^A-Za-z0-9]{1}[^A-Za-z0-9]{1}[^
(\d{10})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3
\d{1,2}/\d{1,2}
^(?:[0-9]{1,2}|3[0-1]|[1-9])(
^\+?[0-9]{1,3}\-?[0-9]{1,3}\-?[0-9]{1,4}$
[A-Z][a-z]{0,3}[0-9]{0,3}
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\\|}{~:]*$)
^\s*(?:\d+\s*\*\s*\d+\s*\*\s*\d+\s*\*\s*\d+\s*\*\s*\d+\s*\*\s*\
(\d{1,2}:\d{2}:\d{2})([ap]m|am|pm)
(?i)([a-z]{2}[0-9]{9}[a-z]{1}[0-9]{1}[a-z]{1}[a-z]{1}[a-z]{1}[
^(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3})|(?:[0-9]{1,3}\.){3}[0-9]{1,3}|(?:[0-9]{1,3}\.){3}[0-9]{1,3
[A-Z][a-z]{2}[0-9]{3}
[a-zA-Z][a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*
(?<!\d)(?:[1-9]\d*|1\d*(?:\d\d))(?!\d)
(?<![a-zA-Z0-9_])[a-zA-Z0-9_]{1,3}(?![a-zA-Z0-9_])
\d{1,2}/\d{1,2}/\d{4} \d{1,2}:\d{1,2}:\d{2} (\d{1,2}):(\d{1,2}):(\d{1,2}) (\d{1,2}):(\
\d{5}-\d{4}
(\w+)\.(\w+)\.(\w+)
The RegEx for this description is [0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer:^[a-zA-Z0-9]{2,3}$
^[0-9]{4}[0-9]{2}$|^[0-9]{4}$
^(?!.*?[a-z])(?!.*?[A-Z])(?!.*?[0-9])(?!.*?[^a-zA-Z0-9])[a-zA-Z0-9]*$
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: strFirstName\b\w+\b
^(?:[1-9][0-9]|1[012])-(?:0[1-9]|1[012])-?[1-9][0
(\d{1,2})/(\d{1,2})/(\d{4})
[A-Z]{2}[0-9]{3}[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{2}
[a-zA-Z0-9\s-]{1,}
(?i)(?<![a-zA-Z0-9_])[a-zA-Z0-9_]+
/^[1-9][0-9]?[0-9]?[0-9]?$/
(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?<
^(1[01]|0[01]|[01]{2}|[01]{3}|[01]{4}|[01]{5}|[01]{6}|[01]{7}|[01]{8}|[01]{9
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{5,15}$
[0-9]+(?:\.[0-9]+)?(?:\.[0-9]+)?(?:\.[0-9]+)?(?:\.[0-9]+)?(?:\.[0-9]+)?(?:\.[0-9]+)?(?:\.[0-9]+)?(?:\.[0-9]+)?(?:\.[
[Insert state abbreviation]
\[\d{3}\.\d{3}\.\
^(?P<ipv4>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})|^(?P<ipv6>\d{1,3}[a-fA-F0-9]{0,7}[a-fA-F0-9]{0,7}[a-fA-F0-9]{0,7}
[a-zA-Z0-9]+( [a-zA-Z0-9]+)+
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer:(?i)(?:mailto\s|http\s|ftp\s|www\s)
^[A-Z][a-z]*[A-Z][a-z]*[A-Z][a-z]*[A-Z][a-z]*$
Fred Flintstone, Barney Rubble, Mr. Flintstone, Mrs. Flintstone.
[A-Z][0-9]{3}[A-Z]
(?<=\d{1,2})(?:\.\d{1,2})?(?:\s*\d{1,2})(?:\s*\d{1,2})(?:\s*\d{1,2})(?:\s*\d{1,2})(?:\s*\d{1,2})(?:\s*\d{1,2}
(^[1-9][0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: ^[a-zA-Z][a-zA-Z0-9!@#$%^&amp;*-]{5,50}$
\d{1,3}[-\s]?\d{1,3}[-\s]?\d{1,3}[-\s]?\d{1,3}[-\s]?\d{1,3}[-\s]?\d{1,3}[-\s]?\d{1,3}[-\s
^(?=.*[0-9])[0-9]*(,[0-9]*)*$
\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}
(?<!\d)(?<![\+\-\.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.]
^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}$
[a-zA-Z0-9]+( [a-zA-Z0-9]+)*
^(?:\d+\.?\d*|\d+\.\d+|\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d
^(0[1-9]|1[012])[0-9]{2}[0-9]{2}[0-9]{4}$
\d{3}[A-Z]{2}[0-9]{2}
(?<start>\d{1,2}:\d{2}:\d{2})(?<stop>\d{1,2
(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,3}\/\d{1,3}\/\d{1,3})
[^#]*
Regex.IsMatch(Text, @"\p{P}");Generate a RegEx for this description.
^\+31\s?\d{9}$
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[a-zA-Z])[0-9a-zA-Z]{3}[0-9a-zA-Z]{3}[0
^(?:(?:19|20)\d{2}-\d{2}-\d{4} \d{2}:\d{2}:\d{2} (?:am|pm))|(?:19|
[0-9]{4}-[0-9]{2}
(0-59)([AP]M|AM)
(?<!\d)(?<!\.)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d
^(00[1-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[
(?<!\d)(?<!\.)(?<![,.])(?<![,.]\d)(?!\d)
^[0-9,]*$
[RegEx]\d{3}[-\.\s]?\d{3}[-\.\s]?\d{4}
/^[a-zA-Z0-9-_.]+\.[a-zA-Z0-9-_.]+$/
(\d{3})(\d{2})(\d{3})
^(?:(?:[1-9]\d|1\d\d|2[0-4]\d|25[0-5])[-\.\s]?){3,}$
(?<!\S)(?<!#)(?<!\d)(?<!\d\d\d)(?<!\d\d\d\d)(?<!\d\d\d\d\d)(?<!\d\d\
^(?!127\.0\.0\.1$)([0-9]{1,3}\.){3}[0-9]{1,3}$
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:    public static Regex CurrencyExpression = new Regex(@"^[\d,]*(?:\.\d+)?(?:[Ee][+-]?\
var date = new Date("01/01/2012");var regex = /^(0?[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])
^(19|20)\d{2}(0[1-9]|1[012])[0-9]{4}$
(?<!\d)\d+(?!\d)
(?<!\d)(?<!\d\.)\d{1,3}(?:\.\d{3})?(?!\d)
/^[+-]?\d*\.?\d*$/
^[0-9]{4}$
[^0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z
\d{4}\.\d{2}\.\d{2}\.\d{1}
(\d{4}[-\d]{3}[-\d]{2}[-\d]{1}[-\d]{0}[-\d]{0}[-\d]{0}[-\d]{0}[-\d]{0}[-\d]{0}[-\d]{0}[
(\+\d{1,3}\s\d{1,3}\s\d{1,3}\s\d{1,3}\s\d{1,3}\s\d{1,3}\s\d{1,3}\s\d{1,3}\s\d{1,3}\
SUPPORTED constructions:[*] - all five commands;[number] - minutes 0...59, hours 0...23, day in month 1...31, months 1...12, day in week 0...7 (0 & 7 is sun);[*/nubmer] - see construction [number];[word] - only months (4th command) and days in week (5th command), warning this regexp is case sensitive (lower letters).NON SUPPORTED constructions:[number-number] and[number,number].Generate a RegEx for this construction
\b(?P<country>\w+)\s(?P<region>\w+)\s(?P<city>\w+)\b
(?<prefix>\+\d{1,3})(?<number>\d{3})(?<-&quot;)(?<-&quot;-)(?<-&quot;)(?<blank>\d{3})
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<!\d)(?<!\d\d:\d\d)(?<!\d:\d\d:\d\d)(?<!\d:\d\d:\d\d:\d\d)(?!\d)
^(?:[0-9]{1,2}(?:\.[0-9]{1,2})?|[0-9]{1,2}(?:\.[0-9]{1,2})?|[0-9]{1,2}(?:\.[0-9]
(?<!\d{1,2}:\d{1,2}:\d{1,2})\d{1,2}:\d{1,2}(?!\d{1,2}:\d{1,2}:\d{1,2})(?<!\d{1,2}:\d{1,2}:\d{1,2})\d{1,2}:\d{1,2}
(1-7)
(?<!\d)(?<!\.)\d{1,3}(?:\.\d{3})?(?:\,\d{3})?(?:\,\d{3})?(?:\,\d{3})?(?:\,\d{3})?(?:\,\d
0(?=\d)
(?i)(?=^[A-Z])(?=^[a-z])(?=^[0-9])(?=^[a-zA-Z0-9])[a-zA-Z0-9]{6,20}$
^[1-9][0-9]*$
(\d{2}/\d{2}/\d{4})(\d{1,2})(\d{4})
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<!\d)\d{2}:\d{2}(?!\d)
^(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|1[012])\/(19|20)\d{2}$
(?P<country>\+2|\+22)(?P<city>\d{3})(?P<extension>\d{3})
(?<!\d)(?<![a-zA-Z])[a-zA-Z0-9]{1,20}(?!\d)
(\d{2})/(\d{2})/(\d{4}) or (\d{2})/(\d{2})/(\d{4})
0\.00 - 0.01 - 0.02 - 0.03 - 0.04 - 0.05 - 0.06 - 0.07 - 0.08 - 0.09 - 0.10 - 0.11 - 0.12 - 0.13 - 0.14 - 0.15 - 0.16 - 0.17 - 0.18 - 0.19 - 0.20 - 0.21 - 0.22 - 0.23 - 0.24 - 0.
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W])(?=.*[\s])(?=.*[-])[a-zA-Z\d\W-]{8,}$
^\d{1,3}-\d{3}-\d{4}$
(\d{2})-(\d{2})-(\d{4})
(\d{3}-)?\d{3}-\d{4}
^\+31\s*\d{3}[ -]\d{3}[ -]\d{4}$
(?<countryCode>\+|[0-9]{3}|[0-9]{4})\-(?<localPhoneNumber>\d{3}|\d{4})
^(?P<prefix>\d{4})-(?P<number1>\d{4})-(?P<number2>\d{4})$
[A-Za-z0-9 ]{1,20}
(?<=\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}$)
\b[A-Z]{1}[0-9]{3}[A-Z]{1}\b
(?<=^|\s)(?=\d{3})(?=\d{3})(?=\d{4})(?=\d{4})(?=\d{4})(?=\d{4})(?=\d{4})(?=\d{4})(?
(\d{1,2})/(\d{4})
(\(\d{3}\)\s\d{3}-\d{4})
(http\:\/\/)?(www\.)?[a-zA-Z0-9-_\.]+\.[a-zA-Z0-9-_
(?P<dollars>\$\d+\.\d{2})|(?P<cents>\d{2}\.\d{2})
[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+|-][0-9
Positive decimal values can be generated using the format "0.00" or "0.00,000". Negative decimal values can be generated using the format "-0.00" or "-0.00,000".
\d{1,2}[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]
^(?:(?:[1-9]\d{0,2}|1\d{2})(?:\/\d{2})?|(?:[1-9]
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:(?<ipv4>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<!\.)(?<![0-9])\.(?<![0-9])\.(?<![0-9])\.(?<![0-9])\.(?<![0-9])\.(?<![0-9])\.(?<![0-9])\.(?<![0-9
(\d{1,3})([a-zA-Z]{1,3})([a-zA-Z]{1,3})
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: strFirstName\s*\w+\s*
YYMMDD-99-9999
03\d{3}[\d\s]{0,9}
(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: strFirstName\s*(?P<firstName>\w+)\s*(?P<lastName>\w+)
[^A-Za-z0-9]{4}[A-Za-z0-9]{10}
(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})
^[1-9][0-9]?$
(\w+)\s*\((\w+)\)
^(?:(?:0[1-9]|1[012])\/(?:0[1-9]|[12][0-9]|3[01])\/(?:19|20)\d{4}$)
https?://[^/]+
^[0-9]{1,2}\s[0-9]{1,4}\s[0-9]{1,4}\s[0-9]{1,4}\s[0-9]{1,4}\s[0-9]{1,4}$
/[a-zA-Z0-9-_]*(?:\.[a-zA-Z0-9-_]*)*
^[a-zA-Z0-9]{5}-?[0-9]{4}$
(?P<time>\d{1,2}:\d{2}(am|pm))
^[A-Z][a-z]* [A-Z][a-z]* [A-Z][a-z]*$
\d{1,2}[-/]\d{1,2}[-/]\d{1,2}
(?<=\$)(\d{1,3}(,\d{3})*)(?=\$)
^([1-9]|1[012])[0-9]{2}:[0-9]{2}$
[0-9]{4}[ 0-9]{2}[A-Z]{2}
/^(?:[^\n]|(?:\n[^\n]*\n))*$/
\d{1,2}/\d{1,2}/\d{4}
[0-9]+(,[0-9]+)?
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?/\[\]{};:,.<>\|\~`\`\`\`\`\`\`\`\`\`\`\`\`\`\`
^([01]?[0-9]|2[0-3]):([0-5][0-9])$
(^\+?[1-9]\d{1,3}(\.\d{1,3}){3}$)
^[0-9]*[*][0-9]*[*][0-9]*[*][0-9]*[*][0-9]*[*][0-9]*[*][0-9]*[*][0-9]*[*
^[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}$
&quot;JK&quot; &amp
\d{1,2}/[a-zA-Z]{3}/\d{4}
^(?:[0-9]|1[0-2]):[0-5][0-9]|6[0-9]|7[0-2]|8[0-5]|9[0-9]|[1-9]?[0-9]|[1-9]?[0-9]?[0-9]|[1-9]?[0-
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]
hh:minmin:ss(?P<hh>\d{2}):(?P<min>\d{2}):(?P<ss>\d{2})
/[aeiou]/
(?<!\d)(?<![\d\.])(?<![\d\.])(?!\d)(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.]
(?<!\d)\d{3}-\d{2}-\d{4}|\d{3}-\d{2}-\d{4}
\s,\s
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (\d+)(?:\.\d+)?
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:    public static string CurrencyExpression(string currency, double value)    {        return Regex.Replace(currency, @"^\$(\d+)([.,]\
(?<![0-9])([0-9]{5})(?![0-9])
\d{3}[A-Z]{2}
\d{1,2}/\d{1,2}/\d{4} \d{2}:\d{2}
[0-9]+(.[0-9]*)?
^\d+(\.\d+)?(?:[eE][+-]?\d+)?(?:[kK][+-]?\d+)?$
^(?=.*\d)(?=.*[a-z])(
[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][
(?<![\d,\.])(?<![\d])[\d,\.]{1,3}(?![\d,
^[EeV]\d{3}[.\d]{1,2}$
^[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{2}[0-9]{1}$
^[A-Z]{2}\d{2}[A-Z]{3}$
(0[1-9]|1[012])\/[0-9]{2}
(\+2|\+22)([0-9]{3})([0-9]{3})?[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-
(?<!\d)(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50
(?<!\d)(?:\d{1,2}(?:\.\d{1,2})?|\d{1,2})
rut_regex = r'^\d{3}-\d{3}-\d{4}$'
\d*[*][*][*][*][*][*][*][*][*]
Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answer: ^[0-9]{9}-?[0-9]{4}$
/^(0?[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])/(19|20)\d{2}$/
(?<=\d{1,2})(?<!\d{1,2})(?<!\d{1,2})(?<!\d{1,2})(?<!\d{1,2})(?<!
[AKNW]\d{1,3}
^[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1
(\d{1,2}):(\d{2})
^(?:http|ftp)s?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+[-a-zA-Z0-9@?^=%&:/~+#-]*$
\b(?:\d{3}[-.]\d{3}[-.]\d{4}|\d{3}[-.]\d{3}[-.]\d{3}[-.]\d{4})\b
(\d{1,3}\.){3}\d{1,3}
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<ipv4>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
\b[A-Z]{3}\d{3}\b
(?P<time>\d{1,2}:\d{2}(:\d{2})?(am|pm))
^[0-9]{3}[ -]?[0-9]{3}[ -]?[0
^(?:\d{1,3}(?:\.\d{0,2})?|\d{1,5}(?:\.\d{0,2})?|\d{1,5}(?:\.\d{0,2})?|\d{1,5}(?:\.\d{0,2})?|\d{1,5}
^[a-zA-Z][a-zA-Z0-9]*[a-zA-Z0-9][a-zA-Z0-9]*
\d{4}[ ]{2}[a-zA-Z]{2}
(\+\d{1,2})\s?(\d{3})\s?(\d{3})\s?(\d{4})
[a-zA-Z0-9!@#$%^&*()_+-=[]{};:,./<>?\|~`]*
var date = "01-01-1901";var pattern = new RegExp("^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(19[0-9]|20[0
\d{3,4}[,\s]?\d{3,4}[,\s]?\d{3,4}[,\s]?\d{3,4}[,\s]?\d{3,4}[,
(?<!\d)\d{4}-\d{2}-\d{2}(?!\d)
[0-9]{1,3}(?:[,.]|\s)?[0-9]{3}
Allows letters,numbers,hyphens,periods and underscores. Such as : Aa.Aa.Aa,.Aa.Aa., -Aa-Aa-, _Aa_Aa_, Aa_Aa_Aa, Aa-Aa-Aa,., -, _I was asked by my client for this scenario to allow letters,numbers,hyphens,periods and underscores in User ID field in web application.Generate a RegEx for this description. Answer:[A-Za-z0-
(?<=\[)([^\]]+)(?=\])
(?<![0-9])(?![0-9]*[0])[0-9]{1,3}(?:\.[0-9]{1,3})?
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer:^[a-zA-Z0-9.\-,\_\+\*\^\$\%\&\=\(\)\[\]\{\}\<\>\?\@\#\$\%\&\=\(\)\[\]\{\}\<\>\?\@\
#[A-Fa-f0-9]{6}
^(?=.*[0-9])(?=.*[1-9])(?=.*[2-9])(?=.*[0-9])(?=.*[1-9])(?=.*[2-9])(?=.*[0-9])(?=.*[1-
^[1-9][0-9]{1,2}[0-9]{1,2}$
^[0-9]{1,3}(?:\.[0-9]{1,3})?(?:\.[0-9]{1,3})?(?:\.[0-9]{1,3})?(?:\.[0-9]
(?<=\d+)(?:\.\d+)?(?:\s*\d{1,2})(?:\s*\d{1,2})(?:\s*\d{1,2})(?:\s*\d{1,2})(?:\s*\d{1,2})(?:\s*\d{1,2})(?:\s*\d{
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer:[^\s\.]+\.part[0-9]{1,3}\.rar
^(?=.*[0-9])(?=.*[1-9][0-9])(?=.*[1-9][0-9][0-9])(?=.*[1-9][0-9][0-9][0-9])(?=
match string between chars'' as in source codeGenerate a RegEx for this description. Answer: \b(?=\d{4}-\d{2}-\d{2})\d{4}\b
(?<=^|[^\\"])([0-9]{1,3}\.[
/^(http://aspalliance.com/)(\d+)$/
^[a-zA-Z]{3,4}$
^[0-9]{1,7}(,|\.)[0-9]{1,2}$
H:nn:ss or HH:nn:ssGenerate a RegEx for this description.
(^[a-zA-Z]{4}[0-9]{10}$|^[a-zA-Z]{4}[0-9]{7}$)
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[a-zA-Z\d@$!%*?&]{8,}$
^[0-9]{1,3}(,[0-9]{3})*$
(\d{1,2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{
^(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])\/(19|20)\d{4}$
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer:^https?://[a-zA-Z0-9-_\.]+$
\b(?:\d{1,3}\.){3}\d{1,3}\b
^[a-zA-Z0-9_]{1,31}$
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?/\\|\[\]{};:,.<>\s])(?=.*[a-zA-Z0-9])[a-zA-Z0-9!@#$%^&
^[a-zA-Z0-9]{8,}$
^(?!.*[a-z])(?!.*[A-Z])(?!.*\d)(?!.*[\W])(?!.*[\s])(?!.*[\.])(?!.*[\,])[a-zA-Z\d\W\s\.]+$
[YYYY-MM-DD HH:MM:SS]
^[a-zA-Z]{3,4}[ -]?[a-zA-Z]{3,4}$
^(?:(?:[1-9][0-9]|1[012])-(?:[1-9][0-9]|0[1-9]|[12][0-9]|3[01])-(?:[1-9][0-9]|0[1-9]|[12][0-9]|3[01
^[0-9a-fA-F]{1,2}$
[0-9]{1,3}(,|\.)[0-9]{3}
\d{4}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8,}$
(\d{4})(\d{2})(\d{2})
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: +91 (national code) +[0-9]{3} (optional) +[0-9]{3}-?[0-9]{4} (optional)
^[0-9]*\.?[0-9]*$
^(?:(?:0[1-9]|1[012])-(?:0[1-9]|[12][0-9]|3[01])-(?:0[1-9]|[12][0-9]|3[01]))(?:[0-9]|
A(?P<prefix>[A-Z])(?P<zone>[0-9]{1,3})(?P<suffix>[0-9]{1,3})
^[0-9]{1,2}[0-9]{4}$
^-?[0-9]*(?:\.[0-9]{1,2})?$
(?<!\d)(?<!-)[0-9]{1,4}(?!-)[0-9]{4}(?!-)[0-9]{4}(?!-)[0-9]{4}(?!-)[0-9]{4}(?!-)[0-9]{4}(?!-)
^(?=.*[a-fA-F0-9]{32})(?=.*[a-fA-F0-9]{32})(?=.*[a-fA-F0-9]{32})(?=.*[a-fA-F0-9]{32})(?=.*[a-fA-F0-9]{32})(
^[0-9]*\.?[0-9]+$
^\d{5}(?:\d{4})?$
A0-A9, A10
^\d{5}(-\d{4})?$|^\
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\\|}{~`\[\]])(?=.*[^a-zA-Z0-9!@#$%^&*()_+-=
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|1[012])$
^[a-zA-Z ]{2,}$
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer: ^(https?://)?[a-zA-Z0-9\-\.]+[a-zA-Z0-9\-\.]+$
^[0-9]{1,3}\.000-\d{3}$
\b(snake|snakes)\b
^(19|20)\d{2}(?:[-](?:1[0-2]|2[0-3]))?(?:[-](?:0[1-9
^(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2})(?P<hour>\d{2})(?P<minute>\d{2})$
(?<=^|\.)(?P<package>.*?)(?P<class>\w+)$
\d{1,2}(?:\d{1,2})?
Positive decimal values can be generated using the decimal notation, while negative decimal values can be generated using the negative sign (-) or parenthesis.
^[0-9]*[1-9][0-9]*$
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[$-_@.&+])(?=.*[!#?&])[0-9a-zA-Z$-_@.&+#!#?]{10}$
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer: ^[^.]*$
(?<!\d)(?<!\d\d\d)(?<!\d\d\d\d)(?<!\d\d\d\d\d)(?<!\d\d\d\d\d\d)(?<!\d\d\d\d\d\d\d)(?<!\d\d\d\d\
0.00-25.00
(^[789]\d{9}$)
^(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})$
(\d+\.\d+)
^[a-zA-Z0-9]*$
[^A-Z]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9
^[0-9]{10}(\.\d{0,2})?$
[^\[\]]+
^(0[1-9]|1[012])[-/](0[1-9]|[12][0-9]|3[01])[-/]([1
[0-9]{4}\s[0-9]{2}[a-zA-Z]{2}
(?<!\d)(?<!\.)\d{1,3}(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d
[\d\d-\d\d-\d\d]
(?=\d{3}-\d{2}-\d{4})(?=\d{3}-\d{2}-\d{4})(?=\d{3}-\d{2}-\d{4})(?=\d{3}-\d{2}-\d{4})(?=\d{3}-\d{
(?<!\d)(0[1-9]|1[012])[0-9]{4}(-(0[1-9]|1[012])[0-9]{2})?(-(0[1-9]|1[012])[0-9]{2})?(-(0[1-9]|1[
^\$?[0-9]{1,2}(\.\d{1,2})?$
(?<!\d)(?<![a-z])[0-9]{1,3}[a-z]{1,3}[0-9]{1,3}(?!\d)
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer:(?<![0-9])(?<![a-zA-Z])(?<![0-9])(?<![a-zA-Z])(?<![0-9])(?<![a-zA-Z]
^(?=.*[1-9]\d*$)(?=.*[0-9]\d*$)(?=.*[0-9]\d*[1-9]\d*$)(?=.*[0-9]\d*[1-9]\d*[1-9]\d*$)(?=.*[0
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer:(?i)(?:mailto|http|ftp|sftp|www)://[^\s]+
(9792)([0-9]{4})([0-9]{4})([0-9]{4})
(?<!^)(?<!\.)(?<!\d)(?<![a-zA-Z])[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+
[a-zA-Z0-9]{3}[a-zA-Z0-9]{3}[a-zA-Z0-9]{3}[a-zA-Z0-9]{3}[a-zA-Z0-9]{3}[a-zA-Z0-9]{3}[a-zA-Z0-
[0-9]+(.[0-9]+)?
^\d{1,2}(,\d{1,2})?$
[a-z]{2}[A-Z]{1}
^(0|1)\d{2}:\d{2}(am|pm)$
78754-12aAGenerate
^(?P<month>\w{3})(?P<day>\d{2})(?P<year>\d{4})$
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?<!\S)(?<!\S)(?<!\S)(?<!\S)(?<!
(?<![0-9])(?<![A-Z])(?<![a-z])[0-9]{3}[A-Z]{2}[0-9]{3}[A-Z]{2}[0-9]{3}[A-Z]{2
[A-Z][a-z]*
^(00) [0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}$
/^\d{1,2}\/\d{1,2}\/\d{4}$/
(?<=\d{1,3})(?=\d{1,3})(?<=\d{1,3})(?=\d{1,3})(?<=\d{1,3})(?=\d{1,3})(?<=\d{1,3})(?=\d{1,3})(?<=
\b(?P<country>\w+)\b
A-Za-z0-9
^[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-
VIN_pattern = r'^[0-9]{9}[0-9]{3}[0-9]{2}[0-9]{4}$'
(0-100)\.?\d{2}
^(?P<year>\d{4})-(?P<
^[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}$
^(0|[1-9][0-9]|1[0-2])[0-9]{2}:[0-9]{2}$
^(?:[1-9]\d{0,2}|1[0-2]\d|2[0-4]\d|25[0-5])$
(?<=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2})(?=\d{1,2}
^[a-zA-Z0-9]{4,8}$
[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[
\$[0-9]+(,\d{0,3})*(\.\d{0,3})?
^[0-9]{3}[-.][0-9]{3}[-.][0-9]{3}$
(4\d{3}[ -]\d{4}[ -]\d{4}[ -]\d{4})
(?<!\d)(?<!\.)(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.]
(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6,20}
(\d{1,2})\s(\d{1,2})\s(\d{4})
\bCAS\d{4}\b
^[0-9]{1,2}(,|\.)[0-9]{1,2}(,|\.)[0-9]{1,2}$
/^(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])\/(20[0-9]|21[0-9])$/
(\d+)\s*-\s*(\d+)
^(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?/\[\]{};:,.<>\|\s])[A-Z0-9!@#$%^&*()
/^[a-zA-Z][a-zA-Z0-9-]{6,17}$/
\d{3}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A
^[a-zA-Z][a-zA-Z0-9-]{5,17}$
\b(19|20)\d{2}(0[1-9]|1[012])\b
\$[0-9]{1,3}(,\d{3})*\.\d{2}
<td>.*</td>
(0[1-9]|1[012])[0-9]{2}:[0-5][0-9]
^(?:[a-z]{3}[a-z]|[a-z]{3}[A
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer:^\d*(25|50|75|0|00)\d*$
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer: (1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6
[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9
^(?:\d+(\.\d{1,2})?|\d+)(,\d+(\.\d{1,2})?|\d+)(?:\$\d+(\.\d{1,2})?|\d+)(?:\,\d+(\.\d{1,2})?
(?<![0-9
^[0-9]{3}[0-9]{3}[0
(\d{2}/\d{2}/\d{4} OR \d{2}/\d{2}/\d{4} \d{2}:\d{2}:\d{2})
\$[0-9]{1,2}(,\d{3})?)
/^[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}$/
/^[a-zA-Z0-9-_.]{1,63}(?:\.[a-zA-Z0-9-_.]{1,63})*$/
^(0[1-9]|1[0-2])[0-9
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer: ^(?:\d{1,2}(?:\.5)?|100)(?:\.5)?$
(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})
Matches NANP requirements for valid telephone numbers in the USA, its territories, Canada, Bermuda, and 16 Caribbean nations.<br>Area code: [2-9][0-8][0-9]<br>Exchange code: [2-9][0-9][0-9]<br>Station code: [0-9][0-9][0-9][0-9]<br>Accepts common phone number separators like parentheses, dash/hyphen, slash, period, and space. Stops matching at any word boundary, including end of line.
Regular expression to match valid UK postcodes.In the UK postal system not all letters are used in all positions (the same with vehicle registration plates) and there are various rules to govern this. This regex takes into account those rules.Details of the rules:First half of postcodeValid formats[A-Z][A-Z][0-9][A-Z][A-Z][A-Z][0-9][0-9][A-Z][0-9][0-9][A-Z][A-Z][0-9][
^(?:\d{3}[-\s]?\d{3}
^[a-zA-Z0-9]*[Ee][a-zA-Z0-9]*$
(?<!\d)(?<![a-zA-Z])[0-9]{1,2}:\d{2}(?![a-zA-Z])
(\d{1,2}\/\d{1,2}\/\d{4})-(\d{1,2})-(\d{4})
[^\d]{1,2}[\d]{1,2}
(\+2[0-9]|[0-9]{1,2})([0-9]{3})([0-9]{3})?[0-9]{4}[0-9]{3}[0-9]{3}[0-9]{3
(?<!\d)(?<!\d\d\d)(?<!\d\d\d\d)(?<!\d\d\d\d\d)(?<!\d\d\d\d\d\d\d)(?<!\d\d\d\d\d\d\d
^(8|9)(\d{10})$
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer:^(?:\d{1,2}(?:\.5)?|\d{1,2}(?:\.75)?|\d{1,2}(?:\.9)?|\d{1,2}(?:\.95)?|\d{1,2}(?:\.99)?|\d{1,2}(?:\.999)?|\d{1
\b(?=\d{5}[A-Z]{1}[A-Z]{1})\d{5}\b
(?<!\d)(?<!\.)(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\
(\d{3})(\d{3})(\d{2})
(?<!\n)(?<!\r)(?<!\t)(?<!\f)(?<!\v)(?<!\b)(?<!\s)(?<!\{)(?<!\})(?<!\[)(?<!\])(?<!\()(?<!\))(?<!\{)(?<!\})(?
(?<=^|\s)([A-Za-z0-9_]+)
[0-9]{3}$
Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answer:^[0-9]*\.[0-9]*$
var date = "12-12-1921";var dateRegex = new RegExp(    "^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(19[2-9
[^a-zA-Z0-9-_.]
[a-zA-Z0-9,, ]+
^\+?[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}$
(?<!\\r\\n)(?:[^\\r\\n]|(?<!\\r\\n)(?<!\\n)(?:\\r\\n|\\n))*
(?<!\d)(?<!\.)[\d,]+(?!\d)
^[0-9]{1,8}(?:\.[0-9]{1,2})?$
(\d{1,2}:\d{2}:\d{2})([AP]M)?
(0-59)([AP]M)
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?/\[\]{};:,.<>\|\
0-9, a-z, A-Z, 0-9, a-z, A-Z, 0-9, a-z, A-Z, 0-9, a-z, A-Z, 0-9, a-z, A-Z, 0-9, a-z, A-Z, 0-9, a-z, A-Z, 0-9, a-z, A-Z, 0-9, a-z, A-Z, 0
0\.00%
(\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+)
[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0
HH:nn:ss or HH:nn:ssGenerate a RegEx for this description
(hh|min|ss)Generate a RegEx for this description.
^[+-]?\d{1,3}(,\d{3})*$
^[a-zA-Z ]+$
(0-9)%
[0-9]+(?:\.[0-9]+)?(?:\.[0-9]+)?(?:\.[0-9]+)?(?:\.[0-9]+)?(?:\.[0-9]+)?(?:\.[0-9]+)?
[0-9]*(?:\.[0-9]*)?(?:\.[0-9]*)?(?:\.[0-9]*)
^\+?1\s\d{3}\-\d{3}\-\d{4}$
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer:
(?<![a-zA-Z0-9])[a-zA-Z0-9]|[a-zA-Z0-9]
\d{1,2}[ -]\d{1,2}[ -]\d{4}
^[a-zA-Z0-9]{1,3}\.{1,3}[a-zA-Z0-9]{1,3}$
/^1\.0\.0\.(\d+)\.(\d+)\.(\d+)/
\d{4}(0[1-9]|1[012])[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}
(?<![0-9])(?<![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![
/^[+-]?\d*\.\d+$/
(1|2|3|4|5|6|7|8|9|10)
^\+1[0-9]{3}\s[0-9]{3}\s[0-9]{4}$
\b[A-Z]{3}\d{4}\b
(\d{1,2}|\d{2})/(\d{1,2}|\d{2})/(\d{4})(\d{2})(\d{2})
(?<=\d{1,2})(?<!\d{1,2}\.\d{1,2})(?<!\d{1,2}\.\d{1,2}\.\d{1,2})(?<!\d{1,2}\.\d{1,2}\.\d{1,2})(?<!\d{1,2}
^(?=.*[0-9a-fA-F]{3})(?=.*[a-zA-Z]{3})(?=.*[0-9]{3})(?=.*[a-z]{3})(?=.*
[0-9]{4}-[0-9]{2}-[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-
^(?![^xx]*xx)(?![^yy]*yy)(?![^zz]*zz)(?![^...]*...).*$
^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s
^[0-9a-fA-F]{2}-[0-9a-fA-F]{2}-[0-9a-fA-F]{2}-[0-9a-fA-F]{2}-[0-9a-fA-F]{2}$
(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})
(\d{2}:\d{2} [AP]M|\d{2}:\d{2} [AP]M)
^(?:\d+\s+)?(?:\d+\s+)?(?:\d+\s+)?(?:\d+\s+)?(?:\d+\s+)?(?:\d+\s+)?(?:\d+\
(1-9)
^\d{3}(,\d{3})?$
(?<=\/\/)(.*)(?=\*/)
^(19|20)\d{2}/\d{2}/\d{4}$
(?<!\d)(?<![a-zA-Z])(?<![0-9])[a-zA-Z0-9]{3}(?![a-zA-Z0-9])
[#]{1,6}
^[+-]?(?:\d*\.\d+|\d+\.\d+|\d+)([eE][+-]?\d+)$
^(https?:\/\/[^\s]+\.\w+\/[^\s]+\.\w+\/[^\s]+\.\w+\/[^\s]+\.\w+\/[^\s]+\.\w+\/[^\s]+\.\w+\/[^\s]+\.\w+\/[^\s]+\.\w+\/[^\s]+\.\w+
r'^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(19|20)\d{2}$'
^[0-9]{5}(-[0-9]{4})?$
(?<!\d)(?<!\d\d\d\d\d)(?<!\d\d\d\d\d\d\d\d\d\d\d)(?!\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\
(?:\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2}\/\d{1,2}\/\
^(?P<country_code>\d{2})(?P<city_code>\d{2})(?P<state_code>\d{2})(?P<postal_code>\d{4})$
(?<![0-9])[0-9]{9}(?![0-9])
^(?=.*[0-9])(?=.*[1-9])(?=.*[1-9][0-9])(?=.*[1-9][0-9][0-9])(?=.*[1-9][0-9][0-9][0-9])(?=.*[1-9][0-9][0-9][0-9][0-9])(?=.*[
(0-59)([0-9]|[1-9][0-9])[:][0-9]{2}[:][0-9]{2}[:][0-9]{2}[:][0-9]{2}[:][0-9]{2}[:][0-9]{2}[:][0-9]{2}[:][0-
^(1|2|3|4|5|6|7|8|9|10)$
^[0-9]{1,2}(,[0-9]{3})*$
\b9792(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-9]{3}|3[0-9]{4})\b
^[a-zA-Z0-9_.-]*$
^[a-fA-F0-9]{3,6}$
(0[1-9]|1[0-2])[0-9]{3}
(?<=\b\w+ing\b)
^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])\s*\d{4}$
^(?:(?:[0-9]{1,2}:[0-9]{2}):(?:[0-9]{2})(?:[0-9]{2})?(?:[0-9]{2})?(
(^[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}$|^[0-9]{1,2}[0
(?<![0-9])[0-9]{5}(?![0-9])
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_])(?=.*[!@#$%^&*()_+-=?/\\|\[\]\{\}\~\`\`\`\`\`\`\`\`\`\`
^(?=.*[0-9])(?=.*[.][0-9]*$)(?=.*[.][0-9]*$)(?=.*[.][0-9]*$)(?=.*[.][0-9]*$)(?=.*[.][0-9]*$)(?=.*[.][0-
(?<!\d)(?<!-)[A-Z]{2}[0-9]{3}[-\s]?[0-9]{3}[-\s]?[0-9]{4}
^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\[\]{
^(?:\d+(?:\.\d+)?|[\d\.]+)(?:[,\.]|$)
^(0[1-9]|1[012])-(0[1-9]|1[012])-(0[1-9]|1[012])$
(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\
^([0-9]{1,2}):([0-9]{2})([a-z]{2})$
^[0-9]{3}[0-9]{2}[0-9]{4}$
[a-zA-Z0-9_.-]*
^\d{3}[ ]*[\(\.\-]?\d{3}[\)\
[A-Z]{2}[0-9]{3}[A-Z]{2}[0-9]{4}
(\b[A-Z]{2}\s?[A-Z]{2}\b)
\d+\.?\d*e\d+
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9,.]+$
(?<![\w\s])[^\s\w]
\d{1,3}(,\d{3})*
^(?:\d{3,3}(?:,\d{3})*|\d{3}(?:,\d{3})?)$
(\d{1,2})\s*-\s*(\d{1,2})\s*-\s*(\d{1,2})
(0|[1-9]\d{1,2}|100[1-9]\d|1[0-9]\d{1,2}|1[0-9]\d{1,3}|1[0-9]\d{1,4}|1[0-9]\d{1,5}|1[0-9]
[^\w\s]
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$
[^\s]{1,5}[^\s]
(0-9)\.?\d{1,2}\.?\d{1,2}\.?\d{1,2}\.?\d{1,2}\.?\d{1,2}\.?\d{1,2}\.?\d{1,2}\.?\d{1,2}\.?\d{1,2}\.
(0.1|0.2|0.3|0.4|0.5|0.6|0.7|0.8|0.9|1.0|1.1|1.2|1.3|1.4|1.5|1.6|1.7|1.8|1.9|2.0|2.1|2.2|2.3|
(?<=\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(?=\$|,|\,|\.)
^(0|[1-9][0-9]*)([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer: \$\d+\.\d{1,2}(,\d{3})*
^[A-Za-z ]{3,4}$
[^0-9 ]{1,5}
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$
[^A-Za-z0-9]
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[0-9a-zA-Z]{8}$
Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the "days part" of a class schedule field. The string should only accept any of the ff set of letters: 'M' 'T' 'W' 'TH' 'F' 'S' 'SU'. Only one instance of these set of letters is accepted.Generate a RegEx for this description. Answer:
(?<![A-D])[A-D](?![A-D])
r'^[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}[0-9]{1,2}$'
(\d{4}\/\d{2}\/\d{2})\s?(\d{4})\s?(\d{4})\s?(\d{4})
[^\d]{1,2}$
(?<![0-9])(?<![0-9]\.)[0-9]{1,2}(?<![0-9]\.)[0-9]{1,2}(?<![0-9]\.)[0-9
^[1-9][0-9]{0,7}$
/^[a-zA-Z0-9-_]*$/
(\d{1,2})([a-zA-Z]{1,2})([a-zA-Z]{1,2})([a-zA-Z]{1,2})([a-zA-Z]{1,2})([a-zA-Z]
^[0-9]+(\.[0-9]+)+$
A letter
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer: ^[0-9]+(,[0-9]+)?$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_])[a-zA-Z\d\W_]{8,}$
[a-zA-Z0-9_\- ]+
^[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}$
(\d{1,2}:\d{2})(\s|$)
-?\d+
\d+\.?\d*e[+-]?\d+
^[1346]|[1-5]$
[0-9]{4}[0-9]{3}[0-9]{2}[0-9]{1}
THE Complex Password Filter Matching 3 of 4 Character catagories:1.) at least 1 upper case character2.) at least 1 lower case character3.) at least 1 numerical character4.) at least 1 special characterIt also enforces a min and max length and works for.Net and script Regex implimentations.Generate a RegEx for this description. Answer:^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+-=?
(\d{3})(\d{2})(\d{2})
\d{2}/\w{2}/\d{4}
Allows letters,numbers,hyphens,periods and underscores. Such as : Aa.Aa.Aa,.Aa.Aa., -Aa-Aa-, _Aa_Aa_, Aa_Aa_Aa, Aa-Aa-Aa,., -, _I was asked by my client for this scenario to allow letters,numbers,hyphens,periods and underscores in User ID field in web application.Generate a RegEx for this description. Answer:^[a-zA-Z0
\d{1,2}[-/.]\d{1,2}[-/.]\d{1,4}
^(?=.*[0-9a-fA-F])(?=.*[a-zA-Z])(?=.*[0-9])[0-9a-fA-Fa-zA-Z0-9]{8}$
(^[0-9]{8}$|^[0-9]{6}$)
SUPPORTED constructions:[*] - all five commands;[number] - minutes 0...59, hours 0...23, day in month 1...31, months 1...12, day in week 0...7 (0 & 7 is sun);[*/nubmer] - see construction [number];[word] - only months (4th command) and days in week (5th command), warning this regexp is case sensitive (lower letters).NON SUPPORTED constructions:[number-number] and[number,number].Generate a RegEx for this.
^[a-zA-Z0-9_.-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
(^(0[1-9]|1[0-2])[0-9]{1,2}(:|[ap]m)([0-9]{1,2})([ap]m)?$)
(?<Q>\d+)\s*(?<R>\d+)\s*(?<R>\d+)\s*(?<R>\d+)\s*(?<R>\d+)\s*(?<R>\d+)\s*(?<R>\d+)\s*(?<R>\d+)\s*(?<R>\d+)\s*(?<R>
^([\(]{1}[0
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer:(?<!\.)(?<!\.)[a-zA-Z0-9]{1,3}[a-zA-Z0-9]{1,3}[a-zA-Z0-9]{1,3}[a-
/[a-zA-Z0-9-_]{1,63}/
^[A-Z]{2}$
(\d{1,2}\.\d{2}\.\d{4})([-\s]?\d{1,2}[-\s]?\d{1,2}[-\s]?\d{4})
^(?:(?P<year>\d{4})(?:-(?P<month>\d{2})(?:-(?P<day>\d{2}
Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the. (period) to ensure that no other characters may be used in it's place.Generate a RegEx for this description. Answer: /\d+(?:\.\d+)?(?:,\d+(?:\.\d+)?)?/
/^[0-9]*(.[0-9]{1,2})?$/
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer:^https?://[a-zA-Z0-9\-/.]+$
^\d+(\.\d{2})?$
(?<!\.)\w+\.(?!\.)
^(?=.*\d)(?=.*\.\d{2})(?=.*\d$).{5}$
/^(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])$/
^\$?[0-9]+(,[0-9]*)?$
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: ^[A-Za-z0-9]+(\s[A-Za-z0-9]+)*$
^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} \d{2}$
(0?[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])/(19|20)\d{2}
^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*\s)(?=.*[^\s\d]).{8,}$
[^0-9]{6}[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-
A0-A10Generate a RegEx for this description is [A0-A9]\d{0,2}[A0-A9]\d{0,2}[A0-A9]\d{0,2}[A0-A9]\d{0,2}[A0-A9]\d{0,2}[A0-A9]\d{0,2}[A0-A9]
$1.\b(?P<title>.+?)\b\s*$
^\+?[0-9]*\.[0-9]*$
[^0-9]{3}-[0-9]{3}-[0-9]{4}
(?<=snake)(?=noise)
(\w+)\s*=\s*"([^"]+)"
A-F + (1-9)
[a-zA-Z0-9-\s]{1,20}
\d{5}(-\d{4})?
/\d{2}/\d{2}/\d{4}/\d{2}/\d{2}/\d{4}/\d{2}/\d{4}/\d{2}/\d{4}/\d{2}/\d{4}/\d{2}/\d{4}/\d{2}/\
^(?:(?:19|20)\d\d|(?:19|20)\d\d\d|(?:19|20)\d\d\d\d|(?:19|20)\d\d\d\d\d|(?:19|20)\d\d\d\d\d\d|(
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer: (?<![\d,])\d{3}(?![\d,])\d{3}(?!
THE Complex Password Filter Matching 3 of 4 Character catagories:1.) at least 1 upper case character2.) at least 1 lower case character3.) at least 1 numerical character4.) at least 1 special characterIt also enforces a min and max length and works for.Net and script Regex implimentations.Generate a RegEx for this description. Answer:^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[!@#$%^&*()_+-=?
^[1-9][0-9]{0,2}[1-9]$
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/([0-9]{4})$
^(19|20)\d{2}(\/|\/\d{2})?$
[^0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*
^[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}$
^(0|[1-9]\d|1[0-2]\d|2[0-3]\d|3[0-1]\d|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9])$
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: strFirstName\b(?=[A-Z]{1}\b|$)
(\d{2}:\d{2}:\d{2})(\s*(am|pm))
\b(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\b
/^(http://aspalliance.com/)([0-9]+)$/
(\d{1,2}):(\d{2})\s[AP]M|(\d{1,2}):(\d{2})\s[AP]M
(?=(\d{5})\d{5})(?=(\d{5})\d{5})(?=(\d{5})\d{5})(?=(\d{5})\d{5})(?=(\d{5})\d{5})(?=(\d{5})\d{5})(?=(\d{5})\d{5}
(?:\+?1[-\s]?\d{3}\s?\d{3}[-\s]?\d{
[a-zA-Z0-9]{1,20}
(\d{3}|\d{4})(\+|\-)(\d{3}|\d{4})
^(?:(?:0[1-9]|1[012])\/(?:0[1-9]|[
[0-9]{1,2}:[0-9]{2}:[0-9]{2}
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<=\S+)\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\
^(?:(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|
^(0[1-9]|1[0-2])[0-9]{2}:[0-5][0-9] AM|[0-5][0-9] PM$
(?<!\d)(?:\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}|\d{3}[-.\
(\d+)(%|\d+%)
[1-9][0-9]/[1-9][0-9]/[1-9][0-9]/[1-9][0-9]/[1-9][0-9]/[1-9][0-9]/[1-9][0-9]/[1-9][0-9]/[1-9][0-9]/[1-
^\d+\.\d{2}$
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: [0-9]{1,2}
^(?:(?:[0-9]{1,2}\.){3}[0-9]{1,2}|(?:[0-9]{1,2}\.){3}[0-9]{1,2}|(?:[0-9]{1,2}\.){3}[0-9]{1,2}
(\d{2}:\d{2})\s(\/\s)?(\d{2}:\d{2})\s(\/\s)?(\d{2}:\d{2})\s(\/\s)?(\d{2}:\d{2})\s(\/\s)?(\d{2}:\d{2})\s(\/\s)?(\d{2
^[A-Z]{2}[0-9]{2}[A-Z]$
\b(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(?:25[0-5]|2[0-4][0-9]|[01
^[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}$
\d{1,2}[-/]\d{1,2}[-/]\d{4}[-/]\d{1,2}[-/]\d{1,2}[-/]\d{1,2}
(?<!127.0.0.1)(?<!0)(?<![0-9])(?<![a-zA-Z])(?<![0-9])(?<![a-zA-Z])(?<![0-9])(?<![a-zA-Z])(?<![0-9])(
^(?:(?:[0-9]{4}|[0-9]{2})(?:-[0
(?<month>\d{3})(?<year>\d{4})(?<suffix>\d{3})(?<suffix2>\d{4})(?<suffix3>\d{3})
/^\d+(\.\d+)?$/
^\$[0-9]{1,3}(,\d{3})*(\.\d{2})?$
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer:s##(r99|s00|s01|...|s99|s00|s01|...|s99|s00|s01|...|s99|s00|s01|...|s99|s00|s01|...|s99|s00
(^\+?[1-9]\d{1,2}[-\.\s]?\d{1,3}[-\.\s]?\d{1,4}$)
^[0-9]{3}[0-9]{3}[0-9]{
(^\d{4}-\d{4}-\d{4}$|^\d{4}-\d{4}-\d{4}-\d{4}$|^\d{4}-\d{4}-\d{4}-\d{4}$|^\d{4}
^(?=.*[a-fA-F0-9])(?=.*[a-fA-F0-9])(?=.*[a-fA-F0-9])(?=.*[a-fA-F0-9])(?=.*[a-fA-F0-9])(?=.*[a-fA-F0-9])(
^[a-zA-Z0-9]{8,15}$
\b(1[5-9]|[2-9]\d|[1-9]\d|[1-9]\d\d)\b
A0-A9: [0-9]{1,3}[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2
Applied to a.RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.Generate a RegEx for this description. Answer:import re
(^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]$|^[a-zA-Z
[a-zA-Z0-9.\s-]*
(?<=\d{1,5})(?<!\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2})(?<!\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.
^\+?1
^[0-9]{1,3}[- ]?[0-9]{3}[- ]?[0-9]{4}$
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[0-9]{3}[a-zA-Z0-9]{3}$
(?<!\d)(?<![a-zA-Z])[1-9][0-9]{0,2}(?![a-zA-Z])
(\w+)\.([a-zA-Z]{2,3})
[\d]{1,2}:\d{2}:\d{2}
(\d{3}[-\s]\d{3}[-\s]\d{4})
^(?P<month>\d{1,2})[-/](?P<day>\d{1,2})[-/](?P<year>\d{4})$
[0-9]{5}-[0-9]{4}
\b[A-Z][a-z]{2}\s\d{2}\b
(?<!\d)(?<!\d\d\d\d\d\d\d\d\d\d\d)(?!\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\
(?<!\d{4})(?<!\d{2})(?<!\d{1})(?<!\d{0})(?<!\d{0})(?<!\d{0})(?<!\d{0})(?<!\d{0})(?<!
^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$
(0.00%|[1-9][0-9]*[0-9]|1[0-9]{2}|2[0-9]{3}|3[0-9]{4}|4[0-9]{5}|5[0-9]{6}|6[0-9]{7}|7[0-9]{8}|8[0-9]{9
(\d+)([a-zA-Z]+)
(?<!\d{2})(?<!\d{2}[-/.])(?<!\d{2}[-/.]\d{2}[-/.]\d{2}[-/.]\d{2}[-/.]\d{2}[-/.]\d{2}[-/.]\d{2}[-/.]\d{2}
r'^\d{1,2}(?:[,.]\d{1,2})?'
HTML Pattern MatchingPLEASE HELP/&lt;[^&gt;]*&gt;/igThe above pattern is only successful when html tag are simple (they don't include any javascript). This mean that the pattern will fail if something like this is within the tag &lt;input type=button value=test onclick='if(n.value&gt;5)do_this();'&gt;. It will not match the entire open n close sign.How do you write a pattern that will pass all these tag so that the pattern will match from the open to the close tags
(?i)(?<!\w)(\w+ing\w+)|\w+ing\w+
var regex = new Regex(@"^(?<name>\w+)\s+(?<age>\d+)\s+(?<gender>\w+)\s+(?<occupation>\w+)\s+(?<location>\w+)\s+(?<income>\d+)\s+(?<status>\w+)\s+(?<hobby>\w+)\s+(?<interest>
(?<!\d)(?<![\d\s])[\d\s]{3}[\d\s]{3}[\d\s]{4}
^[^\s]*ing$
[0-9]{2}/[0-9]{2}/[0-9]{4}
[0-9]{4}-[0-9]{2}-[0-9]{2}[0-9]{2}
(\d+\.\d{3}|\d+\.\d{3}|\d+\.\d{3}|\d+\.\d{3}|\d+\.\d{3}|\d+\.\d{3}|\d+\.\d{3}|\d+\.\d{3}|\d+\.\d{3}|\d
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: ^[a-zA-Z][a-zA-Z0-9!@#$%^&amp;*-.]{5,50}$
(?i)(?=^[a-z])(?=^[A-Z])(?=^[0-9])(?=^[a-zA-Z0-9])[a-zA-Z0-9]{8,}$
(?<!\d)(?<![a-zA-Z])\d{1,2}/\d{1,2}/\d{4}
^[0-9]{1,2}[0-9]{1,2}$
^[a-zA-Z0-9_]{1,20}$
^[0-9]{1,7}(?:\.[0-9]{1,2})?$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?
\d{1,2}/[A-Za-z]{3}/\d{4}
(?<start>\d{1,2})(?<stop>\d{1,2})Blah, blah, blah.;
(^(?=.{10}$)(?=^[8-9]\d{9}$)(?=^\d{10}$))
(?<=\d{4}-)(?<=\d{4}-)(?<=\d{4}-)(?<=\d{4})
\d{1,3}(?:[0-9]{1,3})?(?:[0-9]{1,3})?(?:[0-9]{1,3})?(?:[0-9]{1,3})?(?:[0-9]{1,3})?(?:[0-9]{1,3})?(?:[0-9]{1
^(?P<month>\d{1,2})(?P<year>\d{4})$
(\d{2})/(\d{4})
[a-zA-Z0-9]{3}[a-zA-Z0-9]{3}[a-zA-Z0-9]{3}
(?<prefix>\+\d{1,3})\s?(?<number>\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{
(?<!\d)(?<![-.])(?<![-.])(?<![-.])(?<![-.])(?<![-.])(?<![-.])(?<![-.])(?<![-.])(?<![-.])(?<![
^[-+]?\d{1,3}(,\d{3})*$
(?<![0-9])([0-9]{1,2})(?![0-9])
\b(?<!\d)(?<![a-z])[A-Z][a-z]\d{2}[a-z]\d{2}\b
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer:^[a-zA-Z0-9_\-\.]+$
\d{1,2}\.?\d{1,2}\.?\d{1,2}|\d{1,2}\.?\d{1,2}\.?\d{1,2}|\d{1,2}\.?\d{1,2}\.?\d{1,2}|\d{1
(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\
[^,]{1,}[^,]{1,}[^,]{1,}[^,]{1,}[^,]{1,}[^,]{1,}[^,]{1,}[^,]{1,}[^,]{1,}[^,]{1,}[^,]{
^(?:(?:19|20)\d\d|(?:19|20)\d\d\d)(?:\/\d{1,2}|\/\d{1,2})(?:\/\d{1,2}|\/\d{1,2})(?:\/\d{1
(0\.00%|0\.99%)
[0-9]{4}[- ]?[0-9]{3}[- ]?[0
[0-9]{1,3}(\.\d{1,3})?
(?<=\d{4})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\
/^(?:\+?[0-9]{1,2})?[0-9]{2}[0-9]{3}(?:\s?[0-9]{1,2})?[0-9]{2}$/
(?:\+?[1-9]\d{2}[ -]?\d{3}[ -]?\d{4}|\(?\d{3}\)?[ -]?\
\b\d{3}[-.]\d{3}[-.]\d{4}\b
/^[A-Za-z0-9 ]+[A-Za-z0-9 ]+[A-Za-z0-9 ]+[A-Za-z0-9 ]+[
^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[12][0-9]|3[01])-(19|20)\d{4}$
^[0-9]{1,3}\.\d{3}-\d{4}$
^(0[1-9]|1[012])[-/](0[1-9]|[12][0-9]|3[01])[-/](0[1-9]|[12][0-9]
[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3
\d{0,9}
^\d{3}[-\s]?\d{3}[-\s]?
[Insert RegEx]
(0|[1-9][0-9]?|100)
(?<=^|\s)(?=\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$)(?<!\d{1,3}\.\d{1,3}\.\d{1,
(^[789]\d{9})
(^[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{
(\d{4}-\d{2}-\d{2})[\s\S]*(?:\d{4}-\d{2}-\d{2})[\s\S]*(?:\d{4}-\d{2}-\d{2})[\s\S]*(?:\d{4}-\d{2}-\d{2})[\s\S]
\b(?<!\d)(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\d{1,2}(?:st|nd|rd|th)?\b
^[A-Z][a-z]*$
A-F + (1-3)
^\$[0-9,]*(,\s*[0-9]*)?$
^1\.(0|1|2|3|4|5|6|7|8|9)\.0$
^(0[1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-9][0-9]{3}|[1-9][0-9]{4}|[1-9][0-9]{5}|[1-9][0-
^\+31(0|[1-9]\d|[1-9]\d\d)\s\d{9}$
^[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}$
(\(\d{3}\)\s\d{3}-\d{4}|\d{3}-\d{3}-\d{4})
(?<![a-zA-Z0-9])([a-zA-Z0-9]{8})(?![a-zA-Z0-9])
[0-9]{1,3}[a-zA-Z0-9_]{1,3}[0-9]{1,3}[a-zA-Z0-9_]{1,3}[0-9]{1,3}[a-zA-Z0-9_]{1,3}[0-9]{1,3}[a-zA-Z0-9_]{
(\d+)([+-]\d+)
(\d{7,8})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})
(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})
(###) ###-####
[^.]+
(\w+)
^[a-zA-Z0-9_\-\.]+$
(0[1-9]|1[012])[0-9]
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[0-9]{1,8}\.?[0-9]{1,2}$
^(0[1-9]|1[012])[0-5][0-9]$
\d{4}(,\d{4})*
(^[A-Z]{2}[0-9]{3}[A-Z]{2}$)
Matches times seperated by either : or. will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.Generate a RegEx for this description. Answer:^(0|[1-9]|1[012])[0-9]{2}:[0-5][0-9]{2}:[0-5][0-9]{2}$
(?=.*[0-9])(?=.*[5-9])[0-9]{5,10}
^(0|[1-9][0-9]{0,2}|2[0-4][0-9]|25[0-5])\.(0|[1-9][0-9]{0,2}|2[0-4][0-9]|25[0-5])\.(0|[1-9][0-9]{0,2}|2[0-4][0-9]|
^[01]+$
^\+31[0-9]{9}$
(?<!127.0.0.1)(?<![0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9
(^[0-9]{1,3}(?:\.[0-9]{0,3})?(?:\.[0-9]{0,3})?$)
[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}
(\d{2}\.\d{2}\.\d{2}|\d{2}\.\d{2}|\d{2}\.\d{2}|\d{2}\.\d{2}|\d{2}\.\d{2}|\d{2}\.\d{2}|\d{2}\.\d{2}|\d{2}
[0-9]{8}R[a-zA-Z]
^(?:[1-9]\d|1[012])[-
(\d{1,3}(?:[,.]\d{3})*)([,.]\d{3})*
(^(0[1-9]|1[012])[0-9]{2}(:|AM|PM)$)
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*
^(([0-9a-f]{1,4}:){7}[0-9a-f]{1,4}|([0-9a-f]{1,4}:){1,3}[0-9a-f]{1,4}|([0-9a-f]{1,4
(dd)[.-/](MM)[.-/](yyyy)[ ](hh)[:](mm)[:](ss)
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer:^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\.])(?=.*[\/])[a-z
(?=.*[a-z])(?=.*[0-9])(?=.*_).*
\b(january|february|march|april|may|june|july|august|september|october|november|december)\b
(\d+\.\d+|\d+)
(\w+)\s*\=\s*(\w+)
^[A-F0-9]{2}[A-F0-9]{2}[A-F0-9]{2}[A-F0-9]{2}$
^\d{1,10}\.\d{0,2}$
\$\d+\.\d{2}
(\d{1,2}:\d{2}:\d{2})(\s|$)
(?i)(?=.*[a-z])(?=.*[A-Z]).
Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answer: \d{1,2}\.\d{1,2}
(?=^[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{
^[a-fA-F0-9]{3}$|^[a-fA-F0-9]{6}$
^\+31\s\d{9}$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[a-zA-Z\d@$!%*?&]{3,}$
^1\.(0\.){0,3}\.(0\.){0,3}\.(0\.){0,3}$
(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![
(0|[1-9][0-9]*)([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,
\d{2}/\d{2}/\d{4} \d{2}:\d{2}
(^[0-9]{1,2}:[0-9]{2}(AM|PM)$|^[0-9]{1,2}:[0-9]{2}$)
(?i)([a-z]{3})([0-9]{3})([a-z]{3})([0-9]{3})([a-z]{3})([0-
(\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{4}|
^(?:(?:0[1-9]|1[0-2
^(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]{
^[0-9]{1,3}(\.\d{1,2})?$
(?<name>\w+)\s+(?<number>\d+)\s+(?<unit>\w+)\s+(?<date>\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d
match string between chars'' as in source codeGenerate a RegEx for this description. Answer: (\w+)\s(\w+)
hh:minmin:ss
^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?
(?P<country_prefix>\+2|\+22)(?P<city_code>\d{3})(?P<phone_number>\d{3}[\s\d]*\d{4}[\s\d]*\d{5}[\s\d
(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,20}
(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[-]).{4}$
(\d+)\s*\+\s*(\d+)
/^\d{2}[-\d]{4}$/
(?<!\d)(?<![\+22])\d{3}(?<![\+22])[\+22]\d{3}(?<![\+22])[\+22]\d{3}(?<![\+22])\d{
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?/\\|~\[\]])(?=.*[a-zA-Z0-9])[0-9a-zA-
(\d+)
(\d{3}|\(\d{3}\))[ -]?(\d{3})[ -]?(\d{4})
^[A-D]{3}[0-9]{3}[A-D]{3}$
\d{1,2}[sS]\d{1,2}[oO]\d{1,2}
^[A-F0-9]{1,2}$
(\d+[a-zA-Z]+)
^\(\d{1,2}\)\s\d{3}$
^(?=.*[1-9])(?=.*[0-9])[1-9][0-9]{0,3}(?:\.[0-9]{3})?$
^(0[1-9]|1[012])[-/.]
\d{3}[A-Z]\d{2}
[a-zA-Z0-9]
^[0-9]*\.?[0-9]*$|^[0-9]*$
[\$\,\s]*
^\d{5}\.\d{2}$
/^(?:(?:(?:0?[1-9])|(?:1[0-2]))|(?:3[01]))(?:(?:0?[1-9])|(?:1[0-2]))(?:(?:0?[1-9])|(?:1[0-2]))(?:(?:0?
A-F + (0-9)
(?<!\d)(?<!\d\.)\d+(?:\.\d+)?(?:\,\d+)?(?:\
(\d{3})\d{3}-\d{4}
\d{1,2}/\d{2,4}
^[+-]?\d*\.?\d*[eE][+-]?\d+$
(0|[1-9]\d*|1[0-9]\d*|2[0-4]\d|25[0-5])
(\d{2}-\d{2}-\d{4})
Regular expression to match valid UK postcodes.In the UK postal system not all letters are used in all positions (the same with vehicle registration plates) and there are various rules to govern this. This regex takes into account those rules.Details of the rules:First half of postcodeValid formats[A-Z][A-Z][0-9][A-Z][A-Z][A-Z][0-9][0-9][A-Z][0-9][0-9][A-Z][A-Z][0-9]
\d{4}
[^A-Za-z0-9]{2}[0-9]{9}[A-Za-z0-9]
(?P<version>\d{2}\.\d{2}\.\d{2})
(?<!\d)(?<![a-zA-Z])[0-9]{1,2}(?![a-zA-Z])[a-zA-Z]{1,2}(?!\d)
/^\d+(\.\d{0,2})?$/
^([1-9][0-9]|1[0-2])[0-9]{2}:[0-5][0-9]$
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer: http(s)?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])$
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?<=\s)\w+\s(?=\s|$)
r'amp'
(\d{1,2}d\d{1,2}h\d{1,2}m)
[^0-9]{1,2}[0-9]{3}[0-9]{2}[0-9]{4}
[A-Z][a-z]+( [A-Z][a-z]+)+
^(?:[0-9]{4}|[0-9]{3}[0-9]|[
/^[0-9]+(?:\.[0-9]{1,2})?$/
ATU\d{5}(?:\d{4})?(?:\d{2})?(?:\d{2})?(?:\d{2})?(?:\d{2})?(?:\d{2})?(?:\d{2})?(?:\d{2})?(?:\d{2})?(?:\d{2})?(?:\d{2})?(?:\d{
[1000-9999]\d{2}[A-Z]
^(?=.*[1346])(?=.*[10])[1-9][0-9]*$
^(?P<country_code>[0-9]{2})(?P<province_code>[0-9]{2})(?P<city_code>[0-9]{2})(?P<postal_code>[0-9]{5})$
(\d{2}\/\d{2}\/\d{4})|(\d{2}/\d{2}/\d{4})
(\d{2}:\d{2}:\d{2})(?::(\d{2}))?
(^\+?[0-9]{1,2}\s?[0-9]{1,2}\s?[0-9]{1,2}\s?[0-9]{1,2}\s?[0-9]{1,2}\s?[0-
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d\d$
\d{1,2}/\d{1,2}/\d{4} (optional) or \d{1,2}/\d{1,2}/\d{4} (optional) or \d{1,2}/\d{1,2}/\d{4} (optional)
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:    public static string CurrencyExpression(string currency)    {        var currencyExpression = new Regex(@"^\$?(?P<value>\d+(?
[A-Z][a-z]
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{4,8}$
^\+?1[\s\d]{3}\s?[\d]{3}\s?[\d]{4}$
^[-+]?[0-9]*\.?[0-9]*$
^(0[1-9]|1[012])[0-9]{2}:[0-9]{2}$
/\d{1,2}\/\d{1,2}\/\d{4}/
^\$\d+(,\d+)?$
^[0-9]{1,5}(?:\.[0-9]{1,3})?$
(?:\+|\(|\)|\s|\(|\)|\s|\(|\)|\s|\(|\)|\s|\(|\)|\s|\(|
(?<![0-9])(?<![0-9][0-9])(?![0-9][0-9][0-9])[0-9]{1,2}(?:\.[0-9]{1,2})?(?![0-9][0-9][0-9])
Matches times seperated by either : or. will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.Generate a RegEx for this description. Answer:^(0|[1-9][0-9]|1[012])[0-9]{2}:[0-5][0-9]$
(?<![0-9])(?<![0-9][0-
Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators:. - /Valid dates only! m (1-12)/ d (1-31)/ y (0..)(rizzipereira.com.br)For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250Generate a RegEx for this description. Answer:(?i)(?:[0-9]{1,2}[-/
^(?:0|[1-9]\d?|1\d\d|2[01]\d|22[0-3])\.(?:0|[1-9]\d?|1\d\d|2[01]\d|22[0-3])\.(?:0|[1-9]\d
[^0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]
(^[0-9]{3}[-\. ]?[0-9]{3}[-\. ]?[0-9]{4}$)
[1],[2
^\d+(,\d+)*$
(?<=\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,
(\d{2})(\d{2})(\d{2})
\b\d+(\.\d+)?\b
(?<!\d)\.(?!0)
var regex = new RegExp(/^[a-zA-Z0-9_\-\.]+$/);
[0-9]{1,3}%
Matches Spanish CIF, NIF and NIE formats. Recognises separation of letters with the hyphen or period.Format CIF: [1 letter][7 numbers][1 number or letter]Format NIF: [8 numbers][1 letter]Format NIE: X[possible 0][7 numbers][1 letter]Note that this expression does not check for the validity of the NIF/CIF/NIE... there are some control characters in there and I don't know how they work.Generally I always strip out any non-alphanumeric characters (hyphens, periods, comm
\d{1,2}[-\s]?\d{1,2}[-\s]?\d{1,2}[-\s]?\d{1,2}[-\s]?\d{1,2}[-\s]?\d{
(0+)([0-9]{1,3})([0-9]{1,3})([0-9]{1,3})([0-9]{1,3})
(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}
This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.NET :Regex.Replace(Html, "<[^>]*>", string.Empty);Generate a RegEx for this description. Answer:
(?<!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB
(?<!\d)(?<!\d\d\d\d\d\d\d\d\d\d\d\d\d\d)(?<!\d\d\d\d\d\d\d\d\d\d\d\d\d\d)(?<!\d\d\d\d\d\d\d\d\d\d\d\d\d\
^[4]{1,12}[0-9]{11}$
\d{1,100}
(?<latitude>-?[0-9]{1,2}(?:\.[0-9]{1,2})?|0[0-9]{1,2})
^(?=.*\d{1,2}$)(?=.*[a-z]{1,2}$)(?=.*[A-Z]{1,
(?i)(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!
^\d{4}[\s]?\d{2}[\s]?[A-Z]$
match string between chars'' as in source codeGenerate a RegEx for this description. Answer: (?<=\s)(\d{1,3})(?=\s)
(?<start>\d{1,2}:\d{2}:\d{2})(?<stop>\d{1,
(\d{1,5})(\s\d{1,5})
/^[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}$/
^(?:(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2}))?(?:\s+(?P<hour>\d{2}):(?P<minute>\d{2}):(?P<second>\d{2}))?$
var split = function(str, delimiter) {    var re = new RegExp(delimiter, "g");    return str.split(re);};
(hh:mm am|pm)
^[0-9]{2}[0-9]{3}[0-9]{4}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-
^([0-9]{1,2}):([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2
^(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2})(?P<dayofmonth>\d{1,2})$
^(?!.*[a-z]{2}$)(?!.*[A-Z]{2}$)(?!.*[0-9]{2}$)(?!.*[a-zA-Z0-9]{2}$)(?!.*[a-zA-Z0-9]{3}
(\d{2}):(\d{2})\s\w+\s\w+
^(?=.*[0-9])(?=.*[1-9][0-9])(?=.*[1-9][0-9][0-9])[0-9]{1,3}(?:\.[0-9]{1,3}){0,2}$
(?i)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+\-=?/\[\]{};
(09)99999999
(\d{1,2}):(\d{1,2}):(\d{2})
(0|[1-9]\d{0,3}|[1-9]\d{0,2}|[1-9]\d{0,1}|[1-9]\d{0,0}|[1-9]\d{0,0}|[1-9]\d{0,0}|[1-9]\
[a-zA-Z0-9 ]+
r'^[a-zA-Z]{3,4}$'
(?<=^|\s)([0-9a-fA-F]{3})(?=\s|$)
(?<![0-9])([1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9])(?![0-9])
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19[6-9]|20[0-9]|[2-9][0-9]|[1-9])$
(?<=\d{1,3})(?=\d{1,3}$)
^(?=.*[1-9]{1,9})(?=.*[0-9]{1,9})(?=.*[1-9]{1,9})(?=.*[0-9]{1,9})(?=.*[1-9]{1,9})(?=.*[0-9]{1,
(?<=\d{8})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})
(\d{2})([-/])(\d{2})([-/])(\d{2})
^0[1-9]\d{3}$
(^[0-9]{1,3}$)
[\u0600-\u06FF]
&quot;(?<!\\.)[a-zA-Z0-9_]+(?!\\.)&quot;
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d{2}$
^[0-9]{1,3}[-.][0-9]{1,3}[-.][0-9]{1,3}$
/^\d+\.?\d*$/
\d{2}:\d{2}:\d{2}
^[A-Z]{2}\d{3}-\d{4}$
^[A-Z]{1}[0-9]{2}[A-Z]$|^[A-Z]{1}[0-9]{3}[
(?<!\d)(\d{1,7}(,\d{1,2})?)(?!\d)
^(?:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer:^[0-9]*\.(25|50|75|0|00)$
\d{5}
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer: ^(?!.*[.com|.org|.net|.mil|.edu])(?!.*[.com|
^(?=.*[1-9])(?=.*[1
/^[a-zA-Z0-9-_.]{1,63}$/
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer: (?<!\d)(?<!\d,)(?<!\d,)(?<!\d,)(
(?<=\")[^"]*(?=\")
[0-9]{5}[0-9]{5,10}
0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9
(\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (\w+) (
^[+-]?[0-9]*\.?[0-9]+$
^\(?[1-9][0-9]{2}\)?[0-9]{3}$
^(?=.*\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})(?=.*\d{1,2}:\d{
^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:
\".*\"
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:^(?=.*\d)(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[-._~!@#$%^&*()_+={}[]|;:,<>?/\[\]\{\}\~\!@#$%^&*()_+={}[]|;:,<>?/\[\
^\d{3}-\d{3}-\d{4}$
[A-Z]
(?<![\d\w\s])([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]
(^[0-9]{4}[-/][0-9]{2}[-/][0-9]{2}$)
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer: ^\d*(25|50|75|0|00)$
/^[\s\S]*?(?:\n|\r|\r\n|\r\n\s*|\s*\n\s*|\n\s*\n\s*|\n\s*\n\s*|\n\s*\n\s*|\n\s*\n\s*|\n\s*\n\
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=\[\]{};:,./<>?/\|\~\`\`\`\`\`
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: (?<=\+91)(?=\d{3})(?=\d{3}-\d{3}-\d{4})(?=\d{3}-\d{3}-\d{4}-\d{4}-\d{4}-\d{4})
\d{4}-\d{2}-\d{2}
^[A-Z][a-z]{0,2}[A-Z][a-z]{0,2}[A-Z][a-z]{0,2}
^[^*]*(Asterisk)$
^(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])[0-9]{4}(?:-[0-9]{2})?(?:-[0-9]{2})?(?:-[0-9]
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$#@%!^&*()_+-=?/\[\]{};:,.<>\|\~\`\{\}\~\`\{\}\~\`\{\}\~
(\".*?\"|\".*?\")
[^a-zA-Z0-9@.]
^\+1[0-9]{3}\s?[0-9]{3}\s?[0-9]{4}$
(?<=^\d{10})(?=\d{3})(?<=\d{3})(?=\d{3})(?<=\d{3})(?=\d{3})(?<=\d{3})(?<=\d{3})(?<=\d{3})(?<=\d{3})(?<=\d{3}
(0[1-9]|1[0-2])[0-9]:[0-5][0-9]:[0-5][0-9]
^[0-9a-fA-F]{2}-?[0-9a-fA-F]{2}-?[0-9a-fA-F]{2}-?[0-9a-fA-F]{2}-?[0-9a-fA-F]{2}$
<img\1 /><img\1/>
(?<!\d)\d{4}(?:\.\d{2})?(?:\.\d{2})?(?:\.\d{2})?(?!\d)
03[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]
\d{1,2}/\d{1,2}/\d{4} (00) to \d{1,2}/\d{1,2}/\d{4} (08) and the month will accept till 12 and the day will accept till 31
(?<!\d)\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}
US Phone Number: This regular expression for US phone numbers conforms to NANP A-digit and D-digit requirments (ANN-DNN-NNNN). Area Codes 001-199 are not permitted; Central Office Codes 001-199 are not permitted. Format validation accepts 10-digits without delimiters, optional parens on area code, and optional spaces or dashes between area code, central office code and station code. Acceptable formats include 2225551212, 222 555 1212, 222-555-1212, (222) 555 1212, (222) 555-12
^[0-9a-f]{32}$
[a-zA-Z]{2}[0-9]{3}[a-zA-Z]{2}[0-9]{4}
\d{1,6}
/[^/]*/
[a-zA-Z0-9.]{0,8}
(?<!\d)(?<!\.)[\d\.]{1,3}(?!\d)
^\$[0-9,]*(?:,\s*[0-9]{1,3})?(?:\.\s*[0-9]{1,3})?$
^(?:[^SEP]|SEP)([^SEP]|SEP)([^SEP]|SEP)([^SEP]|SEP)([^SEP]|SEP)([^SEP]|SEP)([^SEP]|SEP)([^SEP]|SEP)([^SEP]|
^\d+$
[N|S|E|W]|[N|S]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: ^[a-zA-Z][a-zA-Z0-9!@#$%^&amp;*]{5,50}$
^(\+?1
(?<!\d)([0-9]{2})/(?!\d)([0-9]{2})/(?!\d)([0-9]{4})(?!\d)
(^[0-9]{1,2}[-/.][0-9]{1,2}[-/.][0-9]{1,4}$)
(?<![0-9])([0-9]{1,3})(?![0-9])
[A-Z]{3}[0-9]{3}[A-Z]{3}[0-9]{3}[A-Z]{3}[0-9]{3}[A-Z]{3}[0-9]{3}[A-Z]{3}[0
^[a-zA-Z0-9]{5}[0-9]{6}[
^\$[0-9,]*(?:,\s*[0-9]*)?$
(?:\d{1,3}(?:\.\d{3})?|\d{1,3}(?:\.\d{3})?|\d{1,3}(?:\.\d{3})?)
^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(0[1-9]|[12][0-9]|
^(?P<month>\d{3})(?P<year>\d{2})(?P<suffix>\d{3})(?P<suffix_increase>\d{1,2})(?
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{2,}$
[a-zA-Z0-9.\s-]+
(\b(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun|Mon|Tue|Wed|Thu|Fri|Sat|Sun|Mon|Tue|Wed|Thu|Fri|Sat|Sun|Mon|Tue|Wed|Thu|Fri|Sat|Sun|Mon|Tue|Wed|Thu|Fri|Sat|Sun|Mon|Tue|Wed|Thu|Fri|Sat|Sun|Mon|Tue|Wed|Thu|Fri|Sat|Sun|
/[a-zA-Z0-9-_]+/
(?<!\d)(?:(?:[1-9]\d|1[0-2]):(?:[0-5]\d|60))(?!\d)
[0-9]{5}[A-Z]{2}[0-9]{4}
^[0-9]{1,5}$
(?<!\d)(?<!\d\d\d)(?<!\d\d\d\d)(?<!\d\d\d\d\d)(?<!\d\d\d\d\d\d\d)(?<!\d\d\d\d\d\d\d\d)(?<!\d\d\d\d
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer: (?<!\d)\d{3}(?!,\d)
[0-9]{4}-[0-9]{2}-[0-9]{2}
r'^\d+\.?\d*$'
^\d{3}(?:[-\d]\d{3})?$
^([0-9]{1,2}):([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([
(?<!\d)(?<!\d\d-)(?<!\d\d-\d)(?<!\d\d-\d\d)(?<!\d\d-\d\d-\d)(?<!\d\d-\d\d-\d\d)(?<!\d\d-\d\
/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/
^[A-Z][a-z][A-Za-z0-9]*$
\b\d{5}[ -]?\d{4}\b
(\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{2}|\d{3}-\d{2}-\d{2})
(\d{1,2})(:)(\d{2})(:)(\d{2})
(\b[A-Z][a-z]{2}\b|\b[A-Z]{3}\b|\b[A-Z]{4}\b|\b[A-Z]{5}\b|\b[A-Z]{6}\b|\b[A-Z]{7}\b|\b[A-Z]{8}\b|\b[A-Z]{9}\b|\b
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:^(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[
^[3-9][4-9][0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9
^[A-Z]
[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{4}
\d{2}-\d{2}-\d{4}
(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3}
(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<
\d{3}[-\s]?\d{3}[-\s]?\d{4}
^\d{1,3}(,\d{3})*(\.\d+)?$
^[1-5]$
^[0-9]{4}-?[0-9]{2}-?[0-9]{2}$
^[0-9]*\.?[0-9]*\/[0-9]*$
^([0-9]{1,2})(:[0-9]{1,2})?$
\d+\.\d+|\d+\.\d+e\d+|\d+\.\d+E\d+|\d+\.\d+E\d+
[0-9]{1,3}(,0[0-9]{3})*
^(?=.{1,10}$)(?=.{1,11}$)
\d{4}/\d{2}/\d{2}
/^(19|20)\d{2}-\d{2}-\d{4} \d{2}:\d{2}:\d{2}( am| pm)$/
0-59:seconds 0-59 AM|PM
(\d{1,2})\s*((am|pm)\s*(\d{1,2}))?
(\d{4})([a-z]{2})
(?<!\d)(?<!-)(?<!\s)(?<!\d)(?<!-)[0-9]{9}(?!-)
[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W]).*$
Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answer:^[0-9]{1,3}(?:\.[0-9]{1,3})?$
^[A-D]{2}[A-D]{2}[A-D]{2}[A-D]{2}[A-D]{2}[A-D]{2}[A-D]{2}[A-D]
(?<=\d)(?=\s|$)
/^https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+\.jpg$/
^[N|S|E|W]?[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}$
[A0-A9]\d{1,2}[A0-A9]\d{1,2}[A0-A9]\d{1,2}[A0-A9]\d{1,2}[A0-A9]\d{1,2}[A0-A9]\d{1,2}[A0-A9]\d{1,2}[A0-A9]
^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
(0|[1-9][0-9]|1[0-2])00[0-9]{2}
^(([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2}))$
^(?:[0-9a-fA-F]{3}){3}$|^(?:[0-9a-fA-F]{3}){3}[0-9a-fA-F]{3}$|^(?:[
^(0|[1-9][0-9]*|[1-9]\d*(?:\.\d+)?|[1-9]\d*(?:\.\d+)?(?:\.\d+)?|[1-9]\d*(?:\.\d+)?(?:\.
^[1-9]\d?\d?\d?\d$
HTML Pattern MatchingPLEASE HELP/&lt;[^&gt;]*&gt;/igThe above pattern is only successful when html tag are simple (they don't include any javascript). This mean that the pattern will fail if something like this is within the tag &lt;input type=button value=test onclick='if(n.value&gt;5)do_this();'&gt;. It will not match the entire open n close sign.How do you write a pattern that will pass all these tag so that the pattern will match from the open to the close sign
(?<=^\d{5})(?=\s|$)
(?<!\d)(?<!\.)\d+(?:\.\d+)?(?!\d)
^[A-Z]{2}[a-z]{2}$
(?:\+?\d{1,3}\)?[-\s]?\d{3}[-\s]?\d{4}
^(?:(?:0[1-9]|1[012])\/
^(0|[1-9][0-9]|1[0-2])([0-9]{3})([0-9]{2})?$
Matches the UK Drivers License format as laid down by the DVLA / dvla. See http://www.govtalk.gov.uk/gdsc/html/frames/default.htm Matches: 1. Must be 16 characters 2. First 5 characters are alphanumeric. 3. Next 6 characters must be numeric 4. Next 3 characters are alphanumeric 5. Last 2 characters are alpha 6. Second character of numeric section can only be 0, 1, 5 or 6. 7. Fourth and fifth characters of numeric section must be in the range 01 to 31.Generate a RegEx for this description.
^(0[1-9]|1[012])[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}$
\d{2}:\d{2}:\d{2}-\d{2}:\d{2}-\d{2}
^([0-9]{2}):([0-9]{2})$
^[0-9]{3}[- ]?[0-9]{3}[- ]?[0-9]{4}$
(\d{2})/(\d{2})/(\d{4})\s(\d{2}):(\d{2})
(0|[1-9][0-9]|100|1000|10000|100000|1000000|10000000|100000000|10000000000)
^[0-9]{1,3}[a-zA-Z]{1,3}$
[0-9]{4}[a-zA-Z]{2}
\w+
^\d{1,2}\.\d{1,2}$
[^']+
(^9792[0-9]{14}$)
(?<![0-9])[0-9]+(?![0-9])
\b(?:[a-zA-Z0-9_]{1,}[a-zA-Z0-9_]{1,}[a-zA-Z0-9_]{1,}[a-zA-Z0-9_]{1,}[a-zA-Z0-9_]{1,}[a-zA-Z0-9_]
[^a-zA-Z0-9_\-\.]
^(0[1-9]|1[0-2])[0-9]{2}:[0-5][0-9]{2}( AM|PM)$
^[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}
[a-zA-Z0-9_]*[a-zA-Z0-9_]
\d{4}[-\s]?\d{3}[-\s]?\d{2}[-\s]?\d{1}
r'\d+\s*(inches|feet)'
(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\d{
(?<!\d)(?<!\.)\d+(?:\.\d+)?
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[.])(?=.*[-])[0-9]
ESN_REGEX = r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
(?<!\d)(?<!\d\d\d)(?<!\d\d\d\d)(?<!\d\d\d\d\d)(?<!\d\d\d\d\d\d\d)(?<!\d\d\d\d\d\d\d\d)(?<!\d\d\d\d\d\d\d\d\d)(?<!\d\
^[0-9]*(?:\.[0-9]*)?$
^(?:[+]?[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}
^\+31\s*[0-9]{9}$
(\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{
^[a-zA-Z0-9_]{4,8}$
(0\.00%|0\.99%|1\.00%|1.99%|2.00%|2.99%|3.00%|3.99%|4.00%|4.99%|5.00%|5.99%|6.00%|6.99%|7.00%|7.99%|8.00%|8.99%|9.00%|9.99%
The RegEx should match any string that starts with "Microsoft" and ends with "product key".
^[0-9]{4}[0-9]{3}[0-9]{2}[0-9]{1}[0-9]{1}$
(\d{5})-(\d{4})
^(\d)?[ ]*[\(\.\-]?(\d{3})?[\)\.\-
\d{3,4}(,\d{3,4})?
[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}
\b(?:[1-9]\d{0,2}|[1-9]\d{0,3}|[1-9]\d{0,4}|[1-9]\d{0,5}|[1-9]\d{0,
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:^[0-9]{1,2}:[0-9]{2}:[0-9]{2}$
^(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])\/(0?[1-9]|[12][0-9]|3[01])$
(^[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}
Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answer:^(?=.*[0-9])(?=.*[A-Z])(?=.*[a-z])(?
^(?!(xx|yy|...))[a-zA-Z0-9]*$
(?P<country>\+2|\+22)(?P<city>\d{3})(?P<extension>\d{3})?
(^[0-9]{2}[0-9]{1}[0-9]{8}$)
^(0[1-9]|1[012])[0-9]{3}[0-9]{2}[0-9]{4}$
[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[
^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(2000|2001|2002|2003|2004|2005|2006|2007|2008)$
ftp = re.compile(r'ftp\:\/\/[^\s]+')http = re.compile(r'http\:\/\/[^\s]+')https = re.compile(r'https\:\/\/[^\s]+')
^(?P<month>\d{1,2})(?P<day>\d{1,2})$
^(?=.{10}$)(?=.{8}$)(?=.{9}$)(?=.{0}$)
^(00[0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[
(?<![0-9])[0-9]{3}[ -]?[0-9]{3}[ -]?[0-9]{4}
(?<!\d{2})(?<!\d{3})(?<!\d{4})(?<!\d{5})(?<!\d{6})(?<!\d{7})(?<!\d{8})(?<!\d{9})(?<!\d{10})(?<!\d{11})(?<!
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z0-9])[0-
[Zip Code]\d{5}[-\s]\d{4}[-\s]\d{3}[-\s]\d{2}[-\s]\d{3}[-\s]\d{4}[-\s]\d{3}[-\s]\d{2}[-\s]\d{3}[-\s]\d{2}[-\s]\d
Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answer:^(0[1-9]|1[012])[0-9]{4}$
(?<year>\d{2}[-/]\d{2}[-/]\d{2}[-/]\d{2}[-/
\[077\s\d{8}\]|\[078\s\d{8}\]|
Get the style attribute inner text contained inside " or'caracters with the "style=" prefix.Generate a RegEx for this description. Answer: r'^[A-Za-z0-9\s]*$'
[0-9]+(?:\.[0-9]+)+
(?<!\d)(?<![a-zA-Z])[0-9]{2}[a-zA-Z]{2}[0-9]{3}(?!\d)
(\d{3}\.\d{3}\.\d{3})
(?<!\d)\d{3}\-\d{3}\-\d{4}
[0-9]{1,3}(,\d{3})*(\.\d{2})?
^[A-D]{1,2}[A-D]{1,2}[A-D]{1,2}[A-D]{1,2}[A-D]{1,2}[A-D]{1,2}[
(^[a-zA-Z0-9-_]{1,63}$)([a-zA-Z0-9-_]{1,63}$)([a-zA-Z0-9-_]{1,63}$)([a-zA-Z0-9-_]{1,63}$)([a-zA-Z0-9-_]{1,63}$)([a-z
match string between chars'' as in source codeGenerate a RegEx for this description. Answer: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[a-zA-Z\d@$!%*?&]{8,}$
[A-Z]{2}[a-z]{1}
/[a-zA-Z0-9\-_]+(?:\.[a-zA-Z0-9\-_]+)*
[^\.]+\.txt
/<h1-6>(.*?)</h1-6>/
\d+(\.\d+)?(,\d+)?(\.\d+)?(e[+-]?\d+)
(?<!\d{1,2}:\d{1,2}:\d{1,2})\d{1,2}:\d{1,2}(?!\d{1,2}:\d{1,2}:\d{1,2})
^[a-zA-Z0-9_]{0,20}[a-zA-Z0-9_]@[a-zA-Z0-9_]{0,20}[a-zA-Z0-9_]@[a-zA-Z0-9_]{0,20}$
^\d{1,2}(?:\d|\/)?$
/^[0-9,]*(?:\.[0-9]{0,2})?$/
^(?:http|https)://(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+(?:[a-zA-
(?<=\d{4})(?<!\d{3})(?<!\d{2})(?<!\d{1})(?<!\d{0})(?<!\d{-})[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{
(?<!\d)([1-9]\d*)(?!\d)
(?<!\d)(?<![a-zA-Z])(?<![0-9])[a-zA-Z0-9]{3}[a-zA-Z0-9]{3}[a-zA-Z0-9]{3}[a-zA-Z0-9]
^\d{3}[-\s]?\d{3}[-\s]?\d{4}$
\d{1}(?:\d{3})?(?:\d{3})?(?:\d{4})
^[0-9]{9}[0-9]{3}[0-9]{3}[0
(?<=^|[^<_:])[a-zA-Z0-9_-.]+
\<a\>
\d+
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer: ^\$([0-9]{1,2}(,\d{3})*|\d{1,2}(,\d{3})*|
/^(1[0-2]|0?[1-9])/(0?[1-9]|[12][0-9]|3[01])$/
(?<![a-zA-Z0-9])[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-
(?<Q>\d+)(?<R>\d+)(?<!\d)(?!\d)
(?<=\b\w+ing\b)(\w+)
(^\d{3}[-\s]?\d{3}[-\s]?\d{4}$)|(^\d{3}[-\s]?\d{3}[-\s]?\d{3}[-\s]?\d{4}$)
\b(0[1-9]|1[012])[0-9]{3}[-/.][0-9]{2}[-/.][0-9]{4}\b
^(?=.*\d{4})(?=.*\d{2})(?=.*\d{2})(?=.*\d{2})(?=.*\d{2})(?=.*\
ftp_pattern = re.compile(r'^ftp://')http_pattern = re.compile(r'^http://')https_pattern = re.compile(r'^https://')
(?<!\.)[0-9]{1,5}(?:\.[0-9]{1,2})?
(?<=\d)(?=\d|\D)
^(?P<month>\d{1,2})(?P<day>\d{1,2})(?P<year>\d{4})$
^(?P<ipv4>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})|^(?P<ipv6>\[(?P<ipv6>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\]\])$
+\d{3}(?:\d{3})?(?:\.\d{3})?(?:\.\d{3})?(?:\.\d{4})
^(?:\d{1,2}|\d{3})(?:\/\d{1,2}|\/\d{
/^[0-9]{9}[ -]?[0-9]{4}[ -]?[0-9]{3}[ -]?[0-9]{2}[ -]?[0-9]{1}
^(?:[a-zA-Z0-9]{1,63}(?:\.[a-zA-Z0-9]{1,63}){0,61}|[a-zA-Z0-9]
Matches times seperated by either : or. will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.Generate a RegEx for this description. Answer:
^[1-9][0-9]?[0-9]?$
[0-9]{2}/[0-9]{2}/[0-9]{4} or [0-9]{2}/[0-9]{2}/[0-9]{4}
Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the "days part" of a class schedule field. The string should only accept any of the ff set of letters: 'M' 'T' 'W' 'TH' 'F' 'S' 'SU'. Only one instance of these set of letters is accepted.Generate a RegEx for this description. Answer: ^[MTWTFS]$
(?<!\d)(?<!\d\d)(?<!\d\d\d)(?<!\d\d\d\d)(?<!\d\d\d\d\d)(?<!\d\d\d\d\d\d)(?<!\d\d\d\d\d\d\d)(?<!\d\d\d\d\d\d\d\d)(?<!
(?<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
^[A-Z][a-z]{0,2}[A-Z][a-z]{0,2}$
Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answer:^(0?[1-9]|1[012])[0-9]{2}[0-9]{2}[0-9]{4}$
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z])(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[a-zA-Z0-9])[a-zA-Z0-9]{6,}$
[^\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\s\d]*[\
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\[\]{};:,.<>\|\~\`\{\}\~\`\{]
Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answer:var regex = new RegExp("^[0-9]{1,2}[0-9]{1,2}[0
(\d{1,3}(,\d{3})*|\d{1,3}(,\d{3})*)(\.\d{1,2})?
&quot;(?<!\\w)(?<!\\d)(?<!\\.)(?<!\\.)(?<!\\.)(?<!\\.)(?<!\\.)(?<!\\.)(?<!\\.)(?<!\\.)(?<!\\.)(?<!\\
^[a-zA-Z][a-zA-Z0-9-\']{3}$
^\d*\.\d*$
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[0-9]{4}-\d{2}-\d{2
(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[-._~!@#$%^&*()_+={}\[\]:;'<>,.?/])[a-zA-Z0-9-._
ATU\d{5}-\d{6}-\d{4}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\
^\$?[0-9]{1,3}(?:\.[0-9]{0,3})?$
^[0-9]{1,3}[a-z]{1,3}[0-9]{1,3}$
(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(\d+)(
(?<![0-9])(?<![0-9]/[0-9]/[0-9])[0-9]{2}/[0-9]{2}/[0-9]{4}
https://www.example.com/blog/article/how-to-learn-python
^[-+]?[0-9]*$
(\d{1,2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})
^[4]\d{12,15}$
(\+)?(\d{1,3})([-\.])?(\d{3})[-\.](\d{3})[-
^[0-9a-fA-F]{8}$
/[^/]+/
^(19|20)\d{2}-\d{2}-\d{4}$
(?<!\d)(?<![$])[0-9]{1,3}(?:,\d{3})*(?![$])[0-9]{1,3}(?:\.[0-9]{1,3})?(
^1[01]*$
(?<!\d)(?:\.\d+)?(?!\d)
(\d{2}\/\d{2}\/\d{4})(\d{2}\/\d{2})(\d{4})
Regex.IsMatch(Text, @"([\u0600-\u06FF]+)");
(\d{2})\.(\d{2})\.(\d{4})
^[0-9]{2}[0-9]{3}[0-9]{4}$
^[A-Z]{1,}$
0.00-100.00
(?:\+?1)?[ -]?[0-9]{3}[ -]?[0-9]{3}[ -
(?<![0-9])([0-9]{4})(?![0-9])
^[0-9a-fA-F]{6}$
\$[0-9]+(,[0-9]{0,3})*\.?[0-9]*
^(?:[0-9]{4}[0-9]{3}[0-9]{2}[0-9]{1}[0-9]{0
(?<!\d)(?:\d{3}(?:,\d{3})*|\d{3}(?:\.\d{3})*|\d{3}(?:\.\d{2})*|\d{3}(?:\.\d{1})*|\d{3}(?:\.
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: (?<=\+91)(\d{3})(?:-\d{3})?(?:\s|$)
(?<!\d)(?<!\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d
^[0-9]+(,[0-9]+)?$
var date = new Date();var dateFormat = new DateFormat("yyyy/MM/dd");var dateFormat2 = new DateFormat("yyyy/MM/dd");var dateFormat3 = new DateFormat("yyyy/MM/dd");var dateFormat4 =
(?<!\d)(?<![a-zA-Z])\d{4}(?![a-zA-Z])
(\w+)\s+(\w+)\s+(\w+)\s+(\w+)\s+(\w+)\s+(\w+)
(?<!\d)\d{1,2}\.\d{1,2}\.\d{4}(?!\d{4})
(?<!\d)([0-1]?[0-9]|2[0-3]):[0-5][0-9]|6[0-2]):[0-5][0-9]|[0-9]?[0-9]|[1-9][0-9]|[1-9][0
[PESEL]\d{3}-\d{3}-\d{4}
^[A-Z]{1,2}[0-9]{1,3}[A-Z]{1,2}$
\d{1,3}\.\d{3}\.\d{3}
^\+1[0-9]{3}\s[0-9]{3}\s[0-9]{3}$
[a-h]{1}[1-8]
[0-9]{1,7}(?:\.[0-9]{1,2})?
(\d{7})(\d{8})(\d{9})
(?<!\d)(?<![,.])(?<![,.]\d)(?<![,.]\d\d)(?!\d)(?![,.])(?!\d\d)(?![,.]\d\d)(?!\d\d\d)(?![,.]\d\d\d)(?!\d\d\d\d)(?![,.]\d
^[a-zA-Z]{5}[a-zA-Z0-9-]{6,17}$
This expression validate the YYYYMMDDHHMMSS datetime format but also only the date YYYYMMDD. It does not control month length or leap years. Made for a SAP retail sales tickets interface.For XML pattern facet this would do:([0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])(([01][0-9]|2[0-3])[0-5][0-9][0-5])
^\$[0-9]{1,4}(\.\d{0,3})?$
(^[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}
/^[A-Z][a-z]{0,1}[A-Za-z0-9]{0,}[A-Za-z0-9]{
(?<!\d)(?<![-\s])(?<![-\s])(?<![-\s])(?<![-\s])(?<![-\s])(?<![-\s])(?<![-\s])(?<![-\s
^[a-zA-Z]{4}[0-9]{10}$
^[EeVv][0-9]{3}[.][0-9]{1,2}$
(?<![0-9])(?<![7-9])[0-9]{9}(?![0-9])
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{4,8}$
(?<![0-9])[0-9]{2}/[0-9]{2}/[0-9]{4}
^\(?[1-9][0-9]{2}[0-9]{3}[0-9]{3}[0-9]{3}$
^[a-zA-Z0-9-_]{5,12}$
(?<![A-Za-z0-9])[A-Za-z0-9]{3}[A-Za-z0-9]{3}[A-Za-z0-9]{3}[A-Za-z0-9]{3}[A-
(\d{1,2}\.?\d{1,2}\.?\d{1,2}\.?\d{1,2})
(\d+)(?:\.\d+)?
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer:^(?=.*[^\\/])(?=.*[^\\/])(?=.*[^\\/])(?=.*[^\\/])(?=.*[^
(\d{1,2}:\d{2})\s*[a-zA-Z]{1,2}
^\+31(0|[1-9]\d*)([ -]\d{9})?$
^[1-9][0-9]{2}[0-9]$
^\d+(,\d+)?$
(\+\d{1,3}\)?[\d\s]{1,3}[\d\s]{1,3}
+###(###)#######
^(0[1-9]|1[0-2])[0-9]{3}(:[0-5][0-9])?$
(\.[^.]+)$
r'^[A-Z]{3}[0-9]{2}[A-Z]{3}$'
[a-zA-Z][a-zA-Z0-9]{5,}
(?<!\d)(?<![a-zA-Z])[0-9]{1,3}(?![a-zA-Z])
(?i)([0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2
^[a-zA-Z0-9_]{2,30}$
Positive decimal values can be generated using the decimal notation, while negative decimal values can be generated using the negative sign (-).
(?<!\d)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: ^[a-zA-Z0-9!@#$%^&amp;*-_?\.]{6,50}$
(0|[1-9][0-9]|100)
[0-9]{1,9}
^[0-9]{2}[-/][0-9]{2}[-/][0-9]{4}$
^[A-F0-9]{1,4}$
^(?:(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
(?=^.{8}$)(?=^[a-zA-Z0-9]{8}$)
(\d{1,2}\/\d{1,2}\/\d{4})\s*(?:[\d\.]+)?(?:[\d\.]+)?(?:[\d\.]+)?(?:[\d\.]+)?(?:[\d\.]+)?(?:[\
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer:^[a-zA-Z0-9_.-]*$
^(?=.{10}$)(?=.*[8-9])(?=.*[0-9])[0-9]{10}$
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer: (?:\d{1,99}\.\d{1,99}\.\d{1,99}\.\d{1,99})
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[^0-9a-zA-Z])[0-9a-zA-Z]{1,63}$
^[0-9]{1,2}[a-z]{1,2}[0-9]{1,2}$
^\d{4}-\d{2}-\d{2}\.\d{1}$
^[a-zA-Z0-9]{8,20}$
(?=.*[a-z])(?=.*\d)(?=.*[A-Z]).{8,25}$
\d{1,20}
^\d{1,8}\.\d{1,2}$
^[1-9][0-9]*(?:\.[0-9]*)?$
^(?:\d+(?:\.\d{1,2})?|\d+)(?:\.\d{1,2})?(?:\$)?$
(6\d{7})(\d{4})
[0-9]{8}[a-zA-Z]
^\s*(?P<latitude>-?\d+\.\d+)\s*(?P<longitude>-?\d+\.\d+)\s*(?P<altitude>-?\d+\.\d+)\s*(?P<world_info>.*)$
Can be used to pre-validate strings before calling the TimeSpan.Parse() method in the.Net framework, to ensure that the string can be parsed without throwing an exception. The regex uses capturing groups instead of non-capturing groups so that it can easily be used as a pattern in XML Schema by simply removing the ^$ from the beginning/end.This expression fully checks or enforces the [ws][-]{d|[d.]hh:mm[:ss[.ff]] }[ws] format as described in the MSDN help. It even checks the upper/lower boundaries of
^[a-zA-Z0-9\-_\.]+$
(0[1-9]|1[012])/(0[1-9]|[12][0-9])/([0-9]{4})
(\d{2}):(\d{2})
\d{1,2}(?:[, ]\d{1,2})?(?:[, ]\d{1,2})?
(?<=\s)(?=\d{4})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=
(?i)(?<![a-zA-Z])[a-z]{2,3}(?![a-zA-Z])
(?<=\$)([\d\,]+)
^(?:\d{4}-\d{2}-\d{2}|\d{4}-\d{2}-\d{3}|\d{4}-\d{2}-\d{
\[077\]\s?\d{8}
/^/
^(0[1-9]|1[0-2])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d{4}$
^[-]?[0-9]{1,3}[.][0-9]{1,3}$
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer:^(?:\d+\.){1}[25507500]$
^(0|[1-9][0-9]*)([0-9]+)$
^[0-9]{5}$
(\d{2}-\d{2}-\d{4})(\d{1,2})(\d{1,2})
(?<!\d)(?<!\.)[0-9]+(?:\.[0-9]{1,2})?(?!\.)
^\d{5}$
^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]$
(?<!\d)(?<![\d\.])(?<![\d\.]\d)(?!\d)
(\b[A-Z]{2}\s[A-Z]{2}\b)
ATU[0-9]{5}[0-9]{4}[0-9]{3}[0-9]{2}[0-9]{1}[0-9]{0}
(?<!\d)(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(?<![\d.])(
/^[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!#$%&'()*+,-./:;<=>?@[\\]^_`{|}~])[0-9a-zA-Z!#$%&'()*+
\d+\.?\d*
\d{4}[0-9]{2}[1-9]\d{3}
/^[A-Z][a-z]{0,2}[A-Za-z0-9]{0,2}[A-Za-z0-9]
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer: ^(?![^a-zA-Z0-9\-\.])(?![^a-zA-Z0-
ICD-10 codeGenerate a RegEx for this description.
(?<!\\n)(?:(?<!\\r\\n)(?<!\\r)(?<!\\n\\r\\n)(?!\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r
^\+?[1-9]\d{1,2}$
(\d{4}-\d{2}-\d{2})$
var date = "25-12-2021";var pattern = new RegExp(`^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[12
(?<=\d{3})(?=\d{2})(?=\d{4})(?=\d{3})(?=\d{2})(?=\d{4})
^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/([0-9]{4})([0-9]{2})([0-9]{2})$
[0-9]{3}[ -]?[0-9]{4}[ -]?[0
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer: (\d+)([\+\-\.]\d+)?
latitude must be greater than or equal to -90 and less than 90
/^[+-]?\d*\.?\d+$/
(?<=\d{3}-\d{2}-\d{4})\s\d{2}-\d{2}-\d{4}
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer:^[a-zA-Z0-9]{2,3}\.com$
^\d{3}[ ]*[\(\.\-]?\d{3}[\.\-
^(?:[0-9]{1,2}[-/]?[0-9]{1,2}[-/]?[0-9]{1
^\+?\s*\(\d{3}\)\s*[0-9]{3}[0-9]{4}$
(BG)(\d{1,3})(\d{3})(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2
/^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d{2}$/
(\d{1,2})([a-zA-Z]{1,2})([0-9]{1,2})
^(1|2|3|4|5|6|7|8|9|10|11|12)$
(?<=\d)(?=\d)(?<=\d)(?=\d)
(?<first>.*?)(?<second>.*?)
(?<=\w)(?=\W)
(?<!\d)(?<![^\d])\d{1,2}(?!\d)
^\+?1\s?[0-9]{3}\s?[0-9]{3}\s?[0-9]{4}$
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer:^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
\d{1,2}[a-zA-Z]{1,2}[a-zA-Z]{1,2}[a-zA-Z]{1,2}[a-zA-Z]{1,2}[a-zA-Z]{1,2}[a-zA-Z]{1,2}[a-zA-Z
(?<=\d{1,3})(?=\d{1,3})(?<=\d{1,3})(?=\d{1,3})(?<=\d{1,3})(?=\d{1,3})(?<=\d{1,3})(?=\d{1,3})(?<=\d{1,3})(?=\d{1,3
^[-+]?\d*\.\d+$
(?<!^)(?<!_)(?<![a-zA-Z0-9_])[a-zA-Z0-9_]+(?![a-zA-Z0-9_])
^(19|20)\d{2}(?:-\d{2})?(?:-\d{4})$
\d{2}/\w{3}/\d{4}
^[1-9][0-9]{0,2}$
[0-9]+(\.\d+)?
^(?=.*[0-9])(?=.*[5])(?=.*[6])(?=.*[7])(?=.*[8])(?=.*[9])[0-9]{5,10}$
(\d{4}[ -]\d{4}[ -]\d{4}[ -]\d{4})
(^[0-9]{1,3}(\.\d+)?$)
[\\"/]{1}[0-9]{1,3}[\\"/
The pattern will match any multi-line or single line comments in TSQL (Stored Procedures or SPROC's) in MS SQL Server.
(?<!\d)(?<![\+\-\*\/])[\d\.]+
(?<!\d)(?<![A-Za-z])[A-Za-z0-9]+(?![A-Za-z0-9])
(^[0-9]{5}[\.]{2}$)
^[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{
(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20)
\b(?<!\d)(?:[a-z]{3}[a-z]{3}[a-z]{2}[a-z]{2}[a-z]{2}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3
^[-]?[0-9]{1,3}[-]?[0-9]{1,3}$
[0-9]{3}-\d{3}-\d{4}
(?i)(?=\d{9})(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{9}
(?<=\d)(?:\.\d+)?(?:\.\d+)?(?:\.\d+)?(?:\.\d+)?(?:\.\d+)?(?:\.\d+)?(?:\.\d+)?(?:\.\d+)?(?:\.\d+)?(?:\.\d+)?(?:\.\d+)?(
(?<=\d)([A-Za-z])(?=\d)
(?<![0-9])(?<![A-Z])(?<![a-z])[0-9]{8}(?![0-9])
/^(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])\/(19|20)\d{2}$/
^(?!xx|yy|...)(?!.*(xx|yy|...).*$).*
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer:^(?!.*[^a-zA-Z0-9\.])(?!.*[^a-zA-Z
^(?:\d{1,3}(?:,\d{3})*|\d{1,3}(?:\.\d{3})?)$
(?<!\d{10})(?<!\d{8})(?<!\d{9})(?!\d{10})
(?P<Q>\d+\.\d+\.\d+\.\d+)
(\d{3}(?:\.\d{3})?)
^(?!127.0.0.1)(?!.*[0]$)(?!.*[1]$)(?!.*[2]$)(?!.*[3]$)(?!.*[4]$)(?!.*[5]$)(?!.*[6]$)(?!.*[7]$)(?!.*[8]$)(?!.*[9]$)(?!.*[0]$)(
^(?=.*[1-9])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8,}$
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[$-_@.&+])(?=.*[!#%*?&])[A-Za-z0-9$-_@.&+]{8,}$
(\d{2})\s(\w{3})\s(\w{4})
^[1-9][0-9]{2}/[0-9]{2}$
(?i)([a-z]{4})([0-9]{4})([a-z]{2})([0-9]{2})([a-z]{2})([0-9]{2})([a-z]
^(?:\d{0,5}\.\d{0,3}|\d{0,5}\.\d{0,2}|\d{0,5}\.\d{0,1}|\d{0,5}\.\d{0,0}|\d{0,5}\.\d{0,0}|\d{0,5}
(\d{1,2}:\d{2}:\d{2})\s*(am|pm|am|pm|am|pm|am|pm|am|pm|am|pm|am|pm|am|pm|am|pm|am|pm|am|pm|am|pm|am|pm|am|pm|am|pm|am|pm|am|pm|am|pm|am|pm|am|pm|am|pm|am|
(?<!\d)(?<!\d\d\d\d)(?<!\d\d\d\d\d\d\d)(?<!\d\d\d\d\d\d\d\d\d)(?<!\d
Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answer:^[0-9]{1,3}(?:\.[0-9]{1,2})?$
(?<!\d)\d{1,2}\.(?!\d{4})\d{2}(?!\d{2})\d{2}(?!\d{2})\d{4}
^([1-9][0-9]|1[0-2])[0-9]:[0-5][0-9]$
^[0-9]{2}:[0-9]{2}$
[^\d]{3}\.[^\d]{
(?<!\d)(?<![+\-*\/])[0-9]+(?!\d)
var regex = /^(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(
^(?=.*\d{4}-\d{2}-\d{2})(?=.*\d{1,2}-\d{1,2}-\d{4})(?=.*\d{1,2}-\d
^[0-9]{2}/[0-9]{2}/[0-9]{4}$
[0-9]+(,[0-9]+)*
(?P<percentage>\d{1,2})(?P<scale>[\d\.]+)
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer: ^[0-9]{1,3}[a-zA-Z]{1,3}$
(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![
(?<=\[)(.*?)(?=\])
Get the style attribute inner text contained inside " or'caracters with the "style=" prefix.Generate a RegEx for this description. Answer: r'^(?P<style>[^"]+)$'
[Insert state abbreviation here]
^(([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9]{1,3}\.){3}[0-9]{1,3}
A[KN]\d{1,3}
^(?P<number>\d+)(?P<word>\w+)(?P<#>\d+)?$
hh:mm
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<!\d)(?<!\d:\d)(?<!\d:\d:\d)(?<!\d:\d:\d:\d)(?<!\d:\d:\d:\d:\d)(?<!\d:\d:\d:\d:\d:\d)(?<!\d:\d:\d:\d:\d:\d:\d)(?<!\
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
(?<!\d)\d{4}(?:-\d{2})?(?:-\d{2})?(?:-\d{2})?(?:-\d{2})?(?:-\d{2})?(?:-\d{2})?(?:-\d{2})?(?:-\d{2})?(?:-\d{2
\d{1,3}[0-9]{3}[0-9]{3}[0-9]{3}
\d{1,2}:\d{2}(AM|PM)
^(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Za-z0-9])[A-Za-z0-9]{8,}$
\d{5}(?:\d{4})?
(a - h) + number (1 - 8)
/^[0-9]{1,2}(,|\.)[0-9]{1,2}$/
This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answer: \d{5}(,\d{5})*
/^([0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:    public static double CurrencyToDouble(string currency)    {        Regex currencyRegex = new Regex(@"^[\d,\.]+$");        if
^(?=.{0,9}$)(?=.*[1-9])(?=.*[0-9])(?=.*[0-9]$)(?=.*[0-9]$)(?=.*[0-9]$)(?=.*[0-9]$)(?=.*[0-9
^[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}$
(?<=\s)(?=\S)
\b(?i)\b(?P<name>\w+)\s(?P<age>\d+)\s(?P<city>\w+)\s(?P<state>\w+)\s(?P<zip>\d+)\b
[aeiou]
(\d{2}:\d{2}:\d{2})(\s\d{2}:\d{2}:\d{2})(\s\d{2}:\d{2}:\d{2})
[a-zA-Z]([a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F])){8,}
^[A-Z]{2}[0-9]{2}[A-Z]{1}$
^(?:(?:0?[1-9]|1[012])-(?:0?[1-9]|[12][0-9]|3[01])-(?:0?[1-9]|[12
\b(?<!\d)(?<![A-Za-z])[A-Za-z0-9]{3}\b(?!\d)
[a-zA-Z0-9-_.]
(?<!\')[^']*(?=\')
/^[A-Z]{2}$/
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: (\d+)
^(?:www\.)?[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*$
^(?:(?:0[1-9]|[12][0-9]|3[01])\/(?:0[1-9]|[12][0-9]|
^[1-9][0-9]{3}[0-9]{3}$
(\d+\.\d+|\d+\.\d+)
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer:^(?=\d*\.\d*$)(?=\d*[25507500]$)(?=\d*[0]$)(?=\d*[00]$)
^[0-9]{4}[-/]?[0-9]{2}$
[a-h][1-8]
^[1-9][0-9]|1[012]|AM|PM$
^(?=.*\d{4}-\d{2}-\d{2})(?=.*\d{2}-\d{2}-\d{2})(?=.*\d{4
(?<![0-9])([0-9]{2})(?![0-9])
(\d{4}\/\d{2}\/\d{2})(\d{2})(\d{2})(\d{2})
^(?P<code>\d{3})(?P<country>\w{3})(?P<city>\w{3})$
(?i)(?=\d{4})(?=\d{4})(?=\d{4})(?=\d{4})(?=\d{4})(?=\d{4})(?=\
^(?=\d{1
(?<!#)(?<!\d)(?<!\w)(?<!\s)(?<![a-zA-Z])\d{2}(?!\d)
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer:
^[0-9]{1,7}(\.\d{1,9})?$
^(0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<!\d)\d{1,2}\s\d{1,2}\s\d{1,2}(?!\d)
^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}$
(\d{1,2})([a-zA-Z]{1,2})(\d{1,2})
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z0-9])[a-zA-Z0-9-]{5,20}$
03\d{3}[\d\s]{4}
^(0|[1-9])(0|[1-9])(0|[1-9])(0|[1-9])(0|[1-9])(0|[1-9])(0|[1-9])(0|[1-9])(0|[1-9]
Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answer: \d+\.\d{0,2}
^[0-9]{1,2}[0-9]{2,3}[0-9]{3,4}$
0-9\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d
^[1-9]\d*|[1-9]\d*$
(\d{1,2})([a-zA-Z])(\d{1,2})
^[a-zA-Z0-9_]{1,20}[a-zA-Z0-9_]{1,20}[a-zA-Z0-9_]{1,20}[a-zA-Z0-9_]{1,20}[a-zA-Z0-9_]{1,20}[a-z
(\w+)\s*:\s*(\w+)
(?<!\d)\d{1,2}\/\d{1,2}\/\d{4}
This pattern matches italian mobile phone numbers:- Tim (330, 331, 333, 334, 335, 336, 337, 338, 339, 360, 363, 366, 368)- Vodafone Italia (340, 342, 345, 346, 347, 348, 349)- Wind (320, 323, 327, 328, 329, 380, 383, 388, 389)- 3 Italia (390, 391, 392, 393)- RFI (313)- virtual operators (370, 373, 377)Generate a RegEx for this description.
(?i)(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\s])(?=.*[-])[a-zA-Z\s-]{
(?<=\?\s)(?<article_id>\d+)\?
\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}
(?<![0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}(?![0-9a-fA-F]{1,4}:[0-9a-fA-F]{1,4}:){1,
\W
(?<=\d{3})(?=\d{2})(?=\d{4})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\
\"([^"]*)\".*
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[-._~!@#$%^&*()_+={}\[\]\|;':\"
^(?!SEP)(?!.*SEP.*)(?!.*SEP.*$).*
(^|\s)([0-9]{1,2}:[0-9]{1,2}:[0-9]{
(0|2[0-9]|3[0-1])
^(?=.*\d)(?=.*[a-z])[a-z0-9\s]{1,20}$
\b(?=\d{3}[a-z])(?=\d{3}[a-z]\d)\d{3}[a-z]\d\b
^\d{1,3}[ ]*[\(\.\-]?\d{3}[
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|[12][0-9]|3[01])\/(0[1-9]
^[0-9]{5}[0-9]{2}.{0,2}$
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?<=\b\w+\b)(?<!\w+\b)(?<!\w+\
^[A-D]\d{1,2}$
(http\:\/\/)?[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,}
\$[0-9]{1,3}(,\d{3})*(\.\d{2})?
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: (?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!
[0-9]{1,3}[,.][0-9]{1,3}[,.][0-9]{1,3}[,.][0-9]{1,3}[,.][0-9]{1,3}[,.][0-9]{1,3}[,.][0-9]{1,3}[,.][0-
(?i)([a-z]{2}[0-9]{9}[a-z]{2}[0-9]{9}[a-z]{2}[0-9]{9}[a-z]{2}[
(^\d{9,16}$)
Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answer:^\d+(\.\d+)?$
/^[0-9a-fA-F]{3}$/
^[0-9a-fA-F]{3,6}$
^[0-9]{5}-[0-9]{4}$
\d{1,9}(,\d{1,9})*
(?<=^|\.)(?P<package>\w+)(?P<class>\w+)(?:\.(?P<extension>\w+))?$
This will validate a partial postcode beginning with the postal district on up to the whole postcode, returning the two halves in sub-expressions. The main purpose is to return a valid postal district from a partial or whole postcode. The real value in this regex lies in the fact that it will process the postcode correctly regardless of whether or not the space in present after the district. So the accepted formats are A1 1AA, A11 1AA, A1A 1AA, AA1 1AA, AA11 1AA, AA1A 1AA GIR 0AA (and the same 6 formats without the space)
/^[+-]?(?:(?:\d+\.\d*)|(?:\d+))(?:[eE][+-]?\d+)$/
(?<day>\d{1,2}|[12]\d|3[01])|(?<month>\d{1,2}|[12]\d|3[01])|(?<year>\d{4}|[12]\d|3
(?<![0-9])[0-9]{3}[0-9]{3}[0-9]{4}(?![0-9])
(\d{2})/(\d{2})/(\d{4})
0(?:\.\d{0,1})?
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[-])[a-zA-Z0-9
CNPJ = [0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}
(\d{1,2}d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d
(?<!\d)(?<!\d/)(?<!\d/)(?<!\d/\d)(?<!\d/\d/)(?<!\d/\d/\d)(?<!\
r'^\d{1,2}(\.\d+)?(?:[a-zA-Z]\s*)?(?:[a-zA-Z]\s*)?(?:[a-zA-Z]\s*)?(?:[a-zA-Z]\s*)?(?:[a-zA-Z]\s*)?(?:[a-zA-Z]\s*)?(?:[a
\b\d{1,3}(?:\.\d{1,3})?\b
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\\|}{~:]).*$
(\d{2}\/\d{2}\/\d{4})
(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
(?<![0-9])(?<![0-9]\.)(?![0-9])(?![0-9]\.)(?![0-9])(?![0-9])(?![0-9]\.)(?![0-9])(?![0-9]\.)(?!
hh:mm or hh:mmGenerate a RegEx for this description.
(?<![A-Z])[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[a-zA-Z\d@$!%*?&]{8,20}$
^[a-f0-9]{32}$
[0-9]{1,3}(,[0-9]{3})*
(?<![\d\,\.])(?<![\d\,\.])(?<![\d\,\.])(
\d{1,2}/\d{1,2}/\d{4} \d{1,2}:\d{1,2}:\d{1,2}(\.\d{1,2})?
US 10-Digit Phone number matching.*Requires Area Code*Brackets optional, supports: () and []*seperators optional, supports: - and.*whitespace optionalGenerate a RegEx for this description. Answer:
^[0-9]{1,7}(.[0-9]{1,9})?$
Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answer: \d{1,2}\.\d{0,2}
\d{1,2}[,\s]?\d{1,2}[,\s]?\d{1,2}[,\s]?\d{1,2}[,\s]?\d{1,2}[,\s]?\d{1,2}[,\s]?\d{1,2}[,
(\d+)([.,]\d+)
Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answer: ^[0-9]{9}-[0-9]{4}$
^[-+]?[0-9]*\.?[0-9]+$
[A-Z]{2}[A-Z]{3}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[
latitude must be between -90 and 90.
^(?=.*[0-9])(?=.*[1-9])(?=.*[2-9])(?=.*[3-9])(?=.*[4-9])[0-9]{3}$
^[-+]?[0-9]*\.[0-9]{1,2}$
^(?=.*SEP)(?!.*SEP.*$).*
\b(?:[1-9]\d|1\d\d|2[0-8]\d|3[01])\b
(222) 555-12
^[0-9]{4}-[0-9]{2}-[0-9]{2}$
(^[1-9][0-9]*$)|(^[1-9][0-9]*[1-9]$)|(^[1-9][0-9]*[1-9][0-9]$)|(^[1-9][0-9]*[1-9][1-9]$)|(^[1-9][0-9]*[1-9][1-9][1-9]$)|(
^([0-9]|1[0-2]):([0-5][0-9])$
/^[a-zA-Z0-9._-]+$/
/^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{8,20}$
(?<!\d{1,2}:\d{1,2}:\d{2})(?!\d{1,2}:\d{1,2}:\d{2})(?!\d{1,2}:\d{1,2}:\d{2})(?!\d{1,2}:\d{1,2}:\d{2})(?!\d{1,2
[A-Za-z]
[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}
^(?:[0-9a-fA-F]{3}){3}[0-9a-fA-F]{3}[0-9a-fA-F]{3}[0-9a-fA-F]{3}
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: (?:\+91)?[0-9]{3}[0-9]{3}[0-9]{4}
This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answer: (\d{5})(,\d{5})
(0|2[0-9]|2[1-9]|3[0-9]|3[1-9]|4[0-9]|4[1-9]|5[0-9]|5[1-9]|6[0-9]|6[1-9]|7[0-9]|7[1-9]|8[0-9]|8[1-9]|9[0-9
(?<=^[a-zA-Z0-9]{8})(?=\[)(?<=\d{4})(?=\d{4})(?=\d{4})(?=\d{4})(?=\d{4})(?=\d{4})(?=\d{4})(?=\d{
^(?!xx|yy|...)(?!.*(xx|yy|...).*$).*$
^[0-9]{2}[0-9]{1}[0-9]{8}$
(?<=\d{1,5})(?:\.\d{1,2})?
$1.\s+\w+\s+\w+\s+\w+\s+\w+\s+\w+\s+\w+\s+\w+\s+\w+\s+\w+\s+\w+\s+\w+\s+\w+\s+\w+\s+\w+\s+\w
(\d{2}):(\d{2})( / \d{2})? / \d{2})?
[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.
[0-9]{3}-[0-9]{3}-[0-9]{4}
^[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]+)*$
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(0[
^0\d{3}[-\s]?\d{3}[-\s]?\d{4}$
^(?:(?P<protocol>http|https):)?(?P<host>[^:]+):(?P<port>\d+)(?P<path>[^/?#]+)$
This regular expression is intended to limit numeric entries by allowed places before and after the decimal point. It also recognizes whole numbers. In this example the value cannot exceed 99999.999. To change the range, simply edit the numbers in curly braces. For example, to allow 7 digits (millions) before the decimal point, change both instances of {0,5} to {0,7}. Likewise, to change the decimals from allowing thousandths (3 digits) to just hundreths, change the {0,3} to {0,2}. This can be useful for numeric fields in SQL. This regular
(?!.*')([^']+)
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[@#$%^&+=]).{10}$
(examples only)
(?:\d+\.\d{1,2}(?:[eE][+-]?\d+)?)|(?:\d+\.\d{1,2}(?:[eE][+-]?\d+)?(?:\.\
^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]\{\}\|\;\
Checks whether the string specified is in the same format as the UK postcode format defined on:http://www.magma.ca/~djcl/postcd.txtIt allows:A = LetterN = NumberAN NAA, ANA NAA, ANN NAA, AAN NAA, AAA NAA (rare), AANN NAA, AANA NAAIt gives the option to have the two parts of the uk postcode to be separated by a space or a hyphen.(restriction is set to all-capitals)Generate a RegEx
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer:^(https?://)?[a-zA-Z0-9\-_\.]+$
[^0-9]\d*(\.\d+)?
[^/]+\/[^/]+\/[^/]+\/[^/]+\/[^/]+\/[^/]+\/[^/]+\/[^/]+\/[^/]+\/[^/]+\/[^/]+\/[^/]+\/[^/]+\/[^/]+\/[^/]+\/[^/]+\/[^/]+\/[^/]+\/[^/]+\/[^/
(?<=^\d{10})(?=\d{3})(?=\d{2})(?=\d{1})(?=\d{0})(?=\d{0})(?=\d{0})(?=\d{0})(?=\d{0})(?=\d{0})(?=\d{0})(?=\d{0
/^[0-9]+(?:\.[0-9]{0,2})?$/
(0|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9])|(1|[2-9][0-9]|[2-9][0-9][0-9]|[2-9][0-9
(?<!\d)(\d{3})(?!\d)
(\d{1,2}:\d{2}:\d{2})(\s|\.)
^(?=.*[4])(?=.*[5])(?=.*[6])(?=.*[7])(?=.*[8])(?=.*[9])(?=.*[0])(?=.*[
(?<=\d{1,3}\.\d{1,3}\.\d{1,3}).*
^[a-zA-Z]{3,4}[a-zA-Z0-9-]*$
(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
^(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-
[^a-zA-Z0-9_]
(\d{2}:\d{2})\s*\/\s*(\d{2}:\d{2})\s*\/\s*(\d{2}:\d{2})\s*\/\s*(\d{2}:\d{2})
(0?[1-9]|1[0-2])[0-9]{2}(:[0-5][0-9])?
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[a-zA-Z])(?=.*
(?<=\d)(?=\D)
^\d{1,2}\/\d{1,2}\/\d{4}$
^(0[1-9]|1[012])\/([0-3]?[0-9])\/([0-9]{4})$
Fred Flintstone, Barney Rubble, Mr. Flintstone, and Mr. Flintstone's wife.
(?<![A-Za-z0-9\s])[A-Za-z0-9\s]{2,}(?![A-Za-z0-9\s])
^\$?[0-9]{1,3}(,\d{3})*(\.\d{2})?$
THE Complex Password Filter Matching 3 of 4 Character catagories:1.) at least 1 upper case character2.) at least 1 lower case character3.) at least 1 numerical character4.) at least 1 special characterIt also enforces a min and max length and works for.Net and script Regex implimentations.Generate a RegEx for this description. Answer:^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\
^\d{1,5}(\.\d{1,3})?$
[1-9][0-9]|1[0-2]
^(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])\/(19|20
^(?:(?:19|20)\d{2}(?:[-/]\d{2})?|(?:1[0-2]|0?[1-9])\d{2}(?:[-/]\d{2})?|(?:[1-9]
\d{4}[A-Z]{1}[A-Z]{1}[A-Z]{1}
^(00|[1-9][0-9]{0,2}|[1-9][0-9]{1,3}|[1-9][0-9]{2,3}|[
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<!\.)(?<![0-9])[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}(?!\.)
BG\d{8}
(?<![^\d\.])(?<![^\d\.]\.)(?![^\d\.])(?![^\d\.]\.)(?![^\d\.]\.)(?![^\d\.]\.)(?![^\d\.]\.)(?![^\d\
/(?=\?)(.*)
03\d{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]
r'^\d{1,2}(?:[a-zA-Z]{1,2})?[a-zA-Z]{1,2}$'
(?P<hour>\d{1,2}):(?P<minute>\d{2})(?P<am_pm>[ap]m)?
(?=(?:[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-
[A-Z]{3}[0-9]{2}[A-Z]{3}
(?:\+)?[1-9]\d{2}[-\.\s]?[1-9]\d{2}[
^[a-zA-Z0-9\W]{1,}$
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer:^[a-zA-Z0-9._-]+$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6}$
^[0-9]{3}[-.][0-9]{3}[-.][0-9]{4}$
^(1[0-2]|0[1-9])/(0[1-9]|[12][0-9])$
(0|[1-9][0-9]|1[0-2])[0-9]{3}
(?<!\d)(?<![\d,])\d{1,3}(?:\.\d{3})?(?![\d,])
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer: ^http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+$
^(0[1-9]|1[0-2])[0-9]{2}:[0-5][0-9]
In military messages and communications (e.g. on naval charts, or maps showing troop movements) the format is DDHHMMZ Mon YY, so for instance, "271545Z FEB 08" represents 15:45 Zulu time (which is to say UTC) on the 27th of February, 2008.For Radio Navigational Warnings (RNWs), the international format is slightly different, using the explicit UTC text instead of the Zulu character, becoming "DDhhmm UTC Jun YY". E.g. "240923 UTC Jun 10" is "9:23am on the
(?<!\.)(?<![0-9])(?![0-9])\d{1,3}(?<
^[0-9]{1,2}[\s]?[0-9]{1,2}[\s]?[0-9]{1,2}$
[^\s]
^[a-zA-Z0-9_\-\.]+\.(xls)$
Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answer:^(0[1-9]|1[012])[0-9]{3}[0-9]{2}[0-9]{4}$
^[a-zA-Z][a-zA-Z0-9_]*[a-zA-Z0-9_]$
^[0-9]{5}\.[0-9]{2}$
^(?:(?:(?:1[0-2]|0?[
(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-
(\(\d{3}\)\s\d{3}\s\d{4}|\d{3}[-\s]\d{4}|\d{3}[-\s]\d{4}|\d{3
\d{1,2}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer: (?:\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}|\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}|\d{1,2}\.\d{1,2}\.\d{1,2}\.\d
^[a-zA-Z0-9_]{3,}$
(^[1-9][0-9]*$)|(^[1-9][0-9]*[1-9][0-9]*$)|(^[1-9][0-9]*[1-9][0-9]*[1-9][0-9]*$)|(^[1-9][0-9]*[1-9][0-9]*[1-9][0-9]*[1-
(?i)(?<!\d)(?<![a-zA-Z])[a-zA-Z]\d{2}(?!\d)
/^(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3})|(?:[0-9]{1,3}\.){3}[0-9]{1,3}|(?:[0-9]{1,3}\.){3}[0-9]{1,3}|(?:[0-9]{1,3}\.){3}
^(0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01])[-](0[1-9]|[12][0-9]|3[01])$
\d{2}/\d{4}
(\d{3})([a-zA-Z])(\d{3})([a-zA-Z])(\d{3})([a-zA-Z])(\d{3})([a-zA-Z])(\d{3})([a-zA-Z])(\d{3})([a-zA-Z])(\d{3})([a-zA-Z]
[a-zA-Z0-9_\-\s]{1,30}
^\$[0-9]+(,[0-9]{0,3})*(-[0-9]{
(?<comment>\/\/.*?)(?<region>\/\*.*?\*/)(?<arg>\#.*?)
(\d{4})([0-9]{2})([0-9]{2})
var regex = /[^a-zA-Z0-9\s]/g;
^(?:[1-9][0-9]|1[012])/(?:[0-9]{4}|[12][0-9]|3[01])$
<td>(.*?)</td>
(?=^(?:[1-9]|1[012])[0-9]{3}[-/.][0-9]{2}[-
^(?:(?:19|20)\d{2}(?:[-/](?:19|20)\d{2})?|(?:19|20)\d{2}(?:[-/](?:19|20)\d{2})?(?:[-/](?:19|20)\d{2})?(?:[-/](?:19
^[-+]?[0-9]{1,3}(,[0-9]{3})*$
(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:(?<=\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+
This pattern allows standard e-mail addresses (e.g. user@domain.com), sub domains (e.g. user@foo.domain.com), the new two- and four-letter domains (e.g. user@domain.tv and user@domain.name) and country codes (e.g. user@foo.com.us). Also, this patter follows the Network Solutions standard length of 67 characters for top-level domains. The reason I allow numbers to be entered in the domain suffix is for future planning. If you do not want numbers to be able to be added as a domain suffix
[0-9]{1,3},[0-9]{3,4}
^[0-9]{1,2}/[0-9]{4}$
^(?=.*\d{4})(?=.*[a-z]{1,12})(?=.*[0-9]{1,2})(?=.*
\d{4}[ \d]{2}[a-zA-Z]
^[A-Z][0-9]{2}[A-Z]$
^[0-9]{1,2}(,[0-9]{1,2})?$
[A-Z]{3}[0-9]{3}[A-Z]
^(?=.*[0-9])[0-9]{3}[0-9]{3}[0-9]{4}$
(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?
^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])
(?<!\d)(?<![A-Za-z])[A-Za-z0-9]+(?!\d)
\$[0-9,]*\.[0-9]{0,2}
(?<ddd>\d{3})(?<local>\d{4})(?<international>\d{3})(?<plus>\d{2})(?<minus>\d{2})
^[A-Z]{1}[0-9]{4}[A-Z]{1}[0-9]{3}[A-Z]{1}[0-9]{2}[A-Z]{1}[0-9]{1}$
(?<=\d{4}-)(?<=\d{4}-)(?<=\d{4}-)(?<=\d{4}-)(?<=\d{4}-)(?<=\d{4}-
(?<!\d)\d{4}/\d{1,2}/\d{1,2}
^(?:[0-9]{1,2}:[0-9]{2}:[0-9]{2})?(?:\.(?:[0-9]{1,2}:[0-9]{2}:[0-9
[a-zA-Z0-9-_ ]+
(?<!\d)(?<!\.)(?<!\,)(?<!\.)(?<!\.)(?<!\d)(?<!\.)(?<!\,)(?<!\.)(?<!\d)(?<!\.)(?<!\.)(?<!\d)(?<!\.)(?<!\.)(?<!\d)(
[^\d]{32}-?[^-\d]{32}-?[^-\d]
[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}
(?<![\d,\.])(?<![\d,\.])(?!0)(?<![\d,\.])(?!
(?<![0-9])([0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1
[0-9]{1,2}(,\d{3})*(\.\d{2})?(,\d{3})*(\.\d{2})?(,\d{3})*(\.\d{2})?(,\d{3})*(\.\d{2})?(,\d{3})*
Matches times seperated by either : or. will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.Generate a RegEx for this description. Answer:(?<![0-9])([1-9][0-9]|1[0-2])([0-5][0-9])[0-9]{2}(:[0-5][0-9])?[0-9]{2}(:[0-5
