
[^\d]{1,6}[^\d]{1,6}[^\d]{1,6}[^\d]{1,6}[^\d]{1,6}[^\d]{1,6}[^\d]{1,6}[^\d]{1,6}[^\d]{1,6}[^\d]{1,6}[^\d
[a-zA-Z0-9_\-\s]+
^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}$
(?<year>\d{4})-(?<month>\d{1,2})-(?<day>\d{1,2})
(?:\d{1,3}\.){3}\d{1,3}
(?<![0-9])[0-9][0-9][0-9]|[0-9][0-9][0-9][0-9]|[0-9][0-9][0-9][0-9][0-9]|[0-9][0-9][0-9][0-9][
(\d{2}\/\d{2}\/\d{4})|(\d{2}\/\d{2}\/\d{4})\s(\d{2}:\d{2}:\d{2})\s((\d{2}:\d{2}:\d{2})\s(\d{2}:\d{2}:\d{2}))
^\d{1,3}\/\d{1,2}\/\d{4}$
^51[0-9]{13}$
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[$-_@.&+])(?=.*[!*\(\),])(?=.*[#])[A-Za-z0-9$-_@.&+#!*\(\),]{8,}$
^(0[1-9]|1[0-2])[0-9]{2}:[0-9]{2}:[0-9]{2}$
^\d{4}[ \t]{0,2}[a-zA-Z]{1,2}$
(\d+\.\d{2})
^[A-Za-z0-9]{1,2}\s[A-Za-z0-9]{1,2}\s[A-Za-z0-9]{1,2
(\d{2}):(\d{2}):(\d{2} / \d{2} / \d{2} / \d{2})
^(0[1-9]|1[012])\/(1[0-2]|0[1-9])\/(19[0-9]|20[0-9])[0-9]{2}:[0-9]{2}:[0-9]
^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]+(
(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})
^(?P<ipv4>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})|(?P<ipv6>\d{1,4}:\d{1,4}:\d{1,4}:\d{1,4
<img\1 /><img\2 /><img\3 /><img\4 /><img\5 /><img\6 /><img\7 /><img\8 /><img\9 /><img\10 />
(0|[1-9][0-9]{0,9}|100000|1000000|10000000|100000000|1000000000|10000000000|100000000000|1000000000000|10000000000000)
(\d{10})(\d{2})(\d{2})
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer: r'.*(\.jpg|\.gif).*'
(\d+(?:\.\d+)?)(,|$)
^(0[1-9]|1[012])
SUPPORTED constructions:[*] - all five commands;[number] - minutes 0...59, hours 0...23, day in month 1...31, months 1...12, day in week 0...7 (0 & 7 is sun);[*/nubmer] - see construction [number];[word] - only months (4th command) and days in week (5th command), warning this regexp is case sensitive (lower letters).NON SUPPORTED constructions:[number-number] and[number,number].Generate a RegEx for this command
(\d{4})/(\d{2})
(?<![\d.])(?<![\d.]\.[\d.])(?![\d.])(?![\d.]\.[\d.])(?![\d.]\.[\d.])(?![\d.]\.[\d.])(?![\d.]\.[\d.])(?![\d.]
[^0-9]{3}/[^0-9]{2}/[^0-9]{4}
/^[a-zA-Z0-9-_]+$/
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer: (?=\d+\.\d+$)(25|50|75|0|00)
(^[+-]?\d{1,3}(,\d{3})*(\.\d+)?$)
(\w{3}\s\d{1,2}\s\d{4})\s\w{3}\s\d{1,2}\s\d{4}
(?<!\d)\d{1,3}(?!\d)
(\d{1,2})([\d]{1,2})([\d]{1,2})([\d]{1,2})([\d]{1,2})([\d]{1,2})
[a-zA-Z0-9]{6}
\d*
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer: \d{1,3}(?:,\d{3})*
var date = new Date(2018, 11, 28);var regex = /^(0[1-9]|1[012])/(0[1-9]|1[012])/(0[1-9]|[12][0-9])$/;
A-F: [A-Fa-f]-Generate a RegEx for this description: [A-Fa-f]+
^(0?[1-9]|1[012])[0-9]{3}[-0-9]{2}[0-9]{2}$
^[0-9]{3}[- ]?[0-9]{3}[-
\b[a-zA-Z]{4}[0-9]{4}\b
(?<!\d)(?<![,\s])[0-9,]+(?![,\s])
^(?:\d{3}){2}\d{3}(?:[.,]\d{3}){2}$
(?i)(?=4)(?=.*[^4])(?=.*[^5])(?=.*[^6])(?=.*[^7])(?=.*[^8])(?=.*[^9]
(?<=\b\w+ing\b)\w+
(\d{1,3}(,\d{3})*)
\b\d{5}-\d{4}\b
Get the style attribute inner text contained inside " or'caracters with the "style=" prefix.Generate a RegEx for this description. Answer: " (?i)(?<!\S)(?<!style=)(?<!caracters)(?<!\s)(?<!=)(?<!=)(?<!caracters)(?<!\s)(?<!=)(?<!caracters)(?<!\s)(?<!=)(?<!caracters)(?<!\s)(?<!=)(?<!caracters
^[a-zA-Z0-9_\-\.,\s]+$
(?<=?)([^?\s]+?)
^(0[1-9]|1[0-2])?[0-9]?[0-9]:[0-5][0-9]:[0-5][0-9]$
(\d+\.\d+|\d+\.\d+|\d+\.\d+)
\d{3}[A-Z]{2}[0-9]{3}
This expression validate the YYYYMMDDHHMMSS datetime format but also only the date YYYYMMDD. It does not control month length or leap years. Made for a SAP retail sales tickets interface.For XML pattern facet this would do:([0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])(([01][0-9]|2[0-3])[0-5][0-9][0-5]
^[+-]?[0-9]*\.?[0-9]+[eE][+-]?[0-9]*$
[1],[],[
\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}[\s\S]*(?:\d{3}[\s\S]*)?(?:\.\d{3})?
\d+(\.\d+)?
(?<![0-9]{1,2})(?<![0-9]{1,2})([0-9]{1,2})([0-9]{4})[0-9]{1,2}(?<![0-9]{1,2})([0-
^[a-zA-Z0-9_]*\s?[a-zA-Z0-9_]*$
(?<year>\d{4})(-(?<month>\d{1,2})(-(?<day>\d{1,2}))?)?(-(?<dayofyear>\d{1
This regular expression is intended to limit numeric entries by allowed places before and after the decimal point. It also recognizes whole numbers. In this example the value cannot exceed 99999.999. To change the range, simply edit the numbers in curly braces. For example, to allow 7 digits (millions) before the decimal point, change both instances of {0,5} to {0,7}. Likewise, to change the decimals from allowing thousandths (3 digits) to just hundreths, change the {0,3} to {0,2}. This can be useful for numeric fields in SQL. This is
Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators:. - /Valid dates only! m (1-12)/ d (1-31)/ y (0..)(rizzipereira.com.br)For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250Generate a RegEx for this description. Answer: \d{1,2}\/\d{1,2}\/\d{
(?<year>\d{4})(-(?<month>\d{2})(-(?<day>
#[A-F0-9]{6}
[A-Z]{2}\d{3}[A-Z]{2}\d{4}
(?<day>\d{2})(/(?<month>\w{3}\s\w{3})(?<year>\d{4})/g)
^(0[1-9]|1[012])[0-9]{8}$
^(?=.*[0-9]{2})(?=.*[0-9]{2})(?=.*[0-9]{2})(?=
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|[12][0-9]|3[01]|[04])\/(0[1-9]|[12][0-9]|3[01]|[04]|[06])\/(0[1-9]|[12][0-9]|3
^[0-9]+(?:\.[0-9]{0,2})?(?:[$]?[0-9]+(?:\.[0-9]{0,2})?[$])?$
^\+?[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}$
^[EV]\d{3}[.\d]{1,2}
(?:[0-9A-Fa-f]{0,4}:){7}[0-9A-Fa-f]{0,4}
(?<=\d{4})(?<=\d{2})(?<=\d{2})(?<=\d{2})(?<=\d{2})(?<=\d{2})(?<=\d{2})(?<=\d{2})(?<=\d{2})(?<=\d{2}
^\d+\.\d{1,18}$
[A-Z]{1}[0-9]{1,2}[A-Z]{1}[0-9]{1,2}[A-Z]{1}[0-9]{1,2}[A-Z]{1}[0-9]{1,2}[A-Z]{1}[0-9]{1,2}[A-Z]{1}[0-9]{1,2
^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-
(?<!\d{4}-\d{2}-\d{2})\d{2}/\d{2}/\d{2}(?:\.\d{3})?
\d{2}[a-z]{3}\s\d{2}[a-z]{3} \d{4}[a-z]{2}
(\d{8})-(\d{4})-(\d{4})-(\d{4})-(\d{4})
^1-9(?:[0-9]|1[0-9]|2[0-4]|25[0-5])$
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(
Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answer:[0-9]{2}[0-9]{2}[0-9]{4}
^[0-9]{0,7}(?:\.[0-9]{0,9})?$
^[A-Z]{1}[0-9]{3}[A-Z]$
^(?:(?:0[1-9]|[12][0
\d{1,2}\/\d{1,2}\/\d{4}
0.00%|1-99.99%
^\+?\d{1,3}\s?[-\s]?\d{3}[-\s]?\d{4}
var regex = new RegExp('^(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])/(0[1-9]|[12][0-
^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$
.{0,100}
^https?://(?:www\.)?[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*/.*
[a-zA-Z]{1,2}[0-9]{1,2}-[0-9]{1,2}-[0-9]{1,2}-[0-9]{1,2}
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer: [^.]
^\+?\d{1,3}[-\.\s]?\d{3}[-\.\s]?\d{4}$
/^\d{3}[-.]\d{3}[-.]\d{4}$/
/^[a-zA-Z]{4,32}$/
(?<![0-9])[1-9][0-9]|[0-9]{3}|[0-9]{4}|[0-9]{6}
^(?=.{1,10}$)(?=.{1,11}$)(?=.{1,12}$)(?=.{1,13}$)(?=.{1,14}
(?<![0-9])(?:[0-9]|1[012])\/(?![0-9])(?:[0-9]|3[01])\/(?![0-9])(?:[0-9]|4[0
^[a-zA-Z0-9]+$
import re
(\d{2}\/\d{2}\/\d{4}|\d{2}/\d{2}/\d{4})
(?i)^(?:https?://)?(?:[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,}/)(?:/\S+)?$
[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]
Regex to validate strong password for.NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.Generate a RegEx for this description. Answer:^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{
(^[0-9]{1,2}/[0-9]{1,2}/[0-9]{4})
\d{1,365}
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$
(?<!-)(?<!\d)(?<!\.\d)(?<!\d)(?<!-)(?<!\d)(?<!\.)(?<!\d)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?
^(?=.{3,}$)(?=.*[a-fA-F])(?=.*[0-9])[a-fA-F0-9]{12}$
(^[01]?[0-9]|2[0-3]):[0-5][0-9]|6[0-2]$)
[a-h]?[0-9]?[1-8]
^[0-9]{3}-[0-9]{3}-[0-9]{4}$
^(0[1-9]|[1-9][0-9]|[1-9][0-9][0-9])\s*-\s*([0-9]{3})\s*$
[0-9]{5}
^(?=.*[0-9])(?=.*[1-9][0-9])(?=.*[1-9][0-9][0-9])(?=.*[1-9][0-9][0-9][0-9])[0-
(?P<time>\d{1,2}:\d{2}[ap]m)
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer: (?<=\$)(?:\d+\.?\d*|\d*\.\d+)(?=\$)
^(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2})$
Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answer:^(0[1-9]|1[012])[0-9]{2}[0-9]{2}[0-9]{4}$
(\d+)(\D+)?(\.\d+)?
(?<=\s*\d\s*)(\d+)(?=\s*\d\s*)(?=\s*\d\s*)(?=\s*\d\s*)(?=\s*\d\s*)(?=\s*\d\s*)(?=\s*\d\s*)(?=\s*\d\s*)(?=\s*\
(?<=\d{4
/\d+\.?\d*/
(\d{1,2})\s*(?:(?:\.\d{1,2})?|(?:\.\d{1}))
(\d{4}[\-\s]?\d{3}[\-\s]?\d{2}[\-\s]?\d{1})
r"\b(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])\/(19\d{2}|20\d{2}|20\d{4}|20\d{2}|20
[a-zA-Z0-9-\s]
<input type="text" name="name" maxlength="20" />
[^\.]+\.
(\d{1,2})([A-Z])\1(\d{1,2})
[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.
^[+]?[0-9]+(.[0-9]+)+$
^[0-9]{1,9}$
[^0-9]{1,63}[0-9]{1,63}[0-9]{1,63}[0-9]{1,63}[0-9]{1,63}[0-9]{1,63}[0-9]{1,63}[0-9]{1,63}[0-9]{1,63}[0-9]{1
[a-zA-Z]+ [0-9]{2}:[0-9]{2}:[0-9]{2}
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{6,}$
/<!--.*?-->/
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{1,20}$
(\d+,\d+)
(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{6,})(?=.{6,})(?=.{6,})(?
^[0-9]{1,},[0-9]{1,},[0-9]{1,}
Matches times seperated by either : or. will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.Generate a RegEx for this description. Answer:^([01]?[0-9]|2[0-3]):([0-5][0-9])$
(?<!\d)([A-Za-z]{3}\d{1,2})(?!\d)
[A-Za-z0-9]+( [A-Za-z0-9]+)+
^[0-9a-fA-F]{1,4}:[0-9a-fA-F]{1,4}:[0-9a-fA-F]{1,4}:[0-9a-fA-F]{1,4}:[0-9a-fA-F]{1,4}$
^(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$
^[-+]?[0-9]*\.?[0-9]*[eE][-+]?[0-9]+$
\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b
/^[A-Za-z0-9]{2}[A-Za-z0-9]{3}[A-Za-z0-9]{4}$/
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:^(?:\d{1,2}:\d{2}:\d{2}|\d{1,2}:\d{2}:\d{2}:\d{2}|\d{1,2}:\d{2}:\d{2}:\d{2}:\d{2}|\d{1,2}:\d{2}:\d{2
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer: [\w\d\.]+
\d*\.\d*|\d+\,\d+
0,000,000,000
\d{1,2}-\d{1,2}-\d{4}
\b[A-Z]{3}\s[a-z]{3}\b
Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answer:^(19|20)\d{2}$
[0-9]{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}
[Insert the answer here]
(?i)^(?P<filename>\w+\.txt$)
\d{4}(,\d{4})+
A-F + -Generate a RegEx for this description.
[0-9]{2}[a-z]{3}[0-9]{4}
{{[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[a-zA-Z]{2,3}}
(0|[1-9][0-9]*)
\d{2}/\d{2}/\d{4}
'.*'
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z0-9])[0-9a-zA-Z]{6,}$
(100 to 199)^2
(?<=^|\s)(?=\d{6}-\d{4}-\d{2}-\d{2}-\d{2}-\d{4}-\d{3})(?=\s|$)
&quot;(?<![\w\s])([a-zA-Z0-9_])+&quot;
^(?:\d{2}[a-zA-Z]{3}[a-zA-Z]{3}[a-zA-Z]{3}[a-zA-Z]{3}[a-zA-Z]{3}[a-zA-Z]{3}[a-zA-Z]{3}[a-zA-Z]{3}[a-z
(?P<month>\d{1,2})(?P<day>\d{1,2})(?P<year>\d{4})(?P<leapyear>\d{4})?
^[0-9]{8}[a-zA-Z][a-zA-Z0-9]*$
(?i)(?<![0-9])([0-9]{1,3}\.){3}[0-9]{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\
^(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0
Positive decimal values (e.g. 1.23, 5.67, 0.00123) can be generated by using the following regular expression:^\d+\.\d{1,2}$
\b[A-Za-z0-9-_]{3}\b
^\$\d+(\.\d{1,2})$
(?<![0-9])0+(?![0-9])
(?<!\s)(?<!\d)(?<![A-Za-z0-9_])[A-Za-z0-9_]+(?!\s)
100-199: (0[1-9]|[12][0-9]|3[01])
(49152|65535)
Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answer: ^(19|20)\d{2}(0[1-9]|1[012])[0-9]{4}$
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer: ^[^/]*\/[^_\.]*$
VIN_REGEX = '^[0-9]{4}-?[0-9]{2}-?[0-9]{2}-?[0-9]{2}-?[0-9]{2}-?[0-9]{4}$'
[DD/MM/YYYY|DD/MM/YYYY HH:MM:SS]
(?P<amount>\d+\.?\d*)
(?<!\d)(?<!\d/)(?<!\d/\d)(?<!\d/\d/\d)(?<!\d/\d/\d)(?<!\d/\d/
(\d{4}-\d{3}-\d{3}|\d{3}-\d{2}-\d{2})
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: ^[a-zA-Z0-9!@#$%^&amp;*]{6,50}$
(\d+),(?=(\d+))
(1/1/1900|1/2/1900|1/3/1900|1/4/1900|1/5/1900|1/6/1900|1/7/1900|1/8/1900|1/9/1900|1/10/1900|1/11/1900|1/12/1900|1/13/1900|1/14/1900|1/15/1900|1/
^(?=0\d{6}$)(?=0\d{3}$)(?=0\d{2}$)(?=0\d{1}$)(?=\d{0,2}$)0\d{6}$
^(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])(?=.*[a-zA-Z0-9])[A-Z]{5}[a-zA-Z0-9]{3}[A-Z]{2}[a-
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: (?<=^|\+)\d{1,3}[-\s]?\d{1,3}[-\s]?\d{1,3}[-\s]?\d{1,3}[-\s]?\d{1,3}[-\s]?\d{1,3}[-\s]?\d{
(?<!\d)(?:\.\d{3})?(?![a-zA-Z])
r'^(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(.+?)(
^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}( AM| PM)$
^[1-9][0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9
(?<!\w)(?<!\w)(\w+ing\w+)(?!\w)
A0-A9: [0-9]{1,3}[A-Z]{1,3}[0-9]{1,3}[A-Z]{1,3}[0-9]{1,3}[A-Z]{1,3}[0-9]{1,3}[A-Z]{1,3}[0-9]{1,3}[A-Z]{1,3
^[0-9]{3}[- ]?[0-9]{3}[
/^\d+\.\d+$/
The RegEx would be "^[A-Z]{3}[0-9]{3}[A-Z]{3}[0-9]{3}$".
(?<![0-9.eE-])[0-9]+(\.[0-9]+)?(?![0-9])
[0-9]*[0-9]*[.][0-9]+[0-9]*[.]?[0-9]+[0-9]*[.]?[0-9]+[0-9]*[.]?[0-9]+[0-9]*[.]?[0-9]+[0-9]*[.]?[0-9
^\d{1,2}:\d{2}$
[^A-Z]{3}[0-9]{3}[A-Z]{3}
^[0-9]{1,3}[0-9]{3,}[0-9]{1,}$
Regex for current available mobile numbers mention athttps://fa.wikipedia.org/wiki/%D8%B4%D9%85%D8%A7%D8%B1%D9%87%E2%80%8C%D9%87%D8%A7%DB%8C_%D8%AA%D9%84%D9%81%D9%86_%D8%AF%D8%B1_%D8%A7%DB%8C%D8%B1%D8%A7
[0-9]{3,}(?:,\d{3})*(?:\.\d{2})?
var text = "I used to live in a house with a big backyard where I could run around and play with my friends. I also had a cat named Whiskers who loved to chase after butterflies and birds. I miss my old house sometimes, but I know that I made the right decision by moving here."
(^[0-9]{7,8,9}[0-9]{0,9}$)
(?<=\$)([\d,]+)
(\$\d+(\.\d+)?\s*(?:\s*\$\d+(\.\d+)?\s*)*)
^(0|[1-9][0-9]|1[0-2])(0|[1-9][0-9]|1[0-2])0$
This should be the pattern described in the documentation for the.NET TimeSpan.Parse method - generally parses time spans.From the.NET docs:public static TimeSpan Parse(string s);The s parameter contains a specification of the form:[ws][-][d.]hh:mm:ss[.ff][ws]Items in square brackets ([ and ]) are optional, colons and periods (: and.) are literal characters, and other items are as follows.Item Descriptionws optional white space&quot;-&quot; optional minus sign indicating a
^[0-9a-fA-F]{3}$|^[0-9a-fA-F]{6}$
\d{7,10,11}
[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}
[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?<!\S)(?<!\s)(?<!\d)(?<!\w)(?<!
Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answer:^[0-9]+(.[0-9]*)?$
[A-Z]{2}[a-z]?
A9A (9)
(?<![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9
(?<!\d)\w{5,}
^(0[1-9]|1[012])[0-9]{2}:[0-5][0-9]{2}:[0-5][0-9]{2}$
"USPS"
(?i)(?=[A-Z][a-z]{1,2}[A-Z])(?=[A-Z][a-z]{1,2}[A-Z]|$)
^[0-9]{3}$
[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}
^[a-zA-Z0-9]{1,20}$
(dd)\s*[.-/](MM)\s*[.-/](yyyy)
(\b(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\b|(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\b|(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\b|(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<=^|\s)([a-zA-Z]{1,3}[a-zA-Z0-9\-]{0,2}[a-zA-Z0-9\-]{0,2}[a-zA-Z0-9\-]{0,2}[a-zA-Z0-9\-]{0,2
/[^a-zA-Z0-9\s]/g
\d{1,3}
^\+?[0-9]{1,3}\s?[0-9]{3}\s?[0-9]{4}$
(?<!\d)(?:\.\d{1,2}|[1-9]\d*)(?!\d)
(\d{1,2})([\+\-])(\d{1,2})(\d{1,2})
d|dd|mm|yyyy
[0-9]{0,1}[0-9]{0,2}[0-9]{0,3}[0-9]{0,4}[0-9]{0,5}[0-9]{0,6}[0-9]{0,7}[0-9]{0,8}
(\d{2}\/\d{4})
This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answer:grep -E '[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA
\d{1,3}[\d\s]{1,3}
(?<![0-9])(?<![.,])(?<![$])[0-9]{1,2}(?:,[0-9]{3})*(?<![$])
GIR 0AA(?:\d{1,2})?(?:\.\d{1,2})?(?:\.\d{1,2})?(?:\.
Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answer: [0-9]\.[0-9]
\d{4}-\d{2}-\d{2} \d{2} \d{2} \d{2} \d{2} \d{2} \d{2} \d{2} \d{2} \d{2} \d{2} \d{2} \d{2} \d{2
/^[a-zA-Z0-9._-]{5,15}$/
/^(?P<month>\d{2})(?P<day>\d{2})[-/]\d{4}$/
"^[^"]*$"
(?<![\d\-,])([+-]?\d{1,3})(?![\d\-,])
(?<!\.)(?!\.)[a-zA-Z0-9_]{1,63}(?!\.)(?!\.)(?!\.)(?!\.)(?!\.)(?!\.)(?!\.)
^(?P<latitude>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})|^(?P<longitude>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$
[^<>]+
^(0?[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|[12][0-9]|3[01])$
[a-zA-Z]{1,}[0-9]{1,}
^\s*(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[\s-])(?=.*[\s\w\d\s
/\d{1,2}/\d{1,2}/\d{4}/
^(?:\d{1,3}(?:\.\d{0,5})?|\d{1,5}(?:\.\d{0,3})?|\d{1,3}(?:\.\d{0,2})?|\d{1,3}(?:\.\d{0,1})?|\d{1,3}
r'^smtp\.(com|edu|org)$'
&quot;[^\w\s]&
^[0-9]{1,2}:[0-9]{2}:[0-9]{2}$
^(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=\[\]{};\'\"\\|\\\t\n\r\s])[a-zA-Z0-9!@#$%^&*()_+-=\[\
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$
^0?[1-9]\d?$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[a-zA-Z\d@$!%*#?&]{8,}$
^(?=.*\d)(?=.*[a-zA-Z])[a-zA-Z0-9]+$
(?m)^((0?[1-9]|1[0-2])\/(0?[1-9]|[12][0-9]|3[01])\/(0?[1-9]
(?<![A-D])(?![A-D][A-D][A-D][A-D][A-D][A-D][A-D][A-D][A-D][A-D][A-D][A-D][A-
^[01]*$
[a-zA-Z0-9]{6,20}
(\w+)\s+\+\s+[\w\d\s]+\s+\+\s+[\w\d\s]+\s+\+\s+[\w\d\s]+\s+\+\s+[\w\d\s]+\s+\+\s+[\w\d\s]+\s+\+\s+[\w\d\s]+\s+\+\s+[\w\
(?P<country_prefix>\+2|\+22)(?P<city_code>\d{3})(?P<phone_number>\d{3}[\d\s]*[\d\s]*)(?P<extension>\d{1,2}
^\$?\d+(\.\d{1,2})?$
This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.NET :Regex.Replace(Html, "<[^>]*>", string.Empty);Generate a RegEx for this description. Answer:<[^>]*>
(?=^(?:\d{3}(?:\d{2}(?:\d{1})|\d{1}(?:\d{2})|\d{2}(?:\d{1})|\d{1}(?
(^\+?[0-9]{3}[ \-\(]?[0-9]{3}[ \-\)]?[0-9]{3}[ \-\)]?[0-9]{3}[ \-\)]
(.*)\s*:\s*(.*)
\b\d{1,2}[-/]\d{1,2}[-/]\d{1,2}\b
(0|[1-9]\d|100)
^[0-9]{5}-[0-9]{4}-[0-9]{3}-[0-9]{2}-[0-9]{1}$
^[A-Za-z0-9]*(Asterisk)[A-Za-z0-9]*$
[a-zA-Z0-9._]{5,15}
(?<!\d)\.(\d{1,2})(?:[,\$])?
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer: ^(?:\d+[\d]*)?(?:\.25)?(?:\.50)?(?:\.75)?(?:\.0)?(?:\.00)?$
/^[0-9]{7}$/
^(0[1-9]|1[012])[:](0[1-9]|[12][0-9]|3[01])$
^(?:\d+\.)?(?:\d+)(?:\.\d+)?$
(^|\s)([-+]?\d{0,3})(,\s?\d{0,3})?$
^(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3})|(?:[0-9]{1,3}\.){3}[0-9]{1,3}(?:\.[0-9]{1,3}){3}$
[\s\S]*?#.*
@@@
^([1-9][0-9])|([1-9][0-9])([1-9])$
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer:^([0-9]{1,3}(,[0-9]{3}){0,9})|([
^\$(\d+(,\d+)?|\d+)$
(\d{1,2}\.\d{1,2}|\d{1,2})
[RegEx]/([\w\d\-\.]+)/
[0-9]+(,[0-9]+)+[0-9]*
^[a-z]{2}[A-Z]{2}$
"^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})$"
^(\d+)(?::(\d+))?$
^(20[0-9]|21[0-9]|22[0-9]|23[0-9]|24[0-9]|25[0-9]|26[0-9]|
/[^\x00-\x7F]/g
\d{2}[-.]\d{4}|\d{5}
^[A-D]{1,2}[A-D]{1,2}[A-D]{1,2}[A-D]{1,2}[A-D]{1,2}[A-D]{1,2
1[1-9]|[12][0-9]|3[01]|[1-9]
(^\d{2}\/\d{2}\/\d{4} \d{2}:\d{2}$)
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer:^[a-zA-Z0-9_\-.]+$
(?<=^|\s)(?=\d{4})(?=\d{2})(?=\d{2})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d
Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answer:^([1-9]|1[012])[0-9]{2}$
(\\d{4})-(\\d{2})-(\\d{2}).
(?<![^A-Za-z0-9_])(?<![A-Za-z0-9_])(?<![0-9])[A-Za-z0-9_]{4}[A-Za-z0-9_]{3}[A-Za-z0-9_]{2}[A
/(?<article_id>[0-9]{1,3})/
d[0-9]{4}[a-zA-Z]{2}
[0.1, 0.2]
(?<=\$)(?:\d{1,3}(?:\.\d{1,3})?|\d{1,3})(?:\.\d{1,3})?(?:\$|[a-zA-Z])
^(?=.*[A-Za-z0-9_])[A-Za-z0-9_]*$
(09)99999999999
The RegEx should look like this:^(?P<VAT_number>\d{3}[.-]\d{3}[.-]\d{4}|\d{3}[.-]\d{4}[.-]\d{3}[.-]\d{4}(?:\.\d{2})?$
^[A-Za-z0-9]{5}[0-9]{6}
^[0-9]{1,4}(.[0-9]{0,3})?$
[0-9]{2}:[0-9]{2} [A-Z]{3}
(?<!\d)(?<!\d\.)(?<!\d\.)(?!\d)(?!\d)
(?<=\d{1,2}/\d{4}).
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]{8,}$
(?<!\d)\d{1,2}:\d{2}:\d{2}(?!\d)
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer:^[0-9]{1,3}(,\d{3})*(\.\d{2})?$
(?<=\d)(?=\*)(?=\*)(?=\d)
^[a-zA-Z0-9_]+(\.[a-zA-Z0-9_]+)*$
(?<!\()(?<!\d)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-)(?
[0-9]{4}\-[0-9]{4}\-[0-9]{4}
[0-9]{1,2}\.\d{1,2}
^[a-fA-F0-9]{1,}$
(?<!\d)(\d{2}-)(\d{3}-)(\d{4})
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer:^https?://[a-z0-9-_]{1,63}$
\d{3}-\d{2}-\d{4} OR \d{3}-\d{3}-\d{4}
(\d{4})(\w{2})
^\d{1,2}(?:[,\s]\d{1,2})*$
\d{1,2}/\d{1,2}/\d{4} \d{1,2}:\d{1,2}
(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(.*)\/(
^(?:(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2}))(?:\.\d+)?(?:\/
(^\+?[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-
^\d{3}(?:\s|-|\.)\d{3}$
.{1,2}[0-9]{1,2}
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:$string = "Search for a word that is not in a list of words to remove.\n\n\n\n\
\d{1,2}\.?\d{1,2}\.?\d{1,2}|\d{1,2}\.?\d{1,2}|\d{1,2}\.?\d{1,2}|\d{1,2}\.?\d{1,2}|\d{1,
(\d+)\s+([A-Za-z]+)
[0-9]{1,3}\.[0-9]{1,3}\.[
(\w+)\s\=\s(\w+)
(0|[1-9][0-9]*|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9]
^[A-D]{1,3}[0-9]{1,2}$
The RegEx for this description is "^[A-Z]{3}[0-9]{2}[A-Z]{3}[0-9]{4}$". This RegEx matches a string that starts with three uppercase letters, followed by two digits, followed by three uppercase letters, followed by four digits.
(?<!\d)\d{1,2}:\d{1,2}(?!\d)
^(?P<year>[0-9]{4})(?P<day>\d{2})$
^(?:[1-9]\d|1[012])\/(?:[1-9]\d|0[1-9]|1
[^a-zA-Z0-9]
\b(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s
CNPJ\d{3}\d{2}\d{4}
[a-zA-Z0-9.\-,]*
/^(0[1-9]|1[012])[0-9]{2}/[A-Z][a-z]{3}/[0-9]{4}$/
(?<=\d{1,2})(?:\d{1,2})(?:\d{1,2})(?:\d{1,2})(?:\d{1,2})(?:\d{1,
(?<=^|[^A-Z])([A-Z])(?=\s|$)
^(?=.*[a-z])(?=.*[A-Z])(?=.*
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:     public static string CurrencyFormat(string currencyFormat, double currencyValue)    {        // If the currency format is not supported, return null        if (!string.IsNullOr
(?<!\d)((?<![A-Za-z\d])(?<![A-Za-z\d][A-Za-z\d])|(?<![A-Za-z\d])(?<![A-Za-z\d][A-Z
<td>(.*)</td>
^0[1-9]\d{2}[0-9]$
^(19|20)\d{2}(0|1)\d{2}(0|1)\d{2}$
[0-9]{1,2}/[0-9]{1,2}/[0-9]{1,2}
/^#.*$/
/^[a-zA-Z0-9]+$/
^[A-F0-9][A-F0-9]?[A-F0-9]?[A-F0-9]?[A-F0-9]?[A-F0-9]?[A-F0-9]?[A-F0-9]?[A-F0-9]?[A-F0
/^\d{3}-\d{3}-\d{4}$/
(?<=^|[^<>]+)(?<!<)[^<>]+$
[0-9]{1,3}(?:[0-9]{3})?(?:[0-9]{3})?(?:[0-9]{3})?(?:[0-9]{3})?(?:[0-9]{
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[@#$%^&+=])[a-zA-Z0-9@#$%^&+=]{3,15}
(?<=Grid Ref)(?<!\d)(?<!\d\d\d)(?<!\d\d\d\d\d
^(0*[1-9]\d*|0*[1-9]\d*|[1-9]\d*|[1-9]\d*[1-9]\d*|[1-9]\d*[1-9]\d*[1-9]\d*|[1
[\d\s]{1,3}[a-zA-Z]{1,2}[a-zA-Z0-9]{1,2}[\d\s]{1,3}[a-zA-Z]{1,2}[a-zA-Z0-9]{1,2}[\d\s]{1,3}[a-zA
(\d{2})\s*(\w{3})\s*(\w{3})\s*(\w{3})\s*(\w{
regexp_like('[^$]*[$]','^[^$]*[$]')
(\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?/\[\]{};:,.<>\|`~]).*$
[a-zA-Z0-9_-]{1,}
^[a-zA-Z][a-zA-Z0-9]{5,10}$
(?i)(^\d{1,2}:\d{1,2}:\d{1,2}(?:[ap]\.m|[ap]\.s)?$)
Positive decimal value -0.123456789 (precision=5, scale=2)Negative decimal value -0.123456789 (precision=5, scale=2)
[Insert answer here]
/([^/]+)
.*[a-zA-Z]|.*[a-zA-Z][a-zA-Z]*
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:    public static string CurrencyFormat(string format)    {        Regex currencyFormat = new Regex(@"^(?<currency>\$\d+)(?<sy
(^\d{2}-\d{2}-\d{4}$)|(^\d{2}-\d{2}-\d{2}$)
^\d{4}/\d{1,2}/\d{1,2}$
^\d{1,2}/\d{1,2}/\d{4}$
[a-zA-Z0-9!@#$%^&*()_+-=[]{};:,.<>?/\|`~]
^1\.0\.0\.0$
^ATU[0-9]{5}[0-9]{5}[0-9]{5}[0-9]{5}[0-9]{5}$
\b(?!0)\d+\b
hh(?:\d{1,2}):min(?:\d{1,2}):ss(?:\d{1,2})
(\d{1,3}(,\d{3})*)(\.\d{1,2})?
h:mm or hh:mmGenerate a RegEx for this description.
^(0[1-9]|1[0-2])\/(0[1-9]|[12][0-9]|3[01])\/(\d{4})$
/^(?!(xx|yy|...))[a-zA-Z0-9_]{3,}$/
The RegEx should be "^[0-9]{4}-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})$".
^([a-z0-9-_\.]+)([a-z0-9-_\.]+)*$
[^a-zA-Z0-9 ]+
(\d{1,2}|100)(\.)?(\d{1,2}|100)
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer: (\d+)(\s*[-\+,.]\s*\d+)?
(?<!\d)(?=\d)|(?<=\d)(?!\d)
[\s\S]*?(?:\s\S*?[\s\S]*?)+
/^[0-9]*(?:[,.][0-9]*)*$/
(\d{1,2}|[1-9]\d|[1-9]\d\d)
^[A-Za-z0-9]{2,20}$
[N|S|E|W]\s*\d+
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[$-_@.&+])[a-zA-Z0-9$-_@.&+]{1,63}$
[Insert regex here]
(\d+)%
^(?:[0-9a-f]{1,4}:){3}[0-9a-f]{1,4}$
"^((?:[a-zA-Z0-9_]*[a-zA-Z0-9_]*[a-zA-Z0-9_]*[a-zA-Z0-9_]*[a-zA-Z0-9_]*[a-zA-Z0-9_]*[a-zA-Z0-9_]*[a-zA-Z0-
^\+?\d{1,3}\s?[-\s]?\d{1,3}\s?[-\s]?\d{1,3}$
^(?:(?:[1-9]\d|1[0-2])\/(?:[1-9]\d|[12][0-9]|3[01])\/(?:[1-9]\d|20[0-9]|40)\d{2}$|(?:(?:1[0-2]|0
^(?=.*[a-z])(?=.*[0-9])(?=.*\W)[a-z\d\W]+$
^[a-fA-F0-9]{32}$
(\.(jpg|jpeg))$
(?<![0-9])(?<![0-9]&quot;)(?![0-9])[0-9]{2}[0-9]{2}[0-9]{2}
\p{Lu}
[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}
(?<=\s)([a-zA-Z0-9_]+)
(?=(\d)(?!\1)(\d)\1{4,10})(?<!\d)\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\
/^[1-9][0-9]*(?:[,.][1-9][0-9]*)*$/
(http\:\/\/)?[\w-]+[\w-]+[\w-]+[\w-]+[\w-]+[\w-]+[\w
```pythonip_v4_regex = re.compile(r'^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(?:25[0-5]|2[0-4
^[1-9][0-9]{3}(-(0[1-9]|1[012]))?$
^\d{5}-\d{4}|^\d{
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[$£€$]).*[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{
^[a-zA-Z]{2}\d{7}|[a-zA-Z]{4}\d{10}$
^(?:[0-9]{4}-[0-9]{
^(?:http|ftp)s?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+\.(?:jpg|png|gif)$
^((0[1-9]|1[012])\d{2
^[\d-]*\.[\d-]*$
\b(?=^[a-zA-Z0-9]{8}\s)(?=\s[a-zA-Z0-9]{8}\b)(?=\s[a-zA-Z0-9]{8}$)\s(?=\s[a-zA-Z0-9]{8}\b)\s(?=\s[a-zA-Z0-9]{8}$)\b(?
ftp_pattern = re.compile(r'^ftp')http_pattern = re.compile(r'^http')https_pattern = re.compile(r'^https')
(\d*\.\d+|\d+\.\d*)
r'^\+?\d{1,3}(?:\.\d{3})?$'
^[0-9]+(,[0-9]+)*$
[0-9]{1,2}[,0-9]{1,2}[,0-9]{1,2}[,0-9]{1,2}[,0-9]{1,2}[,0-9]{1,2}[,0-9]{1,2}[,0-9]{1,2}[,0-9]{1
(\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2})
Accepts valid EIN numbers. It could use a bit of tweaking because these are the current valid prefixes allowed. 1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62
(\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2})
^[+-]?\d+\.?\d*$
```import re
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z0-9])(?=.*[0-9a-zA-Z])[0-9a-zA-Z0-9]
\$[0-9]{1,2}(.\d{0,2})?
\s*#.*\n
[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]
(?<![A-Za-z0-9])[A-Za-z0-9]{5,20}
(?<percentage>\d+\.?\d*|\d*\.?\d+|\d+|\d+\.\d+|\d+\.\d+|\d+)(?=%)
^(?:[a-zA-Z]{1,3}\d{1,2}(?:[a-zA-Z]{1,3}\d{1,2})?(?:[a-zA-Z]{1,3}\d{1,2})?(?:[a-zA-Z]{1,3
Positive decimal values can be generated using the following regex: [0-9]\.[0-9]{1,2}.[0-9]{1,2}.[0-9]{1,2}.[0-9]{1,2}.[0-9]{1,2}.[0-9]{
^\d{8}[A-Z]$
[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+-][0-9]
(\d{1,2}/\d{1,2}/\d{4}|\d{4}/\d{1,2}/\d{1,2}|\d{1,
/^\d{1,3}$/
xxx,xx,xxx-xx-xx-xx,xx-xx-xx-xx,xx-xx-xx-xx-xx.
&quot;J K&quot; &amp
(\d{4}-\d{2}-\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})
^[0-9]{1,5}(\.\d{0,3})?$
^[0-9]{3}[ -]?[0-9]{3}[ -]?[0-9]{4}$
^[+-]?[0-9]*[,.]?[0-9]*$
^\d+\.\d*$
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer: \d{1,3}(,\d{3})*
(?i)(^[a-z][a-z0-9]*[a-z]$)(?![a-z0-9]*[a-z]$)(?!
(?<!SEP)\s*(?<!SEP.*)(SEP.*?)\s*(?!SEP)
\d{1,2}/\d{1,2}/\d{4}|\d{1,2}/\d{1,2}/\d{4}|\d{1,2}/\d{1,2}/\d
^[789]\d{9}$
\d{1,2}-\d{1,2}
(?<=^\d{5})(?=\d{3}$)
(?<!\S)(?<!\s)(?<!\S)(?<!\s)(?<!\S)(?<!\s)(?<!\S)(?<!\s)(?<!\S)(?<!\s)(?<!\S)(?<!\s)(?<!\S)(?<!\s)(?<!\S)(?<!\s)(?<!\S)(?<!\s)(?
(?=.{2,})(?=.{2,})(?=.{2,})(?=.{2,})(?=.{2,})(?=.{2,})(?=.{2,})(?=.{2,})(?=.{2,
^(?=.{16}$)(?=.*[a-zA-Z])(?=
^(?:[0-9a-fA-F]{3}){3}(?:[0-9a-fA-F]{3}){3}(?:[0-9a-fA-F]{3}){3}(?:[0
(?<month>\d{2})/(?<day>\d{2})/(?<year>\d{4})
var str = "a b c d e f g h i j k l m n o p q r s t u v w x y z";var regEx = new RegExp(str.replace(/\s/g, "\\s+"), "gi");
(?<!\{)\{(.*?)\}(?!\})(?=\s*\})
\b(?:\d+,|\d+\.\d+|\d+,\d+)\b
(0.0.0.0/0) and (0.0.0.0/0)
^[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}$
^(00[0-9]|[1-9][0-9]|1[0-9]2[0-9]|[1-9]2[0-9]|[1-9][0-
r'\b(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20)\b'
^\d{5}(-\d{4})?$
^[A-Za-z]{3,4}$
(?=^[a-zA-Z0-9]*$).*
(\d{2}\/\d{2}\/\d{4} \d{2}:\d{2})(?:\s+\d{2}:\d{2})?
^[0-9]*[1-9][0-9]*$|^[0-9]*[1-9]$|^[0-9]*[1-9][0-9]*$|^[0-9]*[1-9]$|
[DD/MM/YYYY]\s\d{2}[\s]\d{2}[\s]\d{4}
\d{1,3}(?:\.\d{1,3})?
(0-9) hours (0-59):(0-59) minutes (0-59):(0-59) seconds (0-59 AM|PM)
(?<![a-zA-Z])(?<![0-9])(?<![.,])[0-9]{3}(?<![.,])[0-9]{3}(?<![.,])[0-9]{3}(?![.,])
\d{1,3}\.\d{3}(?:,\d{3})*(-?\d+)?
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: [0-9]{1,3}[a-zA-Z]{1,3}[0-9]{1,3}
^(?(?=(\d{4}-\d{2}
r'^\d{3}-\d{2}-\d{4}$'
^(0[1-9]|1[012])\d{4}$
^[a-z]{4}[a-z0-9]{10}$
\d+ \w+ \d+
\b\d{4}(,\d{4})*\b
(?P<key>\w+)\s*:\s*(?P<value>.+?)
^[A-Za-z][A-Za-z0-9]*$
\d{1,2}[-/]\d{1,2}[-/]\d{4}
Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the "days part" of a class schedule field. The string should only accept any of the ff set of letters: 'M' 'T' 'W' 'TH' 'F' 'S' 'SU'. Only one instance of these set of letters is accepted.Generate a RegEx for this description. Answer: (?i)([MWFTHS])(?![MWFTHS])(?![MWFTHS])(?![MWFTHS]
The regular expression is r'[a-zA-Z]+(?:\s[a-zA-Z]+)*'
(00|[1-9][0-9]|1[012])[0-9]{2}:[0-9]{2}:[0-9]{2}
[0-9]{2}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}[
[\w\d]{3,12}
(\d{1,2}[\,\.]\d{1,2}[\,\.]\d{1,2})I hope this helps.
^([0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2})([A-Za-z]{1,2})([A-Za-z0-9]{1,2})([A-Za-z0-9]{1,2})$
^(?=.*[0-9])[0-9]{3}$|^(?=.*[0-9])[0-9]{4}$
(\d{6}-\d{4}-\d{2})
.*[A-Z]
<img[^>]*>
\b[A-Z][a-z]{1,2}\b
^\s?[A-Z]{3,4}\s?$
(^\+?(\d{2}|\d{3}))[-\s]?(\d{2}[-\s]?\d{2}[-\s]?\d{3})$
(\d+)(\.\d+)?
[1-9]\d*
^(?P<countryCode>[\s\S]*?)(?P<code>\d{3})(?P<country>[\s\S]*)?$
(IPv4) (.*) (IPv6)
\s*
(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|
\d{4}[ ]{2}\d{2}
(?<!\d{1,2}:\d{1,2}:\d{2})\d{1,2}:\d{2}(?!\d{1,2}:\d{1,2}:\d{2})
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer:.*\.(jpg|gif)
To generate a RegEx for this description, you can use the following pattern:
[Insert RegEx here]
/^([01]\d|2[0-3]):([0-5]\d)([ap]m)?$/
(\d{1,2})(?:(?:[MDCLXVI]|\d\d\d)(?:[Tt])(?:[Mm])(?:[Ss])(?:[Zz]))
/[\s,]/
(?<comment>//\s*)(?<region>\s*)(?<arg>\s*)
(\d{1,2})(:(\d{2}))?
(?i)(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}
var date = new Date('19-11-2019');var dateFormat = new DateFormat('dd-mm-yyyy');var dateFormat2 = new DateFormat('dd-mm-yyyy (leap year)');var dateFormat3 = new DateFormat('dd-mm
[^GIR]{6}[^GIR]
(^[0-9]{1,7}(,[0-9]{1,2})?$)
^1\.0\.0\.(0|1|2|3|4|5|6|7|8|9)$
^[0-9]{1,2}\s[A-Z][a-z]+\s[0-9]{4}$
"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]{8,}$"
(0?[1-9]\d*|1[0-2]\d|2[0-8]\d|3[01])[0-9]{3}
[^\d.]*[^\d.]*?[^\d.]*[^\d.]*[^\d.]*[^\d.]*[^\d.]*[^\d.]*[^\d.]*[^\d.]*[^\d.]*[^\d.]*[^\d.]*[^\d.]*[^\d.]*[^
(?i)(?=\d{9})(?=\w{9})(?=\w{9})(?=\w{9})(?=\w{9})(?=\w{9})(
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer: [0-9]{1,4}\.?[0-9]{0,3}|[0-9]{1,4}[0-9]{0,3}|[0-9]{
^[A-Z]{1}[0-9]{3}[A-Z]{1}[0-9]{3}[A-Z]{1}[0-9]{3}$
^[1-9][0-9]*(,[0-9]*)*$
^[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}$
^(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|
(?<!\d)(?<![a-zA-Z])(?<![0-9])[0-9]{1,3}(?![a-zA-Z0-9])
/^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(2000|2001|2002|2003|2004|2005|2006|2007|2008)$/
(00|[01]?[0-9]?[0-9]|100)
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[a-zA-Z]).{6,20}$
[\w\d\W]
Matches Spanish CIF, NIF and NIE formats. Recognises separation of letters with the hyphen or period.Format CIF: [1 letter][7 numbers][1 number or letter]Format NIF: [8 numbers][1 letter]Format NIE: X[possible 0][7 numbers][1 letter]Note that this expression does not check for the validity of the NIF/CIF/NIE... there are some control characters in there and I don't know how they work.Generally I always strip out any non-alphanumeric characters (hyphens, periods, etc
(0[1-9]|1[0-2])[0-9]|[1-9][0-9]|[1-9][0-9][0-9]
\d{1,3}(?:\.\d{3})?
Matches the UK Drivers License format as laid down by the DVLA / dvla. See http://www.govtalk.gov.uk/gdsc/html/frames/default.htm Matches: 1. Must be 16 characters 2. First 5 characters are alphanumeric. 3. Next 6 characters must be numeric 4. Next 3 characters are alphanumeric 5. Last 2 characters are alpha 6. Second character of numeric section can only be 0, 1, 5 or 6. 7. Fourth and fifth characters of numeric section must be in the range 01 to 31.Generate a RegEx for this description
^\+?\d{1,3}\-?\d{1,3}\-?\d{4}$
^[0-9]{8}-[0-9]{4}-[0-9]{4}-99-9999$
<input type="text" name="textarea" maxlength="20" pattern="^[A-Za-z0-9-_\s]{0,20}$" />
(?:\d{3}-)?\d{3}-\d{4}
^(?:\d{1,3}[a-z]{1,3}){1,2}\s*[a-z]{1,3}$
Can be used to pre-validate strings before calling the TimeSpan.Parse() method in the.Net framework, to ensure that the string can be parsed without throwing an exception. The regex uses capturing groups instead of non-capturing groups so that it can easily be used as a pattern in XML Schema by simply removing the ^$ from the beginning/end.This expression fully checks or enforces the [ws][-]{d|[d.]hh:mm[:ss[.ff]] }[ws] format as described in the MSDN help. It even checks the upper/lower boundaries to
^(0[1-9]|1[012])\/([0-9]{1,2})\/([0-9]{1,2})\/([0-9]{1,2})$
(?<!\d)\d{5}(?!\d)
(?P<percentage>\d{1,2}%)
var regex = new RegExp(    /\d{4}/g,    "i");
^(?=\d{3}$)(?=\d{2}$)(?=\d{1}$)(?=\d{0}$)
^(1[0-9]|2[0-3]|[0-9]?[0-9])%$
(?<![0-9])(?<![0-9.])([0-9]{1,3}(?:\.[0-9]{3})?)(?![0-9])
!(^[a-zA-Z0-9_]*$)
\$\d+(\.\d{0,2})?
(?<![a-zA-Z0-9_])[a-zA-Z0-9_]+(?![a-zA-Z0-9_])
^[^#]*$
/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@#$%^&+=]).{8,}$/
#!/usr/bin/perluse strict;use warnings;use Data::Dumper;use 5.010;use List::Util qw(first);
^\+31[0-9]{3}(?:\s|\-[0-9]{3}){8}$
^03\d{2}[\d\s]*$
(?i)(?=.*[^0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?.])(?=.*[
[0-9]{1,3}(,0[0-9]{3})?
(0|[1-9][0-9]*[0-9]?|1[0-9]?[0-9]?|[1-9]?[0-9]|1000)
CPT code = [A-Z][A-Z]{2}[0-9]
^(([a-zA-Z0-9\-_\.]+\.[a-zA-Z0-9\-_\.]+\.[a-zA-Z0-9\-_\.]+\.[a-zA-Z0-9\-
(?<=<?xml)(.*?)(?=</?xml>)
[0-9]{0,2}\.\d{0,2}\.\d{0,2}
(\d{3}[A-Z]{2}\d{3})
-?\d{1,3}(-?\d{3})?
#{0,1}(?:\r?\n|\r|\n)
(\+\d{3})(\d{3})(\d{4})
^[a-zA-Z]{5}[0-9]{6}[0-9
[A-Z]{2}[0-9]{3}-[0-9]{3}-[0-9]{4}
[0-2][0-9]|3[0-1]
Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answer: (?i)([1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9])[0-9]
(\+\d{1,3}\d{3}-\d{3}-\d{4}).*
^(0[1-9]|[2-9]\d|1[0-2]\d|[3-9]\d|[4-9]\d|[5-9]\d|[6-9]\d|[7-9]\d|[8-9]\d|[9]\d)$
(?<=\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$)(?:\,\d{1,3}(?:\.\d{1,3})?|(?:\.\d{1,3}(?:\
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{4}[0-9a-zA-Z]{3}[0-9a-zA-Z]{2}[0-9a-zA-Z]{1}$
03\d{3}[\s\d]{9}
/^[0-9]{4}[0-9]{2}[0-9]{2}$/
(?<=\")[a-zA-Z0-9_\s]+(?=\")
(\d{3}-\d{3}-\d{4}).*
A-F, -
^[0-9]{2}\/[0-9]{2}\/[0-9]{4}$
[^0-9.]*\.(0|1)([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-9]{3}|3[0-9]{4}|4[0-9]{5}|5[0-9]{6}|6[0-9]{7}|7[0-9]{8}|8[0
^(?=.*[A-Fa-f0-9]{1,4}:){3}[A-Fa-f0-9]{1,4}$
(?<start>\d+)(?<stop>\d+)Blah, blah, blah.;
/\w+/
/^\d+(?:,\d{3})*(?:\.\d+)?(?:,\d{3})*(?:\.\d+)?$/
/^[\d,-]+(.[\d]*)?$/
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: ^[a-zA-Z][a-zA-Z0-9!@#$%^&*]{5,50}$
(\d*)\*(\d*)\*(\d*)
[a-zA-Z0-9-_]+\s[a-zA-Z0-9-_]+\s[a-zA-Z0-9-_]+\s[a-zA-Z0-9-_]+\s[a-zA-Z0-9-_]+\s[a-zA-Z0-9-_]+\s[a-z
\b(1[0-9]|2[0-9]|[3-9]\d|10)\b
^[0-9]{1,3}[\s-]?[0-9]{3}[\s-]?[0-9]{4}$
(Example) [Phone Number]\d{3}-\d{3}-\d{4}
^(19|20)\d{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])$
\b(?:[1-9]\d|1\d\d|2[0-8]\d|3[01]\d|[4-9]\d\d)\b
^1\.0\.0\.(\d+)(\.(\d+))*$
^[0-9]{4}[a-z]{2}$
^([1-9][0-9]|1[012])[0-9]{2}:[0-9]{2}$
[^a-zA-Z0-9\s]
^[1-9][0-9]{1,2}[0-9]{2}[0-9]{4}$
^(0|[1-9][0-9]*)(\.[0-9]{1,2})?$
[\d\s\w\d\s\w\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: +91 (national code) +[0-9]{3} (optional) +[0-9]{3} (optional) +[0-9]{3} (optional) +[0-9]{3} (optional) +[0-9]{3} (optional)
(0|[1-9]\d*|\d*[1-9])$
^\+?\d{1,3}\s?[0-9]{3,4}[0-9]{1,3}\s?[0-9]{3,4}\s?[0-9]{3,4}\s?[0-9]{3,4}[
\b(?:[0-9]{1,2}[-/.]){2}[0-9]{4}\b
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer: (?<![\d])([a-zA-Z0-9_]{2,3})(?![\d])
[^\d\.]{0,4}[\d\.]{0,5}[\d\.]{0,2}
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20[0-9]|21[0-9])$
\b(19|20)\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d
\d+(\.\d+)?(?:[eE][+-]?\d+)?
^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
(?<!&quot;)(?<!&quot;)(?<!&quot;)(?<!&quot;)(?<
^(0|[1-9][0-9]*)(\.[0-9]{0,2})?$
(\$\d{1,2}\.\d{3}(,\d{3})*(,\d{3})*(,\d{3})*(,\d{3})*(,\d{3})*(,\d{3
([0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{
[0-9]{1,3}
^[0-9]+(?:\.[0-9]{1,2})?$
[N|S|E|W]
^(?:\d+\.\d+|\d+)\s*$
[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}
(https?://\S+)\.jpg
[\d]{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[+|-][\d]{2}:[\d]{2}[Z]|
[\d\d\d\d-\d\d-\d\d]
^[0-9]+$
/^[0-9]*(,[0-9]*)*$/.
^(19|20)\d\d\d\d\d$
&quot;(?<!\\w)[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+(?!\\w)&quot;
[A-Z][a-z]{1,2}[0-9]{1,2}
&quot;James K&quot;, &
/^[a-z0-9-_]*$/i
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+\-=?\\[\\]\\{\\}\\|\\~\\;\\:\\"\\,\\.<\\>\\/\\~\\\`\\~\\\[
(?<![0-9])([1-9][0-9]|1[0-2])/(?![0-9])([0-9]{2})/([0-9]{4})/([0-9
[0-9]{3}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{
^(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(
\b(?:\d+[.]\d+)?(?:[eE][+-]?\d+)?\b
^(?:\d+(?:,\d+)?|\d+|\d+\.\d+|\d+)\s*$
/[^-_\.]+/
1-12
[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+|-][0
^[a-zA-Z0-9_.-]+\.[xls]$
XXX-XX-XX-XXX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-
\d\.\d\.\d\.\d\s*(?:[,\.]\s*\d\.\d\.\d\.\d)
Positive decimal values can be generated using the decimal point and a positive sign. Negative decimal values can be generated using the decimal point and a negative sign.
^(7|8|9)0[1-9]\d{9}$
\([^\)]*\)
/^\d+$/
^\(?[1-9]\d{2}\)?$
/^(#.*$|\s*#.*\s*$)/
^[a-zA-Z0-9_]{0,31}$
Fred Flintstone, Barney Rubble, Mr. Flintstone, and Mr. Rubble.
[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
^(0[1-9]|1[012])/(0[1-9]|[12][0-9
^[0-9]{5}-?[0-9]{4}$
^(?=.*\d)(?=.*[A-Z])(?=.*[a-z])[A-Za-z\d]{4,8}$
(?<day>\d{2})/(?<month>\w{2})/(?<year>\d{4})
^(?:(?:0[1-9]|1[012])[-/]?(?:0[1-9]|[12][0-9]|3[01]))(?:[0-9]{4})?$
(\d{1,2})\s*[-\s]\d{1,2}
r'[A-Za-z0-9\s]'
[0-9]{3}[-\s]?[0-9]{3}[-\s]?[0-9]{4}
^(?=.*[4])(?=.*[5])(?=.*[6])(?=.*[7])(?=.*[8])(?=.*[9])(?=.*[0])(?=.*
(^\+?\d{1,3}\s?[-\s]?\d{3}[-\s]?\d{4}$)
A0-A3Generate a RegEx for this description.
^(?:(?P<start>\d{1,2}):(?P<start_hour>\d{1,2
[0-9]+(?:\.[0-9]+)?
(?<![0-9])[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}(?![0-9])|(?<![0-9])[0-9]{1
r'^[A-Za-z][A-Za-z0-9]{8}$'
https://www.w3schools.com/html/html_regex.asp
[0-9]{2}[-][0-9]{4}[-][0-9]{2}
[1-100]
^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[12][0-9]|3[01]|4[0-9]|5[0-9]|6[0-9]|7[0-
[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-
[0-9]{2}/[a-zA-Z]{3}/[0-9]{4}
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: strFirstName\s*(?P<firstName>\w+)
This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answer:grep -E "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"
(?<=^|/)[^/]+(?=/|$)
(^[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2
(^\d{4}-\d{4}-\d{4}$)|(^\d{4}-\d{4}-\d{3}$)|(^\d{4}-\d{3}-\d{2}$)|(^\d{4}-\d{2}-\d
[A-Za-z0-9-]{5}-[0-9]{4}
^(?P<hours>\d{1,2}):(?P<minutes>\d{2}):(?P<seconds>\d{2})$
/^[a-zA-Z ]{1,15}[a-zA-Z ]{1,15}[a-zA-Z ]{1,15}[a
Matches times seperated by either : or. will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.Generate a RegEx for this description. Answer:(?<!\d)(?:[1-3]\d|4[0-5])(?:[0-9]|60)(?!\d)
(\d{5})(\+4)?
(\w{4,8})
[0-9]{3}\.[0-9]{2}[0-9]{1}|[0-9]{4}\.[0-9]{2}[0-9]{1}|[0-9]
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer:
\d{1,2}[-/][0-9]{1,2}[-/][0-9]{1,2}
"([^"]+)"
\"([^\"]*)\"\s*\1
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{4,8}$
This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answer: grep -E '^([0-9a-fA-F]{2}[:-]){5}([0-9a-fA-F]{2})$'
(?<=^|\.)(?P<package>.+?)(?:\.(?P<class>\w+))?(?=\s|$)
(.*)#(.*)
(\$\d{1,3}(,\d{3})*(\.\d{2})?|\d{3}(,\d{3})*(\.\d{2})?|\d{3}(,\d{3})*
0.0005
(7[0-9]{2}[0-9]{3}[0-9]{4}|8[0-9]{2}[0-9]{3}[0-9]{3}|9[0-9]{2}[0-9]{3}[0-9]{3}|9[0-9]{2}[0-9]{3}[0-9]{
\d{2}/\d{2}/\d{4}(?:[-/][0-9]{2})?
Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the "days part" of a class schedule field. The string should only accept any of the ff set of letters: 'M' 'T' 'W' 'TH' 'F' 'S' 'SU'. Only one instance of these set of letters is accepted.Generate a RegEx for this description. Answer: ^[MWTFS]$
/^[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?$/
^[A-Z]{2}[0-9]{6}$
(?<!\d)(\d(.\d+)?(?:\.\d+)?)|(?<!\d)(\d+(?:\.\d+)?)
(hh|mm|ss)\\s*(\\d{1,2}|\\d{3})
[Insert the RegEx pattern here]
(\d{1,2})(\.\d{1,2})?
\p{L}+\p{N}+_[0-9]+
^[a-zA-Z0-9 _-]{5,12}$
[^A][^G][^E][^A]
^(?:(?P<root>.*?)/)?(?P<path>.*)$
(?<!\d)(?<![\d.])(?<![\d.])[0-9]{1,2}\.?[0-9]{1,2}(?!\d)
/^[1-9][0-9]{0,7}$/
^([1-9]\d{0,2}|3[0-9]\d|4[0-9]\d|5[0-9]\d|6[0-9]\d|7[0-9]\d|8[0
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:    public static void Main(string[] args)    {        double currency = Convert.ToDouble(Console.ReadLine());        string currencyFormat = "{0:C2}";
^[0-9a-fA-F]{1,16}$
(?i)(?<=^[a-z])(?=\d{9})(?<=GB)(?=\d{2})(?<=\d{2})(?=\d{2})(?<=\d{2})(
/[^\x20-\x7E]+/
^[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+$
^(0|[1-9][0-9]*(\.0+)?|[1-9][0-9]*(\.0+)?|[1-9][0-9]*(\.0+)?|[1-9][0-9]*(\.0+)?)$
[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2
[0-9a-f]{2}(:[0-9a-f]{2}){3}|[0-9a-f]{2}(:[0-9a-f]{2}){4}|[0-9a-f]{2}(:[0-9a-f]{2}){5}|[0-9a-f]{2}(:[0-9a-f]{2
(?<month>\d{1,2}|[12]\d|3[01])\s?(?<day>\d{1,2}|[12]\d|3[01])\s?(?<year>\d{4})\s?(?<month_day>\d{1,2}|[12]\d|3[01
(?<!\d)(?<!\.\d)\d*(?!\.\d)
r'^\d{1,2} \w{3}\s\d{4}$'
[0-9a-fA-F]{1,4}
[01/01/1900|01/31/1900|02/01/1900|02/31/1900|03/01/1900|03/31/1900|04/01/1900|04/31/1900|05/01/1900|05/31/1900|06/01/1900|06/31/1900|07/01/1900|07/31/1900|08/01/1900|08/
(?<=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3})(?=\d{3}
\d{1,3}(,\d{3})?(?:\.\d{2})?(?:E[+-]?\d{1,2})?)
(?<!\[)(?<!\])(?<!\{)(?<!\})(?<!\,)(?<!\;)(?<!\:)(?<!\@)(?<!\#)(?<!\$)(?<!\%)(?<!\^)(?<!\&)(?<!\*)(?<!\()(?<!\~)(?<!
r'\b(?:[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b'
/^[0-9]{3}\-[0-9]{3}\-[0-9]{4}$/
^[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$
^\d{4}-\d{3}-\
\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}
\b(\w+)\s*\+\s*(\w+)\b
^(?!.*\.\.)[a-zA-Z0-9-_.]*\.[a-zA-Z0-9-_.]+$
/^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,63}$/i
^[0-9]{1,3}[.][0-9]{1,2}$
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}
(8[0-9]{9}|9[0-9]{10})
[a-zA-Z0-9]{1,40}
[a-zA-Z0-9@#$%^&+=]
[0-9]{1,3}(,\d{3})*(\.\d{2})?([$]\d+)
^([-+]?)(\d{1,3})(?:\.\d{3})?$
(?:\d{1,3}[\s\-\.,]\d{1,3}[\s\-\.,]\d{1,3}[\s\-\.,]\d{1,3}[\s\-\.,]\d{1,3}[\s\-\.,]\d{1,3}[\s\-\.,]\d{1,3}[\s\-\.,]
Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answer: \d{1,2}.\d{0,2}
[0-9]*(,[0-9]*)?(\.0)?
[A-Za-z0-9_.-]+
\b(0|1|2|3|4|5|6|7|8|9)\b
^(19|20)\d\d-\d\d-\d\d\d$
^(?!127\.0\.0\.1)([0-9]{1,3}\.){3}[0-9]{1,3}$
^(?=.*\d)(?=.*[1-9])[0-9]{1,3}$
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer: $0\.00|(?:\$[0-9]{1}(?:\.[0-9]{1})?|(?:\.\d
(\w+)\.(\w+)\.(\w+)
^[0-9a-fA-F]{4} [0-9a-fA-F]{4} [0-9a-fA-F]{4}$
[^,]{0,3}(,|$)
\d{1,3}-\d{3}-\d{4}
^[0-9]+(,[0-9]+(,[0-9]+(,[0-9]+(,[0-9]+(,[0-9]+(,[0-9]+(,[0-9]+(,[0-9]+(,[0-9]+(,[0-9]+(,[0-9
(\d{1,2})/(\d{1,2})/(\d{4})
\d+[\s]?(\d+)[\s]?(inches|feet)
\d{1,2}[-/.]\d{4}
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer: (?<=\d)([0-9]|25[0-4]|50[0-9]|75[0-9]|0[0-9]|00[0-9])$
^(20[0-9]{2}-?[0-9]{2}-?[0-9]{2}-?[0-9]{2}|20[0-9]{2}-?
^(.+?)([\w\.]+)(?:[\w\.]+)?$
\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}
^(?:\d{1,2}\.)?[0-9]{1,2}\d{1,2}(?:[Tt])((?:[Mm]|[Ww]|[Thh]|
(^|\s)(0[1-9]|1[012])$
(?<=\d{1,2})(?:\.\d{1,2})?(?:\.\d{1,2})?(?:\.\d{1,2})
^(?:[0-9]{1,2})([0-9]{1,2})([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0
(?<!\d)(?<!\s)(?<!\d\s)(?<!\d\s\d)(?<!\d\s\d\s)(?<!\d\s\d\s\d)(?<!\d\s\d\s\d\s
ipaddress.ip_address(f'{1}.{1}.{1}.{1}/24')
(?<=^|[^a-zA-Z])[a-zA-Z](?=|$)
(?<=\[)(?:\s*)(?P<tag1>.*?)(?=\])(?<=\[)(?:\s*)(?P<tag2>.*?)(?=\])(?<=\[)(?:\s*)(?P<tag3>.*?)(?=\])(?<=\[)(?:\s*)(?P<tag4>.*?)(?
^(?:[1-9][0-9]|1[012])\/(?:[0-2][0-9]|3[01])\/(?:[0-9]{4})$
^(?=.*[a-fA-F0-9])(?=.*[A-F0-9])(?=.*[a-fA-F0-9])(?=.*[A-F0-9])(?=.*[a-fA-F0-9])(?=.*[a-fA-F0-9])(?=.*[a-
/^\d{5}(-\d{4})?$/
SUPPORTED constructions:[*] - all five commands;[number] - minutes 0...59, hours 0...23, day in month 1...31, months 1...12, day in week 0...7 (0 & 7 is sun);[*/nubmer] - see construction [number];[word] - only months (4th command) and days in week (5th command), warning this regexp is case sensitive (lower letters).NON SUPPORTED constructions:[number-number] and[number,number].Generate a RegEx for this construction
[0-9]{0,2}[0-9]{1,3}
[^0-9]*[0-9]*(\.0+)?$
\d{7}
\d{3}(?:[, ]\d{3})*(?:[, ]\d{2})
^[1-9][0-9]*$
^(\d{4})-(\d{1,2})-(\d{1,2})\s(\d{1,2}):(\d{1,2}):(\d
^(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|1[012])\/(19|20)\d{2}$
0\.00 - 0.01 - 0.02 - 0.03 - 0.04 - 0.05 - 0.06 - 0.07 - 0.08 - 0.09 - 0.10 - 0.11 - 0.12 - 0.13 - 0.14 - 0.15 - 0.16 - 0.17 - 0.18 - 0.19 - 0.20 - 0.21 - 0.22 - 0.23 - 0.24 - 0.
r'^[a-zA-Z0-9_]+\.xls$'
/^(0[1-9]|[1-9]\d|1\d\d\d|2[0-4]\d|2\d\d\d|3[01]\d|3\d\d\d|4[0-2]\d
import reimport time
(\d{2})-(\d{2})-(\d{4})
(?<=\")[^"]+(?=\")
(?<!\d)(\d{1,3}(?:,\d{3})*)(?!\d)
[A-Za-z0-9 ]{1,20}
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer: (^(?!.*\.)(?!.*\.)(?!.*[\.])(?!.*[\.])(?!.*
^(00 xor '+')[0-9]{1,3}[- ]?[0-9]{1,3}[- ]?[0-9]{1,3}[- ]?
[a-zA-Z0-9 ]*
[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+|-][0-9
/^[a-zA-Z0-9-_\.]{1,63}(?:\.[a-zA-Z0-9-_\.]{1,63})*$/
(\d+\.\d+)\s*[\+\-\*\/]\s*(Q\s*\d+\.\d+)\s*[\+\-\*\/]\s*(Q\s*\d+\.\d+)\s*[\+\-\*\/]\s*(Q\s*\d+\.\d+)\s*[\+\-\*\/]\s*(Q\s
[0-9]{1,2}[0-9]{1,2}[0-9]{2,4}
^[a-zA-Z0-9]{4}[a-zA-Z0-9]{3}[a-zA-Z0-9]{2}[a-zA-Z0-9]{1}$
\d{1,2}/\d{1,2}/\d{4}
^(0|[1-9][0-9]*)(\.[0-9]+)?$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[a-zA-Z])(?=.{6,})$
[a-zA-Z0-9\s-\.]
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]
(?<!\d)(?<![.])(?<![,])[0-9]{1,3}(?<![.])(?<![,])
([^A-Za-z0-9_]|_)
[^\d\s]*
^[Ee]\d{3}[.\d]{1,2}$
\d{1,2}/\d{1,2}/\d{4} \d{1,2}:\d{1,2}:\d{2}
[0-9]+(.[0-9]*)?
\+31(\s|-)?[0-9]{3}[0-9]{3}[0-9]{4}
r'^[0-8][0-9]*$'
(^\+?\d{1,3}\s?[A-Z]{1,2}\s?[0-9]{3,4}$)
[0-9]{2}\/[0-9]{2}
^(?P<server>\d+\.\d+\.\d+\.\d+)\:(?P<port>\d+$)$
ESN_REGEX = r'^[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}$'
[^'\s]*
^([0-1]?[0-9]|2[0-3]):[0-5][0-9]|6[0-2]):[0-5][0-9]$
^\d{4}(-\d{4}(-\d{4})?|\d{4}(-\d{4}(-\d{4})?|\d{4}(-\d{4}(-\d{4})?|\d
(?<=\.)(?P<tld>[a-zA-Z]{2,})
^[0-9]{1,3}[.,]?[0-9]{3}[.,]?[0-9]{3}$
^[^"]+"$
https://www.cms.gov/Medicare/Medicare-HIC-Number-Guide.html
[0-9]{3}[0-9]{2}[0-9
[a-zA-Z0-9!@#$%^&*()_=+-=?/\\|~]
(?<![0-9])([1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])
\b(?:\d{1,3}\.){3}\d{1,3}\b
^[A-Z]{2}[A-Z]{2}[A-Z]{3}$
\b(?:[A-Z]{2}[a-z]{1,2}\s?[A-Z]{2})\b
\d{4}-\d{2}-\d{2} \d{2}
(?P<name>\w+)\s+(?P<age>\d+)
\b\d{3}-\d{3}-\d{4}\b
r'^[A-Za-z0-9_]*(Asterisk)[A-Za-z0-9_]*$'
^[0-9]{4}(,[0-9]{4})*$
^[-]?[0-9]{1,3}(?:\.[0-9]{1,3})?[-]?[0-9]{1,3}(?:\.[0-9]{1,3})?$
^[0-9]{10}(\.\d{0,2})?$
/^[0-9]{3}-\.[0-9]{3}-\.[0-9]{3}$/
(?<![0-9])(?<![0-9])([0-9]{2}[:][0-9]{2}[:][0-9]{2}[.])[0-9]{2}[:][0-9]{2}[:][0-9]{2}$
(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\s+(\d{1,2}:\d{2}:\d{2})
^(0[1-9]|1[012])/(0[1-9]|1[012])/([0-9]{4})/([0-9]{2})/([0-9]{2})/([0-9]{4}
(?<!\d)(?<!\d\d\d)(?<!\d\d\d\d)(?<!\d\d\d\d\d)(?<!\d\d\d\d\d\d\d)(?<!\d\d\d\d\d\d\d\d)(?<!
^(?P<year>\d{4}(?:-\d{2})?(?:-\d{2})?(?:-\d{2})?)$
(?<=\d)(?=,|$)
\d{1,2}(?:[,.]\d{1,2})?
^[a-zA-Z][a-zA-Z0-9]{2}-[a-zA-Z0-9]{2}-[a-zA-Z0-9]{3
r"(-?\d+)(\.\d+)?(e|E)([+-])(\d+)"
^(?:(?:[0-9]{1,2}):(?:[0-9]{2}))$
&quot;&quot;(?<first
var date = new Date("01/01/2014");var regex = /^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(0
^[a-zA-Z][a-zA-Z0-9-]{5,17}$
^[0-9]{4}-[0-9]{2}$
^(?=.*[5])(?=.*[6])(?=.*[7])(?=.*[8])(?=.*[9])(?=.*[0])(?=.*[1])(?=.*[2])(?=.*[3])(?=.*[4])(?=.*[5])(?=.*[6])(?=.*[7]
^[0-9]{3}[-\s]?[0-9]{3}[-\s]?[0-9]{3}[-\s]?[0-9]{4}$
\d{1,7}(?:\.\d{1,2})?
^[1-9][0-9]?[0-9]*$This Expression checks if the value is an integer, positive, not zero and not a decimal.Very handy for use when people need to fill in whole numbers, like when ordering car parts
^(?=\d{4}\s)(?=\d{3}\s)(?=\d{2}\s)(?=\d{1}\s)(?=\d{1}\s)(?=\d{1}\s)(?=\d{1}\s)(?=\d{1}\s)(?=\d{1}\s)(?=\d{1}\s)(?=\d
(?<![\d.])(?![\d.]\.)(?![\d.]\.)(?![\d.]\.)(?![\d.]\.)(?![\d.]\.)(?![\d.]\.)(?![\d.]\.)(?![\d.]\.)(?![\d.]\.)(?!
Regular expression to match valid UK postcodes.In the UK postal system not all letters are used in all positions (the same with vehicle registration plates) and there are various rules to govern this. This regex takes into account those rules.Details of the rules:First half of postcodeValid formats[A-Z][A-Z][0-9][A-Z][A-Z][A-Z][0-9][0-9][A-Z][0-9][0-9][A-Z][A-Z][0-9][
[^'\n\r\t\f\v]
^(?=.*[0-9]{3})(?=.*[0-9]{3})(?=.*[0-9]{4})(?=.*[0-9]{4}$).{5,15}$
Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answer: [0-9]{9}[a-zA-Z]
\b[1-9]\d{0,2}\b
Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answer: ^[0-9]{10}[\w]{1}$
^[a-zA-Z0-9.\-_\+\(\)\[\]]{2,}@(?:[a-zA-Z0-9.\-_\+\(\)\[\]]
\d{1,2}:\d{1,2}(\.\d{1,2})?
r"^([01]\d|2[0-3]):([0-5]\d):([Aa]M|AM|PM)$"
[0-9]{3}$
[0-9]{1,10}
(?<!\d\s)(\d{3})(?!\s)(?![-.])(?!\s)(?!\s)(?![-.])(?!\s)(?!\s)(?!\s)(?!\s)(?!\s)(?!\s)(?!\s)(?!\s)(?!\s
(\d{2}\/\d{2}\/\d{4})|(\d{2}\/\d{2}\/\d{4})\s\d{2}:\d{2}:\d{2}
\b(?:\d{1,2}(?:st|nd|rd|th) )?\s*\d{1,2}(?:st|nd|rd|th) \d{4}\b
^.*?if.*?$
This answer will vary depending on the product and the country.
[^0-9]
(\d*\.?\d*|\d+)
\s*(?:\d+|\d+\.\d+|\d+\.\d+\s*|\d+\.\d+\s*|\d+\.\d+\s*|\d+\.\d+\s*|\d+\.\d+\s*|\d+\.\d+\s*|\d+\.\d+\s*|\d+\.\d+\s*|
(?<!\d)\d{1,3}(?:-\d{1,2})?(?:\.\d{1,2})?(?:\/\d{1,2})
^[0-9]{5}(-[0-9]{4})?$
(?<!\d)(?<![\s&#227;])[0-9]{1,3}(?![\s&#227;])
\b(?=.{10}\b)([A-Za-z0-9 ]{5})(?![A-Za-z0-9 ])
r'ftp\:\/\/[a-zA-Z0-9\-\.]+'
^\+?[1-9]\d{3}[-.]?[1-9]\d{3}[-.]
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: (\d+)(\s|$)
\b\d{1,2}\/\d{1,2}\b
^(?:\d{1,5}(?:\.\d{1,2})?|\d{1,5}(?:\.\d{1,3})?|\d{1,5}(?:\.\d{1,4})?|\d{1,5}(?:\.\d{1,5}
(\d{2}:\d{2}:\d{2})(\s+\d{2}:\d{2}:\d{2})(\s+\d{2}:\d{2}:\d{2})
^[a-zA-Z0-9-\.]+$
(?<=\$)(?:\s*\d{1,3}(,\s*\d{1,3})*(,\s*\d{1,3})*)(?=\$)
^0[1-9]|1[012]|2[0-9]|3[01]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]$
^[A-Z]{1,2}[0-9]{1,2}[A-Z]{1}$
[0-9]{1,2}-?[0-9]{1,2}-?[0-9]{1,2}-?[0-9]{1,2}-?[0-9]{1,2}-?[0-9]{1,2}-?[0-9]{1,2}-?[0-9]{1,2}-?[
hh:mm or hh:mm
^[A-Z]{2} [A-Z]{2} [0-9]{4}$
\d{1,3}(,\d{3})*
^(0|[1-9][0-9]*|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
(\d+)([%]?)(\d+)?
Allows letters,numbers,hyphens,periods and underscores. Such as : Aa.Aa.Aa,.Aa.Aa., -Aa-Aa-, _Aa_Aa_, Aa_Aa_Aa, Aa-Aa-Aa,., -, _I was asked by my client for this scenario to allow letters,numbers,hyphens,periods and underscores in User ID field in web application.Generate a RegEx for this description. Answer:^[A-Za-z0
^\d{6}[-\s]?\d{3}[-\s]?\d{4}$
^(?=.{5}$)(?=.{6}$)(?=.{7}$)(?=.{8}$)(?=.{9}$)(?=.{10}$)^
(0?\d+)\.(\d{1,2})(?:\.\d{1,2})?
^(?:\d{1,18}(?:\.\d{1,2})?|0(?:\.\d{1,2})?|0.0(?:\.\d{1,2})?|0.0\d{1,2})?$
H:nn:ss or HH:nn:ssGenerate a RegEx for this description
[0-9]{3}[-.]?[0-9]{3}[-.]?[0-9]{3}[-.]?[0-9]{3}[-.]?[0-9]{3}[-.]?[0-9]{3}[-.]?[0-9]{3}[-.]?[0-9]{3}[-.]?[0-9]{
(\d{1,2}d|\d{1,2}h|\d{1,2}m)
Zip+4 Zipcode RegEx. You may ommit the +4 digits but you must also then ommit the hyphen/dash as well. In 1983, the Postal Service™ began using an expanded ZIP Code™ number called called the &quot;ZIP+4&#174;&quot; Code. The nine digits of a ZIP+4 code (e.g., 12345-6789) is broken down as follows: [123]Sectional Center or Large City. [45]Post Office™ facility or Delivery Area. [-]Required &quot;dash&quot; or optional
^[0-9a-zA-Z]*$
^(222) (555
THE Complex Password Filter Matching 3 of 4 Character catagories:1.) at least 1 upper case character2.) at least 1 lower case character3.) at least 1 numerical character4.) at least 1 special characterIt also enforces a min and max length and works for.Net and script Regex implimentations.Generate a RegEx for this description. Answer:^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+-=?
(?<name>[a-zA-Z_][a-zA-Z0-9_]*)(?<number>[0-9]+)
^((?:\d{1,2})\s?[-/.]\s?(?:\d{1,2})\s?[-/.]\s?(?:\d{4}))$
^(?=.*a)(?=.*e)(?=.*i)(?=.*k)(?=.*l)(?=.*m)(?=.*n)(?=.*p)(?=.*s)(?=.*t)(?=.*u)(?=.*v)(?=.*w)(?=.*x)(?=.*y)(?=.*z)(?=.*\.))(?=.*
^[1-9][0-9]{2}[0-9]{3}$
(?<!\d{1,2})(?<!\d{3})(?<!\d{4})(?<!\d{5})(?<!\d{6})[0-9]{1,2}(?<!\d{3})(?<!\d{4})(?<!\d{5})(?<!\d{6})[0-9
(?<=snake)(?=noise)
^[A-Za-z0-9\s]{6,20}$
^(0?[1-9]|1[012])[0-9]{3}[-/.](0?[1-9]|[12][0-9]|3[01])[0-9]{4}$
grep -Eo '[0-9a-fA-F]{8}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{12}'
^(?:\d{1,3}\.){3}\d{1,3}$|^(?:\d{1,3}\.){3}\d{1,3}$|^(?:\d{1,3}\.){3}\d{1,3}$|^(?:\d{1,3}\.){3}\d{
^\d{4}-\d{1,2}-\d{1,2} \d{1,2}:\d{1,2}:\d{1,2
\d{1,2}:\d{2}:\d{2}')```
[0-9]{1,2}:[0-9]{2}:[0-9]{2}
[A-Za-z0-9._%+-]+
^(0|1|2|3|4|5|6|7|8|9)$
^\d{4}$
/^\d+(\.\d+)?$/
^[0-9]{3}[0-9]{3}[0-9]{
(^[a-zA-Z0-9]*[a-zA-Z0-9]*$)
^(?:\d+(?:\.\d*)?|\.\d+)(?:,\d+)?$
^\+?1
SELECT * FROM mytable WHERE date_col LIKE '%(%(year)s-%(month)s-%(day)s %(hour)s:%(minute)s:%(second)s %(am)
^[0-9]{4}-[0-9]{2}-[0-9]{2} \d{2}:\d{2}:\d{2}$
03\d{5}
^(0[1-9]|1[012])/(0[1-9]|1[012])$
[0-9]{2}/[0-9]{2}/[0-9]{4}
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?
^1(0|1){0,7}$
^\d{1,2}(?:\.\d{1,2})?\s*(?:\d{1,2}(?:\.\d{1,2})?)?$
[^\d,.]
^(?:[0-9]
\b(([A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z
^(?P<extension>\w+)(?P<extension_type>\w+)(?P<extension_number>\d+)$
HTML Pattern MatchingPLEASE HELP/&lt;[^&gt;]*&gt;/igThe above pattern is only successful when html tag are simple (they don't include any javascript). This mean that the pattern will fail if something like this is within the tag &lt;input type=button value=test onclick='if(n.value&gt;5)do_this();'&gt;. It will not match the entire open n close sign.How do you write a pattern that will pass all these tag so that the pattern will match from the open to the close?
[XX]{2}[.][0-9]{2}[.][0-9]{2}
\d{1,2}
^(?:(?:\s|\S)+[\s\S]*){0,1}$
\b(?<!\d)\d{1,2}\s(?<!\d)\d{2}\s(?<!\d)\d{4}\b
/^[+-]?(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)$/
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer: (\d{1,3}(?:\.\d{1,3})?|\d{1,3})
\d+(,\d+)?[\d.]+
(?<![A-Za-z0-9-_])[0-9]{9}(?![A-Za-z0-9-_])
^(\d)?[ ]*[\(\.\-]?(\d{3})?[ )\.\-
[\w-]+
(\d{4}\/\d{2}\/\d{2})\s(\d{2}:\d{2}:\d{2})
^(?=\s*-?\d+\.?\d*$)(?=\s*-?\d+\.?\d*$)(?=\s*-?\d+\.?\d*$)(?=\s*-?\d+\.?\d*$)(?=\s*-?\d+\.?\d*$)(?=\s*
^[a-zA-Z0-9]{1,19}[a-zA-Z0-9]{0,1}[a-zA-Z0-9]{0,1}[a-zA-Z0-9]{0,1}[a-zA-Z0-9]{0,
(?<!\d)(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?<!\.)\d{1,2}(?<!\.)
http://www.regexlib.com/REDetails.aspx?regexp_id=409Generate a RegEx for this description.
/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{5,15}$/
(\w+)amp
^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[\W_]).*$
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:^(?=.*[a-zA-Z])(?=.*\d)(?=.*[A-Za-z])(?=.*[0-9]).{3,40}$
^(?P<year>\d{4})\-(?P<month>\d{2})\-(?P<day>\d{2})$
(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})
^([01]\d|2[0-3]):([0-5]\d)(?:\.([0-5]\d))?$
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer: (?<=\b\w+\b)(?<!\w+\b)(?<!\w+\b
^[a-zA-Z0-9_\-\.]+$
\b[1-9][0-9]*|[1-9][0-9]*\b
(?i)(?:[0-9a-f]{1,4}:){7,7}[0-9a-f]{1,4}(?:-[0-9a-f]{1,4}:){7,7}[0-9a-f]{1,4}|(?i)\[(?:[0-9a-f]{1,4}:){7,7}[
(?:\(?\d{3}\)?[ -]?\d{3}[ -]?\d{4}|\d{3}[ -]?\d{3}[ -]?
/^[^\s]+\s[^\s]+\s[^\s]+\s[^\s]+\s[^\s]+\s[^\s]+\s[^\s]+\s[^\s]+\s[^\s]+\s[^\s]+\s[^\s
^([1-9]\d{2}|10[1-9]|100[1-9]|1000[1-9])\d{8}$
/^\d{3}(?:\d{3})?(?:\d{2})?(?:\d{3})?(?:\d{3})?(?:\d{3})?(?:\d{3})?(?:\d{3})?(?:\d{3})?(?:\d{3})?(?:\d{3}
/^\d{5}(?:-\d{4})?$/
[a-zA-Z0-9]{3}[-]?[a-zA-Z0-9]{3}[-]?[a-zA-Z0-9]{3}
^[A-Za-z]$
(0?[1-9]|1[012])\s*-\s*(0?[1-9]|1[012])\s*-\s*(0?[1-9]|1[012])\s*-\s*(0?[1-9]|1[012])\s*-\s*(0?[1-9]|1[012])\s*-\s*(0
^[0-9]+(.[0-9]+)$
(\d{1,2})/(\d{1,2})/(\d{4}|\d{1,2}/\d{1,2}/\d{4})
\p{Ll}|\p{Lt}|\p{Lu}|\p{Lo}|\p{Pc}|
(dd)[.-/](MM)[.-/](yyyy)[ ](hh)[:](mm)[:](ss)
[0-9]{4}[A-Z]{2}[0-9]{3}.
(1\.){1,3}\.(1\.){1,3}\.(1\.){1,3}\.(1\.){1,3}\.(1\.){1,3}\.(1\.){1,3}\.(1\.){1,3}\.(1\.){1,3}\.(1\.){1,3}\.(1\.){1,3}\.(1\.){
\$\d+\.\d{2}
(2[0-9]|22)([0-9]{3})([0-9]{2})?(\d{3})?(\d{2})?(\d{10})?
^[A-Z]{1,2}[0-9]{3}[A-Z]{1,2}[0-9]{3}[A-Z]{1,2}[0-9]{3}$
[0-9]{9}[0-9]{6}[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{
^[0-9]{1,3}(\.\d{1,2})?$
\d{4}(?:\d{2})?(?:\d{2})?(?:\d{2})
^(?P<ICD10>\d{3})(?P<Description>.*)$
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer: \b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b
(?<!
A-F + (0-9)
^(?P<month>\d+)(?P<day>\d+)(?P<year>\d+)(?P<suffix>\d+)$
[0-9]{1,3}[0-9]
(?=^(?:[a-zA-Z0-9_]{0,31}[a-zA-Z0-9_]*$))
(?<![0-9])(?<![0-9]0)(?<![0-9]0\.[0-9]{1,2})(?![0-9])[0-9]{1,7}(?:\.[0-9]{
(^|\s)(0[1-9]|1[012])(\s|$)
^[a-zA-Z0-9][a-zA-Z0-9\.]{0,2}[a-zA-Z0-9]$
[A-Z][a-z]+( [A-Z][a-z]+)+
[0-9]{3}(,[0-9]{3})*
[0-9]{4}-[0-9]{2}[0-9]{2}
(0[1-9]|1[0-2])[0-9]([0-9]|[0-9][0-9])
[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,3}
^03[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}$
^(?!(?:\d{4})\s{2}\d{2}\s{2}\d{4}$)\d{2}\d{2}\d{2}\d{4}$
Zip+4 Zipcode RegEx. You may ommit the +4 digits but you must also then ommit the hyphen/dash as well. In 1983, the Postal Service™ began using an expanded ZIP Code™ number called called the &quot;ZIP+4&#174;&quot; Code. The nine digits of a ZIP+4 code (e.g., 12345-6789) is broken down as follows: [123]Sectional Center or Large City. [45]Post Office™ facility or Delivery Area. [-]Required &quot;dash&quot; or &
/^[1-9][0-9]{2}$/
^\$\d+(,\d+)?$
[N|S|E|W]\d\d\d\d
[A-Z]{4,8}[a-z]{1,}[0-9]{1,}
(?<=\d{1,2})(?<![\d\.])(?<![\d\.]\.)(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.]\.)(?<![\d\.])(?<![\d\.])(?<![\d\
([A-Z]{2})([A-Z]{2})([A-Z]{2})([A-Z]{2})([A-Z]{2})([A-Z]{2})([A-Z]{2})([A-Z]{2})
(?<!0\.)[0-9]{1,5}(?:\.[0-9]{1,5})?
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer: [\w\.]+\.([\w\.]+)$
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer: (https?://[^\s\.]+[^\s\.]+)
(\d{2})(\d{2})(\d{2})
[a-zA-Z]{1,}[a-zA-Z ]{1,}
Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators:. - /Valid dates only! m (1-12)/ d (1-31)/ y (0..)(rizzipereira.com.br)For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250Generate a RegEx for this description. Answer: [0-9]{2}[-/.]?[0-9]{
(?:\d{1,3}(,\d{3})*|\d{1,3}(,\d{3})?)
(A) a letter followed by a digit and then a letter
r'#(.*)'
/[0-9]+(?:\.[0-9]{1,2})?/
"([A-Za-z0-9_]+)".
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z0-9])[0-9]+(?:\.[0-9]+)+$
(09)99999999
[a-zA-Z0-9 ]+
(?<=^|\s)([0-9a-fA-F]{3})(?=\s|$)
^[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}$
^-?\d+\.\d*e\^\d+$
0-9\*[\*\*][\*\*\*]|\*[\*\*]0-9|\*[\*\*]\*[\*\*\*]|\*\*0-9\*[\*\*]|
^(?:[0-9]{1,2}[0-9]|1[0-2])[-/.](?:[0-9]{1,2}[0-9]|3[01])[-/.](?:[0-9]{1,2}[0-9]|4[0-9
/^(?=.*[1-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9]
(\d+\.\d+|\d+|\d+\.\d+|\d+)(\,|\.)
[\u0600-\u06FF]
\d{1,3}(?:[.,]\d{3})+
([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})
^(?:\d{1,3}(?:\.\d{1,3})?|\d{1,3})(?:,\d{1,3})*$
ISBN 10: (\d{9})?[\dX]{9}[\dX]{9}[\dX]{9}[\dX]{9}[\dX]{9}[\dX]{9}[\dX]{9}[\dX]{9}[\dX]{9} ISBN 13: (\d{9})?
(?<![a-zA-Z0-9_\.])[a-zA-Z0-9_\.]+[a-zA-Z0-9_\.]+[a-zA-Z0-9_\.]+
^(?P<hours>\d{1,2}):(?P<minutes>\d{2})$
(?<![^0-9])(?<![^0-9])([0-9]{4})(?![^0-9])
^[+-]?[0-9]*\.?[0-9]+$
\".*\"
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z])[a-zA-Z\d]{8,25}$
US 10-Digit Phone number matching.*Requires Area Code*Brackets optional, supports: () and []*seperators optional, supports: - and.*whitespace optionalGenerate a RegEx for this description. Answer: (\d{3}[-\s]?\d{3}[-\s]?\d{4})
^(0[1-9]|[1-9]\d|1[0-2]\d|2[0-4]\d|25[0-5])\d{3}$
(\d+)([\s\S]*?)
[A-Z]
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: ^[a-zA-Z0-9]*$
(?i)(?P<state>\w+)\s(?P<abbr>\w+)\s(?P<state_abbr>\w+)
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{
^(?:[0-9]{1,2}\.){3}[0-9]{1,2}$
(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\d{1,3}\.\d{1,3}\.\d{1,3}|\d{1,3}\.\d{1,3}\.\d{1,3}|\d{1,3}\.\d{1,3}\.\d{
^(/w|/W|[^&lt;&gt;]|[^&#x20;])+$
(\d+)(?:[-\s]*\d+)*
US Phone Number: This regular expression for US phone numbers conforms to NANP A-digit and D-digit requirments (ANN-DNN-NNNN). Area Codes 001-199 are not permitted; Central Office Codes 001-199 are not permitted. Format validation accepts 10-digits without delimiters, optional parens on area code, and optional spaces or dashes between area code, central office code and station code. Acceptable formats include 2225551212, 222 555 1212, 222-555-1212, (222) 555 1212, (222) 555-12
(?:\+2[0-9]|\+22)(?:\s[a-zA-Z]{1,3})(?:\s[0-9]{2,3})?\s[0-9]{3}(?:[#]\d{3})?)
(\d+\.\d*|\d+)
^(?:\(\d{3}\)\s|\s|\s|\s|\
[a-zA-Z0-9!@#$%^&*()_+-=?/\[\]{};:,.<>|\\\]\s]
^\d+$
^\d+(\.\d+)?([eE][+-]?\d+)$
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (^\d{1,3}\.){3}\d{1,3}$
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer: (?i)(?:mailto|http(s)?|ftp(s)?|www)\.[^\s]*
[a-zA-Z0-9_.]
/^(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])\/(19|20)\d\d$/
[a-zA-Z0-9_ ]+
(\d\d:\d\d)(\d\d:\d\d)(\d\d:\d\d)(\d\d:\d\d)
^[A-Z][a-z][A-Za-z0-9]*$
([^A-Za-z0-9\s]|^)
(?=\d{1,2}/\d{1,2}/\d{4})(?=\d{1,2}/\d{1,2}/\d{4}|\d{1,2}/\d{1,2
/^(?:(?:[0-9]{3}[ -]?[0-9]{3}[ -]?[0-9]{4})|(?:[0-9]{3
var date = new Date(2014, 9, 13);var regEx = new RegExp("^([0-9]{4})-([0-9]{2})-([0-9]{2})$|^([0-
^(?P<month_of_birth>\d{3})(?P<year_of_birth>\d{4})(?P<pin_suffix>\d{3})(?P<pin_suffix_
0-59(?:AM|PM)
(?<!^[a-zA-Z0-9_])[a-zA-Z0-9_]+(?![a-zA-Z0-9_])
(?<!\d)(?<!\.)(?<!\,)(?<!\.)(?<!\.)(?<!\.)(?<!\.)(?!\.)(?!\.)(?!\.)(?!\.)(?!\.)(?!\.)(?!\.)(?!\.)(?!\.)(?!\.)(?!\.)(?!\.)(?!\.)(?!\
/[a-zA-Z0-9_\-\.]+/
HTML Pattern MatchingPLEASE HELP/&lt;[^&gt;]*&gt;/igThe above pattern is only successful when html tag are simple (they don't include any javascript). This mean that the pattern will fail if something like this is within the tag &lt;input type=button value=test onclick='if(n.value&gt;5)do_this();'&gt;. It will not match the entire open n close sign.How do you write a pattern that will pass all these tag so that the pattern will match from the open to the close sign
(\d{1,2}/\d{1,2}/\d{4} OR \d{1,2}/\d{1,2}/\d{4} \d{1,2}:\d{2}:\d{2})
^[a-zA-Z0-9]*[a-zA-Z0-9]$
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer: ^[0-9]{1,3}(,|\.)[0-9]{1,3}$
(ATU|ATU12345678)Generate a RegEx for this description.
^(?P<year>\d\d\d\d\d\d\d\d\d)(?P<month>\d\d)(?P<day>\d\d)(?P
[0-9a-zA-Z]*
[^']+
\d{1,2}\.\d{1,2}\.\d{4}(?:[-/.]\d{1,2}[-/.]\d{1,2}[-/.]\d{4})?
(\d{1,3}(\.\d{1,3})?)(\d{1,3}(\.\d{1,3})?)(\d{1,3}(\.\d{1,3})?)(\d{1,3}(\.\d{1,3})?)(\d{1,3}(\.\d{1,3})?)(\d{1,3}(\.\d{1
(?:\d\d:\d\d\d\d\d\d\d)?\s*(?:\d\d:\d\d\d\d\d\d\d\d\d\d\d)
(\d{5})-(\d{4})
"^[0-9]{5} [A-Z]{1}$"
Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answer: ^[a-zA-Z0-9]{5,17}$
[a-zA-Z0-9_]{1,8}(?:\.[a-zA-Z0-9_]{1,8}){1,3}
^(?=.{8,25})(?=.*[a-z])(?=.*\d)[A-Za-z\d]{8,25}$
A[0-9]{1,2}[A-Z]{1}[0-9]{1,2}[A-
[0-9]+(?:\.[0-9]+)+
(\d{3}\.\d{3}\.\d{3})
^[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2
^([0-9]{2})([0-9]{2})([0-9]{4})$
(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d
^(?:[01]|[23]):(?:[0-5]):(?:[0-5]):(?:[0-
^(?=0\d{4}$)(?=0\d{3}$)(?=0\d{2}$)(?=0\d{1}$)0\d{4}$
[1-9][0-9]
(?<!\d)(?<!^)(?<!\s)(?<!\&)(?<!\#)(?<!\$)(?<!\&\&)(?<!\_)(?<!\=)(?<!\=\&)(?<!\=\=)(?<!\=\=\&)(?<!\=\=
^(?:(?P<year>\d{4})\-(?P<month>\d{1,2})\-(?P<day>\d{2}))(?:\.(?P<hour>\d{1,2})\:(?P<minute>\d{2}))?(
^\d{3}[-\s]?\d{3}[-\s]?\d{4}$
[0-9a-zA-Z0-9-]{32}-[0-9a-zA-
^[0-9]{2}[-]?[0-9]{3}[-]?[0-9]{4}$
[A-Z]{2}[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{3}
(\d)([\d\.]+)
ftp_pattern = re.compile(r'^ftp://')http_pattern = re.compile(r'^http://')https_pattern = re.compile(r'^https://')
^[a-zA-Z][a-zA-Z0-9_]{3,14}$
<td class="col-md-6"><a href="http://www.google.com">Google</a></td>
(\d{3}[Ee]\d{1,2}|\d{3}[Vv]\d{1,2})
(\d{1,2})\.(\d{1,2})%
[0-9]{1,3}[.]?[0-9]{1,3}[.]?[0-9]{1,3}[.]?[0-9]{1,3}[.]?[0-9]{1,3}
/^[0-9]{1,4}\s[0-9]{1,4}\s[A-Z]{1,3}\s[A-Z]{1,4}\s[A-Z]{1,4}\s[A-Z]{1,4}\s[0-9]{1,4}$/
^(?:\(\d{3}\)|\d{3}[-\.\s]?\d{3}[-\.\s]?\d{4}|\d{3}[-\.\s]?\d{3}[-\.\s]?\d{4}|\d
(^|,)[0-9]{1,3}(,[0-9]{3})*$
[A-D]\d{3}[A-D]\d{3}[A-D]\d{3}[A-D]\d{2}[A-D]\d{4}
[0-9]{2}[0-9]{2}[0-9]{4}[0-9]{2}|[0-9]{4}[0-9]{3}[0-9]{2}[0-9]{3}|[0-9]{4}[0
r"(\d+)([a-zA-Z])(\d+)"
^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}([25][0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
^[4]\d{12,15}$
[0-9]{3}-[0-9]
^(19|20)\d{2}-\d{2}-\d{4}$
(?i)(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W])[a-zA-Z\d\W]{6,}
Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the. (period) to ensure that no other characters may be used in it's place.Generate a RegEx for this description. Answer: (?<!\d)\.(?<![A-Z])[A-Z]\d*(?!\d)
/^\d{1,2}(,\d{3})*(\.\d{2})?(,\d{3})$/
^[0-9]{4}[A-Z]{2}$
(H:nn:ss|HH:nn:ssGenerate)
^(1[01]*1[01]*1[01]*1[01]*1[01]*1[01]*1[01]*)$
^([a-zA-Z0-9\_\-\.]+)$
(?<=\d\.)(?=\d\.)
^[0-9]{5}[A-Z]{3}$
var date = "03-12-2022";var dateRegex = new RegExp(`^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|
^(?P<tag>[^\s]*)\s*$
^[a-zA-Z]{5}[a-zA-Z0-9-]{6,17}$
r'^[A-Za-z0-9_]{1,20}$'
^[a-zA-Z]{4}[0-9]{10}$
^[ \t]*#.*$
^[a-zA-Z0-9-_]{5,12}$
A[K-NP][0-9]{1,3}
^[A-Z0-9]{3}[A-Z0-9]{3}[A-Z0-9]{3}[A-Z0-9]{3}$
^(0[1-9]|1[0-2])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d{2}:\d{2}
(\d{4}-\d{2}-\d{2})(\d{2})(\d{2})
(?<!\d)\d{3}(?:[AP]M)?
The pattern could be found in [^\s]+(?=\s).
(0|[1-9][0-9]|100)
.*\b(?=.*\d)(?=.*[A-Z])(?=.*[a-z]).*\b
[0-9]{8}[a-zA-Z]
^(1\s|\s|-)?[0-9]{3}\s[0-9]{3}[0-9]
(?=.*[a-z])(?=.*[A-Z])(?=.*\d).
[0-9]*[A-Z][A-Z0-9]*[A-Z]
\d+(\.\d+)?e\d+
^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]$
(?<!\d\.\d\d)0+(?:\.\d{1,2})?
r'^\d+\.\d+$'
\b[1-9]\d{3}[-\s]\d{3}[-\s]\d{4}\b
(\d{1,2})([a-zA-Z]{2,3})(\d{1,2})
(4 numbers)(5 numbers)(1 numbers)
\d{2}-\d{2}-\d{4}-\d{3}-\d{9}
Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answer:^[0-9]{1,2}[.][0-9]{1,2}$
^[0-9]*[A-Z][0-9]*[A-Z][0-9]*[A-Z][0-9]*[A-Z][0-9]*[A-Z][0-9]*[A-Z][0-9]
\b(1024|49151)\b
^\+?[0-9]{3}-?[0-9]{3}-?[0-9]{4}$
\d{2}/\w{3}/\d{4}
^[0-9]*[.][0-9]*$
(?<![0-9])[0-9]{1,2}(?![0-9])
\d{1,2}-?\d{3}
$(document).ready(function(){    $('#textbox').keyup(function(){        var text = $(this).val();        var regex = /^(?:\d+\.\d{2}|\d+\.\d{1})([,.]\d+
0-9|1-9|10-19|20-29|30-39|40-49|50-59|60-69|70-79|80-89|90-99|100-109|110-119|120-129|130-139|140-149|150-159|160-169|170-179|180-189|190-199|200-209|210-219|
^[A-Za-z0-9\*\(\)\*\(\)\*\(\)\*\(\)\*\(\)\*\(\)\*\(\)\*\(\)\*\(\)\*\(\)\*\(\)\*\(\)\*\(\)\*\(\)\*\(\)\*\(\)\*\(\)\*\(\)\*
\b[a-zA-Z0-9_]+\b
[0-9]*[.][0-9]*[,][0-9]*[.]?[0-9]*[,][0-9]*[.]?[0-9]*[,][0-9]*[.]?[0-9]*[,][0-9]*[.]?[0-9]*[,][
(dd[.-/](MM)[.-/](yyyy)[ ])(hh[:](mm)[:](ss))
(?<month>\d\d)(?<year>\d\d)(?<suffix>\d\d)
^(0[1-9]|1[012])\.(0[1-9]|[12][0-9]|3[01])\.(19|20)\d{2}$
^http://aspalliance.com/(\d+)$
(?<![0-9])(?<![,.])(?<![$])[0-9]{0,2}(,)?[0-9]{0,2}(,)?[0-9]{0,2}(,)?[0-9]{0,2}(,)?[0-9]{0
THE Complex Password Filter Matching 3 of 4 Character catagories:1.) at least 1 upper case character2.) at least 1 lower case character3.) at least 1 numerical character4.) at least 1 special characterIt also enforces a min and max length and works for.Net and script Regex implimentations.Generate a RegEx for this description. Answer: [A-Z]{1,}[a-z]{1,}[0-9]{1,}[!@#$%^&*()_+-=]{1,}
\d{2}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3
^(0[1-9]|1[012])[0-9]{3}[-/.](0[1-9]|[12][0-9]|3[01])[0-9]{4
^[0-9]{2}:[0-9]{2}$
[1-9][0-9]|100
r'^\d{1,3}-\d{3}-\d{4}$'
^[0-9]{2}/[0-9]{2}/[0-9]{4}$
^(([0-9]{1,3}\.){3}[0-9]{1,3}$)
/\s*#.*\s*/
/^51[0-9]{13}$/
/^[0-9]{2}[0-9]{2}[0-9]{4}-[0-9]{4}-[0-9]{4}$/
^-?\d+$
<img src="http://example.com/image1.jpg" alt="example image 1">
^[\+]?[0-9]{2}[0-9]{3}[0-9]{3}$
^[A-Za-z0-9]{1}[a-z0-9]{1}[A-Za-z0-9]{1}[0-9]{1}$
\d{4}-\d{2}-\d{2} (MM/YY)
[0-9]{1,2}:[0-9]{2}:[0-9]{2}|[0-9]{2}:[0-9]{2}:[0-9]{2} pm|[0-9]{2}:[0-9]{2}:[0-9]{2} pm|[
^(19\d{2}|20\d{2}|21\d{2}|22\d{2}|23\d{2}|24\d{2}|25\d{2}|26\d{2}|27\d{2}|28\d{2}|29\
<%=20%>[^\s]*
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=`{}|~`\:;<>,.?/])[a-zA-Z0-9!@#$%^&*()_+-=`{}|~`\:;<>,.?/]+$
/^[A-Z]{2}$/
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer: [0-9]{3,}(,[0-9]{3,})*
^(?=.*\d)(?=.*\.\d{1,2}$)(?=.*\d{1,2}\.\d{1,2}$)(?=.*\d{1,2}\.\d{1,2}\.\d{1
^[a-zA-Z0-9_]{1,63}$
(0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5
^[0-9]{3}[-][0-9]{3}[-][0-9]{4}$
^(?=\d{1
^(0[1-9]|1[0-2])-?(0[1-9]|[12][0-9]|3[01])-?(19|20)\d\d$
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer:
a-z, A-Z, 0-9, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
(?<=\d{4})(?<![\d\-\s])[\d-]{4}(?<![\d\-\s])[\d-]{4}(?<![\d\-\s])[\d-]{4}(?<![\d\-\s])[\
\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}
(^\d{5}-\d{4}-\d{2}-\d{2}$)
0-9[0-9]
[Insert a RegEx to check for the license plate number]
(?P<time>\d{1,2}:\d{2}(:\d{2})?(?:\s*am|\s*pm))
(\d{3})\-(\d{3})\-(\d{4})
(\d{1,2}\/\d{1,2})
[^0-9]*[0-9]*[0-9][0-9][0-9][0-9][0-9][0-9][0-9]*[0-9]*[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]*[0-9]*[0-
(^\d{1,2}(,\d{3})?(\.\d{1,2})?$)
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer:^(http|https)\:\/\/[\w\-\.]+\/[\w\-\.]+\/[\w\-\.]+\/[\w\-\.]+\/[\w\-\.]+\/[\w\-\.]+\/[\w\-\.]+\/[\w\-\.]+\/[\w\-\.]+\/[\w\-\.]+\/
var timeFormat = /^\d{1,2}:\d{2}:\d{2}$/;
/^[0-9a-fA-F]{3}$/
\d{1,2} \d{1,2} \d{4}
^[0-9]{5}-[0-9]{4}$
This will validate a partial postcode beginning with the postal district on up to the whole postcode, returning the two halves in sub-expressions. The main purpose is to return a valid postal district from a partial or whole postcode. The real value in this regex lies in the fact that it will process the postcode correctly regardless of whether or not the space in present after the district. So the accepted formats are A1 1AA, A11 1AA, A1A 1AA, AA1 1AA, AA11 1AA, AA1A 1AA GIR 0AA (and the same 6 formats without the space)
^[A-F0-9]{6}$
var regex = new RegExp(  "^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)[0-9]{2}$",  "i");
(\d{2})/(\d{2})/(\d{4})
(^[0-9]{1,2}[0-9]{0,3}[0-9]{0,3}$)|(^[0-9]{1,3}[0-9]{0,3}[0-9]{0,3}$)|(^[0-9]{1,4}[0-9]{0,3}[0-9]{0,3}$)|(
^(?:(?:[0-
(\+\d{1,3}\)-(\d{3})-(\d{4})
^\d*\.\d{1,2}$
^[-+]?[0-9]*\.?[0-9]+$
^(?=.*[a-z])(?=.*[0-9])(?=.*
Matches times seperated by either : or. will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.Generate a RegEx for this description. Answer:(^(?:[01]?[0-9]|2[0-3]):[0-5][0-9]|[0-5][0-9]):[0-5][0-9]$|(?:[01]?[0-9]|2[0-
(222) 555-12
(1434-1499).*
(\d{2}:\d{2}:\d{2})\s(?:\d{2}:\d{2}:\d{2})?(?:\s\d{2}:\d{2}:\d{2})
(?<![0-9])(?<![0-9.][0-9])[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2
(?<!\d)(?<!-)[0-9]{5}(?<!-)[0-9]{4}(?!-)
^(?=(?:[^,]*,[^,]*){7})(?![^,]*,[^,]*$).*$
^\d{4}[12]\d{3}[1-9]\d{2}$
(\d{3})\s(800|900)\s(?:\d{3})?
(\\w+).*
\b\d{8}\b
package.class.*
[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}
^Istat Ateco Code (Codice Istat)$
This regular expression is intended to limit numeric entries by allowed places before and after the decimal point. It also recognizes whole numbers. In this example the value cannot exceed 99999.999. To change the range, simply edit the numbers in curly braces. For example, to allow 7 digits (millions) before the decimal point, change both instances of {0,5} to {0,7}. Likewise, to change the decimals from allowing thousandths (3 digits) to just hundreths, change the {0,3} to {0,2}. This can be useful for numeric fields in SQL. This regular
(0[1-9]|1[012])[0-9]{8}|9
^(?P<feet>\d+)\s*(?P<inches>\d+)$
^[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{
(\d{1,3}(,\d{3})*)(\.\d+)?
^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
^(?:\+00)?[0-9]{3}[0-9]{4}[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]
(?<!\d)(\d{3})(?!\d)
(\d+\.\d{3})(?:[eE][+-]\d+)
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer: r'.*\.([a-zA-Z0-9]{1,4}).*'
(?<=\d)(?=\D)
<a href="(https?://[^>]*amp)">amp</a>
(?<!\d)((?<!\d)(\d{1,2})(?:\.\d{1,2})?|(?<!\d)(\d{3,4})(?:\.\d{1,2})?|(?<!\d)(\d{1,2})(
[A-Z]{2}-[A-Z]{2}-[A-Z]{2}-[A-Z]{2}-[A-Z]{2}-[A-Z]{2}-[A-Z]{2}-[A-Z]{2}-[A-Z]{2}-[A-Z]{2
[\w-]+$
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer:(?<![,\d])(?![,\d]{3})(?![,\d]{
"^(19[1-9]|[12][0-9]|3[01])\/(0[1-9]|[12][0-9]|3[01])\/(19[1-9]|20[0-9])$"
^(2[0-9]|3[01])[-0-9]{2}[0-9]{4}$
In military messages and communications (e.g. on naval charts, or maps showing troop movements) the format is DDHHMMZ Mon YY, so for instance, "271545Z FEB 08" represents 15:45 Zulu time (which is to say UTC) on the 27th of February, 2008.For Radio Navigational Warnings (RNWs), the international format is slightly different, using the explicit UTC text instead of the Zulu character, becoming "DDhhmm UTC Jun YY". E.g. "240923 UTC Jun 10" is "9:23am on the
(?<=\$)(\d{1,3})(?:\.\d{3})?(?:\,\d{3})?
^[a-zA-Z0-9_\-\.]+\.(xls)$
Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answer:^(0[1-9]|1[012])[0-9]{3}[0-9]{2}[0-9]{4}$
^[0-9]{5}\.[0-9]{2}$
CPT code = [A-Z]{4}[0-9]
\s*--.*\n
(?i)\b(0[1-9]|1[012])[:][0-5][0-9]?[A-Z]?\b
/^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,
(Example) "^[a-zA-Z0-9-_]+$"
^[0-9]{5}[-.]?[0-9]{4}[-.]?[0-9]{3}[-.]?[0-9]{2}[-.]?[0-9]{1}$
[YYYY-MM-DD HH:MM:SS](\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})
(\d+)(\.\d{2})?
(\((.*?)\))
(http\:\/\/[\w\.-]+)
(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})
^[a-zA-Z0-9._-]+$
/^\d{7}$/
^(?=.*[4-9])(?=.*[5-8])(?=.*[7-9]).{8}$
[Ee]\d{3}[.\d]{1,2}
^[^\d\,]*(?:\d{1,3}(?:,\d{3})*|\d{1,3}
^\$?[0-9]*(\.\d{1,2})?(,\d{1,2})?$
\b(?:\d{1,2}\s){1,2}\d{1,2}\s\d{4}\b
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{5,12}$
/\d{1,2}/\d{4}/\d{4}/
(?<![0-9])[1-9][0-9]|[1-9][0-9]{0,2}(?![0-9])
/^http://aspalliance.com/([0-9]+)/.
^[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}$
(?<latitude>(-?\d+\.\d+)?)|(?<longitude>(-?\d+\.\d+)?)
\$\d+(,\d+)?
(?<![A-D])[0-9]{3}[A-D]
[N|S|E|W]\s*[0-9]{1,2}[.,]\s*[0-9]{1,2}[.,]\s*[0-9]{1,2}[.,]\s*
[a-zA-Z0-9 ]{1,20}
(?<!\d)(?<!\.)(?!\.)\d{1,3}(?!\.\.)\d{1,3}(?!\.\.)\d{1,3}(?!\.)\d{1,3}(?!\.)\d{1,3}(?!\.)\d{1,3}(?!\.)\d{1,3}(?!\.)\d{
^(([0-9a-f]{1,4}|[0-9a-f]{1,3}[0-9a-f]{1,2}[0-9a-f]{1,1}|[0-9a-f]{1,2}[0-9a-f]{1,3}[
(\()
\d{1,2}\.\d{1,2}\.\d{4}
\b(?:\d+\s*[#]\s*\d+)\b
^(?:(?:0?[1-9]|1[012
^[a-zA-Z0-9_]+$
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: +91 (national code) +0 (optional)
/^[0-9]{0,2}(,|\.)[0-9]{0,2}$/
^(?:[1-9]\d{0,2}|1[0-2]\d{0,2}|2[0-4]\d{0,2}|25[0-5])$
((\d+)|(\w+))
^[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?$
[DD/MM/YYYY][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][
/^(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])[0-9]{4}$/
(\d{2})([a-zA-Z])(\d{2})(\d{4})
[A-D]
(?:[01]?[0-9]|2[0-3]):[0-5][0-9]
^(0?[1-9]|1[012])[0-9]{3}$
[a-zA-Z]([a-zA-Z0-9]*[a-zA-Z0-9])?
(?:\d{3}[-\s\w]{3}\d{3}[-\s\w]{3}[-\s\w]{3})+
(^[\d.]+$)|(^[\d.]+$)
\.xls$
Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators:. - /Valid dates only! m (1-12)/ d (1-31)/ y (0..)(rizzipereira.com.br)For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250Generate a RegEx for this description. Answer:(?<month>\d{1,2})/(?<day>
"([^"]*)"
(\d{1,3})(,\d{3})*
^[0-9]*(?:\.[0-9]{1,2})?$
\b[A-Za-z ]{2,}\b
(\".*?\").*
#[^\r\n]*
[^a-zA-Z]{2}[0-9a-zA-Z]{9}[0-9a-zA-Z]{1}[0-9a-zA-Z]{1}[0-9a-z
^(?:\d+\.?\d*|\d+)(?:,\d+)?$
Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the. (period) to ensure that no other characters may be used in it's place.Generate a RegEx for this description. Answer: \d{1,3}(,\d{3})*
\b(0|[1-9]|1[012])[0-9]{3}\b
Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answer:^(?=.*[0-9])(?=.*[.])(?=.*[0-9]$)(?=.*[.]$).*$
r'^(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.'
Matches Spanish CIF, NIF and NIE formats. Recognises separation of letters with the hyphen or period.Format CIF: [1 letter][7 numbers][1 number or letter]Format NIF: [8 numbers][1 letter]Format NIE: X[possible 0][7 numbers][1 letter]Note that this expression does not check for the validity of the NIF/CIF/NIE... there are some control characters in there and I don't know how they work.Generally I always strip out any non-alphanumeric characters (hyphens, periods, spaces
(?<!^)(?:(?<!\d)(?<!\.))(?<!\d)(?<!\.)\d{1,10}(?!\.)
/^[1-9][0-9]*$/
^ATU[0-9]{5}[0-9]{1}[0-9]{1}[0-9]{1}$
(?<!\d)(?<!&quot;)(?<!&quot;-)(?<!\d)(?<!&quot;-&quot;)(?<!\d
\d+|[a-zA-Z]
(?<!\S)\s+  # match one or more whitespace characters that are not preceeded by a non-whitespace character(?<!\S)\s*  # match zero or more whitespace characters that are not preceeded by a non-whitespace character(?<!\S)\s*  # match zero or more whitespace characters that are not
^(0[1-9]|1[012])\/([1-9][0-9]|1[012])\/(19|20)\d{2}$
import redef check_date(date):    pattern = re.compile(r'^\d{1,2}/\d{1,2}/\d{4}$|^\d{1,2}/\d{1,2}/\d{1,2}$|^\d{1,2}/\
VIN_number_pattern = r'^[A-Z]{3}[0-9]{3}[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}$'
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer:
(^[0-9]{1,2}[0-9]{1}[0-9]{8}$)
0.00-100%
(\d{1,2})(\d{1,2})(\d{1,2})
/\d{4}\/\d{2}\/\d{2}/
^(?P<area_code>\d{3})(?P<extension>\d{3})?$
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<![0-9])(?<![A-Za-z])[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}(?![0-9])(?![A-Za-z])
^[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}$
^([0-9]{4})-([0-9]{3})-([0-9]{2})-([0-9]{2})-([0-9]{2})$
[^0-9]\d\d/\d\d/\d\d
(?<!\d)(?<!#)(\d{1,3})(?!\d)(?<!#)(\d+)(?!\d)(?!#)(\d+)(?!\d)(?!#)(\d+)(?!#)(\d+)(
^(?:[12][0-9]|3[01])[0-9]{3}(?:\.[0-9]{2})?$
^(0|[1-9][0-9]*)(\.[0-9]{2})?$
(?<=\d{3}\.\d{3}\.\d{3})(?=\d{4})
/^[a-zA-Z0-9-_]{1,20}$/
(\d{1,3})\s*-\s*(\d{1,3})\s*-\s*(\d{1,3})\s*-\s*(\d{1,3})\s*-\s*(\d{1,3})\s*-\s*(\d{1,3})\s*-\s*(\d{1,3})\
```pythonimport requery = 'SELECT * FROM Users WHERE name LIKE "%[^%]"'regex = r'(?<=\s)(%[^%])'pattern = re.compile(regex)result = pattern.sub('', query)print(result)```
^(?:\+[0-9]{1,2})?[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9
^(?:(?P<year>\d{4})\-(?P<month>\d{1,2})(?P<day
^[0-9-]+(\.[0-9-]+)+$
(^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$|^3[0-9]{1,3}\.[0-9]{1,3}$|^3[0-9]{1,3}\.[0-9]{1,3}$|^3[0-9]{1,3}\.[0-9]{1,3}$
Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answer: /^[0-9]{10,17}$/
^([0-9]{2})/([0-9]{2})/([0-9]{4})$
(?<![\d\.])(?<![\d\.])(\d{1,3})(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\.])(?![\d\
^(?:\d+\.\d+|\d+\.\d+\.\d+|\d+\.\d+\.\d+|\d+\.\d+\.\d+\.\d+|\d+\.\d+\.\d+\.\d+|\d+\.\d+\.\d+\.\d+|\d+\.\d+\.\d+\.\d+\.\d+)$
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer: $[0-9]{1,3}\,[0-9]{1,3}\,[0-9]
(?<!\{)(\{(.*?)\})
(\d{1,3}[,.]\d{3}[,.]\d{3})
^[1-9]\d?\d?(?:\.\d{1,2})?$
^(?:\d{1,7}|\d{1,9}|\d{1,9}?\d{1,7}|\d{1,9}?\d{1,7}?\d{1,7}|\d{1,9}?\d{1,7}?\d{1,7}?
function dateFormat(date, format) {    var dateParts = date.split("/");    var newDate = dateParts[0];    var newDatePart = dateParts[1];    var newDatePart2 =
^([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2
(\d{1,2}\/\d{1,2}\/\d{4})-(\d{4})
[0-9][0-9][0-9][0-9][0-9][0-9]
```pythonimport mysql.connector
(\d+)([+-])\d+
var regex = /<!--(.*?)-->/;
\d+\.\d{1,2}[^\d]
/(^|\s)(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])$/
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<=\S+)\s*(?P<source>[^\s]+)\s+(?P<type>\w+)\s+(?P<quantity>\d+)
^[0-9]{1,3}(\.\d+)?$
^([EV]\d{1,2})\.(\d{3})$
(\d{1,3})([\s\d]{1,3})([\s\d]{1,3})
(?=.{2,})(?!.*(.)\1){2,}
(?<year>[0-9]{4}-[0-9]{2}-[0-9]{2})\s?(?<month>[0-9]{1,2})\s?(?<day>[0-9]{1,2})\s?(?<hour>[0-9]{1,2})\s?(?<minute>[0-9]{1,
[0-9]{1,3}(\.\d{1,2})?
^(?=\d{4}-\d{2}-\d{2}(?:\.\d{2})?$)(?=\d{4}-\d{2}-\d{2
[A-Z]{3}\d{3}[A-Z]
^[A-Za-z0-9\W]+$
\b(19|20)\d{2}\d{2}\d{2}\b
"^[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}$"
[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3
(\d{2}\/\d{2}\/\d{4}) or (\d{2}/\d{2}/\d{4})
^(?!0)(?!\.0)\d+$
^[0-9a-fA-F]{8,}$
[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0
^\s*(if\s+)?(?P<get_command>(?:[^\s]*\s*(?P<command>[^\s]+)\s*)*)\s*$
^(0|[1-9][0-9]|1[0-2])\/(0|[1-9][0-9]|[12][0-9]|3[01])\/(0|[1-9][0-9]|
[0-9]{2}:[0-9]{2}
(\d+(,\d+)*)
\d{1,2}?
"^([0-1][0-9]|2[0-3]):([0-5][0-9])$"
^[0-9.,]*$
^[\d]{3}\-\d{3}\-\d{4}$
^(\d{3})(\s|-|\.)(\d{3})(\s|-|\.)(\d{4})$
(?i)([1-9]|[1-2][0-9]|0?[1-9])[: ]?[0-5][0-9]|[0-5][0-9]
^(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z])[A-Z0-9]{4}-\d{3}-\d{2}$
(?<=<td>)<(.*?)</td>
/^(www\.)?[0-9]{3}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2
Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators:. - /Valid dates only! m (1-12)/ d (1-31)/ y (0..)(rizzipereira.com.br)For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250Generate a RegEx for this description. Answer: (\d{1,2})/(\d{1,2})/(\d
^[-\d.]+$
[hH]{1}[0-9]{1,2}:[0-9]{2}(am|pm)
^[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}$
(\d{2}):(\d{2})\s*
(\d{3})(\d{3})(\d{4})
\d{1,2}\.\d{1,2}
^\d{1,3}(,\d{3})*(\.\d{2})?$
(?i)(?:[0-9]|[1-9][0-9]|1[0-2]):[0-5][0-9]
^\(\d{1,3}\)\s?\d{3}\-\d{3}\s?\d{4}$
/^[0-9]{2}[0-9]{3}[0-9]{2}[0-9]{4}(?:[0-9]{1,2}[0-9]|[0-9]{3}[0-9]
^(00[+]?|[1-9][0-9]{1,2}|[1-9]\d{2}|[1-9]\d{3}|[1-9]\
(?<=^\d{1,2}(?:\.\d{1,2})?$)
(\d{2}:\d{2}:\d{2})(\.\d{2})?
^[0-9]*$
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer: ^(1|2|3|4|5|6|7|8|9|0|[1-9]|[0-9]|[0-9][0-9])$
(?<![a-zA-Z0-9])[^a-zA-Z0-9]
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer:^(?:\d{1,2}(?:\.\d{1,2})?|(?:\d{1,2}(?:\.\d{1,2})?))(?:\.\d{1,2})?$
/^\d{1,2}/\d{4}$/
^[+-]?\d*\.?\d*$
(\d{4})-(\d{2})-(\d{2})
\d{1,3}[a-z]{1,3}[a-z]{1,3}[a-z]{1,3}[a-z]{1,3}[a-z]{1,3}[a-z]{1,3}[a-z]{1
^[A-Z][a-z]{1,3}[A-Z][a-z]{1,2}[A-Z][a-z]{1,2}
^(?:\d{1,5}(?:\.\d{0,3})?|\d{1,5}(?:\.\d{0,2})?|\d{1,5}(?:\.\d{0,1})?|\d{1,5}(?:\.\d{0,0})?|\d{1,5}
(1) (2) (3) (4) (5) (6)
(?<=^|\s)([A-Za-z0-9]+)
(0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-
\b(?<![0-9])[A-Z]{2}\d{2}[A-Z]{2}(
\b(?!xx|yy|...)\w+
(?<![0-9])[1-9][0-9]|[1-9][0-9]
/^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
\b(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/\d{4}\b
(\d{1,2}\.\d{1,2}|\d{1,2}\.\d{1,2}|\d{1,2}|\d{1,2}\.\d{1,2}|\d{1,2}\.\d{1,2}|\d{1,2}\.\
[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}
^[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}
^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])T([0-5][
^[0-9]{5}-\d{4}$
(?<!\d)(?<![\w\s])[a-zA-Z]+[^\w\s]+(?!\d)[a-zA-Z]+[^\w\s]+(?!\d)
(?i)(?<!\d)\d{1,3}(?!\d)
[0-9]{0,9}(?=.[0-9]{1,9}$)
(?:\d{1,3}(?:,\d{3})*|\d{1,3}(?:,\d{3})*(?:\.\d{1,3})?|\d{1,3}(?:,\d
(\w+\.\w+)
(?<!\d)(?<![A-Za-z])(?<![A-Z])[A-Z0-9
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer: ^https?://[A-Za-z0-9-_.]+$
[^\d]\d{3}[-\.\
AAN|ANA|ANN|ANA|AAN|AANN|AANN|AANN
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:    private static Regex CurrencyExpression = new Regex(@"^\$([\d,.]+)\.(\d+)$");
[A-F]{1,2}-[A-F]{1,2}
This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answer: \b\d{5}\b
\b\d{2}/\d{2}/\d{4}\b
The CPT code is a 4 digits + a captial letter or number (forming 5 character code). The CPT code describes a medical procedure.
[^\d]{3}[-\s\d]{3}[-\s\d]{4}
\d+\.\d+[0-9]*\z
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:    public static string CurrencyExpression(string currency)    {        Regex currencyRegex = new Regex(@"(\d+)([,.]\d+)?(e
(0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|[a-z]|[A-Z]|[0-9]|\.[0-9]|\.[0-9]|\.[0-9]
^(0[1-9]|1[012])[0-9]{3}[0-9]{2}[0-9]{2}[0-9]
^(?=.*[1-9])(?=.*[0-9])\d+(?:\.\d+)?$
$1.\d{3}\.\d{3}\.\d{4}
\$[0-9,]*(?:\.[0-9,]*)?
^(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])\/(19|20)\d{2}$
^(0|[1-9]|1[012])[0-9]{3}$
(^[0-9]{1,2}[a-zA-Z]{4}$|^[0-9]{1,2}[a-zA-Z]{3}[a-zA-Z]{2}$|^[0-9]{1,2}[a
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: (?<![^0-9])(?<![0-9])[0-9]{3}[0-9]{3}[0-9]{4}[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{
<classname>(?<![a-zA-Z0-9_])[a-zA-Z0-9_]+(?![a-zA-Z0-9_])
[0-9]*[.][0-9]*[0-9]*[0-9]*[0-9]*[0-9]*
(\d{4})/(\d{1,2})/(\d{1,2})
\+31(\s|-)\d{9}
^(?:(?:(?:(?:[0-9]|[1-9][0-9]):[0-9]|[1-9][0-9]):[0-9]|[1-9][0-9]):[
^\d{4}-\d{1,3}-\d{1,2}:\d{1,2}:\d{1,2}$
(\+\d{3}\d{3}\d{3}|\+\d{3}\d{3}\d{3}|\+\d{3}\d{3}\d{2}|\+\d{3}\d{2}\d{2}|\+\d{3}\d{2}\
(https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%._\+~#=]{2,256
\b[A-Za-z0-9_]{0,31}\b
^[0-9]{1,3}\.?[0-9]{1,3}$
[0-9]{1,3}[a-zA-Z0-9]
^(0|[1-9][0-9]|1[0-2])[:][0-5][0-9]$
[^\d]{2}[\d]{2}[\d]{2}[\d]{4}
[\d\.]+/\d+
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])[A-Za-z0-9@#$%^&+=]{8,20}$
[0-9]{1,2}[-/.]?[0-9]{1,2}[-/.]?[0-9]{1,2}
^[0-9]*[.][0-9]*$|[0-9]*[.][0-9]*$
feet(?<=\s)(?<!\d)(?<![a-zA-Z])\d{1,3}(?=\s|$)inches(?<=\s)(?<!\d)(?<![a-zA-Z])\d{1,2}(?=\s|$)
^((\d{4}-\d{2}-\d{2})[-.](\d{2}:\d{2}:\d{2}))$
The RegEx for this description is "^(978|979)\.?\d{9}$"
(?<!\d)(-?\d+)(?!\d)
(?<![A-Za-z])(?<!\d)(?<![A-Z])[A-Za-z\d]{1,100}
(?<=^[^w])(?=\d)(?=(\d{10}))
^\d{1,7}(,\d{1,2})?$
^(19|20)\d{1,2}/\d{1,2}$|^(19|20)\d{1,2}-\d{1,2}$|^(19|20)\d{1,2
^\s*\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$
(^(19|20)\d\d)?(0[1-9]|1[012])$
(\d{2}:\d{2}:\d{2})([a-zA-Z])([a-zA-Z])([a-zA-Z])
^(?P<package>\w+)[.](?P<class>\w+)$
Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answer: ^[0-9]{9}(-[0-9]{2})?$
[^A-Za-z_]*(?:[A-Z][^A-Za-z_]*)*
^(?=.*[a-z])(?=.*[0-9])(?=.*[\W])[A-Za-z0-9\W]{1,}$
(\d{1,2})([0-9]{2})?[0-9]{0,2}([0-9]{0,2})?[0-9]{0,2}([0-9]{0,2})?[0-9]{0,2}([0-9]{0,2})?[0-9]{0,2}([0-9]
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer: [0-9]{3,6}(?:,[0-9]{3,6})*
^(0|[1-9][0-9])/([0-9]{1,2})/(19|20)$|^(0|[1-9][0-9])/([0-
(\d{1,3}(,\d{3})*(\.\d{2})?|\d{1,3}(,\d{3})*(\.\d{2})?|\d{1,3}(,\d{3})*(\.\d{2})?|\d{1,3}(,\d{3})*(\.\d{
(0|[1-9][0-9]*|1[0-9]{2}|2[0-4][0-9]|25[0-5])
^#.*$
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer: (0|[1-9][0-9]*[0-9]?[0-9]?[0-9]?)
^(?=.*\d)(?=.*\d{1,2})(?=.*\d{3})[0-9]{4}[-/.][0-9]{2}[-/.][0-9]{2}$
(^\([0-9]{3}\)\s?[0-9]{3}[-\.\s]?[0-9]{4}$)|(^[0-9]{3}[-\.\s]?[0-9]{3}[-\.\s]?[0-
r'^\d{5}\.\d{2}$'
+\d{3}\d{3}\d{4}
```pythontext_area = wx.TextCtrl(panel, style=wx.TE_MULTILINE, size=(150, 50))text_area.SetValue("This is a multiline text area.")```
^(?:\d{3}-\d{3}-\d{4}-\d{3}-\
/^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|[12][0-9]|3[01])$/
[0-9]{2}[0-9]/[0-9]{2}[0-9]/[0-9]{4}|[0-9]
^(?=.*[a-z])(?=.*[A-Z])(?=.*\
[0-9]+(\.\d+)?[+-]?[0-9]+(\.\d+)
(\d{4})-(\d{2})-(\d{2})-(\d{2}T\d{2}:\d{2}:\d{2}[+|-][\d{2}]?)\s([+|
^\d{4}/\d{2}/\d{2}$
\p{L}+
[^A-D]
[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9
(?=\d{3}\d{3}\d{3}$)(?=\d{4}\d{4}\d{4}$)
[0-9]{1,2}(?:[0-9]{1,2})?(?:[0-9]{1,2})?(?:[0-9]{1,2})'
\d+([,.]\d+)
^(?=.*[a-zA-Z])(?=.*\d)(?=.*[a-z])(?=.*[\w-])\S+$
\b(?:[1-9]\d|[1-9]\d\d|1[0-9]\d|100[0-9]|[1-9]\d\d\d)\b
[a-h][1-8]
\b(1|2|3|4|5|6|7|8|9|0)\b
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=])(?=.*[a-zA-Z0-9!@#$%^&*()_+-=]{0,20})(?=.*[a-zA-
(^-?\d{1,3}(?:\.\d{1,3})?(?:\.\d{1,3})?(?:\.\d{1,3})?$)
The VAT Number format verification should match the following pattern: [0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{4}[0-9]{2}[0-9]{1}[0-9]{2}[0-9]
\d{3}[A-Z]{1}[A-Z]{1}
[0-9A-Fa-f]{3}|[0-9A-Fa-f]{6}
^(?!SEP.*$)
[^\d]
^(?![^,\s]*$)([\w\.-]+@[\w\.-]+\.\w{2,4})(,|;)$
[0-9]{1,2}\.\d{1,2}\.\d{1,2}
[^\s]\d{3}[^\s]\d{3}[^\s]\d{4}
(?i)(?=\s)(?=\d{4})(?=\s)(?=\d{3})(?=\s)(?=\d{2})(?=\s)(?=\d{1}
/^\d{4}$/
Get the style attribute inner text contained inside " or'caracters with the "style=" prefix.Generate a RegEx for this description. Answer: caracter = r'[^a-zA-Z0-9]*'
[0-9]+(\.[0-9]+)?
(\d{2}\.\d{2})\s*(?P<percentage>[0-9]{1,2})\s*(?P<scale>[0-9]{1,2})\s*(?P<description>.*)
(?<![0-9])[0-9]{3}-[0-9]{2}-[0-9]{4}
\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} (\d{2}[ap]m)
(?i)(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{9}
r'^[A-Z]{1,3}[a-z]{1,2}[0-9]{1,2}$'
^[1-9]\d*$
(^\d+$)
^[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}$
The RegEx would be: [\d{32}-\d{32}-\d{32}-\d
[4],[1
(222) 5-12
^\+?[1-9][0-9]{2}[0-9]{3}$
(?P<month>\d\d)/(?P<day>\d\d)/(?P<year>\d\d)
^[^,.]+$
var regex = /^\s*<!--.*?-->\s*$/gm;
(?<=\")(.*?)(?=\")
(?:\d{1,4}\.){3}(\d{1,4})
(.*)\.txt
^(?=(?:[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2})[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{
^(?:[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]+)*)$
(^[0-9]{3}[-\s]?[0-9]{3}[-\s]?[0-9]{4}$)
The string should match any date in the format of CCYYMM/YYYYMM. For example, "2022/12/31" or "2022-12-31".
(?<=^|\s)([^\s])(?=\s|$)
\b[0-9]{1,2}\s[0-9]{1,2}\b
Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answer:(?=^[0-9]{1,3}(?:\.[0-9]{1,3})?$)(
^\d{1,2}$
^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]).{8}$
Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answer:
[^a-zA-Z ]
^(?P<month>\d{2})\s?(?P<day>\d{2})\s?(?P<year>\d{4})$
(3[4-9]|4[0-2][0-9]|5[0-4][0-9]|6[0-2][0-9]|7[0-5][0-9]|8[0-9]|9[
#!/usr/bin/perluse warnings;use strict;
(\d{3}-\d{2}-\d{4})
var html = "<td>***</td><td>***</td><td>***</td><td>***</td><td>***</td><td>***</td><td>***</td><td>***</td><td>***</td><td>***</td><td>***</td><td>***</td><td>***</td><
/^\+?(\d{1,3}\)?[\s\d]{1,3}\s[\d]{1,3}\s[\d]{1,3}\s[\d]{1,3}\s[\d]{1,3}\s[\d]{1,3}\s[\d]{1,3}\s[\d]{
^([1-9]|0[1-9]|1[012])[0-9]{2}:[0-9]{2}$
(\d{4}-\d{2}-\d{2}[Hh]?)
[a-z0-9,, ]+
/^\d{1,2}(,\d{1,2})?$/
/[aeiou]/gi
[0-49151].[0-9]{1,2}
\d{4}-\d{3}-\d{2}
(?<!\d)0+(?:\.\d{1,4})?(?!\d)
(?<=\{)(.*)(?=\})|(?<=\[)(.*)(?=\])
(?<!\d{4})(?<!\d{2})(?<!\d{2})(?<!\d{2})(?<!\d{2})(?<!\d{2})(?<!\d{2})(?<!\d{2})(?<
[^\s\S]*
^[A-Z]{7}$
^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$
(\d+)\.(\d*)\^(\d*)
(^-?[0-9]*(?:\.[0-9]{3})?(?:[eE][-+]?[0-9]+)?$)
https://regex101.com/r/2lXn4G/1
^[a-zA-Z0-9_:.]+$
(?<=^|\s)(?P<prefix>\d{1,3})(?=\s|$)
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer: ^[a-zA-Z0-9_\-\.]+$
(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}
(?<!\d{1,2}/)\d{1,2}/\d{4}
(?<=\s|^)([a-zA-Z0-9_\-\.]+)(?=\s|$)
https://regex101.com/r/sR9w0f/1
https://regex101.com/r/yqQwX4/1
^[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{4}$|^[0-9]{1
(\d{1,2})\s?(?:[AP]M|AM|PM|AM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|PM|
This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.NET :Regex.Replace(Html, "<[^>]*>", string.Empty);Generate a RegEx for this description. Answer: <[^>]*>
\b[A-Z][a-z]{0,1}[A-Z][a-z]{0,1}[A-Z][a-z]{0,
\$[\d,]{1,3}(?:\.\d{3})?(?:[-\s]\d{4})?
<?xml version="1.0" encoding="UTF-8"?><note>  <title>This is a test</title>  <body>    <h1>This is a test</h1>    <p>This is a test</
^(0?[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])/([0-9]{4})/$
(?<=\d{1,2}(st|nd|rd|th)?)\s(?<!\d{1,2}(st|nd|rd|th)?)\s(?<!\d{1,2}(st|nd|rd|th)?)\s(?<!\d{1,2}(st|nd|rd|th)?)\s(?
^(?=.*\d)(?=.*[a-zA-Z])(?=.*[0-9]).*$
\b(?:[0-9]{3}[ -]?){3}[0-9]{9
[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-
s&#227;o requeridos!Generate a RegEx for this description.
^(0[1-9]|[12][0-9]|3[01])[0-9]{2}[-/.](0[1-9]|1[012])[0-9]{4}$
^[0-9]{3}[0-9]{3}[0-9]{3}$
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer:
[a-zA-Z0-9-]{3,}[a-zA-Z0-9-]{3,}[a-zA-Z0-9-]{3,}[a-zA-Z0-9-]{3,}[a-zA-Z0-9-]{3,}[a-zA-Z0-9-]{3,}[a-zA-Z0-9-]{
[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$
(?<!\.)(?!\.)[0-9]{3}(?!\.)
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@#$%^&+=]).{8,}$
(.*)\.\w+
(\d{1,2}\/\d{1,2}\/\d{4})
(?<!\d)\d{3}-\d{3}-\d{4}(?!\d)
[0-9]{1,2}[-\s]?[0-9]{1,2}[-\s]?[0-9]{1,2}[-\s]?[0-9]{1,2}
[a-zA-Z]
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer:^(?!.*[^a-zA-Z0-9\-\.])(?!.*[^a-zA-
[a-zA-Z][a-zA-Z0-9_]*[a-zA-Z0-9_]*
(?<![0-9])(?<![1-9][0-9])(?![0-9])[0-9]+(?<![0-9])(?![0-9][0-9])
HTML Pattern MatchingPLEASE HELP/&lt;[^&gt;]*&gt;/igThe above pattern is only successful when html tag are simple (they don't include any javascript). This mean that the pattern will fail if something like this is within the tag &lt;input type=button value=test onclick='if(n.value&gt;5)do_this();'&gt;. It will not match the entire open n close sign.How do you write a pattern that will pass all these tag so that the pattern will match from the open to the close tag
[0-9]{2}[0-9]/[0-9]{2}/[0-9]{4}
var re = new RegExp('(?<![^"\s])(?<quote>["\'](?:[^"\s]+|(?R))*["\'])(?![^"\s])');
(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d\d
(?<![0-9])(?<![A-Za-z])(?<![0-9])(?<![A-Za-z])(?<![0-9])(?<![A-Za-z])(?<![0-9])(?<![A-Z
^[^\\/]*\\.xls$
^([0-9]{1,2}):([0-9]{2}):([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})$
^[a-zA-Z ]{4,32}$
(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\
^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$|^(?:[0-9]{1,3}\.){1,3}[0-9]{1,3}$
^(?=.{10}$)(?![a-zA-Z])(?![0-9])(?![0-9].[0-9])[0-9]{1,3}/[0-9]{1,3}$
Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answer:var pattern = /^(?=.{0,15}$)(?=.{0,15}$)(?=.{
Regex: \d+
(?<!\d)\$[\d\.]{1,4}(?!\d)
(\d{1,2}\.\d{2}\.\d{2}\.\d{4})\s*\/(\d{0,2}\.\d{0,2}\.\d{0,2}\.\d{0,2})\s*\/(\d{0,2}\.\d{0,2}\.\d{0,2}\.\d{0,2})
[0-9]{4,8}\d
^[A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z]$
^(?:[0-9]|1[0-9]2|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]2|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]2|2[0-4][0
(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})
\+[0-9]{1,2}\s?[0-9]{3}\s?[0-9]{4}
^(0[1-9]|1[012])[0-9]{3}[-/.](19|20)\d{2}$
NINO: [A-D]\d{3}[A-D]\d{3}[A-D]\d{3}[A-D]\d{4}
^\d{1,3}[-.]\d{3}[-.]\d{4}$
(?<!\d)(?<![PM])[1-9][0-9]|1[0-2]|[0-9]
^(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})(
^[0-9]{1,2}[0-9]{1,2}[0-9]
[yyyy-MM-dd HH:mm:ss]
(1-10)
(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53
(?<=\b\w+\b)(?=\s|$)
^(?=\d{4}-\d{2}-\d{2}$)(?=\d{2}:\d{2}:\d{2})[\d\s\-]*$
(\d+)\s+(\w+)\s+(\w+)\s+(\w+)\s+(\w+)\s+(\w+)
^(?=.*[a-z])(?=.*[0-9])[a-z0-9]{8,25}$
/^[a-zA-Z][a-zA-Z0-9 ]{0,30}$/
^(?!127.0.0.1)(?!^.*0$)(?!^.*0$)(?!^.*0$)(?!^.*0$)(?!^.*0$)(?!^.*0$)(?!^.*0$)(?!^.*0$)(?!^.*0$)(?!^.*0$)(?!^.*0$)(?!^.*0$)(?!^.*0$
(?i)([a-z]{3})([a-z]{2})([a-z]{1})([a-z]{0})([a-z])([a-z])(
Accurate Australian postal code verification.Australia has 4-digit numeric postal codes with the following state based specific ranges.ACT: 0200-0299 and 2600-2639.NSW: 1000-1999, 2000-2599 and 2640-2914.NT: 0900-0999 and 0800-0899.QLD: 9000-9999 and 4000-4999.SA: 5000-5999.TAS: 7800-7999 and 7000-7499.VIC: 8000-8999 and 3000-3999.WA: 6800-69
[A-Z][A-Z][A-Z][A-Z]
[0-9]{7}
^[0-9]{1,3}[,.][0-9]{1,3}$
[a-zA-Z0-9_]
^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\[\]\{\}\|<>\~\`\{\}\:\;\,\.\,\?\!\:\;\,\,\;\,\;\
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer: (?:\d+(?:\.\d{1,2})?|1[0-9]{1,2}|100)
(\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{2}|\d{2}-\d{2}-\d{4})
The email address must be followed by a period and a domain name.
/^[a-z0-9-_]{1,63}$/i
\d{1,2}\/\d{1,2}\/\d{2,4}
Get the style attribute inner text contained inside " or'caracters with the "style=" prefix.Generate a RegEx for this description. Answer: (\s|^)\w+\s*(?=\s|$)
^[0-9A-Fa-f]{3,6}$
Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators:. - /Valid dates only! m (1-12)/ d (1-31)/ y (0..)(rizzipereira.com.br)For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250Generate a RegEx for this description. Answer: (\d{1,2}\/\d{1,2}\/\d
<h1-6>(\w+-\w+)</h1-6>
[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1
(?<!\d)\d(?!\d)
^([0-9]{1,2}|100|[1-9][0-9]{0,2})$
(?<![^A-Za-z0-9\-_])[A-Za-z0-9\-_]{5,15}
^[0-9]+(,[0-9]+(,[0-9]+)?)?$
^[1-9][0-9]$
(?<![0-9])([0-9]{1,3}(?:\.[0-9]{1,3})?)(?![0-9])
^[0-9]{2}[0-9]{2}[0-9]{4}[-][0-9]{4}$
^[A-Z]{2}[A-Z]{2}$
[a-zA-Z0-9]*
^[A-F0-9]{3}$
`^[A-Z][a-z]+[A-Z][a-z]*$`
[0-9]{2}[0-9]{2}[0-9]{4}(?:-[0-9]{2}[0-9]{2}[0-9]{4})?(?:-[0-9]{2}[0-9]{2}[0-9]
^[a-zA-Z0-9._-]{5,15}$
(\d{1,2}/\d{1,2}/\d{4})\s*-\s*(\d{1,2}/\d{1,2}/\d{4})\s*-\s*(\d{1,2}/\d{1,2}/\d{4})\
[a-zA-Z]{8}[a-zA-Z]
^[0-9]{1,3}(,\d{3})*$
0-9999999
(?:\d{1,2}:\d{1,2}:\d{2}(?:\.\d{1,2})?|(?:\d{1,2}:\d{1,2}:\d{2}(?:\.\d{1,2})?)(?:\s*(?:am|pm|a.m.)
^(?=.*[1-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9
(\d{3})-(\d{2})-(\d{4})
(?:\d{4}-)?\d{3}-\d{2}
(\S+)
(?i)([A-Z]{2})([0-9]{4})([0-9]{2})([0-9]{2})
``` pythonimport re
(?<!(?<![\d,])(?<![\d,]\.)[\d,]+(?<![\
(0|[1-9][0-9]*|1[0-2])(\.[0-9]*)?
^[a-zA-Z0-9 ]{5,12}$
(?<![0-9])(?<![0-9][0-9])(?<![0-9][0-9][0-9])[0-9]{1,3}(?![0-9])(?<![0-9][0-9][0-9][0-9])[0-9]{1,3
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer:^(https?://)?(.+?)(?:\.html)?$
^[a-z0-9]([a-z0-9-]*[a-z0-9])\.[a-z]{2,3}$
(?<![0-9])[0-9]{1,3}(,[0-9]{3})*(?![0-9])
\d{1,2}/\w{3}/\d{4}
cc[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}
[0-9]{1,5}
Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the. (period) to ensure that no other characters may be used in it's place.Generate a RegEx for this description. Answer:^\d{1,3}(,\d{3})*$
(\d{2}\/\d{2}\/\d{4})(\s|$)
Fred Flintstone, Barney Rubble, Mr. Flintstone, and Mr. Flintstone.
^[0-9]+(\.[0-9]{0,2})?$
(?<=\s)([a-zA-Z0-9_\-\.]+)(?=\s)
^\+?\d{2}\s?\d{3}\s?\d{4}$
https?://(?:www\.)?(?:[a-zA-Z0-9-]{1,63}(?:\.[a-zA-Z0-9-]{1,63})*|www\.)[a-zA-Z0-9-]{1,63}(?:\.[a-zA-Z0-9-]{1,63})*
^\d+(\.\d+)?(?:[eE][+-]?\d+)?$
(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[a-zA-Z\d@$!%*?&]{8,}
^(?:[a-z]?[0-9]{3}[a-z]?)?(?:[a-z]?[0-9]{3}[a-z]?)?[a-z]?
$1 - IP$2 - port
(?<=^[0-9]{10})
^[a-zA-Z0-9 ]+$
ftp_regex = re.compile(r'^ftp\.?$')http_regex = re.compile(r'^http\.?$')https_regex = re.compile(r'^https\.?$')
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()-_=\+\.]).{3,15}$
/^[a-zA-Z]+$/
^[0-9a-fA-F]{3}[0-9a-fA-F]{3}$
Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answer:(?:(?P<day>\d{1,2})\.(?P<month>\d{1,2})\.(?P<year>\d{4}))|(?P<day>\d{1,
(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(
(?<=^[a-z]{2})\s*[A-Z]{1}[a-z]\s*(?=\s*$)
^\d{4}[ ]\d{2}$
(?<!\d)(?<!\.)\d{1,2}%(?!\.)
(\d+\.\d+)|[a-zA-Z]
r'[^a-zA-Z0-9]'.
^(/w|/W|[^&lt;&gt;])+$
^(?P<protocol>http|https)(?P<port>\d+)?(?:\/\/(?P<path>[^\s/?#]*))?$
(?<![-+])(?<![0-9])[0-9]{4}-[0-9]{2}-[0-9]{2}
```python# Regular Expression for date in the format YYYY-MM-DDimport repattern = r'\d{4}-\d{2}-\d{2}'```
[^0-9]*[0-9][0-9][0-9][0-9][0-9][0-9][0-9]$
[0-9]{5}[ -]?[0-9]{4}
A(?P<prefix>[A-Z])(?P<zone>[0-9]{1,3})(?P<suffix>[0-9]{1,3})(?P<prefix_suffix>[A-Z]{1,3})
AAN NAA|AANA NAA|AANN NAA|ANA NAA|AANN NAA
`^#.*$`
^(?:\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2}\/\d{1,2}\/\d{3})$
\b[A-Za-z ]+\b
^(0[1-9]|1[012])[0-9]{2}:[0-9]{2}:[0-9]{2}( am| pm| AM| PM| AM| PM| AM| PM| AM| PM| AM| PM| AM| PM| AM| PM| AM| PM| AM| PM| AM| PM
-?[0-9]{1,2}(?:\.[0-9]{1,2})?
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8}$
^\s*(?:\d+\s*[a-zA-Z]*\s*\d+)\s*#\s*(?:\d+\s*[a-zA-Z]*\s*\d+)\s*$
\d{2}:\d{2}:\d{2} (00:00:00 to 11:59:59)
(^(?=.{8})(?=\d{1})(?=\d{1})(?=\d{1})(?=\d{1})(?=\d{1})(?=\d{1})(?=\d{1
[yyyy-mm-dd hh:mm:ss]
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: ^(?=\+91)(?=\d{3}-\d{3}-\d{4})(?=\d{3}-\d{2}-\d{2})(?=\d{4}-\d{4}-\d{4})[\+\d]?\d{9}$
(?P<month>\d{2})-(?P<day
(?<!\.)(?<!\.)[1-9]\d*(?:\.\d{1,3})?(?!\.)
(?<!\d)(?<![A-Z])[A-Z](?<![a-z])[a-z]{1,3}
.*
^[0-9]{7,10}$
This expression is an attempt to match the most obvious features of a valid date in American/US format of the form mm/dd/yyyy for any year 1900 through 2003. It can easily be adapted for different date ranges. It matches any date where the day part is any number 01-31, the month part is any number 01-12, and the year part is any number 1900-2003. The only invalid dates that it matches are ones where the day part may be in the range 01-31 but that range might not be valid for the specified month. An example of an invalid date that it would allow to pass through is
r'^(CAS|EC|SO|SO3)_\d{3}$'
Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answer:^(?:(?:19|20)\d{2}(?:0|1)?)$
(?<comment>//.*)(?<region>/*.*\*/)(?<arg>\#.*)
/(?<=\s|^)(?:[^\s\w]|\w{3,})[^\s\w]/g
Matches times seperated by either : or. will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.Generate a RegEx for this description. Answer:(^[0-9]{1,2}[-:]?[0-9]{1,2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{4}$|^[0-9]{1
(03/24/2021) and (04/15/2021)
[^0-9A-Z]{2}[0-9A-Z]{2}[0-9A-Z]{2}[0-9A-Z]
^[A-Z]{2}[1-9][0-9]$
var date = "12/31/2012";var regex = new RegExp(/^\d{4}-\d{2}-\d{2}$|^\d{4}-\d{2} \d{
[ATU]{1}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]
match string between chars'' as in source codeGenerate a RegEx for this description. Answer: (?<=^|\s)([a-zA-Z0-9_]+)
^[a-zA-Z\d\W]{1,30}$
ATU\d{6}[A-Z]{2}[0-9]{3}
(?i)^(?:[a-z]{2,3}\s)?[a-z]{3,5}$
^(?:\d{4}-\d{2}-\d{2})?(?:(?:\d{1,2}(?:\.\d{1,2})?|(?:\d{1
[^a-zA-Z0-9]{32}-[^a-zA-Z0-9]
\b[A-Za-z0-9\- ]{1,30}\b
[^0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]
/^[0-9]{8}$/
\d{1,2}(?:\.\d{1,2})?
(\d{1,2}\.\d{1,2})
(\d{1,2}\.\d{0,2})?
\b(900|800|700|600|500|400|300|200|100|90|80|70|60|50|40|30|20|10|9|8|7|6|5|4|3|2|1)\b
0.00 - 0.25
(?:[0-9]|[1-9][0-9]|1[0-2]|2[0-4][0-9]|25[0-5])
hh:minmin:ssGenerate a RegEx for this description.
A-F: (?<![A-F])[A-F]{1,3}|(?<![A-F])[A-F]{4,6}|(?<![A-F])[A-F]{7,9}|(?<![A-F])[A-F]{10,}
[0-9]{1,3}(?:\.[0-9]{1,3})?(?:\.[0-9]{1,3})?
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer:^(http|https)://[a-zA-Z0-9-_/.]+\.[a-zA-Z0-9-_/.]+$
^(?=.*[1-9]$)[1-9][0-9]*$
[^0-9]\d{3}
(?<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(?<port>\d{1,5})
^(?:\d{1,2}(?:,\d{1,2}){1,2})?(?:\.\d{1,2})?$
Get the style attribute inner text contained inside " or'caracters with the "style=" prefix.Generate a RegEx for this description. Answer: \s*style="(.*?)"
\d{3}-\d{2}-\d{4}
^(?:[+31]|[+31]0|[+31]\(0|0\)|0\(0\)|0031) \d{9}$
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer: [a-zA-Z0-9]
(?<!GB)(?!GB)([A-Za-z]{3})
(\d{1,2})\s*(:\d{2})?(\s*(am|pm))
^\(?[1-9][0-9]{2}\)?[-.\s]?[1-9][0-9]{2}[-.\s]?[1-9][0-9]{4}$
^\d{10}\.(\d{0,2}$)
^(?:\d{8}|\d{9}|\d{0,9})(?:\s|$)
^(https?://)?(www\.)?(www\.)?[a-z0-9-]+\.[a-z]{2,3}$
(?<!GB)(?![a-zA-Z0-9]{3}[a-zA-Z0-9]{3}[a-zA-Z0-9]{3}[a-zA-Z0-9]{3}[a-zA-Z0-9]{3}[a-zA-
(?<!^)(?<!^\.)[a-zA-Z0-9]+(?<![a-zA-Z0-9-])[a-zA-Z0-9]+(?<![a-zA-Z0-9-]\.)[a-zA-Z0-9]+(?<
\d{3}\.\d{3}\.\d{3}
(?<![\w-])(?<![\w-])(?![\w-])(?![\w-])(?![\w-])(?![\w-])(?![\w-])(?![\w-])(?![\w-])(?![\w-])(?![\w-])(?![\w-
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: [0-9]{2}:[0-9]{2}:[0-9]{2}
^(?:\d{2}[-\s]\d{2}[-\s]\d{4}[-\s]\d{4}[-\s]\d{4}[-\s]\d{4}[-\s]\d{4}[-\s]\d{4})$
(?i)(?<![a-zA-Z0-9, ])(?<![a-zA-Z])(?<![0-9])[a-zA-Z0-9, ]+(?<![a-zA-Z])(?<![0-9])[a-zA-Z0-9, ]+(?<![a
[a-zA-Z ]{2,}
This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answer: \d{5}
^[0-9]{1,7}(?:\.[0-9]{1,9})?$
^\d+\.\d\d$
[a-zA-Z0-9\.\-\_\s]+
^[a-zA-Z0-9]*[a-zA-Z0-9_]*$
^\(?\d{2}[\s-]?\d{3}[\s-]?\d{4}$
a.1*b, a.2*b, a.3*b, a.4*b, a.5*b, a.6*b, a.7*b, a.8*b, a.9*b.
[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2
`^[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]{8,20}$`
^(\d{1,2})\s*:\s*(\d{1,2})\s*$
/^#+[^#]*$/
(?<![\d.])(?<![\d.])(\d{0,2})(\d{0,2})(?!\.)
```pythonimport re
Allows letters,numbers,hyphens,periods and underscores. Such as : Aa.Aa.Aa,.Aa.Aa., -Aa-Aa-, _Aa_Aa_, Aa_Aa_Aa, Aa-Aa-Aa,., -, _I was asked by my client for this scenario to allow letters,numbers,hyphens,periods and underscores in User ID field in web application.Generate a RegEx for this description. Answer: [A-Za-z0
^(?=.*[1-9]\.)[0-9]*[1-9]\.[0-9]+$
Allows letters,numbers,hyphens,periods and underscores. Such as : Aa.Aa.Aa,.Aa.Aa., -Aa-Aa-, _Aa_Aa_, Aa_Aa_Aa, Aa-Aa-Aa,., -, _I was asked by my client for this scenario to allow letters,numbers,hyphens,periods and underscores in User ID field in web application.Generate a RegEx for this description. Answer: \w\w\w\w\w
^[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{3}$
^\s*\d+\s*\((\d+)\)\s*(?:\s*#\s*)?\s*(?:\s*\|\s*\d+\s*\|\s*\d+\s*\|
^(7[8-9]|8[1-9]|9[1-9])[0-9]{10}$
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
[Insert your answer here]
(?<!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w)(?!\w
[0-9]{5}-?[0-9]{4}
Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answer:^\d{4}-\d{2}-\d{2}$
(?<hour>\d{1,2})(?<minute>\d{2})(?<second>\d{2})
0?1-31
\b(?:(?:[^\s\w]|_)+\s+|\s+[^\s\w]|_)+\b
\d{5}(?:-\d{4})?|\d{5}(?:-\d{4})?|\d{5}(?:-\d{4})?|\d{5}(?:-\d{4})?|\d{5}(?:-\d{4}
(\d{1,3}(\.\d{1,3})?|\d{1,3})
(?<=\[)(?P<tag_name>\w+)\](?=\s)(?P<attribute>\w+)\s
<td[^>]*>(.*)</td>
https?://[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+\.[a-zA-Z0-9-.]+
[0-9]{2}[-][0-9]{2}[-][0-9]{4}
[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}
/^[a-z][a-z]\s[a-z][a-z]$/i
(\d{1,3})(\d{1,3})(\d{1,3})(\d{1,3})
(DD/MM/YYYY OR DD/MM/YYYY HH:MM:SS)
\1(\d{4})\2(\d{1,2})\3
(?<!\d)\d{4}-\d{2}-\d{2}-\d{2}
^(?=.*[0-9])(?=.*[.,])(?=.*[0-9]{1,2})(?=.*[.,]{1,2})(?=.*[0-9]{1,2}$).{1,20}$
([0-9]{8}|[0-9]{9}|[0-9]{10})
^(?:(?P<year>\d{4})-(?
[^\d]{1,3}[^\d]{1,3}[^\d]{1,3}[^\d]{1,3}[^\d]{1,3}[^\d]{1,3}[^\d]{1,3}[^\d]{1,3}[^\d]{1,3}[^\
^(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]{2}|2[0-4][0-9
(?<=\/\/).*?(?=\*/)
^[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$
^(?!SEP)(.*)(?:SEP|$)
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z]).{8,25}$
[0-9]|1[0-2]|3[01]|4[0-3]|5[0-9]|6[0-2]|7[0-9]|8[0-9]|9[0-9]|[1-9]|[1-9][0-9]|[2-9]
[\d{3}\.\d{3}\.\d
^[+]?
[0-9]{1,2}\.?[0-9]{1,2}
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer: [0-9]{1,99}(\.5)?
(\d+)(\.\d+)?(,\d+)
a|b
^(?=\d{4}-\d{2}-\d{2}$)(?=\d{2}:\d{2}:\d{2}$)(?=\d{2}:\d{2}:\d{2}$)(?=
0-49151
[0-9]{1,2}%
(?<![0-9])[0-9]{3}|(?<![0-9])[0-9]{2}|(?<![0-9])[0-9]{1}
^(?:\d+(?:\.\d+)?|\.\d+)([eE][+-]?\d+)$
[^a-z0-9@\s]+
r'^#.*$'
0x[0-9a-fA-F]
/^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d{4}$/
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer: '^[0-9a-zA-Z]{3}[0-9a-zA-Z]{2}[0-9a-zA-Z]{3}$'
/^[+-]?\d+(\.\d+)?$/
^(?:\d+\.\d*|\d+)(?:\+\d+)?$
[^0-9]\d*
(?<=\d{1,2})(?=\d{3})[\+2-9]\d{3}(?:\d{3})?[\+2-9]\d{1,3}(?:\d{1,3})?[\+2-9]
(?P<days>\d{1,2}d)(?P<hours>\d{1,2}h)(?P<minutes>\d{1,2}m)
^[^\s]+$
^192\.168\.0\.17-192\.168\.0\.32$
^[A-Z][a-z]+[A-Z][a-z]+$
^\d{1,2}[, ]?\d{4}$
\b[^\s\W]{1,2}\s\S{1,2}\b
[0-9]{4}[0-9]{3}[0-9]{2}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1
^(?:[01]\d{1}|[0-9]{2}|[1-9]{1}|[0-9]{5})\d{8}$
$\d{1,3}(,\d{3})*(\.\d{0,2})?$
(^[0-9]{4}[0-9]{2}[0-9]{2}$|^[0-9]{4}[0-9]{3}[0-9]{2}$|^[0-9]{4}[0-9]{2}[
(?<![0-9])(?=(?:[0-9]{1,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2
^[0-9]{4}/[0-9]{2}/[0-9]{4}
/^https?://[^\s]+\.\w+$/
/^http://aspalliance\.com/([0-9]+)/.
^(?:0|[1-9]\d|1\d\d|2[1-9]|22[0-3])\.(?:0|[1-9]\d|1\d\d|2[1-9]|22[0-3])\.(?:0|[1-9]\d|1
^[0-9]{5}-?[0-9]{4}-?[0-9]{3}-?[0-9]{2}-?[0-9]{1}$
[^'\s]
[a-zA-Z0-9_.]+
(\d+\.\d*[1-9]\d*|[1-9]\d*\.\d+[1-9]\d*|[1-9]\d*\.\d+[1-9]\d*|[1-9]\d*\.\d+[1-9]\d*|[
\b(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Za-z])\w+\b
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer: ^[a-zA-Z0-9]{2,3}$
^(?P<state>[A-Z]{2})(?P<county>\d{1,2})$
\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?
^[a-zA-Z][a-zA-Z0-9]*$
[^0-9]*
(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s*-?\s*\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z]).{6}$
^9792[0-9]{14}$
/^-?(?:\d+(?:\.\d{0,2})?|\.\d+)([eE][+-]?\d+)$/
^[0-9]{3}[-\.\s]?[0-9]{4}$
This regular expression is intended to limit numeric entries by allowed places before and after the decimal point. It also recognizes whole numbers. In this example the value cannot exceed 99999.999. To change the range, simply edit the numbers in curly braces. For example, to allow 7 digits (millions) before the decimal point, change both instances of {0,5} to {0,7}. Likewise, to change the decimals from allowing thousandths (3 digits) to just hundreths, change the {0,3} to {0,2}. This can be useful for numeric fields in SQL. This expression
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{4,8}$
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer:^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[-_.])(?=.*[a-zA-Z0-
\w+\.xls
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(2000|2001|2002|2003|2004|2005|2006|2007|2008)\/(0[1-9]|1[012])\/(0[1-9]|[12][0-9
^(\d{2}):(\d{2})$
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d{4}$
(\d{1,2}[-/.]\d{1,2}[-/.]\d{4}).*
^[a-z0-9][a-z0-9-]{0,20}@[a-z0-9][a-z0-9-]{0,20}$
(?:\d+[a-zA-Z]{2}\d{2})+
/^[+-]?\d*\.?\d*(e[+-]?\d+)$/
/^(0[1-9]|1[012])-(0[1-9]|1[012])-([0-9]{4})-([0-9]{2})-([0-9]{2})$/
\d{1,3}\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
(?<=^|\s)([a-zA-Z0-9_]+)[\s,]*(?=\s|$)
\b(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\d{2}[,.]\d{4}\b
[0-9]{3}[ -]?[0-9]{3}[ -]
^(?:\d{1,2}(,\d{3})*|\d{1,2}(\.\d{2})?|\d{1,2}(\.\d{1,2})?)(?:\,\d{3})?$
.*?[^a-zA-Z]
[a-z][a-z]
Applied to a.RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.Generate a RegEx for this description. Answer:
(\d{1,2})\s*:\s*(\d{1,2})\s*
((0|[1-9][0-9]*)%|(1[0-9]|2[0-4]))
(\d{1,2}:\d{2}:\d{2} \d{2}:\d{2} \d{2})
^[0-9]{3}-\d{3}-\d{4}$
This expression is an attempt to match the most obvious features of a valid date in American/US format of the form mm/dd/yyyy for any year 1900 through 2003. It can easily be adapted for different date ranges. It matches any date where the day part is any number 01-31, the month part is any number 01-12, and the year part is any number 1900-2003. The only invalid dates that it matches are ones where the day part may be in the range 01-31 but that range might not be valid for the specified month. An example of an invalid date that it would allow to pass through would
[0-9]{4}\s[0-9]{2}\s[a-zA-Z]{2}
HTML Pattern MatchingPLEASE HELP/&lt;[^&gt;]*&gt;/igThe above pattern is only successful when html tag are simple (they don't include any javascript). This mean that the pattern will fail if something like this is within the tag &lt;input type=button value=test onclick='if(n.value&gt;5)do_this();'&gt;. It will not match the entire open n close sign.How do you write a pattern that will pass all these tag so that the pattern will match from the open to the close of
[^0-9]*(([A-Z]{3})([0-9]{2})([A-Z]{2}))
[0-9]{2}-[0-9]{2}-[0-9]{4}
(0|[1-9][0-9]*|[1-9][0-9]*[0-9])
(?<!\$)(?<!\,)(?<!\.)(?<!\.)(?<
^[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}[0-9]{1,2}$
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?<!\S)word(?!\S)
^[A-D]{1}[0-9]{3}[0-9]{3}$
[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[
^\d{5}-?\d{4}-?
[a-z]{1,}[A-Z]{1,}[0-9]{1,}[!@#$%^&*()_+-=]{1,}[a-zA-Z0-9_]
^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}([25-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
^(?:(?:0[1-9]|1[012])[0-9]|[12][0-9]|3[01])[0-9]{2}(?:[0-9]|[1-9][0-9])$
[1-10]
THE Complex Password Filter Matching 3 of 4 Character catagories:1.) at least 1 upper case character2.) at least 1 lower case character3.) at least 1 numerical character4.) at least 1 special characterIt also enforces a min and max length and works for.Net and script Regex implimentations.Generate a RegEx for this description. Answer:^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#\$%\^&\*\(\)\
\b\d{5}(?:\s|-)\d{4}\b
\d{4}-\d{2}-\d{2}-\d{2}-\d{2}
Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the. (period) to ensure that no other characters may be used in it's place.Generate a RegEx for this description. Answer: (?<!\d)(?<![\d,.])(?<![\d,.])(?<![\d,.])(?<![\d,.])(?<![\d
(8[0-9]|9[0-9]){10}
.*\d{1,2}:\d{2}:\d{2}.*
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer:(?<!\.)\.(?:s\d{0,2})(?:\.part(?:\.rar))?
(?<![A-Za-z0-9-])[A-Za-z0-9-]+(?=\.[A-Za-z0-9-]+)
(?i)(?:[a-z]{3}\d{3}|[a-z]{3}\d{4}|[a-z]{5}\d{3}|[a
"^(?:[0-9]|[1-9][0-9]|1[0-9]2|2[0-4][0-9]|2[0-9]3|3[0-1])[.][0-9]*$"
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(20[0-9]|[1-9]\d|[1-9]\d\d)$
(?<=\s)([a-zA-Z0-9\-\_\.]+)\s(?=\s)
/^[a-zA-Z ]+$/
\d+\.\d+|\d+
\b((?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|[0-9a-fA-F]{1,4}:){1,7}\b
^(0[1-9]|1[012])-(0[1
^(?:\+|-)(?:\d{3}(?:,\d{3})*|\d{3}(?:,\d{3})*\.)\d{3}$
(\d+)\s*[a-zA-Z]\s*(\d+)\s*[a-zA-Z]\s*(\d+)\s*[a-zA-Z]\s*(\d+)\s*[a-zA-Z]\s*(\d+)
(?<area_code>\d{1,3})(?<prefix>\d{3})(?<postfix>\d{4})
(\d{3})\s(\d{3})-(\d{4})
d{1,2}([0-9]{1,2})
(\d+(,\d+)*)([,\s]|$)
\b(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\b
^[1-9][0-9]*|[1-9][0-9]*$
(?i)^(?:(?:[0-9]{4})-(?:[0-9]{2})-(?:[0-9]{2}))(?:\s+[
\d{2}/\d{2}/\d{4} \d{1,2}
^\d{1,3}(,\d{3})?$
[0-9]{0,9}(?:\.[0-9]{0,9})?
(?i)([a-z0-9]{9}|[a-z0-9]{9}[a-z]{3}[a-z]{2}[a-z]{1}[
Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators:. - /Valid dates only! m (1-12)/ d (1-31)/ y (0..)(rizzipereira.com.br)For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250Generate a RegEx for this description. Answer: dd/mm/yyyy or d/m/yy or d/m/yyyy
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:(?<USD>\$[0-9]+(?:\.[0-9]+)?)
^[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{8}$
(?<!\d\d:)\d{2}:\d{2}:\d{2}(?!\d\d:)
^[a-zA-Z0-9_.-]+$
/^[a-zA-Z0-9]*[a-zA-Z0-9]$/
(?<![0-9])([0-9]{1,2}[0
[a-zA-Z]{4,15}_[a-zA-Z0-9_]{1,9}
(?<=^|[^0-9])(?=\d{5}$|[^0-9]$)(?=\s*[-&quot;-&quot;]$|[^0-9]$)(?=\s*[-&quot;-&quot
(?<feet>\d{1,2})(?<inches>\d{1,2})
[Regular expression]
[XX]{3}[.][0-9]{3}[.][0-9]{3}[.][0-9]{3}
(?<![0-9])[0-9]{1,}(?![0-9])
<a href="(amp)">amp</a>
(?:\d{5}\.\d{2})|(?:\d{5}\.\d{2}\.\d{2})|(?:\d{5}\.\d{2}\.\d{2}\.\d{2})|(?:\d{5}\.\d{2}\.\d{2}\.\d{2}\.\d{2})|(?:\d{5}\.\d
(?<![0-9])([0-9]{2}/[0-9]{2}/[0-9]{4}|[0-9]{4}/[0-9]{2}/[0-9]
Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is valid:!#$%^&amp;amp;amp;amp;*-+~/'`|{}@xyz.comSorry looks like this site is mangling the quote and ampersand characters - you'll have to fix that yourself.
var date = new Date(2012,10,30);var regex = new RegExp("^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])$");if(regex.test(date.getFullYear())){
This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answer: ^\d{5}(,\d{5})*$
(?<start>\d{1,2}:\d{2,3}:\d{2,3})\s(?<stop>
[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2
^[1-9]\d{0,2}(?:\.\d{0,2})$
(?i)(?=^[a-z]{4})(?=^[a-z]{7})(?=^[a-z]{4}$)(?=^[a-z]{10}$)(?=^[a-z]{
^[A-Za-z0-9\*\(\)]*$
^(?:(?:\d+)(?:\.(\d+))?)(?:\s*(?:[eE][+-]?\d+))?$
^(0|[1-9][0-9]*)([0-9]*$)
(\b[0-9a-fA-F]{3}|[0-9a-fA-F]{6}\b)
^[A-Za-z0-9]{1,3}\s[A-Za-z0-9]{1,3}\s[A-Za-z0-9]{1,3
^(?=(?:[0-9]{1,3}\.){3}[0-9]{1,3}$)(?=(?:[0-9]{1,3}\.){3}[0-9]{1,3}$)(?=(?:[0-9]{1,3}\.){3}[0-9]{1,3}$)(?=(?:[0-9]{1,3}\
(?<![0-9])[0-9]+(?=\.[0-9]+)
(.*)\.com
The RegEx should match the content-type for a MIME mail message and a non-MIME mail message.
VIN\d{9}-\d{4}-\d{2}-\d{2}-\d{2}
(\d{1,2}:\d{2}:\d{2})(\.\d+)?
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:
Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the. (period) to ensure that no other characters may be used in it's place.Generate a RegEx for this description. Answer: ^(?:\d{1,3}(?:,\d{3})*|\d{1,3}(?:,\d{3})?)$
^[12345]$
^[a-zA-Z0-9-_]{3,20}$
(?<=\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2})\s+(?=\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2})\s+(?=\d{1,2}\.\d{1,2}\.\d
(?<!\.)(?!\.)(?!\.)(?!\.)[^\s]+\b
^\d{1,2}/\d{1,2}/\d{4}$|^\d{1,2}:\d{1,2}:\d{2}(\.\d{3})?$
(?<year>\d{2}(?:\d{2})?|\d{4})(?<month>\d{2}(?:\d{2
^[0-9]{4}-[0-9]{2}-01$
(\d+\s\d+\s\d+\s\d+\s\d+\s\d+\s\d+\s\d+\s\d+\s\d+\s\d+\s\d+\s\d+\s\d+\s\d+\s\d+\s\d+\s\d+\s\d+\s\d+\s\d+\s
var regEx = /^([01]?[0-9]|2[0-3]):([0-5][0-9])$/;
[^a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0
(?i)\b(ICD-10 codeGenerate)\b
(1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|
(?:\d{1,2}[-/.]\d{1,2}[-/.]\d{4}|\d{1,2
(?<![0-9])([3-9][0-9]|[4-9][0-9]|[5-9][0-9]|[6-9][0-9]|[7-9][0-9]|[
^[a-zA-Z0-9]{3}[a-zA-Z0-9]{3}[a-zA-Z0-9]$
^(?:(?:[1-9]|1[012])(?:[0-2])(?:[0-9]|[1-9])(?:[0-9]|[1-9]))?(?:[0-9]|[1-9])(?:[0-9]|[1-9])(?:[0-9]|[1-9])(?:[0-9]|[1-9]))?$
^\+?[0-9]{1,3}[0-9]{1,2}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-
\d{1,2}:\d{2}[APM]\s\d{2}
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(1753|19[0-9]|20[0-9]|21[0-9]|
^(0[1-9]|1[0-2])\/(0[1-9]|1[012])\/(19|20)\d{2}$
(\d{2})([a-zA-Z])(\d{2})([a-zA-Z])(\d{2})
(?P<month>\d{2})/(?P<day>\d{2})/(?P<year>\d{4})
\b(0[1-9]|1[012])\b
\d{3}-\d{2}-\d{4} OR \d{5}-\d{3}-\d{4}
^(?=.*[a-z])(?=.*\d)(?=.{6,}$).*$
^(1[0-9]|2[0-3]):[0-5][0-9]$
(6\d{7})
(^\d{5}\.\d{2}$)
^\$?[0-9]+(,[0-9]*)?(?:\.[0-9]+)?$
\b(?:[A-Za-z0-9._-]+[A-Za-z0-9._-]*[A-Za-z0-9_]*[A-Za-z0-9_]*[A-Za-z0-9_]*[A-Za
^[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z]{2,}$
(\d{2}):(\d{2})T(\d{2}):(\d{2})
[0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]|
[^\d-]{32}\d{32}(-[^\d-]{32}\d{32}
^(?:http|https)://[^\s]+\.[^\s]+/[^\s]+\.[^\s]+\.[^\s]+\.[^\s]+$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[a-zA-Z\s\d]).{8,25}$
^[a-zA-Z0-9 ]{4,32}$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{6}$
^[a-zA-Z0-9]{6}$
^(?=.*[1-9])(?=.*[0-9])[1-9][0-9]{3}(?:,|\.)[1-9][0-9]{3}$
/^([-]?\d{1,3})(,\d{3})*$/
^(?=.*\d)(?=.*[A-Za-z])(?=.*[0-9])(?=.*[#!$%&'()*+,\-./:;<=>?@[\\]^_`{|}~]).{10}$
^([0-9A-Fa-f]{3})([0-9A-Fa-f]{3})([0-9A-Fa-f]{3})$
(?<=\d{1,2}:\d{2}:\d{2})(?=\d{1,2}:\d{2}:\d{2})
^(?=^.{8,}$)(?=^.{0,7}$)(?=^[a-zA-Z0-9_]{0,7}$)(?=^[a-zA-Z0-9]{0,7}$)(?=^[a-zA-Z0-9_]{0,7}$)(?=^[a-zA-Z
Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answer:
var date = new Date(2000, 1, 1)var regex = new RegExp("^(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])/([0-9]{4})/([0-9]{2})/([0-9]{2})
(^\d{3}(?:\s*\d{3})?(?:\s*\d{4})?(?:\s*\d{3})?$)
^(0|[1-9]|1[012])[0-9]{2}:[0-9]{2}:[0-9]{2}$
(\d+\.\d+|\d+|\d+\.\d+|\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\
(?<![0-9])([0-9]{1,2}[-/.][0-9]{1,2}[-/.][0-9]{1,2}[-/.][0-9]{1,2}[-/.][0-9]{1,2})(?![0-9])
^\d{1,3}(?:\s|-|\.)\d{3}(?:\s|-|\.)\d{4}$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6,20}$
\d{1,3},\d{1,3},\d{1,3}
^[^&lt;&gt;!@\#}{$:;)(_^{&amp;*=|'+.
^[a-zA-Z][a-zA-Z0-9-]{6,17}$
^[0-9]{1,3}(, [0-9]{3})*$
^([a-zA-Z0-9\-\.]+)\.([a-zA-Z0-9\-\.]+)\.([a-zA-Z0-9\-\.]+)\.([a-zA-Z0-9\-\.]+)\.([a-zA-Z0-9\-\.]+)\.([a-zA-Z0-9\-\.]+)\.([a-zA
[0-9]{2}[0-9]{2}[0-9]{4}[0-9]|[0-9]{3}[0-9]{2}[0-9]{4}[0-9]|[0-9]{2}[0-9]{3}
\d{2}:\d{2}
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer:^(https?://)?[A-Za-z0-9\-/\.]+$
^[a-zA-Z]$
(?<=\.)[A-Za-z0-9]{2,6}
Allows letters,numbers,hyphens,periods and underscores. Such as : Aa.Aa.Aa,.Aa.Aa., -Aa-Aa-, _Aa_Aa_, Aa_Aa_Aa, Aa-Aa-Aa,., -, _I was asked by my client for this scenario to allow letters,numbers,hyphens,periods and underscores in User ID field in web application.Generate a RegEx for this description. Answer:
Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answer:^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[012])\.([0-9]{4})$
r"\.(jpg|jpeg)$"
\d{1,2}[-/\s]\d{4}[-/\s]\d{2}
^\d{1,2}\.\d{0,2}$
/(.*)\.jpg|.*\.jpeg/.
(?<hour>\d{2}):(\d{2})(?<minute>\d{2}) / (?<hour>\d{2}):(\d{2})(?<minute>\d{2}) / (?<hour>\d{2}):(\d{2})
^[\d\.]+$
[0-9]\.[0-9]{0,1}
03[0-9]{5}
/^[A-Za-z0-9]{1,3}[A-Za-z0-9]{1,3}[A-Za-z0-9]{1,3}[
(1[0-9]|2[0-3])[0-9]{2}
/^(?:[^xx]|(?:[^yy]|(?:[^zz]|(?:[^aaa]|(?:[^bbb]|(?:[^ccc]|(?:[^ddd]|(?:[^eee]|(?:[^fff]|(?:[^ggg]|(?:[^hhh]|(?:[^iii]|(?:[^iv
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer: \b[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0
^[0-9]{1,3}[0-9]{1,3}$
<img\1 /&gt;
(?:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}(?:\.\d{2})?|
r'^(\d{1,2})/(\w{3})/(\d{4})$'
^(?:[01]{1}|[0-9]{1}[0-9]{1}[0-9]{8}|[0-9]{1}[0-9]{1}[0-9]{1}[0-9]
\$?[0-9]{1,3}(,[0-9]{3})*(?:\.[0-9]{2})?
^[a-zA-Z0-9]{1,2}[a-zA-Z0-9]{1,2}[a-zA-Z0-9]{1,2}[
\d{1,2}:\d{2}\.\d{2}
\[\d{3}\.\d{3}\.\
1. Fred Flintstone2. Barney Stinson3. Donald Duck4. Huey Newton
(\w+) (\w+)
(?<=^|\s|\*/)(?<!\s)(.*?)(?=\s|$)
[0-9]{1,2}[%][0-9]{1,2}
[0-9]*(,[0-9]*)*
\d{3}[A-Z]{2}[0-9]{2}
/^[a-zA-Z0-9]{2,}[a-zA-Z0-9]{1,}[a-zA-Z0-9]{1,}[a-zA-Z0-9]{1,}[a-zA-Z0-9]{1,}[a-zA-Z0-9]{1,}[a
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer:$ rarfile.py -i rarfile.rar -f./part01.rar -o./part01.rar.rar
[A-Za-z0-9]{1,}[A-Za-z0-9]{1,}[A-Za-z0-9]{1,}[A-Za-z0-9]{1,}[A-Za-z0-9]{1,}[A-Za-z0-9]{1,}[A-Za-z0-9]{
\b\d{4}[ -]\d{4}[ -]\d{4}[ -]\d{4}\b
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer:^(?=.*[0-9])(?=.*[1-9][0-9]*$)(?=.*[0-9]*[1-9][0-9]*[0-9
(?<!\d)\d{3}(?!\d{9})
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer: [.jpg|.gif]
03(?:[0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9][0-9]|[1-
^[0-9]{4}$
^\d{1,2}(?:[, ]\d{1,2})$
import reopen_time = re.compile(r'\d{2}:\d{2}')close_time = re.compile(r'\d{2}:\d{2}')
(\w+)\s*(?:\+|\-)\s*(?:\w+)\s*(?:\+|\-)\s*(?:\w+)\s*(?:\+|\-)\s*(?:\w+)\s*(?:\+|\-)\s*(?:\w+)\s*(?:\+|\-)\s*(?:\w+)\s*(?:\+
(?=(\w)\1{1,2})(\w{2,})(?=\1)
(?<=\d{1,2}\s)(?<![\s\d]{2})(?![\s\d]{4})[\d\s]{1,3}
[a-zA-Z0-9*]{1,20}
^[a-zA-Z]{1,4}[0-9]{1,10}$
^\d+(,\d{1,2})?$
[\s]*#.*
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@#$%^&+=]).{5,12}$
(0|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-
^[A-Za-z0-9]{2,4}[A-Za-z0-9]{3}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}$
\d{1,2}[-/]\d{1,2}[-/]\d{1,2}
^[0-9]+(,[0-9]+,)*$
(?<![^0-9])0+(?![^0-9])
(?<!\S)(?<!\s\s)(?<!\s\s\s)(?<!\s\s\s\s)(?<!\s\s\s\s\s)(?<!\s\s\s\s\s\s
For a MIME Mail Message, the RegEx should match the content-type of the message. For a Non-MIME Mail Message, the RegEx should match the content-type of the message and the content-type of the message's body.
(?<=\d+)\.(?=\d+)(?<!\d)(?=\d+)(?!\d)(?<!\d)(?=\d+)(
\d{5}\.\d{2}
^(?=.*\d{1,2}:\d{1,2}:\d{1,2})(?=.*\d{1,2}:\d{1,2}:\d{1,2})(?=.*\d{1,2}:\d{1,2}:\d{1,2})(?=.*\d{1,2}:\d{1,2}:\d{1,2})(?=.*\
\s,\s
([0-9]{1,2})([a-z]{1,2})([0-9]{1,2})([a-z]{1,2})([0-9]{1,2})([a-z]{1,2})([0-9]{1,2})([a-z]{1,2})([0-9]{1,2})
(0+)([1-9][0-9]*)([0-9]+)
(6[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9
(^[0-9]{8}$|^[0-9]{7}[0-9]{6}$|^[0-9]{6}[0-9]{5}[0-9]{4}[0-9]{3}[0-9]{2}[0-9]{1}$)
(444)?[0-9]{3}[0-9]{2}[0-9]{4}[0-9]{2}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-
^[a-zA-Z0-9][a-zA-Z0-9\-\.]*[a-zA-Z0-9]$
r'^\d{1,3}(,\d{3})*$'
[\d{1,2}-\d{1,2}-\d{4}]
(?<!\d)(?<!\s)(?<!\d\s)(?<!\d\s\d)(?<!\d\s\d\s)(?<!\d\s\d\s\d)(?<!\d\s\d\s\d\s)(?<!\d\s\d\s\d\s\d)(?<!\d\s\d\s\d\s\d\
^[A-Z]{1}\d{2}[A-Z]{1}\d{3}$
\d{4}-\d{2}-\d{2}-\d{2}
(?<=classname\s*=\s*)(?P<name>.+)
^(0|1)([1-9]|[1-2][0-9]|3[01])$
^[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1
^[a-zA-Z0-9]{4}[a-zA-Z0-9]{4}[a-zA-Z0-9]{4}$
(\d{1,3}\.){3}\d{1,3}
(?<!\d)(?:\d{3}(?:\.\d{3})?|\d{3}(?:\.\d{3})?|\d{3}(?:\.\d{3})?|\d{3}(?:\.\d{3})?|\d{3}(?:\
51[0-9]{14}
(?<!\d)(?<!\.\d)(?<!\d)\d{1,3}(?<!\d)(?<!\.\d)\d{1,3}\.(?!\d)
(?<![0-9])((?:(?<![0-9])(1[0-9]|2[0-8]))|(?<![0-9])(3[0-9]|4[0-9]))
/^[0-9]*(,|\.)[0-9]*(,|\.)[0-9]*$/
\d{1,2}[A-Z]{1,2}[0-9]{6}
(\w+)([^\w\s]+)
#[A-Fa-f0-9]{6}
US 10-Digit Phone number matching.*Requires Area Code*Brackets optional, supports: () and []*seperators optional, supports: - and.*whitespace optionalGenerate a RegEx for this description. Answer: (\d{3}-)?[\d\s-]{3}[\d\s-]{4}
^(?=.*[1-9])(?=.*[0-9])(?=.*[0-9])(?=.*[1-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-9])(?=.*[0-
H:nn:ss or HH:nn:ssGenerate a RegEx for this description.
(?<![\d\.])(?<![\d\.]\d)(?![\d\.])(?![\d\.]\d\d)(?![\d\.]\d\d\d)(?![\d\.]\d\d\d\d)(?![\d\.]\d\d
^[0-9]{1,3}(,[0-9]{3})*$
(?<start>\d{5})(?<stop>\d{5})Blah, blah, blah.;$1 is start;$2 is stop;Generate a RegEx for this description. Answer: (?<start>\d{5})(?<stop>\d{5})Blah, blah, blah.;$1 is start;
^[4]{1,12}[0-9]{3,15}$
[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.?[0-9]{1,2}\.
Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answer:^[0-9]{2}[0-9]{2}[0-9]{4}$
(?<!\d)\(?(\d{3})\)?[-.\s]?(\d{3})[-.\s]?(\d{4})
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer: \.
^[0-9]*\.?[0-9]*$
(\d{1,2})\s*-\s*(\d{1,2})
\d+(\.\d+)?(?:[eE][+-]?\d+)
(?<![0-9])[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer:(^https?://)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)?(www\.)
^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$
^[A-Z][a-z]{1,2}$
^(?:\d{4}-\d{2}-\d{2}(?:\.\d{2})?|\d{4}-\d{2}-\d{2}(?:\
^[a-zA-Z ]{2,}$
(0|[1-9][0-9]{0,2}|[1-9][0-9]{0,3}|[1-9][0-9]{0,4}|[1-9][0-9]{0,5}|[1-9][0-9]{0,6}|[1-9][0-9]
Get the style attribute inner text contained inside " or'caracters with the "style=" prefix.Generate a RegEx for this description. Answer: r"\b(style=\')(.*?)\b"
^[0-9]*[1-9][0-9]*$
^[A-Za-z][A-Za-z0-9-]{5,17}$
0.00-25.00
^(?![a-zA-Z0-9-]{1,2}\.[a-zA-Z0-9-]{1,2}$)\w+@[a-zA-Z
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?<!\w)\b(?:[\w\s]*?\s+[\w\s]*
\b[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}\b
[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0
^(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})$
(\d+\.\d+)
^(?:(?:0[1-9]|1[012])[0-9]{2}(?:[-](?:0[1-9]|1[012
/^[A-Za-z]{5}[A-Za-z0-9-]{8}$/
(?<!^)(?<!\d)4[0-9]{3}(?!\d)
/^[a-zA-Z][0-9]{1,6}$/
(?:[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[
^\d{0,8}\.\d{0,2}$
\b(?:\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,\d+,
[\d/\w/\d\s\w\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d\s\d
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: \b(?:\d{1,3}\.){3}\d{1,3}\b
78754-12aAGenerate
/^\d{1,2}\/\d{1,2}\/\d{4}$/
^(http|https|ftp)://[\w\-\.]+\.[a-z]{2,6}$
^[N|S]\d{1,2}[,\s]\d{1,2}[,\s]\d{1,2}$
```^#.*$```
r'^(0[1-9]|[1-2]\d|3[01])[:0-5]?[0-9]{2}( AM| PM)?$'
grep -E '^[a-zA-Z0-9_\-\.\:]+$'
hh:minmin:ss[0-9]{2}
^[0-9]{4}[-/]?[0-9]{2}[-/]?[0-9]{2}$
\b(Istat Ateco\d{4})\b
(?<![0-9
(\d{1,2}/\d{1,2}/\d{4}|\d{1,2}/\d{1,2}/\d{1,2}/\d{1,2})
^[0-9]{3}[0-9]{3}[0
[^\d]{5}
(?<![0-9])[0-9]{2}/[0-9]{2}/[0-9]{4}|(?<![0-9])[0-9
03\d{4}
Matches NANP requirements for valid telephone numbers in the USA, its territories, Canada, Bermuda, and 16 Caribbean nations.<br>Area code: [2-9][0-8][0-9]<br>Exchange code: [2-9][0-9][0-9]<br>Station code: [0-9][0-9][0-9][0-9]<br>Accepts common phone number separators like parentheses, dash/hyphen, slash, period, and space. Stops matching at any word boundary, including end of line.
^[a-zA-Z0-9._%+-]+@(?:[a-zA-Z0-9.-]+\.)+[a-zA-Z]{2,}$
^(\+?\d{1,3}\-)?(\d{3}[\s\S]*)?(\d{4})$
^6[789]\d{3}$
^(?!')(?!'')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(?!''')(
^(?:\d{1,2}\d{1,2}\/
(\d+)\s*[A-Z]{1}\s*[A-Z]{1}\s*[A-Z]{1}\s*[A-Z]{1}\s*[A-Z]{1}\s*[A-Z]{1}\s*[A-Z]{1}\s*[A-Z]{1}\s*[A-Z]{1}\s*
(?<!\d)(?:\+?\d{1,3}\s?[-\s]?\d{3,4}[-\s]?\d{3,4}[-\s]?\d{3,4}[-\s]?\d{3,
^[A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z
^\d{7}$
(^0\d{6}$|^\d{7}$)
^[^*](Asterisk)?$
\$\d+(,\d{3})*
[^a-zA-Z0-9.\-,]
^[a-zA-Z0-9_.-]+(?:\.[a-zA-Z0-9_.-]+)*$
^(?P<Q1>\d+\.\d+)\s*(?P<radius>\d+\.\d+)$
(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})
(?=.*[0-9])(?=.*[A-Za-z])(?=.*[*])(?=.*[#])
^[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}$
/^[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-
(\d{2}:\d{2})([AP]M|AM|AM|PM)
^([A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer: (?<!\d)\d{1,3}(,\d{3})*(?!\d)
(?<!\d)(?:\d{1,2}|\d{3})(?!\d)
(0[1-9]|1[0-2])[0-9]{3}
(?<=\b\w+ing\b)
[0-9]{2}[0-9]{2}[0-9]{4}
[0-9]{1,2}[0-9]{1,2}
[0-9]{1,3}(?:\.[0-9]{1,3})?(?:\.[0-9]{1,3})?(?:\.[0-9]{1,3})?(?:\.[0-9]{1,3})?(?:\.[0-9]{1,3})?(?:\.[0-9]
^(49).*[0-9]{4}.*[0-9]{4}.*[0-9]{4}.*[0-9]{4}.*[0-9]{4}.*[0-9]{4}.*[0-9]{4}.*[0-9
(?<=\d\s)([A-Za-z]\d)
[0-9]{1,3}[0-9]{1,3
\b(1|2|3|4|5|6|7|8|9|10|11|12)\b
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$
[^A-Za-z0-9]
^[1-9][0-9]{0,7}$
\d+\.\d+[^0-9]?$
^(?:(?:[1-9]\d|1\d\d|2[0-4]\d|20[0-9]|200[0-9]|
^[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}$
Allows letters,numbers,hyphens,periods and underscores. Such as : Aa.Aa.Aa,.Aa.Aa., -Aa-Aa-, _Aa_Aa_, Aa_Aa_Aa, Aa-Aa-Aa,., -, _I was asked by my client for this scenario to allow letters,numbers,hyphens,periods and underscores in User ID field in web application.Generate a RegEx for this description. Answer:^[a-zA-Z0
(\d\d\d\d)-(\d\d)-(\d\d)$
^(0|[1-9][0-9]*)(,|$)
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{1,15}$
(\d{2})(\d{3})(\d{4})
^\s*(?P<exp>\d+)\s*(?P<coef>\d+\.?\d*)\s*(?P<sign>\+|-)\s*(?P<number>\d+(\.\d+)?|\.\d+)(?P<exponent>\d+)?$
^([\(]{1}[0
^[A-Z]{2}$
[^\w\d_]
$,([0-9]{1,2}(,([0-9]{1,2}|\.[0-9]{1,2})(,([0-9]{1,2}|\.[0-9]{1,2}))))
This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.NET :Regex.Replace(Html, "<[^>]*>", string.Empty);Generate a RegEx for this description. Answer: <p>
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer: ^[^/]*(?:[^/]*[^/]*[^/]*[^/]*[^/]*[^/]*[^/]*[
^(?:\d+\.?\d*|\d+)([eE][+-]?\d+)$
(\d{2}/\d{2}/\d{4})(\d{1,2})(\d{2})
\b(0[1-9]|1[012])[0-9]{2}\b
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d ]{8,25}$
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[-]).{3}$
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer: ^[\w.-]+$
Matches times seperated by either : or. will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.Generate a RegEx for this description. Answer:^[0-2][0-9]|[3][0-1][0-9]|[0-2][0-9]|[3][0-3][0-9]|[0-2][0-9]|[3][0-3][0-9]|[
^([01]\d|2[0-3]):([0-5]\d)$
^\d{1,2}\s\d{1,2}\s\d{1,2}\s\d{1,2}\s\d{1,2}\s\d{1,2}\s\
([A-Z]{1,2}[0-9]{4}[A-Z]{1})
^[+-]?[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}$
[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}
\b(0x[0-9a-fA-F]{3}|0x[0-9a-fA-F]{6})\b
(\w+)$
(\w+)\s*"\s*(\w+)"
(^0[1-9]\d{0,3}$|^1[0-9]\d{0,3}$|^2[0-9]\d{0,3}$|^3[0-9]\d{0,3}$|^4[0-9]\d{0,3}$|^5[0-
^(?:(?:(?P<day>\d{1,2})\.(?P<month>\d{1,2})\.\d{4}|(?P<day>\d{1,2})
function isValidName(name) {  var regExp = new RegExp(`^[A-Z][a-z]+[A-Z][a-z]$`, 'i');  return regExp.test(name);}
(?<!\.)\d+(?:\.\d+)?(?:[eE][+-]?\d+)
[0-9]{5}-[0-9]{4}
(^[\+\d]{3}\d{3}$)|(\+\d{3}\d{3}[\+\-]\d{4}$)|(\+\d{3}\d{3}\d{3}\d{4}$)|(\+\d{3}\d{3}\d{3}\
Regex.Replace(input, @"[^a-zA-Z0-9]", "")
^(8[0-9]|9[0-9])[0-9]{10}$
[A-Z]{2}[0-9]{2}
\d{1,5}\.\d{1,3}
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer: ^[a-zA-Z0-9_\-.]+$
[^\s-]{1,15}[\s-]{0,1}[^\s-]{1,15}[\s-]{0,1}[^\s-]{1,15}[\s-]{0,1}[^\s-]{1,15}[\s-]
[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{4}
(?<!\.)[a-zA-Z0-9]{1,3}\.[a-zA-Z0-9]{1,3}(?!\.)
^(?P<month>\d{1,2})(?P<year>\d{4})$
^(0[1-9]|1[012])[ -/](0[1-9]|[12][0-9]|3[01])[ -/](
A0-A1: [0-9]{1,3}[A-Z]{1,3}A0-A2: [0-9]{1,3}[A-Z]{1,2}A0-A3: [0-9]{1,3}[A-Z]{1}A0-A4: [0-9]{1,3}[A-Z]{1}A
(\d{2}/\d{2}/\d{4} \d{1,2}:\d{1,2}:\d{1,2})
\d{1,2}[1-9]
^\d{1,2}(?:\.\d{1,2})?(?:,\d{3})*(?:\.\d{1,2})?$
[Insert RegEx]
^[A-Z][a-z]*$
(?<![\d\.])(?<![\d\.])([+-]?)(?<![\d\.])(?![\d\.])(?![\d\.])
(\d+\*\d+\*\d+\*\d+\*\d+)\*\d+
(\d{3})-(\d{2})-(\d{4})-\d{3}-\d{3}-\d{4}
^[^$]*\$([0-9]*)([,.]?[0-9]*)?$
^[1-9][1-9]\d*(\.\d+)?$
[\w\d\-_\.\(\)]+
(1[ -]?\d{3}[ -]?\d{3}[ -]?\d{4}|\(\d
(\d+)([+-]\d+)
\b(?P<package>\w+)\s+(?P<class>\w+\.)?(?P<name>\w+)\b
This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answer:grep -Eo "[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-f
(\w+)
^(?P<code>[0-9]{3})-(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2})$
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9a-zA-Z])[0-9a-zA-Z0-9]{6,}$
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: \b\w+\b
[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}
100-199
^(00[1-9]|1[0-2]\d|2[0-8]\d|3[01]\d|[1-9]\d|[1-9]\d|
^[-+]?\d*\.\d*[-+]?\d+$
^(?:[0-9]{1,2}?[0-9]|[0-9]{3}[0-9]|[0-9]{4}[0-9])[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{
Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answer: \d{1,2}\.\d{1,2}
^[a-fA-F0-9]{3}$|^[a-fA-F0-9]{6}$
[A-Z]{2}
(?<![\d\.])(?<![\d\.])0*(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[-_]).*$
(?<![0-9])[0-9]{1,2}([/-][0-9]{1,2})?([/-][0-9]
(\d{1,2}/\d{1,2}/\d{4})
\d{2}/\d{2}/\d{4} \d{2}:\d{2}
Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators:. - /Valid dates only! m (1-12)/ d (1-31)/ y (0..)(rizzipereira.com.br)For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250Generate a RegEx for this description. Answer:\d{1,2}\/\d{1,2}\/\d
^[0-9]{4}[ -]?[0-9]{4}[ -]?[0-9]{4}[ -]?[0-9]{4}$
[-+]?[0-9]*\.[0-9]+
/^\d{2}[-\d]{4}$/
(\d+)
[^0-9]\s?[0-9]\s?[0-9]\s?[0-9]\s?[0-9]\s?[0-9]\s?[0-9]\s?[0-9]\s?[0-9]\s?[0-9]\s?[0-9]\s?[0-9]
VIN\s\d{8}[A-Z]\d{4}
\d{1,2}/\d{1,2}/\d{4}[\d\-]\d{1,2}
^(A0|A1|A2|A3|A4|A5|A6|A7|A8|A9|A10)$
(\d{1,2}/\d{1,2}/\d{4} OR \d{1,2}/\d{1,2}/\d{4} \d{1,2}:\d{1,2}:\d{1,2})
(\d{2}-\d{2}-\d{4})
^(6[0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})$
r'amp'
Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answer:/^[1-9][0-9]{3}[0-9]{2}$/
^(?=.*[1346])(?=.*[10])[1-9][0-9]*$
(\d{2}:\d{2}:\d{2}|\d{2}:\d{2}:\d{2})(\s|\.)
\d{1,3}[-\s]?\d{1,3}
^(?P<number>\d{1,3}(?:\.\d{3})?|\d{1,3}(?:\.\d{3})?|\d{1,3}(?:\,\d{3})?)$
(?<!amp)(?<!amp\s)(?<!amp\samp)(?<!amp\samp\samp)(?<!amp\samp\samp\samp)(?<!amp\samp\samp\samp\samp)(?<!amp\samp\samp\samp\samp\samp)(?<!amp\samp\samp\samp\samp\samp\samp)(?<
^(?=.*[0-9])(?=.*[1-9])[0-9]{1,2}/[0-
(?<![0-9])(?![0-9])((?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?
Get the style attribute inner text contained inside " or'caracters with the "style=" prefix.Generate a RegEx for this description. Answer: " (?i)(style=)(.*)"
[^a-zA-Z0-9@.\-_]
(\d{1,3}\.\d{3}|\d{1,3})
Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the. (period) to ensure that no other characters may be used in it's place.Generate a RegEx for this description. Answer: (\\d{1,2}\\s?\\d{1,2}\\s?\\d{1,2}\\s?\\d{1,2}\\s?\\d{1,2}\\s?
[0-9]{1,3}%
This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.NET :Regex.Replace(Html, "<[^>]*>", string.Empty);Generate a RegEx for this description. Answer:
(?<!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB)(?!GB
/(?:\?\w+)/
(hh:mm am|pm)
(?<amount>\d+\.\d{1,3}(e[+-]\d+)?)
\d{6}[7-9]\d{4}
\d{1,2}(?:\d{2})?\s*(?:\d{2})?\s*(?:\d{2})?\s*(?:\d{2})?\s*(?:\d{2})?\s*(?:\d{2})?\s*(?:\d{2})?\s*(?:\d{2})?\s*(?:\
(?<!\()\s*\{(.*?)\}\s*(?!\})
\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b
^[0-9]{1,3}(?:\.[0-9]{1,3})?(?:\.[0-9]{1,3})?(?:\.[0-9]{1,3})?(?:\.[0-9
^[a-zA-Z0-9_.-]{1,63}@[a-zA-Z0-9.-]{1,63}$
BG123456789
\d{1,3}(?:\.\d{3})?(?:[eE][+-]?\d+)
^(19|20)\d{2}-\d{2}-\d{2}$
^[0-9]{3}[A-Z]{2}[0-9]{3}$
[1-12]\d|[1-9][0-9]
ATU\d{5}[\d-]{4}
(\d+(\.\d+)?)(,\s*(\d+(\.\d+)?)?)?
[^\W_]{1,3}[a-zA-Z]{1,3}[^\W_]{1,3}[a-zA-Z]{1,3}[^\W_]{1,3}[^\W_]{1,3}[a-zA-Z]{1,3}[^\W_]{1,3}[a-zA-Z]{
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d{2}$
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer:  ^[a-zA-Z0-9_]*$
Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answer:\d+\.?\d*(?:\.\d+)?
\d{1,2}[\d\s]*[\d\s]*[\d\s]*[\d\s]*[\d\s]*[\d\s]*[\d\s]*[\d\s]*[\d\s]*[\d\s]*[\d\s]*[\d\s]*[\d\s]*
(?P<country>\+2|\+22)(?P<city>\w{3})(?P<phone>\d{3}[-\s]?\d{4}[-\s]?\d{5})?(?P<ext>.\d{1,2
/^\d+\.?\d*$/
\d{2}:\d{2}:\d{2}
^(?![\w\d]*[\.\w\d]*[\.\w\d]*[\.\w\d]*[\.\w\d]*$)(?![\w]
(?<!800)(?<!900)\\d{3}-\\d{3}-\\d{4}
\d{5}
^(?!SEP)([^SEP]+)$
<!--[if!(comment)]--><!--[endif]-->
/(\d{1,2})/(\d{1,2})/(\d{4})/
^(?:(?:19|20)\d{2})?(?:(?:0[1-9]|1[0-2])(?:[0-9]|[
(?<=\")[^"]*(?=\")
/^[+-]?\d+\.?\d*(e[+-]?\d+)?$/
0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9, 0-9
^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[\w\d-])(?=.*[A-Za-z\d-])(?=.*[@#$%^&*()_+\-=\[\]\
[0-9]{1,3}[,][0-9]{3}[.][0-9]{1,3}
^[-\s]{3}\d{3}$
(\d{1,2})\s*(?:\d{1,2})\s*(?:\d{1,2})\s*(?:\d{1,2})\s*(?:\d{1,2})\s*(?:\d{1,2}
^\d{3}-\d{3}-\d{4}$
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: ^[a-zA-Z][a-zA-Z0-9!@#$%^&*-]{6,50}$
```pythonESN_REGEX = r'^[0-9a-f]{10}$'```
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d ]+$
Allows letters,numbers,hyphens,periods and underscores. Such as : Aa.Aa.Aa,.Aa.Aa., -Aa-Aa-, _Aa_Aa_, Aa_Aa_Aa, Aa-Aa-Aa,., -, _I was asked by my client for this scenario to allow letters,numbers,hyphens,periods and underscores in User ID field in web application.Generate a RegEx for this description. Answer:[a-zA-Z0-
^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[\W])[A-Za-z\d\W]{8,}$
(?P<month>\d{1,2})/(?P<year>\d{2,4})
(?<![0-9])[0-9]{4}(?![0-9])
(?<![\d-])[0-9]{3}-(?![\d-])[0-9]{3}-[0-9]{4}
^[0-9a-fA-F]{2}-?[0-9a-fA-F]{2}-?[0-9a-fA-F]{2}-?[0-9a-fA-F]{2}-?[0-9a-fA-F]{2}$
(?:\d+\.\d{2})?(?:\d{1,2})?(?:\d{1,2})?(?:\.\d{2})
[Exercise answer will vary]
\d{1,6}
^(?:\d+\.\d+|\d+|0)(?:\s*[-]\s*\d+)?$
^(\d{8}|\d{9})(\d{0})?$
(?<!\d)\d{0,18}(?:\.\d{0,2})?
1\.0\.0\.0
(?:\d{2}\/\d{2}\/\d{4})(?:\&quot;/\&quot;)?
0(?:\.0*)?
(\s*)(\d{1,3})([a-zA-Z])(\s*)(\d{1,3})
(?<![A-Za-z0-9-\s])[A-Za-z0-9_\s]{3,}
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?{}\[\]])(?=.*[a-zA-Z0-9!@#$%^&*()_+-=?{}\[\]])(?=.*[a-zA
[^0-9]*\s*[0-9]*[,\.]
(?<!\d)(?<![a-z])[0-9]{1,2}[a-z]{1,2}[0-9]{1,2}[a-z]{1,2}[0-9]{1,2}[a-z]{1,2}[0-9]{1,2}[a-z
The RegEx for the date-time format is [^0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.
[0-9]{4}-[0-9]{2}-[0-9]{2}
(?<![^\w\s])([^\s']+'[^\s']+)*
^\s*(?:#.*)?$
THE Complex Password Filter Matching 3 of 4 Character catagories:1.) at least 1 upper case character2.) at least 1 lower case character3.) at least 1 numerical character4.) at least 1 special characterIt also enforces a min and max length and works for.Net and script Regex implimentations.Generate a RegEx for this description. Answer: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^a-zA-Z\d]).{6,20
/^\d{3}-\d{4}$/
\d{2}-\d{2}-\d{4}
^(\d{3})-(\d{3})-(\d{4})$
(^|,)(\d+,)(\d+)(,|$)
^[0-9]{1,3}[-\.\s]{0,2}[0-9]{1,3}$
/^[a-zA-Z0-9\._-]+$&lt;= [a-zA-Z0-9\._-]+$/
^[1346]|[1-9][0-9]*$|[1-9][0-9]*[0-9]$
[0-9]{4}(?:[-/][0-9]{4})?
^(?=\d{1,2}$)(?![a-zA-Z])(?![0-9])(?![a-zA-Z0-9]{2}[a-zA-Z0-9])[a-zA-Z0-9]{1,20}$
Fred Flintstone, Barney Rubble, Lucy Flintstone, and Barney Rubble.
^(?:[1-9]\d|1[012])\/(?:[1-9]\d|0[1-9])\/(?:[1-
(\d{3}\-\d{3}-\d{4}|\d{3}-\d{3}-\d{4}|\d{3}-\d{4}-\d{4}|
(?<=<h1-6>)\w+(?=</h1-6>)
The RegEx pattern should be: ^.{0,20}$
Matches the UK Drivers License format as laid down by the DVLA / dvla. See http://www.govtalk.gov.uk/gdsc/html/frames/default.htm Matches: 1. Must be 16 characters 2. First 5 characters are alphanumeric. 3. Next 6 characters must be numeric 4. Next 3 characters are alphanumeric 5. Last 2 characters are alpha 6. Second character of numeric section can only be 0, 1, 5 or 6. 7. Fourth and fifth characters of numeric section must be in the range 01 to 31.Generate a RegEx for this description.
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer: /(?<path>[^\s/]*)(?<extension>[^\s/]*)(?<extension_number>[^\s/]*)(?<extension_
^\d{1,2}\.\d{1,2}$
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer: (?<=\d{3}\,)\d{3}\,\d{3}\,\d{3}\,
/^[-]?\d+([,.]\d+)?$/
(\d{1,2})\s*((am|pm)?)\s*(\d{1,2})\s*((am|pm)?)\s*(\d{1,2})
[a-zA-Z0-9\s]*
[^0-9]\d{1,3}(,\d{3})*
Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answer: \d\.\d{0,2}
^[a-zA-Z0-9_]{4,8}$
[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}
^(?P<package>\w+)(?P<class>\w+)(?P<ext>\w+)$
(\w+)\s+([\w\s]+)\s+(\w+)
^(?P<start>\d+)\s+(?P<end>\d+)\s+(?P<spacing>\d+)$
^\d{5}(-\d{4})?$|
```pythonfirst_name_regex = r'^[A-Za-z]+(\s[A-Za-z]+)*$'last_name_regex = r'^[A-Za-z]+$'
^(?:(?:\d{1,3}\.){3}\d{1,3})$
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer: ^(.+?)\.jpg$|^(.+?)\.gif$
<img src="(.*?)"/><img src="(.*?)"/><img src="(.*?)"/><img src="(.*?)"/><img src="(.*?)"/><img src="(.*?)"/><img src="(.*?)"/><img src="(.*?)"/><img src="(.*?)"/><img src="(
(?:\+2(?:[0-9]{1,2})?(?:\s[0-9]{1,2})?(?:[0-9]{1,2})?(?:[0-9]{1,2})?(?:[0-9]{1,2
var regEx = /^[a-zA-Z][a-zA-Z0-9_\-]*[a-zA-Z0-9_\-]$/;
^(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2})\s*(?P<dayofmonth>\d{1,2}
(?<!\d)(-?\d{1,3}(?:\.\d{1,3})?)(?!\d)
/<h1-6>(.*?)</h1-6>/
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer:    (?<!\.)\.(?:s[0-9]|r[0-9]|s[0-9]|r[0-9]|s[0-9]|r[0-9]|s[0-9]|r[0-
Dim ipAddress As String = "192.168.1.1"Dim validIP As String = Regex.IsMatch(ipAddress, "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}")
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{1,20}$
The RegEx is (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}).
^\w+$
Matches times seperated by either : or. will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.Generate a RegEx for this description. Answer:
[0-9]{1,3}(?:\.[0-9]{1,3})?(?:\.[0-9]{1,3})?(?:\.[0-9]{1,3})
\b(?P<month>[A-Za-z]{3}\s?[0-9]{1,2}\s?[0-9]{4})\b
[A-Z][a-z]\s*[0-9]{1,2}[a-z]\s*[A-Z]\s*[0-9]{1,2}[a-z]\s*[A-Z]\s*[0-9]{1,2}[a-z]\s*[A-Z
[0-9][0-9]|[1-9][0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]
r'^(jpeg|gif|png)$'
/^[a-zA-Z0-9\s]*$/
(\d{1,3})(\.\d{1,3})?
/[^/]+/
^(?P<year>\d{4})(?P<month>\d{2})(?P<day>\d{2})(?P<hour>\d{2})(?P<minute>\d{2})(?P<second>\d{2})(?P<timezone>\d{2})(?P<time
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer:.*
^(?:(?:0?[1-9])|1[012])\/(?:0?[1-9])\/(?:0?[1-9])\/(?:0?[1-9])\/(?:0?[1-9])\/(?:0?[1-9])\/(?:0?[1
(?<![0-9])(?![0-9])[0-9]{1,2}[:][0-9]{2}[:][0-9]{2}(?![0-9])
(?<w>\d{1,3})(?<d>\d{1,2})(?<m>\d{1,2})
/^[A-Za-z][A-Za-z0-9 ]*$/
(?<=^|[^"])(?:[^"]*"|[^"]*)(?=|$)
(?<!&quot;)(?<!\.)(?<![a-zA-Z0-9])[a-zA-Z0-9](?![a-zA-Z0-9])
\b(?!(xx|yy|zz|...)\b)\w+
(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])\/(19|20)\d{4}
(0?[1-9])|(1[0-2])|(3[0-1])|(4[0-9])|(5[0-9])|(6[0-9])|(7[0-6])|(8[0-9])|(9[0-9])|(10[0-9])|(11[0-1])|(12[0-9])|(13[0-1
(\d{1,2}(?:\d{1,2}\s
^[0-9]{1,2}[0-9]{3}$
\d{2}[:-\d]{3}
[0-9]{3}[-.][0-9]{3}[-.][0-9]{3}
\$\d+(?:\,\d+)?(?:[,\.]\d+)?
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer:(?<![\w\d\.])([\d\.]{1,3})(?![\w\d\.])
A(?<=N)[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-
^\d+(,\d+)?$
(?<Q>\d+)\s*(?<R>\d+)\s*(?<E>\d+)\s*(?<R>\d+)\s*(?<E>\d+)\s*(?<R>\d+)
(?<!\d)(?:\.\d{2})?(?!\d)
[a-zA-Z0-9]{1,100}
[\x20-\x7E]
Can be used to pre-validate strings before calling the TimeSpan.Parse() method in the.Net framework, to ensure that the string can be parsed without throwing an exception. The regex uses capturing groups instead of non-capturing groups so that it can easily be used as a pattern in XML Schema by simply removing the ^$ from the beginning/end.This expression fully checks or enforces the [ws][-]{d|[d.]hh:mm[:ss[.ff]] }[ws] format as described in the MSDN help. It even checks the upper/lower boundaries of
[0-9]{4}[-/]?[0-9]{2}[-/]?[0-9]{2}[-/]?[0-9]{2}[-/]?[0-9]{2}[-/]?[0-9]{2}[-/]?[0-9]{2}[-/]?[0-9]{2}[-/]?[0
/^/
(?<=\()[^()]*(?=\))
^[0-9]{5}$
\(?[1-9][0-9]*[1-9]\)
\.(\w+)(\.(\w+))?
^(?=.*
(?=.{4,8}$)
[A-Z][a-z]{2}
(0\d{1,2}|1\d{1,2}|2\d{1,2}|3\d{1,2}|4\d{1,2}|5\d{1,2}|6\d{1,2}|7\d{1,2}|8\d{1,2}|9\d{1
[$]?[0-9]{1,3}[.]?[0-9]{1,3}[.]?[0-9]{1,3}[,][0-9]{3}[,][0-9]{3}[
[^0-9]*\d[^0-9]*
^(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]{2}|2[0-4][0-
.{1,2}
/^(?:(?:\d{1,2}(?:\s*\/)?\d{1,2})|(?:\d{4}))$/
^[-+]?\d*\.\d+$
^[1-9][0-9]{0,2}$
\d{4}[0-9]\d{2}
^(?=.*[0-9])(?=.*[5])(?=.*[6])(?=.*[7])(?=.*[8])(?=.*[9])[0-9]{5,10}$
\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d
/^[0-9]{3}[0-9]{2}[0-9]{1}$/
^[1-9][0-9]{0,4}(?:\.[0-9]{0,3})?$
(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20)
\b(?=\d{3}[a-zA-Z]{3}[a-zA-Z]{3})\b
^(?=.*[a-z])(?=.*\d)(?=.*[\W])[A-Za-z\d\W]{8,}$
^(6\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})(\d{3})$
^(?P<decimal_part>\d+\.\d+)(?P<integer_part>\d{1,2})(?P<sign>-|+)?$
(0[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])/[0-9]{4}
^\d{3}-\d{3}-\d{4}$|^\
(?<=^| )[A-Za-z0-9_]+(?= |$)
^[4]{12}[1-9][0-9]{1,2}$
(\+91)
[a-zA-Z0-9\.\s]
(\d{2}:\d{2}:\d{2})(\s\d{2}:\d{2}:\d{2})(\s\d{2}:\d{2}:\d{2})
^(?=\d{3}-\d{2}-\d{4}$)(?=\d{3}-\d{2}-\d{4}$)(?=\d{3}-\d{2}-\d{4}$)(?=\d{3}-\d{2}-\d{4}$)(?=\d
Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answer: ^[0-9]{1,2}\.?[0-9]{1,2}$
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: (\d+)
/^[0-9]+$/
/\p{L}+/u
/^[0-9]+(.[0-9]+)+$/
^[a-zA-Z0-9]{1,32}$
(^[+]?[0-9]{1,3}[- ]?[0-9]{1,3}[- ]?[0-9]{1,3}[- ]?[0-9]{1,3}[- ]?[0-9]{1,3}[-
^[A-Z][a-z]{0,3}-[A-Z][a-z]{0,3}$
Regex.Replace(txt, @"[^a-zA-Z0-9\s]+", "")
(\s+)(?=\s+|$)
[0-9]{1,2}[.][0-9]{1,2}
\b(1[01]|[01]\d|\d\b)\b
\W
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: (?<=\+91)(?=\d{3}|\d{3}-\d{4})
(?i)([0-9]{1,2})(?<!\d)([1-9]|[12])(?!\d)
[^"]*
/^\+?[1-9]\d{2}(?:\
/^(?:[1-9]|1[012])\/(?:[1-9]|0[1-9]|[12][0-9
\s,
(?<!\d)(?:\d+\.\d+|\d+\.\d+e\d+|\d+\.\d+e\d+)
(\d+)\.(\d{1,2}|\d{1,2}\.\d{1,2}|\d{1,2}\.\d{1,2}|\d{1,2}\.\d{1,2}|\d{1,2}\.\d{1,2}|
Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answer:^\d+(\.\d+)?$
0\.00[1-9]|100\.00
[\d]{4}-\d{2}-\d{2}T\d{2}:\d{2}:[\d]{2}[\s\S]*
[A-Z]\s*[A-Z]\s*[A-Z]\s*
^[0-9]{1,3}\.\d{1,2}$
(?<![0-9])(?![0-9-])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-
(\d{2}\/\d{2}\/\d{4})
(?i)(?:[a-zA-Z]{1,2}[a-zA-Z]|[a-zA-Z]{3,})
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: ^[a-z][a-z0-9!@#$%^&amp;*]{5,50}$
\b(0|[1-9]\d*|\d*[1-9]\d*|\d*[1-9]\d*[1-9]\d*|\d*[1-9]\d*[1-9]\d*[1-9]\d*|\d*[1
[0-9]{1,3}(,[0-9]{3})*
[1-9][0-9]{0,2}
[a-z0-9, -,., _, %, $, *, +, -, /, =, <, >, =, <, >, =, <, >, =, <, >, =, <, >, =, <, >, =, <, >, =, <, >, =, <, >, =, <, >, =, <, >
US 10-Digit Phone number matching.*Requires Area Code*Brackets optional, supports: () and []*seperators optional, supports: - and.*whitespace optionalGenerate a RegEx for this description. Answer:
^\$[0-9]{0,2}\.[0-9]{0,2}$
^([0-9]{1,2})?([0-9]{3})?([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?([0
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: [0-9]+
[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: (?:\+91)?[0-9]{3}[0-9]{3}[0-9]{4}
\b(?=\d{3}[A-Za-z]{2})\d{3}[A-Za-z]{2}\b
[0-9]{3}-[0-9]{3}-[0-9]{4}
(?i)(?<=\bVisa\b)(?=\s|$)
&quot;[^ ]*&quot;
^03\d{3}[\d\s]*$
[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-
\d{1,2}\.\d{0,2}\.\d{0,2}\.\d{0,2}\.\d{0,2}\.\d{0,2}\.\d{0,2}\.\d{0,2}\.\d{0,2}\.\d{0,2}\.\d{0,2}\.\d{0,2}
match string between chars'' as in source codeGenerate a RegEx for this description. Answer: [^\s]*
/^[2-9]\d{1,2}[- ]?[0-9]{2}[- ]?[0-9]{3}$/
(?<!\d)(1/1/\d{4}|1/1/\d{3}|1/1/\d{2}|1/1/\d{1}|1/1/\d{0}|1/1/\d{0}|1/1/\d{0}|1/1/\d{0}|1/1/\d
(4[0-9]{3}[ -]4[0-9]{3}[ -]4[0-9]{3}[ -]4[0-9]{3})
var str = "  hello  world  ";var regex = new RegExp(/(\s+)(.*?)(\s+)/, "g");var result = str.replace(regex, "$1");
(0[1-9]|[12][0-9]|3[01])/([0-9]{4}|2[0-9]{3}|1[0-9]{2})
^\d{1,2}\/\d{1,2}\/\d{4}$
[0-9]{1,3}(\.|\,|\)|[0-9]{1,3}(\.|\,|\)|[0-9]{1,3}(\.|\,|\)|[0-9]{1,3}(\.|\,|\)|[0-9]{1,3}(\.|\,|\)|[0
^(19|20)\d\d-\d\d-\d\d$
^(http[s]?://)?(?:www\.)?(?:[a-z]{2,6}\.?)+$
(?<![^\d])(?<![-/.])(?<![-/.])(?<![-/.])(?<![-/.])(?
(?<open>\d{1,2}:\d{2})\s+(?<close>\d{1,2}:\d{2})
(?i)(^[a-zA-Z]{2}[0-9]{9}[a-zA-Z]{2}[0-9]{2}[a-zA-Z]{2}$)(?i)
^(?:\+)?((1[0-9]|2[0-9]|3[0-9]|[0-9
\d{1,2}:\d{2}(?:[ap]m)?
^[0-9]{1}[0-9]{3}[A-Z]{1}$
[0-9]{1,2}[a-z]{1}[0-9]{1}[a-z]{1}[0-9]{1}[a-z]{1}[0-9]{1}[a-z]{1}[0-9]{1}[a-z]{1}
\d+(?:\.\d{1,2})?
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer:^[a-zA-Z0-9._-]+$
/^[a-zA-Z0-9-_\.]{1,63}$/
0?1-31[0-9]
(0|[1-9][0-9]{0,9}|49151)
(N|E):[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,4}
\d{2}/\d{4}
[a-zA-Z0-9_]+
(1[012]|[1-9]\d|0[1-9]|1[012])[-/]\d{4}
OGRN = (1[0-9]{1,2}|2[0-9]{1,2}|3[0-9
\d{1,2}\.\d{1,2}\.\d{4} or \d{1,2}\.\d{1,2}\.\d{3} or \d{1,2}\.\d{1,2}\.\d{3}
^[0-9]{1,2}:[0-9]{2}:[0-9]{2} [A-Z]{3}$
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<![\w\d\s])[\w\d\s\-\_]+[\w\d\s\-\_]+[\w\d\s\-\_]+[\w\d\s\-\_]+[\w\d\s\-\_]+[\w\d\s\-\_]+[\w\d\s\-\
^(?=.{1,60}$)(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[:])[0-9]{1,2}:[0
[A-F]{1,2}|[+-]?[0-9]{1,2}
^[+-]?\d+$
^(?:\r\n|\r|\n|\r\n)+$
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer: ^\$?[0-9]{1,3}(,\d{3})*(\.\d{1,2})?$
/^(0[1-9]|1[0-2])\/(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|[12][0-9]|3[01])$/
^[+]?(?P<prefix>[+]?31)?[0-9]{9}$
\b(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s\d{1,2}\s\d{4}\b
(?<![0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]
(/\*|/\*[\s\S]*?\*/|/\*[^*]*?\*/|/\*[^/]*?\*/|/\*[^/]*?\*\*/|/\*[^/]*?\*/|/\*[^/]*?\*\*/|/\*[^/]*?
Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators:. - /Valid dates only! m (1-12)/ d (1-31)/ y (0..)(rizzipereira.com.br)For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250Generate a RegEx for this description. Answer: /^(0[1-9]|1[012])\/(0[1
(?<![0-9])(?<![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0-9])(?![0
(?<![0-9])([0-9]{3})(?!
^[0-9]{1,3}\s?[0-9]{3}[-\s]?[0-9]{3}$
[\$\,]
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: (?<!^)(?=[A-Z])(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?
\d{3}(?:-?\d{3})?
^(?:0|[1-9]\d?|1\d\d|2[0-4]\d|25[0-5])$
(?<!\d)\d+(?:\.\d+)?(?!\d)
[^\d\W]*\s[^\d\W]*\s[^\d\W]*\s[^\d\W]*\s[^\d\W]*\s[^\d\W]*\s[^\d\W]*\s[^\d\W]*\s[^\d\W]*\s[^\
^(0[1-9])|(1[0-2])|(2[0-3])|(3[0-1])|(4[0-9])|(5[0-9])|(6[0-9])|(7[0-9])|(8[0-9])|(9[0-9])$
[0-9]{1,2}[0-9]{3}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{3}[0-
(?:(?<=\s*[\d\.]+\s*\s*)(?<!\d)(?:(?<=\s*[\d\.]+\s*\s*)(?<!\d)(?:(?<=\s*[\d\.]+\s*\s*)(?<!\d)(?:(?<=\s*[\d\.]+\s*\
\b(1[0-9]|[1-9]\d|[1-9]\d\d|[1-9]\d\d\d)\b
^\[(.*)\]$
(?=.*[a-z])(?=.*[0-9])
(0[1-9][0-9]|1[0-2][0-9]|2[0-4][0-9]|25[0-5])
(?<![a-zA-Z0-9_])([A-Za-z0-9_])(?![A-Za-z0-9_])
match string between chars'' as in source codeGenerate a RegEx for this description. Answer:
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[.])(?=.*[-])[0-9.]+$
(?<month>\d{1,2})-(?<day>\d{1,2})-(?<year>\d{4})
A[KNNW]\d{1,3}
/^[^\s]*\s*#.*$/
(?<!\d)(?<![-\s])(?<![-\s])(?<![-\s])(?<![-\s])(?<![-\s])(?<![-\s])(?<![-\s])(?<![-\s])(
^(?:\d{1,7}|[0-9]{1,9})((?:,|$))?$
\d+,\d+
^(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Za-z])[A-Za-z0-9]{13}$
/^\d{1,7}(\.\d{1,9})?$/
\b[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}\b
\b[^\s\d]*\b
\d{1,2}:\d{2}[AP]M
^(?!\.)(?:[0-9]{1,3}\.){3}[0-9]{1,3}$
\b[0-9a-fA-F]+\s\b
[0-9]{1,3}[,][0-9]{1,3}
\d{2}[.]\d{3}[.]\d{3}
(?<!\d)\d{2}-\d{4}-\d{4}(?!\d)
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer: (?![^A-Za-z0-9\-\.]+\.[^A-Za-z0
^(0[1-9]|1[012])[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}$
The RegEx for this description is GIR 0AA.\d{2}(?:\d{3})[A-Z]?
^[0-9]{1,7}(\.0+)?$
(?<!\S)(?<![\r\n])[^\r\n]*(?<![\r\n])[^\r\n]*
(\d{1,2})(:\d{2})?
[^0-9]{1,3}\-?[0-9]{1,3}\-?[0-9]{4}
^(0[1-9]|1[012])[a-z]{3}[0-9]{2}[a-z]$
^\+?([0-9]{1,2}\s)?([0-9]{3})([0-9]{3})?([0-9]{3})?([0-9]{3})$
\d{3}[a-zA-Z]\d{3}
^(?:http|https)://[a-z0-9\-_\.\+]+(?:\.[a-z0-9\-_\.\+]+)+\.[a-z]{2,3}(?:\/[a-z0-9
[^a-zA-Z0-9-_]
Regex.Replace(txt, @"[^a-zA-Z0-9]", "*")
^[a-zA-Z]{1,4}[.][a-zA-Z]{1,4}$
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: (\d+)([^\d]|$)
[0-9]{3,4}[0-9]{3,4}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[
/^[0-9]{0,2}(?:\.[0-9]{0,2})?$/
(\d+)\.?\d*
(?<month>\d{2})-(?<day>\d{2})-(?<year>\d{4})
/^(/w|/W|[^&lt;&gt;])+$/
(?<=\d)(?:\.\d+)?(?:\s*(?=\d))
\d{3}-\d{2}-\d{4} OR \d{3}-\d{2}-\d{6}
^[a-zA-Z][a-zA-Z0-9_]*$
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer: ^(?:\d{1,3}(?:\.\d{3})?|\d{1,3}(?:\.\d{2})?
(?<=\")[^"]*\")
^(?:Solo|Switch|Maestro)([A-Za-z0-9]{4})(?:International|[A-Za-z0-9]{3})(?:Safe|[A-Za-z
^([01]?[0-9]|2[0-3]):[0-5][0-9]$
0(?:\.\d{1,2})?
\b(?:(?:[1-9]\d|1[0-2])(?:[0-9]{2})?[0-9]{4})\b
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19[2-9]|20[0-9]
(\d{1,2}):(\d{2})$
\(?[0-9]{3}\)?[ -]?[0-9]{3}[ -]?[0-9]{4}
(?<![0-9])([+-]?)(?<![0-9])[0-9]{3}(?![0-9])
(^[0-9]{1,2}[-]?[0-9]{1,2}[-]?[0-9]{1,2}[-]?[0-9]{1,2}$)
(?<=\d{4}/\d{2}/\d{2})\d{2}-\d{2}-\d{4}
^[a-f0-9]{3}$|^[a-f0-9]{3}[a-f0-9]{3}$
`^[A-Za-z0-9\s-]*$`
^[a-zA-Z0-9_]{1,15}$
(0|[1-9]|[1-9][0-9])[0-9]*[A-Z]?[0-9]*[A-Z][0-9]*[A-Z][0-9]*[A-Z][0-9]*
(ESN)^[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9
^\d{3}(\d{2})?$
(?<!\d)(\d{1,2})(?:\s|\,|\-|\.)(\d{4})
The RegEx for the description "the date and time of a specific event" is "(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})(\d{2}:\d{2}:\d{2})(\d{2}:\d{2}:\d{2})".
(00)([0-9]{1,3})([ -])([0-9]{1,3})([ -])([0-9]{1,3})([ -])([0-
[A-Za-z]+
\(?\d{3}\)?[- ]?\d{3}[- ]?\d{4}
^\d{3}[- ]\d{3}[- ]\d{4}$
^(\d{1,3}-)?(\d{1,3}-)?(\d{1,3}-)?(\d{1,3})$
^[A-F0-9]{1,4}[A-F0-9]{1,4}[A-F0-9]{1,4}[A-F0-9]{1,4}$
^(?=.*[0-9])(?=.*[A-Z])(?=.*[0-9])(?=.*[$])[0-9]{4}[A-Z]{1}[0-9]{3}[
^0?[1-9]|1[0-2]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]$
(\d+.\d+)
(?:[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9
^[a-zA-Z0-9]{1,3}\.[a-zA-Z0-9]{1,3}$
\b[A-Za-z_][A-Za-z0-9_]{0,30}\b
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[a-zA-Z\d@$!%*?&]{8,}$
^(?!.)[a-zA-Z0-9\-\.]{0,63}[a-zA-Z0-9\-\.]{0,63}$
r"^(?P<section1>[A-Za-z0-9-]{3,4})(?P<section2>[A-Za-z0-9-]{3,4})(?P<section3>[A-Za-z0-9-]{3,4})(?P<section
Regex to validate strong password for.NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.Generate a RegEx for this description. Answer: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{7
(\d{4})([a-zA-Z]{2})
\b[A-Z][a-z]*[A-Z][a-z]*\b
^[A-Za-z\s]{1,20}$
^(?:[a-zA-Z0-9\-_\.]+\.)+[a-zA-Z0-9\-_\.]+[a-zA-Z0-9\-_\.]+\.[a-zA-Z0-
^(?P<exp>\d+)(\.\d+)?$
D.MM.YYYY or DD.MM.YYYY or DD.MM.YYYY or DD.MM.YYYY
var dateFormat = /^(?P<month>Jan|Feb|Mar|Apr|May|Jun|Jul|Aug
(?<start>\d{2}:\d{2}:\d{2})(?<stop>\d{2}:\d{
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(2000|2001|2002|2003|2004|2005|2006|2007|2008)$
0(?:\d|\.)\d{3}(?:\.\d{3})?
[a-zA-Z0-9]{8,25}
(?=^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$)(?=^[a-f0-9]{8}-[a-f0-9]{4}
^(\/|\.)[^_\-\.]*$
(?<![0-9])(?<![-])[0-9]{1,3}[-0-9]{1,3}[0-9]{1,3}(?<![0-9])
^0[1-9]\d{2}(?:[-.]0[1-9]\d{3})?[-.]0[1-9]\d{3}[-.]0[1-9]\d{4}$
^([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2}$
(?<!\d)0(?!\d)
/^\d{3}-\d{2}-\d{4}$/
(^[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*$)
^[a-zA-Z0-9_]{8,20}$
^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[12][0-9]|3[01])([0-9]{2})([0-9]{2})([0-9]{4})$
^\$?[0-9]{0,3}(,\s*[0-9]{3})*(\.\d{1,2})$
^[a-zA-Z][a-zA-Z0-9_]{3,15}$
[a-zA-Z0-9]{3}[a-zA-Z0-9]{4}
(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z)
^(?!0)(?!\.)[0-9]+$
^([0-9]{1,2}[- ]?[0-9]{1,2}[- ]?[0-9]{1,2}[- ]?[0-9]{1,2}[- ]?[0-9]{1,2})$
(^[A-D]\d{2}$|^[A-D]\d{3}$)
(?<=\d{3}/\d{3})\d{4}
^(0[1-9]|1[0-2])[0-9]{2}:[0-5][0-9]$|^0[1-9]|1[0-2] [0-9]{2}:[0-5][0-9]$|^0[1-9]|1[0-2] [0-9]{2
(\d+\.\d+|\d+\.\d{1,2}|\d+\.\d{2,3})
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:(?<currency>\$[\d]{1,3}(,\d{3})*\.\d+)|(?<currency>\$[\d]{
^(?:\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+\.\d+|\d+\.\d+\.\d+|\d+\.\d+\.\d+\.\d+|\d+\.\d+\.
(\d{1,2})\.(\d{1,2})\.(\d{1,2})
^(0[1-9]|1[0-2])[0-9]{2}:[0-5][0-9]$|^[0-9]{2}:[0-5][0-9] A$
^[a-zA-Z](?:\s[a-zA-Z]\s)*$
Accurate Australian postal code verification.Australia has 4-digit numeric postal codes with the following state based specific ranges.ACT: 0200-0299 and 2600-2639.NSW: 1000-1999, 2000-2599 and 2640-2914.NT: 0900-0999 and 0800-0899.QLD: 9000-9999 and 4000-4999.SA: 5000-5999.TAS: 7800-7999 and 7000-7499.VIC: 8000-8999 and 3000-3999.WA: 6800-7
(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-
[0-9]{1,3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9
(?<=^[A-Z]{3})(?=\d{2})(?=\d{4})
^[a-zA-Z0-9]{1,15}$
(?<!\d)(?<![,])[0-9]+(?=,|$)
(?<month>\d{1,2})(?<day>\d{1,2})(?<year>\d{4})
(^4\d{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}$)
[0-9]{2}/[0-9]{4}
(?i)(?=^[a-z])(?=^[A-Z])(?=^[\d])[a-zA-Z\d]{8,}
[0-9]{8}[A-Z]
(?<!^9792)(?<!^\d{9,15})(?<!^\d{4})(?<!^\d{3})(?<!^\d{2})(?<!^\d{1})(?<!^\d)
^(0[1-9]|1[0-2])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d\d$
^([0-2][0-9]|3[0-1]):[0-5][0-9]$
(?:\d+(\.\d+)?|\.\d+)(?:\+|\-)
[a-zA-Z0-9]{5}[a-zA-Z]{2}
[^\s\(\)]*\s*\(body\)\s*
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer:^(?![\W_]*$)(?!.*\.)(?![\.]*\.)(?![\.]
/[aeiou]/i
[0-9]{1,2}(\.\d{1,2})?
/^https?://aspalliance\.com/([0-9]+)$/
^[0-9]{1,5}[\.][0-9]{1,2}$
(0|[1-9][0-9]?)%
(\d{1,3})(\.)(\d{1,3})(\.)(\d{1,3})(\.)(\d{1,3})
Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answer:
(?<year>\d{4})(?<month>\d{2})/(?<day>\d{2})
[A-Z][a-z]{0,100}[A-Z]
[0-9]{7,10,11}
^0[1-9][0-9]{0,6}$
(\d+)([a-zA-Z])(\d+)
Get the style attribute inner text contained inside " or'caracters with the "style=" prefix.Generate a RegEx for this description. Answer: r"^(?P<style>.*?)$"
(\d{4})(,\d{4})?
\d{2}\.\d{2}\.\d{4}
(?<!\d)(\d{1,3})(?!\d)
A[K][N]\d{1,3}
\b\d{5}[-\s]?\d{4}\b
[^\d]{3}[^\d]{2}[^\d]{1}[^\d]{4}
^[a-zA-Z]*$
(^[A-Za-z0-9]{3}[A-Za-z0-9]{3}[A-Za-z0-9]{3}[A-Za-z0-9]{3}[A-Za-z0-9]{3}[
0-65535
(?P<hour>\d{1,2})\s(?P<minute>\d{2})\s(?P<am_pm>[AP]M)?
(?<!\d)(?<!\.)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<!\d)(?<!\.)(?<
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])[0-9a-zA-Z]{6}$
(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\d{1,3}\.\d{1,3}\.\d{1,3}\.
\d{2}:\d{2} / \d{2}:\d{2} / \d{2} / \d{3}
[0-9]{5}[-.]?[0-9]{4}
(\d{4})([A-Z]{2})(\d{2})(\d{2})$
/^[a-f0-9]{3}$/i
\d+\.\d+
^(0[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|[12][0-9]|
(\d{1,2})([a-zA-Z]{2})(\d{4})
^\d{1,3}(,\d{3})*$
^(0[1-9]|1[0-2]|2[0-8]
(?<=\d{4})(?=\s[a-zA-Z]{1})(?=\s[a-zA-Z]{1})(?=\s[a-zA-Z]{
^(?:\d{1,2}(?:[-/ ]\d{1,2}){0,2}|\d{4})$
Matches NANP requirements for valid telephone numbers in the USA, its territories, Canada, Bermuda, and 16 Caribbean nations.<br>Area code: [2-9][0-8][0-9]<br>Exchange code: [2-9][0-9][0-9]<br>Station code: [0-9][0-9][0-9][0-9]<br>Accepts common phone number separators like parentheses, dash/hyphen, slash, period, and space. Stops matching at any word boundary, including end of line.<
[^0-9]{32}-[^0-9]{32}-[^0-9]{32}
^(?=.*\d)(?=.*[a-zA-Z])(?=.*[@#$%^&+=]).{8,20}$
[^0-9]?[0-9]*[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?
^(?:\+
(^\d{1,3}(?:\s|-|\&qu
^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(19[1-9]|20[0-2])$
[0-9]{1,3}(?:\.[0-9]{1,3})?
/^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])$/
This regular expression is intended to limit numeric entries by allowed places before and after the decimal point. It also recognizes whole numbers. In this example the value cannot exceed 99999.999. To change the range, simply edit the numbers in curly braces. For example, to allow 7 digits (millions) before the decimal point, change both instances of {0,5} to {0,7}. Likewise, to change the decimals from allowing thousandths (3 digits) to just hundreths, change the {0,3} to {0,2}. This can be useful for numeric fields in SQL. This example
^[^SEP]*(SEP.*|[^SEP]*$)
^[0-9]{7}$
^(?:[0-9a-fA-F]{1,4}:){5}[0-9a-fA-F]{1,4}$
^[A-Z]{5} [0-9]{1,10}$
^(0?[1-9]|1[012])/(19|20)\d{4}$
Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the "days part" of a class schedule field. The string should only accept any of the ff set of letters: 'M' 'T' 'W' 'TH' 'F' 'S' 'SU'. Only one instance of these set of letters is accepted.Generate a RegEx for this description. Answer: ^(M|T|W|TH|F|S|SU)$
(\d{3})-(\d{3})-(\d{4})
\d{3}-\d{3}-\d{3}-\d{3}-\d{3
/^(?:(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/
(?<=\d)(?:\d\s*)?(?:\d\s*)?(?:\d\s*)?(?:\d\s*)?(?:\d\s*)?(?:\d\s*)?(?:\d\s*)?(?:\d\s*)?(?
[a-zA-Z0-9]{1,2}[a-zA-Z0-9]{1,2}[a-zA-Z0-9]{1,2}[a-zA-Z0-9]{1,2}[a-zA-Z0-9]{1,2}[a-zA-Z0-9]{1,2}[a-
^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
^[A-Za-z0-9\s]{0,20}[A-Za-z0-9\s]{0,20}[A-Za-z0-9\s]
^\+?[0-9]{3}\-[0-9]{3}\-[0-9]{4}$
/^[0-9]*(,|[0-9])([0-9]*)(,|[0-9])([0-9]*)(,|[0-9])([0-9]*)(,|[0-
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: ^[A-Za-z][A-Za-z0-9!@#$%^&*-.]*$
^[0-9]{1,2}$
^[AKNW]\d{1,3}$
(^.*?\/)(.*?)$
[0-9]{0,2}\.?[0-9]{0,2}
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (\w+:\w+\s\.\w+\s\w+\s\w+\s\w+\s\w+\s\w+\s\w+\s\w+)
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer:^(?![^a-zA-Z0-9\-\.]|\.com|\.org|\.net|\.
The RegEx should match any string that starts with "Tag" and ends with "s".
(^[a-zA-Z]{1}[0-9]{1,}$)
(222) 5555-
^[0-9]*[\.]?[0-9]*$
(?!^\s*\d+$)(?:\d+\.?\d{1,4}(?:\s*\$|\s*))*
^([1-9]|1[012])[0-9]{2}:[0-9]{2}:[0-9]{2}$
(\d{4}),(\d{2}),(\d{2})
(?:\d{1,2}:\d{1,2}:\d{1,2})\s*(?:\d{1,2}:\d{1,2}:\d{1,2})\s*(?:\d{1,2}:\d{1,2}:\d{1,2})\s*(?:\d{1,2}:\d{1,2}:\d{1,2}
^[-0-9]{1,3}\.0[0-9]{3}$
^[A-Za-z0-9\.]{1,8}$
r'^\+?[12]?[0-9]{3}$'
(?<![0-9])(?<![0-9][0-9])\d{2}/\d{4}
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer:^[0-9]\.[0-9]$|^[0-9]\.[0-9][0-9]$|^[0-9]\.[0-9][0-9][0
^<h1-6>(.*?)</h1-6>$
^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,6}
(?<!\d)\d{2}(?:\.\d{2}){3}(?!\d)
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer:^\$?\d{1,2}(,\d{3})?(\.\d{1,2})$
(\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2})
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer:^(?=.[a-zA-Z0-9]{2,3}$)(?=.{1,3}$)[a-zA-Z0-9][a-zA-Z0-9-]{0,3}[a-zA-Z0-9]$
^51[1-9]\d{13}$
\b(?=\d{2}\.)\d{1,5}(?:[a-z]{1,2}\.){1,3}[a-z]{1,2}\b
\d{1,2}\.?\d{1,2}
[a-zA-Z0-9\s]
^[0-9a-fA-F]{32}$
(\d{5}|\d{5}-\d{4})
Applied to a.RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.Generate a RegEx for this description. Answer:  import re
(?<!\d)\.(?<!\d|\.)(?<!\d|\.)(?<!\d|\.)(?!\d)
^(?:\s*SEP\s*|\s*SEP\s*$)
Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the "days part" of a class schedule field. The string should only accept any of the ff set of letters: 'M' 'T' 'W' 'TH' 'F' 'S' 'SU'. Only one instance of these set of letters is accepted.Generate a RegEx for this description. Answer: ^[MTWTFS]+$
(.*)$
(^[\u20AC\u20BD\u20CF\u20D7-\u20FF\u2100-\u2A6D\u2A70-\u2B00\u2B01-\u2BFF\u2C00-\u2CFF\u2D00-\u2DFF\u2E00-\u2EFF\u2F00-\u2FFF
^[^SEP]*$
\d\d:\d\d:\d\d
\b(?=\d{3}-\d{2}-\d{4})\d{4}\b
[0-9]{2}[A-Z]{1}[0-9]{3}
(^|[^0-9])([0-9]{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|[0-9]{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|[0
\b(smtp|gmail|yahoo)\b
(\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2}\/\d{1,2})\/\d{1,2}|\d{
[0-9]{10}[- ]?[0-9]{3}[- ]?[0-9]{3}[- ]?[0-9]{3}[- ]?[0-9]{4}[- ]?[0-9]{3}[- ]?[0-9]{3}[- ]?[0-9]{3}[- ]?[0-9]{4}[- ]
(?<!\d)(?<!\.)(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d)(?!\.)(?!\d)(?!
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer: r(?P<serie>[0-9]{1,3}\.[0-9]{1,3})(?P<extension>.*)
^\+?(?:[0-9]{2})?[0-9]{3}[0-9]{2}[0-9]{3}$
\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b
^[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}$
^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])$
(?<ATU>ATU[12345678]{6})(?<Number>[0-9]{6})(?<RegExp>.*)
(?<!\d)(?<!\.)(?<!\s)(?<![^\d])[\d\.]+
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer:[^\s\.]+
^[\w-]+(?:\.[\w-]+)*$
\b(?<![a-zA-Z])[a-zA-Z0-9]+(?=[a-zA-Z])
var regex = new RegExp(/[^<>]+/g);
[decimal](*), scale length between 0 and 2
[0-9]{3}[a-z]{1,2}[a-z]{1,2}[0-9]{2}
(^\d+\.\d{0,2}$|^\d+\.\d{0,2}$)
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: +91 (national code) +[0-9]{3} (mobile number)
(^\d{4}-\d{2}-\d{2}$|^\d{4}-\d{2}-\d{2} \d{2}$|^\d{4}-\d{2}-\d{2} \d{2} \d{2
\d+\.\d{2}
^(0[1-9]|1[0-2]|2[0-4][0-9]|25[0-5])$
var regex = /^(?:[0-9]{4}-[0-9]{2}-[0-9]{2} \d{2}:\d{2}:\d{2})(?:\s+(?:
(4\d{4}-4\d{4}-4\d{4})
^[EeV]\d{1,2}$
(\d{1,2})([-/\s])(\d{1,2})
^[a-zA-Z0-9-_]{3,}@
(0-9)([0-9]|[1-9][0-9]|1[0-2])[0-9]
(?<=\d{1,3}\.\d{3})(?:\,\d{3})?(?:\.\d{6})
[-+]?\d*\.\d+|\d+
^[a-zA-Z0-9_.-]{4,10}$
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: \bFirst\b|\bName\b
/^http://aspalliance.com/([0-9]+)$/
\d{4,8}[\d\.]*
^4[0-9]{12,15}$
(?<![\w\s])([\w\s]{1,20})(?=\s|$)
[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}
^(4[0-9]|[13579][0-9])$
Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answer: [0-9]{1,3}(\.\d{1,2})?
(5-9)\\d{3}
(?<=.*?-)(?=\d{5})(?=\d{4})(?=\d{3})(?=\d{2})(?=\d{
Zip+4 Zipcode RegEx. You may ommit the +4 digits but you must also then ommit the hyphen/dash as well. In 1983, the Postal Service™ began using an expanded ZIP Code™ number called called the &quot;ZIP+4&#174;&quot; Code. The nine digits of a ZIP+4 code (e.g., 12345-6789) is broken down as follows: [123]Sectional Center or Large City. [45]Post Office™ facility or Delivery Area. [-]Required &quot;dash&quot; or [
GIR 0AA\d{2}
(?<!\d)\d{2}/\d{2}/\d{4}(?!\d)
([0-9]{2})/([0-9]{2})/([0-9]{4})
\$\d+(?:\.\d+)?(?:,\d+)?
#(?<!\S)(?:\d|\.)(?!\S)
(^[A-Z][a-z]*\s[A-Z][a-z]*\s[a-z][A-Z][a-z]*$|^
[0-9]{1,2}[a-zA-Z]{1,2}[0-9]{1,2}
(?<![\d\.])(?<![\d\.]\.)(?<![\d\.]\.)(?<![\d\.]\.)(?<![\d\.]\.)
^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
(1-12)
(^[A-Z]{2}[0-9]{3}[A-Z]{2}$|^[A-Z]{2}[0-9]
^[A-Z]{2}[a-z]{1}$
(\d+(,\d+)*)(?:\s*(,\s*\d+(,\d+)*)*)
The RegEx would be something like:\d{9}|[a-z]{5}
(?:^|(?<=\s))\d{1,2}(?:\s|:)\d{2}(?:\s|:)\d{2}(?:\s|:)\d{2}
(\w+), (\w+), (\w+), (\w+), (\w+)
^(?=.*39)(?=.*50)(?!.*[0-9])(?=.*[a-z])(?=.*[A-Z]).*$
(?i)(?:\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2}\/\d{
(?<!\d)(-?\d{1,3}(,\d{3})*(\.\d+)?)(?!\d)
(?P<country>\+2|\+22)(?P<city>\w{1,3})(?P<extension>\d{0,3})
^(?:19[0-9]|20[0-9]|21[0-9])-(?:(?:0[1-9]|1[012])
(?<![a-zA-Z])[A-Za-z0-9]{2,25}(?![a-zA-Z])
(\w+\.)
\b(0[1-9]|1[012])/(?:[a-z]{3})/\d{4}\b
(0+)([1-9]\d*|1[0-9]\d*|100[0-9]|1000[0-9])
^[a-zA-Z]{1,2}\s+\d{1,2}\s+[a-zA-Z]{1,3}\s+[a-zA-Z]{1
/^[1-9]\d\d\d\d$|^[1-9]\d\d\d\d\d\d$|^[1-9]\d\d\d\d\d\d\d$|^[1-9]\
(\d{2}:\d{2})([AP]M)
(?i)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{3,}
^(?:(?:\d{1,3}\.){3}\d{1,3})|\b(?:[a-f0-9]{1,4}:){7}\d{1,3}\b
^(0[1-9]|1[012])\/(0[1-9]|1[012])\/(19|20)\d{4}$
(?i)(?<=\w)([a-z])([A-Z])|(?<=\w)([A-Z][a-z])|(?<=\w)([a-z])([A-Z])|(?<=\w)([a-z])([A-Z][a-z])|(?<=\w)([a-z])([A-Z][a-
(?<!\d)(?<!\.)\d{1,5}(?:\.\d{1,2})?
^[0-9]{5}[-][0-9]{4}$
^[-+]?\d*\.?\d+$
/^(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}|192|224|256|288|320|384|512|768|1128|1536|2048|2432|2552|2684|2768|2880|3144|3192|3256|3288|3304|3200|3280|3288|3304|3200|
^[A-D]\d{3}[A-D]\d{3}[A-D]\d{2}$
Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answer:^[1-9]\d{2}(0[1-9])|(1[012])[0-9]{2}$
\d{1,2}%
grep -Eo "^[0-9a-fA-F]{6,20}$"
^https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+/(?P<image_id>[-\w.]+)$
(?<!\{)(?:[^\{\}]*\{\{|[^\{\}]*\}\})
^[1-9][0-9]*(?:\.[0-9]+)$
Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the "days part" of a class schedule field. The string should only accept any of the ff set of letters: 'M' 'T' 'W' 'TH' 'F' 'S' 'SU'. Only one instance of these set of letters is accepted.Generate a RegEx for this description. Answer:^[MTWTFS]\s*$
[0-9]{1,3}[ -]?[0-9]{1,3}[ -]?[0-9]{1,3}
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*#?&])[a-zA-Z\d$@$!%*#?&]{8,}$
^(?:\d+|\d{1,2}(?:\.\d+)?|0)\s*$
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d
[0-9]{2}:[0-9]{2}:[0-9]{2}
[^-\s]{1,5}[^-\s]
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer: $(?:\d{1,3}(,\d{3})*)(?:\.\d{3})?
var date = "06/12/2011 23:59:59";var regex = new RegExp("^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])[0-9]{2}:[0-9]{2}:[0-9]{2}$");var match = regex.exec
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer:^[0-9]{0,3}(,\d{3})*(\.\d{2})?$
\d{7}|\d{10}|\d{11}
^[A-Z]{5}[0-9]{3}$
^[A-Za-z0-9]{1,21}[A-Za-z0-9]{1,21}[A-Za-z0-9]{1,21}[
match string between chars'' as in source codeGenerate a RegEx for this description. Answer: (\w+\s+\w+)
/^\(?(?:\+?[0-9]{1,3}\)?[0-9]{3}[0-9]{3}[0-9]{3}|[0-9]{3}[0-9]{3}[0-9]{3}
^[0-9]{8}$
^(19|20)\d{2}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$
^(19|20)\d{2}-\d{2}-\d{4}$|^(1[01]|2[0-3])\d{2}-
/[a-zA-Z0-9-_]{2,}/
(\d{1,2}):(\d{2})(:\d{2})
r'^[\+\-]?\d+$'
0.00001
(\d{3}[-\s]?\d{3}[-\s]?\d{4}|\d{3}[-\s]?\d{3}[-\s]?\d{4
^(0[1-9]|1[012])[0-9]{3}$
[^\d,
[a-zA-Z0-9-\']+
\s+
^[0-9]{1,3},[0-9]{1,3},[0-9]{1
(?<!\d)(?<![\d,])\d+(?:\.\d+)?(?![\d,])
[A-Z]{3}[0-9]{2}[A-Z]{3}[0-9]{2}[A-Z]{3}[0-9]{3}
/[0-9]{4}-[0-9]{2}[A-Z][A-Z]{3}/
(?P<month>\d{2})-(?P<day>\d{2})-(?P<year>\d{4})
MAC_REGEX = r'^([0-9a-fA-F]{2}[:-]){5}([0-9a-fA-F]{2})$'
^(?P<first_section>(?:[a-zA-Z]{3}|[a-zA-Z]{4}))(?P<second_section>(?:[a-zA-Z]{3}|[a-zA-Z]{4}))$
(?<=\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\s(?=\d{1,2}-\d{1,2}-\d{1,2}
[0-9]{2}[0-9]{2}[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}
var regex = new Regex(@"^[A-Z]{2}\d{3}$|^[A-Z]{3}\d{2}$");
[ATU]{1}[A-Z]{3}[0-9]{6}
[0-9]{7,10}-?[0-9]{2,3}
/[\d,]*([-\d]{1,2}\.?[\d]{1,2})?/
^[0-9]{3}-?[0-9]{3}-?[0-9]{3}$
^[a-zA-Z0-9-_.+_=%&@#!~*?&]{1,255}$
(?<!if)^(?!if|endif|else|endif|elseif|endif|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|if|
^(?:\s*#.*$|\s*//.*$)
^(?=.*[A-Z])(?=.*\d)(?=.*[a-z])(?=.*[A-Za-z])(?=.{6,})$
\d{1,2}d[0-9]{1,2}h[0-9]{1,2}m[0-9]{1,2}s
\d{7,10}|\d{10,11}
(?i)(?<!^)(?<![a-z])(?<![A-Z])(?<![0-9])[a-zA-Z0-9]{8,}
(^[A-Z]{2}[0-9]{6}$)|(^[A-Z]{3}[0-9]{5}$)
[^xxyyz]
(\d{3}-\d{3}-\d{4})
\b[A-Z][a-z]* [A-Z][a-z]*\b
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer: ^(?=.*[^.gif])(?=.*[^.jpg])(?=.*[^.png])(?=.*[^.jpeg])(?=.*[^.gif])(?=.*[^.png])(?=.*[^.jpeg])(?=.*[^.gif])(?=.*[^.png])(?=.*[^.jpeg])(
\d+\s+\d+
[0-9]{1,2}[0-9]{0,2}[.][0-9]{0,2}
(?<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/(\d{1,3})\:(\d{1,3})\/(\d{1,3})\/(\d{1,3})\/(\d{1,3})\/(\d{1
https://regex101.com/r/jmq8K9/1
(\d{2}:\d{2}:\d{2})([AP]M)?
var splits = "a b c d e f g h i j k l m n o p q r s t u v w x y z".split(/(?<=\s|^)(?=\s|$)/);
[0-9a-fA-F]{1,6}
(\d{1,2}[\.\,\ ]?[\d{1,2}])
https://www.googleapis.com/web-analytics/v1/projects/YOUR_PROJECT_ID/functions/GET_ALL_REGEX_PATHS_BY_IP_ADDRESS
(?:\+1)?(\d{3})[ -]?(\d{3})[ -]?(\d{4})
^([0-9]{1,2}):([0-9]{2}):([0-9]{2})$
(\.[a-zA-Z0-9_\-\.]+)
(\d{4})/(\d{2})/(\d{2})
(^(?:[1-9][0-9]|1[012])-(?:[3-9]|[12][0-9]|3[01])-(?:20[0-9]|201[0-9]|202[0-9])$)
^(0[1-9]|1[0-2])[0-9]{2}:[0-5][0-9]{2}( AM| PM)?$
A1[0-9]\d[A-Z]
(?<=^|\s*)(?=\s*$)
^(?P<letter>[a-zA-Z])(?P<digit>[0-9])(?P<alternative>[a-zA-Z]{1})(
var date = "01-01-1921";var re = new RegExp(/^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(19[2-9]|20[
[0-9]{2}/[0-9]{2}/[0-9]{4} (00) to [0-9]{2}/[0-9]{2}/[0-9]{4} (08) and the month will accept till 12 and the day will accept till 31
^[0-9]{1,3}[0-9]{3}[0-9]{3}$
[0-9]{3}
^#{description}$
^(?=.*\d{4}$)(?=.*[a-z]{1,12}$)(?=.*[0-9]{1,23}$)(
[A-Za-z][A-Za-z0-9-]{3}
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
^(?=.*[a-z])(?=.*[A-Z])(?=.{6,})(?!.*(.).*\1)(?!.*(.).*\2)(?!.*(.).*\3).*
(^[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}$)(?:-[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}$)
\d{4}-\d{4}-\d{4}-\d{4}
^(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])(?=.*[a-zA-Z0-9]).{6,}$
\[077\]\d{8}[ \-]\d{3}
#(.*)
(?<!\d)(?=(?:[a-z]|[A-Z])(?:\d|$))
\d{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d\s]{3}[\d
(?<![0-9])(?:[0-9]{4}[0-9]{2}[0-9]{2}[0-9])|(?:[0-9]{4}[0-9]{2}[0-9]{3}
^[A-Za-z0-9-_]{1,30}(,\d{3})?(,\d{3})?(,\d{3})?(,\d{3})?(,\d{3})?(,
(?i)([a-z])(?=\1)(?=\1)(?=\1)(?=\1)(?=\1)(?=\1)(?=\1)(?=\1)(?=\1)(?=\1)(?=\1)(?=\1)(?=\1)(?=\1)(?=\1)(?=\1)(?=\1)(?=\1)(?=\1
(?<![a-zA-Z0-9-])[0-9]{1,2}[0-9]{1,2}[0-9]{
^[A-Z][a-z]* [A-Z][a-z]* [A-Z][a-z]* [A-Z][a-z]*$
(?<start>\d{1,4})(?<stop>\d{1,4})
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:(?<=^|\s)(?P<source>https?://\S+)
^(?![^a-zA-Z0-9_])[a-zA-Z0-9_]{3,}@
^(0|1|2|3|4|5|6|7|8|9)\/(0|1|2|3|4|5|6|7|8|9)\/(0|1|2|3|4|5|6|7|8|9)\/(0|1|2
^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(0[1-
[^\s]+
^[1-9]\d{3}[-\s]?[1-9]\d{3}[-\s]?[1-9]\d{4}$
(?<![0-9])(?<![1-9][0-9])\s*(?<![1-9][0-9][0-9])\s*(?<![1-9][0-9][0-9][0-9])\s*(?<![1-9][0-9][0-9][0-9][0-9])\s*(?<![1-9][0
`SELECT column1 FROM table1 WHERE column2 IS NOT NULL````pythonimport mysql.connector
/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
^[0-9]{4}[0-9]{5}[0-9]{1}$
^4(?:[0-9]{1,3}){12,15}$
(?<![0-9])(?<![0-9])(?![0-9][0-9])[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]
^(?:http|https)://[a-zA-Z0-9-_.]+\.[a-zA-Z]{2,6}$
/^[a-zA-Z\s]+$/
^[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-
\s
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[a-zA-Z0-9])(?=.{6,})(?
(?<!\d)((?:[1-9]|1[012])[0-9]{3}(?!\d))|(?<!\d)([1-9]|1[012])[0-9]{3}(?!\d)(?!\d)
^(http|https)://(www\.)?[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
^[0-9]{5}[0-9]{2}$
THE Complex Password Filter Matching 3 of 4 Character catagories:1.) at least 1 upper case character2.) at least 1 lower case character3.) at least 1 numerical character4.) at least 1 special characterIt also enforces a min and max length and works for.Net and script Regex implimentations.Generate a RegEx for this description. Answer:(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+-=[]{
var date = "20-11-2016";var d = date.split("-");var m = d[1].split("-");var y = d[0].split("-");var yyyy = y[2].split("-");var yyyy
(?<!\.)(?<!\.)\d+(\.\d+)?(?!\.)(?!\.)
^\+?\s?[0-9]{3}[0-9]{3}[0-9]{4}[0-9]{3}[0-9]{3}[0-9]{3}[0-9
(^[0-9]{3}(-[0-9]{3}){0,3}[0-9]{3}$)
This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answer:grep -E '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'
(\d{3}[-\s]?\d{3}[-\s]?\d{4}|\d{3}[-\s]?\d{3})
^(?:\d{3}[-\.\s]?){3}[0-9]
(?<=^|\.)(?<![a-zA-Z0-9_])(?<![a-zA-Z0-9_][a-zA-
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: ^[0-9]{2}:[0-9]{2}:[0-9]{2}$
^[a-zA-Z0-9]*(?:\.[a-zA-Z0-9]*)*$
^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(0[1-9]|[12][0-9]|3[01])/(0[1-9]|[
\bIstat Ateco\b
\d{4}[ ]{1,2}[a-zA-Z]{1,2}
(Example)
0-9A-Za-z_.-
(\d{3}(,\d{3})?)(\.\d*)?
^[1-5][0-9]$
Zip+4 Zipcode RegEx. You may ommit the +4 digits but you must also then ommit the hyphen/dash as well. In 1983, the Postal Service™ began using an expanded ZIP Code™ number called called the &quot;ZIP+4&#174;&quot; Code. The nine digits of a ZIP+4 code (e.g., 12345-6789) is broken down as follows: [123]Sectional Center or Large City. [45]Post Office™ facility or Delivery Area. [-]Required &quot;dash&quot; or -
Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the. (period) to ensure that no other characters may be used in it's place.Generate a RegEx for this description. Answer: ^\$[0-9,]*(,\s*[0-9,]*)*$
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=]{6,})(?=.*
(A0-A5)
\d{1,2}(?:-\d{1,2})?
^[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}$|^[0-9]{1,2}/[0-
(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}).*
([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$
[A-Z]{2}-\d{3}-\d{4}
^(20[0-9]|1[012])/(\d{3})/(\d{4})$
[^()]
(?<!\d)(?<!\d\d\d\d)(?<!\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: (0|[1-9][0-9]*),(0|[1-9][0-9]*),(0|[1-9][0-9]*),(0|[1-9][0-9]*),(0|[1-9][0-9]*),(0|[1-9][0-9]*),(0|[1-9][0-9]*),(0
\b(?P<negative>-?\d+)\b(?P<positive>\d+)\b
^[a-zA-Z0-9_]*$
\d{1,2}[,.]\d{1,2}[,.]\d{1,2}
^00[1-9]\d{3}( [1-9]\d{3})?[ -]\d{5}[ -]\d{4}$
(\d{2}:\d{2})([AP]M)?
^(?=.*[A-Za-z])(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[A-Za-z0-9])[A-Za-z0-9]{8,}$
(\d{1,2}\.?\d{1,2}\.?\d{1,2}\.?\d{1,2}\.?)+
(\d{1,2}:\d{2})([a-z])(\d{2})([a-z])(\d{2})([a-z])(\d{2})([a-z])
(\d+)(\.(\d+)|,\d+)?
^(19|20)\d{2}(0[1-9]|1[012])$
<img\1/>
(?<!\d)(?<!-)[A-Z]{2}[0-9]{3}[-](?!\d)
(?i)(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer: ^[0-9]{1,99}\.5$
^([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})$
(?:\d+(\.\d+)?|\.\d+)
(?<![0-9])((?:[1-9][0-9]|1[012])\/(?:[1-9][0-9]|0[1-9]|[12][0-9]|3[01]))/[0-9]{4}/[0-9]{2}/[0-9]{2}
/^(?:\d{4}-)?(?:\d{4})?-?(?:\d{4})?-?(?:\d{4})?$/
/?(.*)$/
^\d{1,2}:\d{2} [AP]M$
^(?:\d{1,6}(?:,\d{1,6})*)(?:,\d{1,6})*$
(0[1-9]|1[012])[0-9]|[12][0-9]|3[01]|[1-9]
(?<![\d\.])(?<![\d])[\d\.]
(4 numbers) [0-9]{1,2}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,
^[0-9]{1,3}(,\d{3})*(\.\d{2})$
(?<!\d)([1-9]\d|[1-9]\d\d)(?!\d
\b(?P<number>-?\d+\.\d+)\b
/^\d{3}/
(0|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[
(\d{4})\s*-\s*(\d{5})\s*-\s*(\d{1})\s*-\s*(\d{1})\s*-\s*(\d
[-+]?\d{1,3}(,\d{3})*
\b(?:\d{1,2}\.)?\d{3}(?:\.\d{3})?\b
^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(19|20)\d{2}$
(?=.*\d{4}-\d{2}-\d{2})(?<!\d{4}-\d{2}-\d{2})\d{2}/\d{2}/\d{4}
(?<![\d\s\(\)])([\d\s\(\)]{1,3})\s?(?:,|\s?)?(?<![\d\s\(\)])([\d\s\(\)]{3,})
^[A-Z]\w*$
<_record>_[a-zA-Z0-9_-]*</_record>
(\d{1,2}|[a-z]{3}|[A-Z]{3})
(\d{1,3}\.){3}\d{1,3}|(\d{1,3}\.){3}\d{1,3}|(\d{1,3}\.){3}\d{1,3}|(\d{1,3}\.){3}\d{1,3}|(\d{1,3}\.){3}\d{1,3}|(\d{1,3}\.){3}\d{1,3}|
^[0-9a-fA-F]{1,6} ( [0-9a-fA-F]{1,6} ){1,20}$
\d{2}/\d{2}/\d{4} (00|01|02|03|04|05|06|07|08|09|10|11|12)
(?<=^|\.)(?:\d{1,3}\.){3}\d{1,3}$
(?i)^(?=.*ing)(?=.*d$)(?=.*e$)(?=.*n$)(?=.*s$)(?=.*t$)(?=.*u$)(?=.*g$)(?=.*h$)(?=.*i$)(?=.*j$)(?=.*k$)(?=.*l$)(?=.*
^[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-
(?P<country_prefix>\+2|\+22)\s?(?P<city_code>\d{1,2})\s?(?P<phone_number>\d{3}[\s\d]{3}[\s\d]{4}[\s
[0-9a-f]{1,4}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\
[dd][.-/](MM)[.-/](yyyy)[ ](hh)[:](mm)[:](ss)
\d{1,2}[-/ ]\d{4}
dd/mm/yyyy OR dd/mm/yyyy HH:MM:SS
^\d+\.?\d*$
^(?=.*[0-9])(?=.*[a-z])(?=.*
(?<=Ateco\s+Istat\s+\d+)(?=\s+Generate)
hh:mm:ss
hh:mm or hh:mm or hh:mm or hh:mm
"//.*?\*/"
(?<q>Q\d\d\d\d)
(0[1-9]|1[012])[0-9]{3}/[0-9]{2}/[0-9]{4}
^([1-9][0-9]|1[0-2])[0-5][0-9]$
/^(0[1-9]|1[012])[0-9]{6}[-/](0[1-9]|1[012])[0-9]{6}$/
match string between chars'' as in source codeGenerate a RegEx for this description. Answer: \b[A-Z]{2}\b
^[0-9]{5}[0-9.]{2}$
/^\+?1[\s\d]{3}\s[\d]{3}\s[\d]{4}$/
^(00[1-9]|[1-9]\d|1[0-9]\d|2[0-8]\d|3[0-1]\d|3[01])[ -
(?<!\d)\d{1,3}(?:\.\d{3})?(?:[eE][+-]?\d+)$
\b(?<!^)([A-Za-z0-9_])(?!_)(?![A-Za-z0-9_])\b
(?<!\d)\(?(?:\d{1,3}\)?[\s-]?\d{3}\)?[\s-]?\d{4}
^#(.*)$
(^[0-9]*.[0-9]*.[0-9]*.[0-9]*[0-9]*$)
\|(?P<key>\w+)\|(?P<value>\w+)\|
\d{2}/\d{2}/\d{4} OR \d{2}/\d{2}/\d{4} \d{2}:\d{2}:\d{2}
(?<!\d)(?<![a-z])[0-9]{2}:[0-9]{2}(?![a-z])
(0-9)0+
^(0|[1-9]\d*[1-9]\d*(\.\d+)?|[1-9]\d*[1-9]\d*(\.\d+)?|[1-9]\d*[1-9]\d*(\.\d+)?|[1-9
^[1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1-9][1
[^\x20-\x7E]
(0,000)
^(?!(xx|yy|...))[a-zA-Z0-9]{3,}$
(?<!\d)(0?[1-9]|1[012])[0-9]{3}(-(0?[1-9]|1[012])[0-9]{3})?(?<!\d)(0?[1-9]|1[012])[0-9]{4}(-(
\d{3}-\d{4}-\d{6}
(?<=\&quot;)(?P<classname>[a-zA-Z0-9_]+)
(e.g., "^[A-Z]{2}[a-z]{2}[0-9]{2}$")
(?<=^|\s)(?P<package>\w+)\.(?P<class>\w+)(?=\s|$)
[\s,]
(\d{2})(\d{2})(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{
\b(?=\d{1,3}\.)(?=\d{1,3}\.)(?=\d{1,3}\.)(?=\d{1,3}\.)\d{1,3}\b
(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|
^[0-9a-fA-F]{3}$
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z]).*$
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer: (\d+(\.\d+)?)([+-]\d+(\.\d+)?)
^[0-9A-Fa-f]{2}[:-][0-9A-Fa-f]{2}[:-][0-9A-Fa-f]{2}[:-][0-9A-Fa-f]{2}$
^[0-9]{1,2}[-/]?[0-9]{1,2}[-/]?[0-9]{1,2}[-/]?[0-9]{1,2}[-/]?[0-9]{1,2}[-/
(?<!\d)\(?(?:[1-9]\d{1,2}|1\d{2}[1-9])[-\.\s]?\(\d{3}\)\s?[-\.\s]?\d{3}[-\.\s]?\d{4}
^[a-zA-Z0-9\s]*\s*$
/[A-Z]{2}\d{3}/
^[0-9]{3}[ -]?[0-9]{4}$
^(?=.*[1-9])(?=.*[0-9])(?=.*[0-9]{0,7}$).*$
^[0-9a-fA-F]+$
(\b[A-Z]{3,4}\s[A-Z]{3,4}\s[A-Z]{3,4}\b)
^[0-9]{3}-?[0-9]{3}-?[0-9]{4}$
^(?=.*[A-Z])(?=.*\d)(?=.*[a-z])[A-Z][a-z0-9]{3}[A-Z]\d{3}[a-z]{3}$
Fred Flintstone, Barney Rubble, Sparky, and Smoky.
\b[A-Z]{2}\d{4}\b
(^[A-D]{1,6}[A-D]{1,6}[A-D]{1,6}[A-D]{1,6}[A-D]{1,6}$)
^\d+\.\d+$
ESN_REGEX = r"^[0-9a-f]{6}$"
Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answer: (^\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,
[A0-A9, A10]
Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the. (period) to ensure that no other characters may be used in it's place.Generate a RegEx for this description. Answer: ^\$(\d{1,3}(,\d{3})*|\d{1,3}(,\d{3})?)$
(**)
\d{1,11}
[a-zA-Z0-9]{3,}
(?<=\d{4}-\d{2}-\d{2})(?:\s\w+\s\w+\s\w+\s\w+\s\w+\s\w+\s\w+\s\w+\s\w+\s\w+\s\w+)
Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answer: ^[1-9][0-9]*$
^[A-Z][a-z]*[A-Z][a-z]*$
^(?:\d{1,3}|\d{3})(?:[.][\d]{3})?$
^[^SEP]*(?:\S+[SEP]\S+)*$
[A-Za-z0-9]|[A-Za-z0-9 ]
/^http://aspalliance.com/([0-9]+)\/([0-9]+)$/
(^[a-zA-Z0-9-_.]+@[a-zA-Z0-9-_.]+[a-zA-Z0-9-_.]+$)
Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators:. - /Valid dates only! m (1-12)/ d (1-31)/ y (0..)(rizzipereira.com.br)For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250Generate a RegEx for this description. Answer: (0[1-9]|[12][0-9]|3[01
[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]
(0|[1-9][0-9]*(?:\.[0-9]{1,3})?|1[0-9]{2}(?:\.[0-9]{1,3})?|100[0-9]{2}|1000[0-9]{2})
0[1-9][0-9]|1[0-2][0-9]|2[0-4][0-9]|3[0-1][0-9]|4[0-9][0-9]|5[0-9][0-9]|6[0-9][0-9]|7[0-9][0-9]|8[0-
^[0-9]{3}[.-][0-
\b\d{1,2}[-/]\d{1,2}[-/]\d{4}\b
^[A-D]\d{3}$
^\s*[a-zA-Z0-9_]+\s*$
(\d{1,2})\.(\d{1,2})\.(\d{1,2})\.(\d{1,2})\.(\d{1,2})\.(\d{1,2})\.(\d{1,2})\.(\d{1,2})
(?<![0-9])(?<![0-9]
/^(?:\d{4}-\d{2}-\d{2}|\d{4}-\d{2}-\d{2}-\d{2}|\d{4}-\d{2}-\d{2}
(?<!\d)\d{1,2}\/(?!\d)
(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})|(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} \d{2})|(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} \d{2
^[0-9]{3}(?:[0-9]{3
^(?!.*\.\.)[\w\d-]{1,3}\.\w{1,3}\.\w{1,3}\.\w{1,3}$
(^\d{3}[-.]\d{3}[-.]\d{4}$)
Fred Flintstone, Barney Rubble, Barney Rubble, and Mom.
\d\d/\d\d/\d\d\d\d
^(0[1-9]|1[012])/([0-9]{2})/([0-9]{4})$
lat(?<![^\d.])
(?<=\$).*?(?=,|$)
(\d+)\s*[ap]m
(\+\d{1,3}\s)?[a-zA-Z0-9-]{3,}[a-zA-Z0-9]\s*
^[0-9]{3}[
\s,\s,\s,\s
(\d+\.\d{3}|\d+)(,\d{3})?|\d+
(077|078|079) [0-9]{8}
/^[a-z0-9-]{1,63}[a-z0-9\-]{1,63}[a-z0-9\-]{1,63}[a-z0-9\-]{1,63}[a-z0-9\-]{1,63}[a-z
$1\s*
var date = "01-01-2001";var regex = new RegExp("^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(19[2-9]|20[0-
1[0-9]{6}[2-9]{2}[0-9]{4}[0-9]{2}[
var regex = new RegExp(/^[a-zA-Z0-9_]+(?:\.[a-zA-Z0-9_]+)*$/);
[Y/M/YYYY](\d{4})(\d{2})(\d{2})
\d{5}(?=\d{5})
var regex = /^(?:\?(.+))?$/;
^(?=.*\d{4})(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z])[0-9]{4}-\d{2}-\d{2}$
(\d+\.\d*[eE][+-]\d+|\d+\.\d*)
^(?:[0-9]{4}|[0-9]{3}[0-9]{2
[0-9]{1,3}[.,]?[0-9]{3}[.,]?[0-9]{3}(?:\.[0-9]{3})?
(?P<ssn>\d{3}-\d{2}-\d{4}-\d{4}-\d{4})
(?i)(?=.*[aeiou])(?=.*[^aeiou])[aeiou]
(?<=\+\d{1,3})(?<!-\d{1,3})(?<!-&quot;)(?<!-&quot;-)(?<!-&quot;-&quot;)(?<!-&quot;-&quot;&
(\d{1,2}:\d{2}:\d{2})
(^[A-D]{1,2}[A-D]{1,2}[A-D]{1,2}[A-D]{1,2}$|^[A-D]{1,2}[A-D]{1
/^(?:\+1)?[1-9]\d{2}[-\.\s]?[1-9]\d{2}$|^(?:\+1)?[1-9]\d{2}[-\.\s]?[0-9]{2}$
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: ([a-zA-Z][a-zA-Z0-9]*)([A-Z])
^\(?(\d{3})\)?[ -]?(\d{3})\s?(\d{4})$
(?<![\d\w])(\d{2}[\d\w]{3}|\d{3}[\d\w]{2}|\d{4}[\d\w]{3}|\d{4}[\d\w]{3}|\d{4}[\
[^0-9]{3}[^0-9]{3}[^0-9]{3}[^0-9]{3}[^0-9]{3}[^0-9]{3}[^0-9]{3}[^0-9]{3}[^0-9]{3}[^0-9]{3}[^
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer:
^\+?\
^(?:\d{1,3}\.){3}\d{1,3}$
0.00 - 0.01
BG\d{9}
\b(0[1-9]|1[012])[0-9]{2}[-/.][0-9]{2}\b
(6\d\d\d\d\d)
(\d{2}/\d{2}/\d{4}|\d{2}-\d{2}-\d{4})
^\d{4}\s\d{2}\s\w{2}$
r'^0(1|2|3|4|5|6|7|8|9)'
(?<=^|\.)[a-zA-Z0-9-\.]+
^[0-9]{4}[0-9]{2}[0-9]{2}$
^(?=.*[A-Z])(?=.*[
^[+-]?[0-9]*\.?[0-9]*$
^[-\d.]*$
[^0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}
(?<=\d{4}-)(?=\d{4}-)(?=\d{4}-)(?=\d{4}-)(?=\d{4}-)(?=\d{4}-)(?=\d
Regex: (?<=<\/?)(?<![\s\S])[\w\W]{0,200}
ATU\d{5}(?:\d{4})?(?:\d{2})?(?:\d{2})
^[0-9]{1,2}(.[0-9]{1,2})?$
^\d{10}\s?[A-Z]\s?[A-Z]\s?[A-
^(?:http|ftp):\/\/(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9
(\d{1,2}:\d{2}:\d{2}(\.\d+)?)(\s*)(\d{1,2}:\d{2}:\d{2}(\.\d+)?)(\s*)(\d{1,2}:\d{2}:\d{2}(\.\d+)?)(\s*)(\d{1,2}:\d{2
[^_]{4,5}(?:-[^_]{4,5})?
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer:(?<=^|[^\d])[0-9]{2,3}(?=\.)
^(\d{3
ip:port checker:^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$
^[0-9]+(,[0-9]+)+$
(\d+),\s\d+,\s\d+,\s\d+,\s\d+,\s\d+
(0|[1-9]\d*)(\+|\-)?([0-9]\d*)(\+|\-)?([0-9]\d*)(\+|\-)?([0-9]\d*)
[0-9]{4}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}
(^\+?\d{1,3}[- ]?\d{1,3}[- ]?\d{1,3}[- ]?\d{1,3}[- ]?\d{1,3}[- ]?\
Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answer: \d+\.?\d*
/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/
/[^A-Za-z0-9\s]+/g
^[0-9]{3}[-\s]?[0-9]{3}[-\s]?[0-9]{4}$
\d{1,2}:\d{2}
^[a-zA-Z0-9]{5,12}$
(\s*)([a-zA-Z0-9_]+)
(?<=\d{3})(?=\d{4})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\d{2})(?=\
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer:^(?:\d+(?:\.5)?|1[0-4]?\d|5[0-9]?)$
var regEx = /^([a-zA-Z0-9]{2}[a-zA-Z0-9\-]{3}[a-zA-Z0-9]{1,3})$/;
^(?=.{3,20})(?:[a-z]{1,15}\.)?(?:\w{1,15}\.)?(?:[a-
^[0-9]{1,5} [0-9]{1,5} [0-9]{1,5} [0-9]{1,5} [0-9]{1,5}$
^[0-9]{4}/[0-9]{4}$
[A-Za-z][A-Za-z0-9-_]{5,17}
^\d{2}/\d{2}/\d{4}$
[A-Za-z0-9 ]+
(?<!SEP)(.*?)
^(?:\d{1,
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19[01]|20[0-9]|200[0-9]|202[0-9]|202[0-9]|202[0
(^[0-9]{1,2}/[0-9]{4}$|^[0-9]{1,2}/[0-9]{4}/[0-9]{4}$)
^[4]{12,15}$
^\d{2}:\d{2}$
^[1-9][0-9]*(?:\.[0-9]+)+$
(?<=^[0-9]{4}[- ]?[0-9]{3}[- ]?[0-9]{2})[0-9]{4}[- ]?[0-9]{3}[- ]?[0-9]{2}[0-9]{4}$
[^\d.']*(?:\d{3}(?:\.\d{3})?|\d{3}(?:\.\d{2})?|\d{3}(?:\.\d))
[0-9]{4}\s\s\w{2}
\d{2}[-\s]?\d{2}[-\s]?\d{4}
\$(\d{1,3}(,\d{3})*(,\d{3})*(,\d{3})*(,\d{3})*(,\d{3})?)
^[A-Z][a-z]{0,2}[A-Z][a-z]{0,2}[A-Z][a-z]{0,2}$
^(?P<ipv6_prefix>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\.(?P<ipv6_suffix>
XXX-XXX-XX-XXX ; XXX-XXX-XX-XX ; XXX XX XX XXX ; XXX XXX XX XX
^[^_\-\.]+$
\b(?:\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}|\d{3}[-.\s]?\
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[a-zA-Z\d@$!%*#?&]{8,20}$
(0[1-9]|1[012])[0-9]{2}:[0-9]{2}:[0-9]{2}(am|pm)
^[0-9]{1,2}\/[0-9]{4}$
//.*?(?=\n)
^0?[1-9]|1[0-2]$
^\s*$
(?<!GB)(?![^a-zA-Z0-9]{2})(?![^a-zA-Z0-9]{3})[a-zA-Z0-9]{3}
(?<!\d{4})(?<!\d{1,2})(?<!\d{1,2})(?<!\d{1,2})(?<!\d{1,2})(?<!\d{1,2})(?<!\d{1,2})[0-
[^A-Za-z0-9\s]
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: \b(?i)([A-Z]{1,2}\w*)(?:\s+[A-Z]{1,2}\w*)*\b
(\w+)\s*\(([^)]+)\)
\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}-\d{1,2}
[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}
^(\+1)?[-.\s]?(\d{3})(\s\d{3})?[-.\s]?(\d
^(?:\d{8}|\d{6})(?:\s|$)
(?<!\d)(?!\d)\d{10}(?!\d)\d{3}(?!\d
^[+]{1}(31|31(0|0))[0-9]{9}$
/^(19[0-9]{2}|20[0-9]{2}|21[0-9]{2}|22[0-9]{2}|23[0-9]{2}
^[+-]?[0-9]*[\.]?[0-9]+$
var matches = Regex.Matches(description, @"(?<!\w)([a-zA-Z_]\w*)(?!\w)");
(?<=\?)(.*)
^(0?[1-9]|1[0-2])\/(0?[1-9]|[12
(0-59)([A-Za-z]|[0-9]|[0-9]\.?[0-9]|\.)
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer: ^(http|https):\/\/[\w-]+(\/[\w-]+)*\/[\w-]*$
/^[0-9]{1,99}(\.0)?$/
A[K|N][0-9]{1,3}
d{1,2}(?:\.\d{1,2})?
var regex = new RegExp(`^(?=.*[0-9])(?=.*[1-9])(?=.*[1-9])(?=.*[0-9])(?=.*[0-9])(?=.*[1-9])(?=.*[1-9])(?=.*[0-9])(?=.*[0-9])(?=.*[1-9
(IBAN) [0-9]{4}-[0-9]{3}-[0-9]{4}
\d+(\.\d+)+
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[\s])[A-Za-z0-9\s]*$
(^[0-9a-fA-F]{3}-[0-9a-fA-F]{3}-[0-9a-fA-F]{4}$)
(?<month>\d{1,2})/?(?<year>\d{4})
(\d+)([\+\-]\d+)
[\\[]([a-zA-Z0-9\\-\\.]*[a-
^(?=.*[A-Z])(?=.*[0-9])(?=.*[A-Za-z])(?=.*[0-9])[0-9]{4}$
/^[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}$/
![](.*)
^[0-9]{1,3}[-][0-9]{1,3}[-][0-9]{1,3}[-][0-9]{1,3}[-][0-9]{1,3}$
^\d+(\.\d+)?$
(?<!\.)[a-zA-Z0-9-]{1,63}[a-zA-Z0-9-]{1,63}(?!\.)
[a-zA-Z][a-zA-Z0-9-]{6,17}
re.match(r'https?://[^\s]+\.\w+\.\w+\.\w+', url)
(\d\d\d\d[A-Za-z]|\d\d\d\d[A-Za-z]\d\d\d\d)
\d{3}-\d{2}-\d{4} OR \d{5}-\d{4}-\d{4}
^\$[\d,]*(-\d+)?(?:\.\d{0,2})?$
^[0-9]*\.[0-9]*$
/^[1-9]\d*$/
var regex = /^[0-9]{1,2}\s*:\s*[0-9]{1,2}$/;
(1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12)
(?:\d+)\s+(?:\w+)\s+\((?:\d+)\)\s+(?:\w+)\s+(?:\d+)\)
(?<![0-9])([1-9][0-9]{3})([0-9][0-9]{2})([0-9][0
[0-9]{1,2}[0-9]{2}:[0-9]{2}:[0-9]{2}|[0-9]{1,2}:[0-9]{2}:[0-9]{2}|[0-9]{1,2}:[0-9]{2}:[
(?<=\d{3})(?=\d{3})\d{4}(?:\.\d{3})?
(?<!\.)\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}(?!\.)
(^|\s)([0-9]{1,2}:[0-9]{2}:[0-9]{2}(AM|PM))(?=\s|$)
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer: (?<=\w+\s+\w+\s+\w+\s+\w+\s
rut(0,000,000)
^[A-Za-z0-9\*\(\)]*\*(Asterisk)
\d{4}(?:,\d{4})?
Matches times seperated by either : or. will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.Generate a RegEx for this description. Answer: (?i)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2}
(?<=\d+)\s*\d*\.\d*(?:[eE][+-]?\d+)
(1+)(0+)(1+)(0+)
[^\s]{2}[0-9]{4}-[0-9]{2}-[0-9]{2}
[\w\s\-\.]+
^\d{5}-\d{4}\d{3}[
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<!\d)([a-zA-Z]{1,2})(?!\d)
[^a-zA-Z0-9]{9}[^a-zA-Z0-9]{2}[^a-zA-Z0-9]{1}[^a-zA-Z0-9]{1}[
A letterGenerator should be able to generate a RegEx for the following descriptions:- A word that starts with a capital letter and ends with a lowercase letter. - A word that starts with a capital letter and is followed by a lowercase letter. - A word that starts with a capital letter and is followed by a lowercase letter and then another capital letter.
^(?:\(\d{3}\)\s?|\d{3}-\d{3}-\d{4})$
r'^\d{3}[A-Z]{3}[0-9]{3}$'
r'^(?P<server>\w+)\.(?P<port>\d+):(?P<status>\w+)$'
(\d{1,2})/(\d{4})
^(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9
\b(0[1-9]|1[012])[0-9]\b
Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answer:^(?=.*[NSEW])(?=.*[0-59])(?=.*[0-9])(?
^[A-Z]{3}[0-9]{3}[A-Z]{2}[0-9]{4}$
^([1-9]|1[012])[0-9]{2}:[0-9]{2}$
[0-9]{4}[ 0-9]{2}[A-Z]{2}
^[a-zA-Z0-9-_]{2,3}\.www
[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]
^(?=.*[1-9])(?=.*[1-9][0-9])(?=.*[1-9][0-9][0-9])(?=.*[1-9][0-9][0-9][0-9
[0-9]{1,2}(\.0{0,1})?[0-9]{0,9}
^(?:[0-9]{2}[0-9]{3}|[0-9]{3}[0-9]{2}[0-9]{3}[0-9]{3})$
^(?:(?P<year>\d{1,4})\-(?P<month>\d{1,2})\-(?P<day>\d{
\d{10}(?:[-\s]\d{10})?
[a-zA-Z0-9._-]{5,15}
\d{1,2}(?:[-/.]\d{1,2})[-/.]\d{4}
^0\d{3}[-\s.]?\d{3}[-\s.]?\d{4}$
/\$([0-9]{1,3}(,\d{3})*)([0-9]{
^(([01]\d|2[0-3]):([0-5]\d))$
0?[1-9]|1[012]|[03-9]
INN code = (4 numbers) + (5 numbers) + (1 number) + (1 number) + (1 number) + (1 number) + (1 number) + (1 number) + (1 number) + (1
[A-Z]{1,2}[a-z]{0,1}
^([0-9]+)([0-9]+)[.][0-9]*$
^(1[0-2]|3[01])\/([0-9]{1,2})\/([0-9]{4})$
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer: ^https?://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,}$
/^[a-zA-Z0-9\-_]+(?:\.[a-zA-Z0-9\-_]+)*$/
^(?:[0-9]{1,2}|[0-9]{3}):[0-9]{2}$
^([1-9]\d{3})([1-9]\d{3})([1-9]\d{4})$
^[0-9]{4}[a-zA-Z]{2}$
^[a-zA-Z0-9\-\.]*\.[a-zA-Z0-9\-\.]*[a-zA-Z0-9\-\.]*$
(?<!GB)(?<!USD)(?<!EUR)(?<!USD)[A-Z]{3}[A-Z]{3}[A-Z]{3}[A-Z]{3}$
[0-9]{1,2}[.][0-9]{1,2}[.]{1,2}[0-9]{1,2}[.]{1,2}[0-9]{1,2}[.]{1,2}[0-9]{1,2}[.]{1,2}[0-9]{1,2}[.]{1,2}
^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]
^(?P<protocol>http|https):\/\/(?P<host>[^\s\.]+)\.(?P<port>\d+)(?P<path>[^\s\.]+)?$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[a-zA-Z\d@$!%*?&]{8,}$
\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.\d+\.
^[a-zA-Z0-9]{8,}$
[YYYY-MM-DD HH:MM:SS]
^\d+(\.\d+)?(?:[,\.]\d+)?(?:[eE][+-]\d+)$
match string between chars'' as in source codeGenerate a RegEx for this description. Answer: (?<![a-zA-Z])([a-zA-Z])(?![a-zA-Z])
$2 =~ /^[a-zA-Z0-9-]{1,63}$/
A(?P<prefix>[A-Z])(?P<zone>[0-9]{1,3})(?P<suffix>[0-9]{1,3})
\d{1,2}:\d{2}(?:[ap]m)
(^\d{1,2}(,\d{3})?(\.\d{1,2})?)
\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{3}-\d{3}-\d{3}-\d{4}
[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]
^[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,
^\$(?:\d{1,3}(?:\.\d{3})?)?(?:\d{1,3}(?:\.\d{3})?)?(?:\d{1,3}(?:\.\d{3})?)
\b(0[1-9]|1[012])[0-9]{3}[0-9]{2}[0-9]{4}\b
\b[0-9]{5}[\s]?
^\d+[\.,]?\d{1,3}(?:[eE][+-]?\d+)?$
^[0-9]{3}[A-Z]{1}[0-9]{2}$
^(0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01])$
^[a-zA-Z0-9]*$
(?<!\d)(?<![a-zA-Z])[a-zA-Z]{3}[a-zA-Z]{2}[a-zA-Z]{1}
^(?=.*\d)(?=.*[A-Z])(?=.*[X-X])(?
A\K\N\w{1,3}
\d(?:[1-9]|0\d|1\d\d|2\d\d\d|3\d\d\d|4\d\d\d|5\d\d\d|6\d\d\d|7\d\d\d|8\d\d\d|9\d\d)
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer:^(?!.*[^a-zA-Z0-9_.-])(?!.*[^a-zA-
Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answer:^(?=^[0-9]{1,2}[0-9]{1,2}[0-9]
^[a-zA-Z0-9\s\-\_\.]+$
Applied to a.RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.Generate a RegEx for this description. Answer: r'(?:\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\[\
[1-12][0-9]
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<=^|\s)([^\s]*)(?=\s|$)
(?<!GB)(?!GB)(\d{4})(?!\d{2})(?!\d{2})(?!\d{2})(?!\d{2})(?!\d{2})(?!\d{2})(?!\d{2})(?!\d{2})(?!\d{2})(?!\d{2
The phone number filter - use to catch and replace phone numbers where you don't want them to appear.
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[a-zA-Z\d@$!%*#?&]{8,20}$
[a-zA-Z]{2}[a-zA-Z ]{0,100}
(?:\d{1,2}(?:\s|-){2}\d{1,2}|\d{1,2}(?:\s|-){3}\d{1,2}|\d{1,2}(?:\s|-){4}\d{1,2})
^(\d{1,2}\s|\d{1,2}\s|\d{4})/(\d{4})/(\d{1,2})$
\b[0-9]{2}\s[0-9]{2}\s[0-9]{2}\b
^[A-Z]{2,}$
[A-Z][a-z]*
^([0-9]{1,3}\.){3}[0-9]{1,3}$|^\b[0-9]{1,3}\b$
Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answer:^[0-9]+(\.[0-9]+)?$
[0-9]{1,9}[0-9]
^[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}$
\d{1,2}(\.\d{1,2})?
^[1-9][0-9]{2}$|[1-9][0-9]{3}$|[1-9][0-9]{4}$|[1-9][0-9]{5}$|[1-9][0-9
(http|https|ftp)://[\w\-\.]+\.[\w\-\.]+
(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6,20}
\d{1,2}\.\d{1,2}%
^(?:\?(.+))?$
r'^([A-Z]{3})([0-9]{3})([A-Z]{3})([0-9]{3})([A-Z]{3})([0-9]{3})([A-Z]{3})([0-9]{3})$'
(?:\(\d{3}\)?[ -]\d{3}[ -]\d{4}|\d{3}[ -
(\b[a-zA-Z][a-zA-Z0-9]{1,2}\b|\b[a-zA-Z][a-zA-Z0-9]{3}\b)
^\(?[0-9]{3}\)?[- ]?[0-9]{3}[- ]?[0-9]{4}$
(?<!\d)(\d+\.\d+)
\b(\d{3}-\d{3}-\d{4})\b
(?<=\d+)(?:\,\d{1,3})?
(\d+)([,.][0-9]*)?
[Answer will vary based on the student's response]
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?:\b(?:[a-zA-Z0-9_\-\.]+\b)|\b(?:
```python# Exampleimport re
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(1753|1901|2023|2029|2039|2053|2069|2077|20
[a-z][a-z0-9\-]{6,17}
(^[0-9]{1,3}[-\.][0-9]{1,3}[-\.][0-9]{1,
8[0-9]{9} or blank
(\d{3})(\d{3})(\d{2})
(\d{2,})
^([1-9]|1[0-2]|2[0-3]|[0-1][0-9]|[1-9]|[1-9][0-9]|[1-9]|[1-9][0-9]|[1-9]|[1-9][0-9]|
0\.00%
^[a-zA-Z ]+$
^[+-]?\d{1,3}(,\d{3})*$
A-F: [A-F]{1,2}-Generate a RegEx for this description: A-F, no hyphens, and no periods.Answer: [A-F][A-F]
(?i)((?:[0-9]{4})-(?:[0-9]{2})-(?:[0-9]{2})\s*(?:[0-9]{2})\s*(?:
\d{4}(-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))
(Example) ^\d{3}-\d{3}-\d{4}$
(?i)^(?=.*[0-9])(?=.*[1-9])(?=.*[0-9])(?=.*[1-9])(?=.*[0-9])(?=.*[0-9
r'(\w+)=(\w+)(,\w+)?'
/^[a-zA-Z ]{4,32}$/
[0-9]{1,3}[ -]?[0-9]{2,3}[ -]?[0-9]{1,3}[ -]?[0-9]{1,3
^(\d{3}[ -])(\d{4})([ -]\d{8})?
r'^[1-9][0-9]*$|^[1-9][0-9]*$'
\b(CAS|EC)\d{4}[A-Z]{2}\d{3}\b
/^(?=.*\d)(?=.*[a-z])[a-z0-9]{6,20}$/i
r"^[0-9]{1,3}$"
^([0-9A-Fa-f]{2}[:-]){5}[0-9A-Fa-f]{2}$
^(1[0-9]|20)$
^[a-zA-Z][a-zA-Z0-9]{5,}$
[0-9]{1,2}[.][0-9]{1,2}[.][0-9]{1,2}[.][0-9]{1,2}
[a-zA-Z]{2,3}|[a-zA-Z]{3,}
<td>\s*<table>\s*</table>\s*</td>
(?<=^|\s)([^,]+)(?=\s|$)
/\d{1,2}\/\w{3}\/\d{4}/
Checks to make sure that entry starts with http:// or https:// and that contents are limited to alphas. - /Generate a RegEx for this description. Answer: https?://[a-zA-Z0-9\-_\.\/]+
(\()(.*)(\))
(\d{2})(\d{3})(\d{2})(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})
^[0-9]+(\.[0-9]+)+$
(?<hour>\d{1,2}):(?<minute>\d{2}):(?<second>\d{2})
(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2})
[a-zA-Z0-9\s-]{1,20}
^[1346]|[1-5]$
(?<=\d{1,2})(?<![a-z])[a-z]\d{1,2}(?<![a-z])[a-z]\d{1,2}(?<!\d)
Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answer: ^[0-9]{9}[0-9]{0,2}[0-9]{0,1}[0-9]{0,1}[0-9]{0,1}[0-9]{0,1}$
(^\d+\.\d{0,2}$)
(?=^[a-zA-Z0-9]{2}[a-zA-Z0-9]{3}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA
^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(19|20)\d{2}$
(?<![a-zA-Z0-9])[0-9]{1,2}[a-zA-Z]{1,2}[0-9]{4}(?![a-zA-Z0-9])
'amp'
^(?:    (?:[0-9]{4}|[1-9]\d{3})(?:-[0-9]{2})?    |    (?:[0-9]{4}|[1-9]\d{3})(?:-[0-9]{2
[a-zA-Z]{1,2}[0-9]{1,2}[a-z]{1,2}[0-9]{1,2}[a-z]{1,2}[0-9]{1,2}[a-z]{1,2}[0-9]{1,2}
(\")(.*?)\1"
[a-zA-Z0-9-_.]+
A-F + (A-F) + (A-F) + (A-F) + (A-F) + (A-F) + (A-F) + (A-F) + (A-F) + (A-F) + (A-F) + (A-F) + (A-F) + (A-F) + (A-F) + (A-F) + (A-F) + (A-F) +
[^0-9]{3}-[0-9]{3}-[0-9]{4}
\d{4}-\d{2}-\d{2}-\d{4}
^[a-zA-Z0-9]{2,20}$
^(?:[0-9]{1,2}[0-9]{1,2}[0-9]{1,4}|[0-9]{
(?<!\d)([a-zA-Z0-9_\-\.]+)(?=\d)
(\d{2}/\w{3}\d{4}|\d{4}/\d{2}/\d{2}|\d{4}/\d{2}/\d{2}|\d{4}/\d{2}/\
(?<=\d{1,5})(?=\d{1,3})(?=\d{1,2})(?=\d{1,2})(?=\d{1,3})(?=\d{1,4})(?=\d{1,5})
^(?:[1-9][0-9]|1[012])\/(?:[0-9]{4}|20[0-9]{2})$
(?i)(?:[Ee][Vv][0-9]{3}[.])?[0-9]{1,2}
^([0-9]{1,2}):([0-9]{2})([a-z]{1})([a-z]{1})([a-z]{1})([a-z]{1})([a-z]{1})$
\b(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\b
^\+31\s?[0-9]{9}$
[-+]?\d+(,\d+)?(\.\d+)?
[0-9]{4}[ -]?[0-9]{2}[a-zA-Z]
[ ]+
\b(?:(?<!\d)\d{4}(?:,\d{3})?(?!\d))\b
[1-9]+
(?i)(?<![0-9])(0?[1-9]|[12][0-9]|3[01])-(0?[1-9
[-+]?[0-9]*\.?[0-9]+
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{1,30}$
[^a-zA-Z0-9]+
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{1,63}$
^(?P<number>[0-9]{2})(?P<street>[A-Za-z]{1,2})(?P<city>[A-Za-z]{1,2})(?P<zip>[0-9]{
\b(?:[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\b
{{[^@]+(?=@@@)}}
(?<!\d)((?<year>\d{4})(?<month>\d{2})(?<day>\d{2})\s(?!\d))(?<!\d)((?<year>\d{4})(?<month>\d{2})(?<day>\d{2}
ICD-10 codeGenerate ([A-Z]{3})
^(?!0)(0|[1-9][0-9]*[1-9])[0-9]{1,2}(?:\.0+)?$
[0-9]{4}-[0-9]{2}-[0-9]{2}[0-9]{2}
(?<![0-9])(?<![1-9][0-9])(?![0-9])(?![1-9][0-9][0-9
^[a-zA-Z0-9_]{1,20}$
(?<=\d{4}-)(?<=\d{4}-)(?<=\d{4}-)(?<=\d{4})
^[1-9]\d{3}(-|\.)\d{3}[1-9]\d{4}$
[0-9]{3}-?[0-9]{3}-?[0-9]{4}
\d*\.?\d*|\d+
^[ ]*\d{3}[ ]*[(\.\-]?\d{3}[
\d{0,9}
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer: (0|[1-9][0-9]*.[0-9]{1,1}|1[0-9]{1,2}(.[0-9]{1,2})?|1[
var date = "12-03-2021";var regex = new RegExp(`^([0-9]{2})-([0-9]{2})-([0-9]{4})$`);if(regex.test(date) === true)
[100-199]
/^[+31]\s?[0-9]{9}$/
(?!.*\').*
/^\+1?[0-9]{1,3}\s?[0-9]{1,3}\s?[0-9]{1,3}\s?[0-9]{
(?<zip_code>\d{5}(-\d{4})?|\d{5}(?:\s\d{4})?|\d{5}(?:\s\d{4})?)(?=\s\d{4})
(0[1-9]|[12][0-9]|3[01])[0-9]{2}
Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answer: [A-Z0-9]{9,17}
[0-9]{2}-[0-9]{2}-[0-9]{4} or [0-9]{2}/[0-9]{2}/[0-9]{4} or [0-9]{2}/[0-9]{2}/[0-9]{4}
ESN_regex = r'^[0-9a-f]{6}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
US 10-Digit Phone number matching.*Requires Area Code*Brackets optional, supports: () and []*seperators optional, supports: - and.*whitespace optionalGenerate a RegEx for this description. Answer: (\d{3}-)?\d{3}-\d{4}
(0|[1-9]\d{1,2}|100|101|110|111|2000|2001|2002|2003|2004|2005|2006|2007|2008|2009|2010|2011|2012|2013|2014|2015|2016|2017|2018|2019|2020|2021|2022|2023|2024|2025|2026|2027|
[^a-zA-Z0-9 ]
[a-zA-Z0-9-\s]{2,}
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,20}$
^[+]?\d{1,3}(?:\.\d{1,2})?$
(?<=^|\.)(?<![a-zA-Z0-9_.-])[a-zA-Z0-9_.-]+(?:\.[a-
(?i)(?:(?:[
(\s*)(([^\s]+)\s*)(\s*)(\{)([^\}]+)
^\d{1,10}\.\d{0,2}$
(?<=\+\&quot;)(?<!\d)(?<![\+\-\&quot;])[\d-]{3}(?<![\+\-\&quot;])
(?i)(?=.*[a-z])(?=.*[A-Z]).
^(?:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2})?$
^[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}$
[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}[0-9]{1,2}
^(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]{
(VAT Number Format)
/^(49)([1-9]\d{3})([1-9]\d{3})([1-9]\d{4})([1-9]\d{3})([1-9]\d{4})([1-9]\d{3})([
^([0-2][0-9]|[3][0-1]):([0-5][0-9])$
^(?:(?P<days>\d+)(?P<hours>\d{2})(?P<minutes>\d{2}))?$
(?=^\d{10}$)(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])[a-zA-Z0-9@#$%^&+=-]{10}$
[a-zA-Z0-9]
/(.*?)/
(\d{4})([A-Z]{1})([A-Z]{1})([A-Z]{1})$
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])$
(?<=\$\d{1,2})\d{1,2}(?:\.\d{1,2})?
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{6,}\.xls$
(?<percentage>\d{1,2}%)
/^(?P<q1>\d{1,2})\s?\+\s?(?P<q2>\d{1,2})\s?\+\s?(?P<q3>\d{1,2})\s?\+\s?(?P<q4>\d{1,2})\s?\+\s?(?P<q5>\d{1,2}
^[0-9a-fA-F]{2}-[0-9a-fA-F]{2}-[0-9a-fA-F]{2}-[0-9a-fA-F]{2}-[0-9a-fA-F]{4}$
^(?!127.0.0.1)(?!.*0$)([0-9]{1,3}\.){3}[0-9]{1,3}$
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d\d$
/^[a-z]{1,63}\.([a-z]{1,63}|[a-z]{1,63}\.com|[a-z]{1,63}\.net|[a-z]{1,63}\.org|[a-z]{1,63}\.edu|
\d{2}[1-9]\d\d\d\d
```pythonfilename = 'file.txt'regex = r'^[a-zA-Z0-9_.-]+$'if re.match(regex, filename):    print(f'{filename} is valid.')else:    print(f'{filename} is not valid.')```
[A-Z][a-z]
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{4,8}$
r'^[1-9][0-9]*$'
(?<=Istat Ateco Code )(?= Istat Declaration Ateco 2004Generate a RegEx )
(\d{2}:\d{2})\s?\/\s?(\d{2}:\d{2})\s?\/\s?(\d{2}:\d{2})\s?\/\s?(\d{2}:\d{2})
(\d{5}[-\s]?\d{4}[-\s]?\d{3}[-\s]?\d{2}[-\s]?\d{1})(?:\s|$)
\(?\d{3}\)?[ -]?\d{3}[ -]?
Matches Spanish CIF, NIF and NIE formats. Recognises separation of letters with the hyphen or period.Format CIF: [1 letter][7 numbers][1 number or letter]Format NIF: [8 numbers][1 letter]Format NIE: X[possible 0][7 numbers][1 letter]Note that this expression does not check for the validity of the NIF/CIF/NIE... there are some control characters in there and I don't know how they work.Generally I always strip out any non-alphanumeric characters (hyphens, periods, comm
(^[0-9]+$)
\d{1,2}[-\s]?\d{1,2}[-\s]?\d{1,2}[-\s]?\d{1,2}[-\s]?\d{1,2}[-\s]?\d{
(?<=^|[^"]*\s*)(?=["'])
(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}
(\d{1,3})(\d{1,3})(\d{1,3})(\d{1,3})(\d{1,3})(\d{1,3})
^(?!.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::.*::
^(?=.*[1-9])(?=.*[0-9])(?=.*[0-9])(?!0)(?!0$).{0,100}$
open_time = re.compile(r'\d{2}:\d{2}:\d{2}')close_time = re.compile(r'\d{2}:\d{2}:\d{2}')
^[1-9]\d{1,2}(?:\s
^(?=.*[1-9]\d*$)(?=.*[0-9]\d*[1-9]\d*$)(?=.*[0-9]\d*[1-9]\d*[0
\d{4}-\d{2}-\d{2}(\s?\d{1,2})?
(?i)(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9])(?<![0-9
(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50
^([0-9]{1,2}/[0-9]{1,2}/[0-9]{1,2})$
var re = new RegExp(/^(?:'[^']*'|[^']*)\s*$/);
[a-zA-Z0-9 ]
^[A-Z][A-Za-z0-9]*[A-Za-z0-9]$
^\+?1[0-9]{3}\-?[0-9]{3}\-?[0-9]{4}$
^(?:[0-9]{3}[ -]?){3}[0-9]{10}$
(?<=^\d{1,3}\.){3}(?=\d{1,3})
(?<!\d)(?<![.,])(?<![,])(?!\d)(?<![.,])\d{1,2}(?!\d)
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer: ^\d*(25|50|75|0|00)$
(?<!\d)(\d{1,2}:\d{2})\s(?!\d{1,2}:\d{2})\d{1,2}:\d{2}
(\w{1,3}[\w-]\w{1,3}[\w-]\w{1,3})
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer: ^[^.\s]*
\d{4}-\d{2}-\d{2}
^(?:(?:1[012]|0?[1-9])\/(?:1[012]|0?[1-9])\/(?:1[012]|0?[1-9])\/(?:1
^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[12][0-9]|3[01])\-(19|20)\d\d\d\d$
03[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]
This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answer:grep -Eo '^([0-9a-fA-F]{2}[:-]){5}([0-9a-fA-F]{2})$'
(?:\d+)\.(?:\d+)\.(?:\d+)\.(?:\d+)
var regex = /^[0-9]{4}[-/.][0-9]{2}[-/.][0-9]{2}[-/.][0-9]{2}[-/
\b(0|1|2|3|4|5|6|7|8|9|[1-9]0|[1-9]1|[1-9]2|[1-9]3|[1-9]4|[1-9]5|[1-9]6|[1-9]7|[1-9]8|[1-9]9)\b
THE Complex Password Filter Matching 3 of 4 Character catagories:1.) at least 1 upper case character2.) at least 1 lower case character3.) at least 1 numerical character4.) at least 1 special characterIt also enforces a min and max length and works for.Net and script Regex implimentations.Generate a RegEx for this description. Answer:^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[!@#$%^&*()_+-=\
(00 xor '+')[1-3] [0-9]{5,11}
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?<=\b\w+\b)&quot;(?=\b\w+\b)
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: ^[a-zA-Z][a-zA-Z0-9!@#$%^&amp;*]{5,50}$
^(?:\d{1,2}|\d{3})\s?(?:\d{1,2}|\d{3})\s?(?:\d{1,2}|\d{3})\
(?<!\d)([0-9]{1,3}[a-z]{1,3}[0-9]{1,3}[a-z]{1,3}[0-9]{1,3})(?!\d)
^(.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*?)(?:.*
(?<!\d)(?<!\d\d\d)(?<!\d\d\d\d\d)(?<!\d\d\d\d\d\d\d)(?<!\d\d\d\d\d\d\d\d)(?<!\d\d\d\d\d\d\d\d\d)(?<
/^\d{4}-\d{2}-\d{2}$|^\d{4}-\d{2}-\d{2}-\d{1}$|^\d{4}-\d{2}-\d{2}-\d{1}-\d{1}$/
import repattern = r'#.*'
[\d]{3}-\d{2}-\d{4}
1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|10[0-9]|11[0-9]|12[0-9]
(\d{1,2}|[12]\d|3[01])\s\d{1,2}|\d{4}
[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-
(^\d{3}-\d{3}-\d{4}$|^\d{4}-\d{3}-\d{4}$)
/^(0?[1-9]|1[012])\/([0-3]?[0-9])$/
\b(?:[0-9]{1,2}\s*)?[A-Z]{1,2}\s*(?:[0-9]{1,2}\s*)?[A-Z]{1,2}\s*(?:[0-9]{1,2}\s*)?[A-Z]{
E.\d{3}[.]\d{2}
\d{3}[-\s]?\d{3}[-\s]?\d{4}
^[0-9]{1,3}\.?[0-9]{1,2}(,\d+)?$
MIME mail message: (?P<mime>\w+) mail message (?P<mime_type>\w+)Non-Mime mail message: (?P<mime>\w+) mail message (?P<mime_type>\w+)
(?:\d{3}\s?\d{3}-\d{4}|\d{3}\s?\d{3}-\d{4}|\d{3}\s?\
\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\
key1=value1,key2=value2,key3=value3
```IP Address (IPv4): [0-9]{1,3}\. [0-9]{1,3}\. [0-9]{1,3}\. [0-9]{1,3}
(0[1-9]|1[0-2]|2[0-3]|3[0-1]|4[0-9]|5[0-9])[0-9]{2}[0-9]{2}[0-9]{2}
^\+?1[0-9]{2}\s?[0-9]{3}\s?[0-9]{4}$
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: ^[a-zA-Z0-9!@#$%^&amp;*-]{6,50}$
(?<=\/\/)(?<=\/)(?<=\*)(?<=\#)(?<=\s)(?<=\S).*
^\$\d+[,\s]*(-\d+[,\s]*)*$
^[a-zA-Z0-9-_\.]+$
\w+
(?<![0-9])([0-9]|1[0-2])[0-9]{2}:[0-9]{2}(am|pm)
[0-9]{4}[a-zA-Z]{2}
[a-zA-Z0-9_]*:[a-zA-Z0-9_]*
([0-9]{3})-([0-9]{3})-([0-9]{4})
(?<month>\d{1,2})/(?<day>\d{1,2})/(?<year>\d{4})/(?<month_no>\d{1,
^[0-9]{16}[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0
\b(?i)(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun)\b
^(\d)?[ ]*[\(\.\-]?(\d{3})?[\)\.\-
(?<!\d)(?<!\.)[\d\.]+(?!\.)
d{1,2}(?:\.{1,2})?
The RegEx should be "^\d{3}-\d{3}-\d{4}$".
^[a-zA-Z ]*$
r'^ftp|http|https'
(\d{1,2})/(\d{1,2})/(\d{4})\s(\d{1,2}):(\d{2})
^(?P<start_hour>\d{1,2}):(?P<start_minute>\d{1,2}):
\d{2}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{2}[a-z]{2}[a-z]{2}[a-z]{2}[a-z]
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$#@^!%*?&])[a-zA-Z\d$#@^!%*?&]{6,20}$
(\(?\d{3}\)){3}\s?\d{3}-\d{4}
Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answer:^(0?[1-9]|1[012])[0-9]{3}[0-9]{2}[0-9]{4}$
1[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0
^(?=.*[0-9])[0-9]+$
^[0-9]{1,2}[0-9][0-9]{1,2}[0-9][0-9][0-9]$
(?<![\d:])(\d{2}:\d{2}:\d{2})[\d:]
\bhttps?://aspalliance.com/([0-9]+)\.asp
(?<=^|\s)([a-zA-Z]*ing)\b
\d+
Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answer: ^(?!.*[iIlOoOqQ]).{10,17}$
(?<=\d)(?<!\d\.)\d\d\d\d(?<!\d)
(\d+)(?:\.\d+)?%
[^0-9]9792
^http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\
[0-9]{4}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2
(?<=\d{2}\.\d{2})\s?\d{2}(\.\d{2})?%
(?<!\d)\d{4}(?:\.\d{2}){3}\d{2}(?!\d)
Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answer:^(0?[1-9]|1[012])[0-9]{2}[0-9]{2}[0-9]{4}$
(?<!\d)\d*\.\d+
/^[0-9]{1,3}\.[0-9]{1,3}\.[
^(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])\/(19[2
(?:\d{8}(?:SC)?\d{6})
(^[1-9]\d*$)
^(0[1-9]|[12][0-9]|3[01])\/(1[0-2]|0[1-9]|[12][0-9]|3[01])\/(19|20)\d{2}$
^[a-z]{2}$
\d{1,2}:\d{2}(?:\.\d{1,2})?
^[0-9a-fA-F]{8}$
^\d{2}-\d{2}-\d{4}$
(?<!\d)(?:\.\d+)?(?!\d)
\b-?\d{1,3}(?:\.\d{1,3})?\b
(\d{2})\.(\d{2})\.(\d{4})
^[a-zA-Z]{2}\d{7}$ or ^[a-zA-Z]{4}\d{10}$
^[0-9a-fA-F]{6}$
```(?:[0-9]|1[0-9]2|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]2|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]2
^[0-9]+(,[0-9]+)?$
(\d{3})(\d{4})$
r"^(0[1-9]|1[0-2])[0-9]{2}:[0-5][0-9]{2}[Aa]M$"
[^0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}
\d{1,3}\.\d{3}\.\d{3}
[a-zA-Z0-9]{1,4}[.][a-zA-Z0-9]{1,4}
^\+?1[-\s]?\d{3}[-\s]?\d{3}[-\s]?\d{4}$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{4,8}$
/^\+?1[\d-]{3}[\d-]{3}[\d-]{4}$/
\b(?:\d{3}[0-9]|[0-9]{3}[0-9]|[0-9]{3}[0-9]|[0-9]{3}[0-9]|[0-9]{3}[0-9]|[0-9]{3}[0-9]|[0-9]{3
^(0[1-9]|1[012])[-/](0[1-9]|[12][0-9]|3[01])[-/](19|20)\d\d\d$
(0[1-9]|1[012])/([0-9]{2})/([0-9]{4})
\d{1,2}\.\d{2}\.\d{4}(?:[-\.\s]\d{1,2}[-\.\s]\d{1,2}[-\.\s]\d{4})
\d{2}\.\d{2}\.\d{4}(?:[-/.]\d{2}[-/.]\d{4})?
^[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}$
(?<!\d)\d{3}(?:\.\d{3})?(?!\d)
[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{0,2}[0-9]{
(?:[0-9]{1,2}\s?[0-9]{1,2}:\s?[0-9]{1,2}(?:\s?[0-9]{1,2})?(?:\s?
[^\d]{1,3}(:|AM|PM)?([^\d]{1,3})(\d{1,2})?
[0-9]{1,9}
(?=^[a-zA-Z0-9._-]{5,15}$)
^[^\s]+\.[^\s]+$
^[a-zA-Z0-9]{2,9}$
^(?:[a-zA-Z0-9_\-\.]+\.)*[a-zA-Z0-9_\-\.]+$
(\d{1,2}[\*]\d{1,2}[\*]\d{1,2}[\*]\d{1,2})
\d{1,20}
^[1-9][0-9]*(,\d{3})?(\.\d+)?$
\d{1,3}-\d{1,3}-\d{1,3}-\d{1,3}
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|1[012]) \d{2}:\d{2}:\d{2}$
^[A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-
(\d{2}):(\d{2})
(?<![\d\.])(-?\d+(\.\d+)?|\d+)(?![\d\.])
\d+\.?\d*
ICD-10 codeGenerate a RegEx for this description.
\d{1,3}(,\d{3})?(\.\d{2})?
^\s*(?:[0-9]{1,2}\.){3}\d{
\d{1,10}\.\d{0,2}
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: \b[A-Za-z0-9!@#$%^&amp;*\-_?\.]+\b
/^[+-]?\d*\.?\d+$/
^\d{3}[ ]*[\(\.\-]?\d{3}[\.\-
(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(?<!^)(
\d{1,3}(?:[a-zA-Z]\d{1,3})*
<td>\*</td>
^\+?[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$
^\d+(\.\d{1,2})?(?:[$]\d{1,2})?$
(\d{1,2}\/\d{1,2}\/\d{4})([-/.]\d{1,2})
^(?:\d{1,3}(?:,\d{3})*|\d{1,3}(?:\.\d{3})?)$
[0-9]{1,3}[a-zA-Z]{1,3}[0-9]{1,3}[a-zA-Z0-9]{1,3}
[0-9]{3}|[0-9]{4}
(?<![0-9]{4})(?<![0-9]{2})(?<![0-9]{1})(?<![0-9]{0})(?<
^(0[1-9]|1[012])[0-9]{3}/[0-9]{2}/[0
\d{4}/\d{1,2}/\d{1,2}
\d{4}(0[1-9]|1[012])[0-9]{3}(0[1-9]|1[012])[0-9]{2}
(?<=\s|^)[A-Za-z0-9]+(?=\s|$)
Content-Type="text/plain"
\d{1,2}(?:[,\s]\d{1,2})
(?<=\[)(.*?)(?=\])
\d{1,2}:\d{2} / \d{2}:\d{2} / \d{2} / \d{4}
(?<=\[)(.*)(?=\])
(?<![A-Za-z0-9])[A-Za-z0-9]
This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answer: \d{5}(,\d{5})*
(?<month>\d{2})(?<day>\d{2})(?<year>\d{4})
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer: [^\d\.]
^[a-zA-Z0-9 ]{3,4}$
+48-
$\d{1,3}(?:,\d{3})*(?:,\d{3})*(?:,\d{3})*(?:,\d{3})*(?:,\d{3})*(?:,\d{3})*
^[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}$
\d{5}[-\s]?\d{4}
^[a-zA-Z0-9!@#$%^&*()_+-=\[\]{};':\'\"\\/<>?\.?\|]{1,20}$
\w{3}[a-z]{2}\s\d{2}\s\d{4}
(\d{1,2})([A-Za-z]{1,2})(\d{1,2})
(\d+)\s*[a-zA-Z]{2}\s*[a-zA-Z]{2}[a-zA-Z]{2}[a-zA-Z]{2}[a-zA-Z]{2}[a-zA-Z]{2}[a-zA-Z]{2}[
^\d{4}-\d{3}-\d{2}-\d{2}-\d{2}$
(\w+)\s*:\s*(\w+)
^[A-Z][a-z]{1,2}[A-Z][a-z]{1,2}$
This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answer: grep -Eo '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'
/^\+?[0-9]{7}[-\s]
(?P<H>\d{1,2}):(?P<nn>\d{1,2}):(?P<ss>\d{1,2})
+\d{3}-\d{3}-\d{4}
\b(?:[1-9][0-9]|1[0-9]{2}|[1-9]{3}|[1-9]{4}|[1-9]{5}|[1-9]{6}|[1-9]{
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z])(?=.*[a-zA-Z])(?=.*\d).{6,}$
\d{1,3}(,\d{3})*(\.\d{4})*** Correction: Remove the &quot;+&qu
[regex]^[0-9]{3,4}-([0-9]{2})-([0-9]{2})$
(\d{1,2}|\d{3})
[0-9]{0,3}%[a-zA-Z]{0,1}[0-9]{0,2}
[a-zA-Z0-9-]+
.*[a-z]
(?<!\d)\d{2}:\d{2}(?!\d)
E1.1.1.1
^(8[0-9]|9[0-9]|[0-9]{10})$
^[0-9a-fA-F]{3,6}$
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: (?i)([a-z][a-z0-9]{0,61}[a-z0-9])[a-z0-9]+(?=[A-Z]|$)
^(19|20)\d\d(\/|\.)\d{1,2}(\/|\.)\d{4}$
^[a-f0-9]{32}$
/(^|\n)\s*#\s*(.*?)\s*$/
```ip_regex = r"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"```
^(?:\(\s*[0-
(?<!\d)(?<!\d:\d|\d:\d\d|\d:\d\d\d|\d:\d\d\d\d|\d:\d\d\d\d\d|\d:\d\d\d\d\d\d|\d:\d\d\d\d\d\d|\d:\d\d\d\d
^\+31(0)?[0-9]{9}$
^([0-9]{4})-([0-9]{2})-([0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z)$
^[0-9]{4}-[0-9]{2}-[0-9]{2}$
(\w+)\s*(?:(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun)\s*)?
/^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/
.{5}
\b[A-Za-z0-9-_\.]+\b
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer: `^[0-9]{1,3}[,.]?[0-9]{1,3}$`
^[0-9]{2}[0-9]{1}[0-9]{8}$
^([0-9]{3})([0-9]{3})?([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?([0
r'^\d{1,3}\.?\d{1,3}(,\d{3})*$'
(0x0-0xffff)/(0x00-0xFF)/(0x0000-0xFFFF)/(0x000-0xFFF)/(0x0000-0xFFF)
(?<!\d\d:)\d{1,2}:\d{2}:\d{2}(?:\s+\d{1,2}:\d{2}:\d{2})?)
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\d]{3,9}$
\d{2}:\d{2}:\d{2}-\d{2}:\d{2}-\d{4}
(?<![\w\s])[\w\s]+(?![\w\s])
Checks whether the string specified is in the same format as the UK postcode format defined on:http://www.magma.ca/~djcl/postcd.txtIt allows:A = LetterN = NumberAN NAA, ANA NAA, ANN NAA, AAN NAA, AAA NAA (rare), AANN NAA, AANA NAAIt gives the option to have the two parts of the uk postcode to be separated by a space or a hyphen.(restriction is set to all-capitals)Generate a RegEx
^-?[0-9]*\.?[0-9]*(e[-+]?[0-9]+)?$
Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answer: r'^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?|[\]])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+-=?|[\]])$'
/[a-z0-9-_]+/
\d{4},
[^a-zA-Z0-9_]
\b[A-Z]{1,2}\d{3,4}\b
(?<=^|[\r\n\t])(?:\s*#.*?)(?:\s*$)
\$[0-9]{1,2}\.[0-9]{1,2}
r'^[0-9]*$'
(\d{2}\s\d{2}\s\d{2})\s[\d]{1,3}[\d]{1,2}
The content-type for a MIME mail message is "text/plain" and the content-type for a non-MIME mail message is "text/plain".
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[$-_@.&+])(?=.*[!#?&])[A-Za-z0-9$-_@.&+#]{6,}$
/^(?:\d+(?:\.\d+)?|\d+\.\d+|\d+\.\d+\.\d+|\d+\.\d+\.\d+\.\d+|\d+\.\d+\.\d+\.\d+|\d+\.\
/^0[1-9]$/
r'^\d{1,2}\.\d{1,2}(?:\.\d{1,2})?$'
^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(0[1-9]|[12][0-9]|3[01])$
^[A-Za-z]{1,2}[0-9]{1,3}[A-Za-z]{1,2}$
\s,\s,\s
(^[a-zA-Z0-9_]+)
(?<!\.)(?<!\d)(?<!\.\.)(?<!\d\.)(?<!\d\.)(?<!\.\.)(?<!\d\.)(?<!\d\.)(?<!\d\.)(?
(?i)([a-z]|[0-9]|[A-Z]|[a-z0-9])[a-z]*
This pattern allows standard e-mail addresses (e.g. user@domain.com), sub domains (e.g. user@foo.domain.com), the new two- and four-letter domains (e.g. user@domain.tv and user@domain.name) and country codes (e.g. user@foo.com.us). Also, this patter follows the Network Solutions standard length of 67 characters for top-level domains. The reason I allow numbers to be entered in the domain suffix is for future planning. If you do not want numbers to be able to be added as a domain suffix
(\d{4}-\d{2}-\d{2})\s\d{2}:\d{2}:\d{2}
[A-Z]{3}[0-9]{3}[A-Z]
^[a-zA-Z ]{2,20}$
(00[1-9]|[1-9][0-9]|[1-9][0-9][0-9])[0-9]{3}[0-9]{2}[0-9]{4}
^(?=(\d{3})+(?!\d))[\d\s]*$
^(?P<sign>[-+])(?P<number>\d{0,3})(?P<comma>\d{0,3})?$
^(?=.*\d)(?=.*[a-zA-Z])[a-zA-Z0-9]{4}-\d{2}-\d{2}(?:\s*[0-5]\d|\d{1,
^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[012])/(2000|2001|2002|2003|2004|2005|2006|2007|2008)$
^\d{1,3}[ ]*(\.\-)?\d{3}[ ]*(
^(49)([0-9]{4})$
^(?=.*[a-fA-F0-9]{32})(?=.*[a-fA-F0-9]{32})(?=.*[a-fA-F0-9]{32}).*$
```pythonbody_tag_regex = re.compile(r'<body>(.*?)</body>')```
-48 prefix (optional)
grep -E '^[0-9a-fA-F]{1,4}[0-9a-fA-F]{1,4}[0-9a-fA-F]{1,4}[0-9a-fA-F]{1,4}$'
\b(?<!a)(?<!e)(?<!i)(?<!o)(?<!u)(?<!y)(?<!z)(?<!A)(?<!E)(?<!I)(?<!O)(?<!U)(?<!Y)(?<!Z)(?<!a)(?<!e)(?<!i)(?<!o)(?<!u)(?<
^(?=.*\d)(?=.*,\d)[0-9]{3}(?:\.\d{1,2})?$
[A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z]
(?<!\d)(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\
[\d]{3}-\d{3}-\d{4}
^(?P<year>\d\d\d\d\d\d\d\d\d\d\d\d)\s(?P<month>\d\d\d\d\d\d\d)\s(?P<day>\d\d\d\d\d\d)\s(?P<hour>\d\
^[1-9][0-9]{2}[1-9][0-9]{3}$
^[1-9999999]\d{8}$
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer:^(25|50|75|0|00)$
\d{1,2}:\d{2}:\d{2}
(?<![0-9])([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})([0-9]{2})$
<%=truncate(textarea, 20)%>
^[A-Za-z0-9]{8}$
\w{1,15}
^[1-9][0-9]?[0-9]?[0-9]?[0-9]?$|^[1-9][0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?$
\d{0,5}\.\d{0,3}
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[@$!%*?&])[A-Za-z0-9@$!%*?&]{2,}$
^[+]?[1-9][0-9]{2}[-]?[0-9]{4}$
(?i)([A-Z][a-z]{0,2}[A-Z]?[a-z]{0,2}[A-Z]?)
var regex = new RegExp("^(?:(?:0?[1-9]|1[0-2])?[0-9]|2[0-3]):[0-5][0-9]$");
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9])\/(19|20)[0-9]{2}$
^[A-Z]{2}[0-9]{3}[A-Z]{2}$
^(?:(?:0[1-9]|1[012])\/)?(?:0[1-9]|[12][0-9]|3[01])\/(?:0[1-9]|1[012])\s*(?:[0-9]|[1-9][0-9]|3[01])\s*$
(\d{2}/\d{2}/\d{4} \d{2}:\d{2})|(\d{2}/\d{2}/\d{4} \d{2}:\d{2})\s(\d{2}:\d{2})|(\d{2}/\d{2}/\d{4} \d{2}:\
^\d{4}-\d{2}-\d{2}$
Validates *usable* US telephone numbers (possibly Canadian and Caribbean Islands as well?) Numbers cannot beginning with zero, one, (any number)11, or 555. It will allow either a hyphen, space or period as a separator.Technically (and contrary to popular belief) most 555- numbers ARE valid numbers [see http://www.nanpa.com/nas/public/form555MasterReport.do?method=display555MasterReport ] but they are unlikely to be used by normal folks. Therefore, excluding them with this regex is useful to prevent bogus/fraudulent telephone numbers in forms.
ftp, http, https
^(0|[1-9]|1[012])\/(0|[1-9]|[12][0-9]|3[01])\/(19|20)\d{4}$
^(0[1-9]|1[012])[0-9]{2}:[0-9]{2}[0-9]{2}$
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer:^[^/]*(?<!\\)(?<!\\\/)(?<!\\\/\/)(?<!\\\/\/\/)(?<!\\\/\/\/\/)(?
^(?:[1-9][0-9]|1[0-2]\d|2[0-4]\d|25[0-5])$
^[0-9]{7,10,11}$
(\d{1,2}):(\d{2}):(\d{2})
(^(19|20)\\d\\d\\d\\d$|^(19|20)\\d\\d\\d$|^(19|20)\\d\\d\\d$|^(19|20)
^#[0-9A-Fa-f]{6}$
(?<![0-9])([0-9]{3})-((?![0-9])([0-9]{3}))|((?![0-9])([0-9]{3})-((?![0
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer: (?<!\d)\d{1,4}\.(?!\d)
[^?]*
/^(0[1-9]|1[012])\/([0-9]{2})/(([0-9]{4})/([0-9]{2})/([0-9]{4}))$/
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer: ^[a-zA-Z0-9_]*$
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/
<?xml version="1.0" encoding="UTF-8"?><note><title><author><title><summary><comment></comment></summary></title></author></title>
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z])(?=.*[\s\S])(?=.*[!@#$%^&*()_+\-=\[\]\{\}\|\\\/\?\,\.\:\;\<
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer: (\d+)\.(25|50|75|0|00)$
(\d{3})(\d{4})(\d{1,2})
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z])(?=.*[a-zA-Z0-9])[a-zA-Z0-9\d@#$%^&+=]{6,}$
(?<day>\d{1,2}|[1-9]\d|30|31|\d{2}|\d{3}|\d{4})(?<month>\d{1,2}|[1-9]\d|30
^(0[1-9]|[12][0-9]|3[01])[0-5][0-9]$
0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|[0-9]
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer: ^[0-9]{2,3}$
/^[\d,.]+$/
^[A-Z][a-z]*(?:[A-Z][a-z]*)?[A-Z][a-z]*$
(\d+)$
\d{1,3}(?:[,.]\d{1,3})?
[0-9][0-9]%
/[^\x20-\x7E]/g
/^[+-]?[0-9]*(?:[,.]|[eE][+-]?[0-9]+)?([eE][+-]?[0-9]+)?(?:[,.]|[eE][+-
^(?P<coords>\d{2})(?P<radius>\d+)/(?P<name>\w+)/$
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]+(\.[0-9]+)+$
^[0-9]{1,2}[0-9]{2}[0-9]{4}$
^[0-9]{6}$
^[0-9a-fA-F]{1,64}$
^(?:(?P<month>\d{1,2})\s*)?(?P<day>\d{1,2})\s
\b9792\b
A RegEx for this description is: [0-9]{4}-[0-9]{2}-[0-9]{2}
^(49)([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})([0-9]
[9792]\d{15}
^[a-z0-9]{6,}$
d[0-9]{2}[-][0-9]{4}[-][0-9]{2}
^[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-
(\d{1,2}:\d{2} [AP]M)
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: \b[A-Z][a-z]{0,}[A-Z]\b
(0|[1-9]\d{0,3}|[1-9]\d{0,2}[0-9]|[1-9]\d{0,1}[0-9]|[1-9]\d{0,0}|[1-9]\d{0,0}[0-
^(?=.*[1-9]\d*)(?=.*[0-9]\d*)(?=.*[0-9]\d*)(?=.*[0-9]\d*)(?=.*[0-9]\d*)(?=.*[0-9]\d*)(?=.*[0-9]\d*)(?=.*[0-9]\d*)(?=.*
^\+?\d+(\.\d+)?$
[0-9]{4}-[0-9]{2}-[0-9]{2} 23:59:59
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z])(?=.*[a-zA-Z0-9])[a-zA-Z0-9]{6,}$
^[A-Za-z0-9_.-]*$
^((0[1-9]|1[012])|(1[0-2]|0?[1-9])|(2[0-3]))((0[1-9]|1[012])|(1[0-2]|0?[1-9])|(2[0-3]))$
[0-9]{8}
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer: ^[0-9]{1,4}\.?[0-9]{1,4}$
^[1-9][0-9]{0,5}(?:\.[0-9]{0,3})?$
[a-zA-Z0-9._]{1,8}
\d{3}
^[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}$|^[0-9]{1
^(?=(?:.*?[0-9]){5,10})(?:.*?[0-9]){5,10}$
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{6,})(?!.*(.).*\1)(?!.*(.).*\2)(
<img[^>]+/>
0x[0-9a-fA-F]{3,6}
(0)?\d{1,2}(?:\s|-|\.)?\d{1,2}(?:\s|-|\.)?\d{1,2}(?:\s|-|\.)?\d{1,2}(?:\s|-|\.)?\d{1,2}(?:\s|-|\.)?\d{1,2}(?:\s|-|\.)?\d
(?i)(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@#$%^&+=])[a-zA-Z\d@#$%^&+=]{8,}
[zip_code_regex]
^(0[1-9]|1[0-2])[0-9]:[0-5][0-9]:[0-5
[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}
/\$\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}/.
^[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]
A-Z, a-z, 0-9
(^[0-9]{1,3}[\s\S]*){$1}
[^\d]{1,3}\s[^\d]{1,3}\s[^\d]{1,3}
(03\d{5})(\d{3})(\d{4})
(?<!\.)[a-zA-Z0-9\-\.]+(?!\.)
This will validate a partial postcode beginning with the postal district on up to the whole postcode, returning the two halves in sub-expressions. The main purpose is to return a valid postal district from a partial or whole postcode. The real value in this regex lies in the fact that it will process the postcode correctly regardless of whether or not the space in present after the district. So the accepted formats are A1 1AA, A11 1AA, A1A 1AA, AA1 1AA, AA11 1AA, AA1A 1AA GIR 0AA (and the same 6 formats without the space after
^[^?]*$
The pattern should be "^[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}$"
^(?=.*[0-9])(?!0)(?=.*[0-9]$)(?=.*[0-9][0-9])[0-9]{3}(?:\.[0-9][0-9]{3})?$
^[a-zA-Z][a-zA-Z0-9-]{3}$
\b(0|[1-9]\d*|100[0-9]|1000[0-9]|10000[0-9]|100000[0-9]|1000000[0-9]|10000000[0-9]|100000000[0-9]|1000000000[0-9]|10000000000[0-9]|100000000000[0-9]|
(\d{3})\s\d{3}-\d{4}
(?i)([a-zA-Z0-9]{8})(?=\d)
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer:(http(s)?:\/\/[^\s]+\.[^\s]+\.[^\s]+\.[^\s]+)
^\+?[1-9][0-9]{0,2}[.][1-9]{3}[.][1-9]{3}$
(2 letters) (9 numbers) or (12 numbers)
^(19|20)\d{2}(0[1-9])|(1[0-2])\d{3}(0[1-9])$
^\d{1,7}(\.\d{1,2})?$
[a-zA-Z0-9_]{1,20}
([0-9]{1,3}[0-9]{1,3}[0-9]{1,3})
[0-9]{5}-[0-9]{4}|[0-9]{5}[0-9]{4}|[0-9]{5}[0-9]{4}[0-9]{4}
(\d{1,2}):(\d{2}):(\d{2})[ap]m
\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-\d
0[1-9]|1[012]
^(?=.{4}$)(?=.{2}$)(?=.{2}$)(?=.{2}$)(?=.{2}$)(?=.{2}$)(?=.{2}$)(?=.{2
^\d{1,5}(?:\.\d{1,2})?$
(?:\d*\.\d+|\d+)
(^[0-9]{10}$|^[0-9]{9}$)
var regex = new RegExp("^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(19[01]|20[0-9])$");
<input type="text" name="textarea" id="textarea" maxlength=20 />
^(?=(?:[^0-9]*[0-9]){0,2}[^0-9]*$)(?=(?:[^0-9]*[0-9]){0,2}[^0-9]*$)(?=(?:[^0-9]*[0-9]){0
r'[0-9a-fA-F]+'
(?<=^|\s)(?P<code>\d{3})-(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2})$
(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-={}[]|\:;'<>,
[Your answer here]
^\d*(?:\.\d+)?$
(00)[0-9]{3}[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{2}[0-9]{3}[0-9]{3}[0-
^[a-zA-Z0-9\_\-\.]+\.[a-zA-Z0-9\_\-\.]+$
"Q" field must contain a number that is between 1 and 9, inclusive, and must be followed by a space and a number that is between 1 and 9, inclusive.
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?P<source>https?:\/\/[^\s]+\.[^\s]+\.[^\s]+\.[^\s]+\.[^\s]+\.[^\s]+\.[^\s]+\.[^\s]+\.[^\s]+\.[^\s]+\.[^\s]+\.[^\s]+\.[^\s]+\
/^(0|[1-9][0-9]*)([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0
^[1-5]\d$
(^[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[12][0-9]|3[01]|[1-9]))
^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])\d{4}$
^[1-9]\d{0,2}(\.\d{0,2})?$
function checkName(name) {  return /^[A-Za-z][A-Za-z0-9._-]*[A-Za-z0-9]$/.test(name);}
^(?:(?:(?:0?[1-9])|(?:1[012])|(?:3[01])|(?:5[0-9])|(?:7[0-9])|(?:9[0-9
(?<=CC-)(\d{3})(?=\s|$)
/^\+?(\d{1,2}\)?[-\s]?(\d{1,2}\)?[-\s]?(\d{1,2}\)?[-\s]?(\d{1,2}\)?[-\s]?(\d{1,2})$/
^(0|1|2|3|4|5|6|7|8|9|10|11|12)\/(0|1|2|3|4|5|6|7|8|9|10|11|12)\/(AM|PM|PM|AM|PM|AM|PM|AM|PM|AM|PM|AM|PM|AM|PM|AM|PM|AM|PM|AM|PM
([0-9]{4})-([0-9]{2})-([0-9]{2})-([0-9]{4}).
(?<=^|[^a-zA-Z0-9])[a-zA-Z0-9](?=\s|$)
http://aspalliance.com/(\d+)/
(?<!\d{4}-\d{2}-\d{2})\d{4}-\d{2}-\d{2}(?:\.(?:\d{1,2}|1[012
(1) [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}(2) [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}(3) [0-9]{1,3}\.[0-9]{1,
(0?[1-9]|1[0-2])\/(0?[1-9]|[12][0-9]|3[01])\/(19|20)\d{2}
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer: ^[1-9][0-9]*\.5$
\d{1,12}(?<!0)(?<![1-9])
([0-9]{4})-([0-9]{2})-([0-9]{2})
\d+(\.\d+)?(?:[,]\d+)?[eE][+-]?\d+
^\d{5}(?:-\d{4})?$
^[0-9]{1,3}[0-9]{3}[0-9]{3}[0-9]{3}$
[a-zA-Z0-9.]{1,8}
^\+?[0-9]{7,10,11}$
THE Complex Password Filter Matching 3 of 4 Character catagories:1.) at least 1 upper case character2.) at least 1 lower case character3.) at least 1 numerical character4.) at least 1 special characterIt also enforces a min and max length and works for.Net and script Regex implimentations.Generate a RegEx for this description. Answer: ^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za
<h1-6>
^[a-zA-Z ]{1,20}$
^[0-9a-fA-F]{1,6}$
(?<![^a-zA-Z0-9_])[a-zA-Z0-9_]{3}(?![^a-zA-Z0-9_])
[0-9]*[1-9][0-9]*[1-9]*[0-9]*[1-9]*[0-9]*[1-9]*[0-9]*[1-9][0-9]*[1-9][0-9]*[1-9][0-9]*
^(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[
\d{1,5}\.\d{3}
(\d{9}|\d{3}[A-Z]{3}[A-Z]{3}[A-Z]{3}[A-Z]{3}[A-Z]{3}
^[-\d,]+$
(^[0-9]{1,2}:[0-9]{2}:[0-9]{2}$)
^[123.456.789-98]$
(?<!\d{1,2}:\d{1,2}:\d{1,2})\d{1,2}:\d{1,2}(?!\d{1,2}:\d{1,2}:\d{1,2})\d{1,2}
^(0[1-9]|1[012])[0-9]{3}( \d{2})? (?:(?:[A-Z][a-z]{3})?|(?:[a-z]{3}[A-Z])?)$
(\d{2}[-\/]\d{2}[-\/]\d{4})
^[A-Z][a-z]?[0-9]{1,2}[A-Z]?[a-z]?[0-9]{1
var limitLength = true;var limitLength = true;var limitLength = true;var limitLength = true;var limitLength = true;var limitLength = true;var limitLength = true;var limitLength = true;
(\d)
[a-zA-Z0-9-\w\s]
Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answer: \d{0,2}\.\d{0,2}
(?:\d{1,2}|\d{3})/\d{1,2}/\d{4}
^[0-9]*(,[0-9]*)?(\.0*)?$
(?<!\d)(?<!\d\s)(?<!\d\s\s)(?<!\d\s\s\s)(?<!\d\s\s\s\s)(?<!\d\s\s\s\s\s)(?<!\d\s\s\s\s\s\s)(?<!\d\s\s\s\s\
^[0-9]{1,3},[0-9]{3,4},[0-9]{4
[0-9]{4}[a-z]{2}
(?<![\d,])(?<![\d,])(?<![\d])\d+(?![\d,])
^(4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|0[0-9]|1[0-9]|2[0-9]|3[0-9]|
(\d|[a-zA-Z])
/^[a-zA-Z0-9]{3}$/
(?<=\".*?\").*
[1]|[
[{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}]
(?<PESEL>\d{9})
^([0-9]{1,3}[ -]?)?([0-9]{3}[ -]?)?([0-9]{4})$
^(20|21|22|23|24|25|26|27|28|29|30|31)?[0-9]{2}[0-9]{2}[0-9]{4}$
(\d{3})(?:\.\d{3})?
[^A-Z]{3}[A-Z]{3}[^A-Z]{2}[A-Z]{2}[^A-Z]{1
(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}|[0-9]{1,3}\.){1,3}\[(?:[0-9]{1,3}\.){3}[0-9]{1,3}|[
^(?!127.0.0.1)(?:[0-9]{1,3}\.){3}[0-9]{1,3}$
/^\d{1,7}(?:\.\d{1,2})?$/
^[0-9]{0,9}$
India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answer: (\+91)([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{3})
^(?:(?:19|20)\d{2}(?:[-/](?:0[1-9]|1[012])|(?:[1-9
[0-9]{3,6}|[0-9]{3,5}[a-zA-Z]
\d{1,3}(\.\d{1,2})?%
(Example)"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d).{8,20}$"
US 10-Digit Phone number matching.*Requires Area Code*Brackets optional, supports: () and []*seperators optional, supports: - and.*whitespace optionalGenerate a RegEx for this description. Answer:/^\+\d{1,3}\-?\d{1,3}-?\d{1,3}-?\d{1,3}-?\d{1,4}$/
\b(9792)\d{4}[ -]\d{4}[ -]\d{4}[ -]\d{4}[ -]\d{4}\b
[0-9]{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer: ^[^/\\]*(?:\.[^/\\]*){2,3}$
(?i)(?<![a-zA-Z0-9])[a-zA-Z0-9](?![a-zA-Z0-9])[a-zA-Z0-9]
XXX-XX-XX-XXX-XX-XX-XX-XX-XX-XX-XX
Matches valid South African ID numbers based on all criteria (except of course the checksum digit at the end).Matches the format defined as:YYMMDDSSSSCAZ.YY - Year,MM - Month,DD - Day,SSSS - Gender,C - Denotes citizenship (0 or a 1),A - Always an 8,Z - Checksum digit (doesn't validate if the checksum itself is valid).Also supports the following ways of entering it:YYMMDDSSSSCAZ |YYMMDD SSSS CAZ |YY
\b[A-Z][a-z]{0,3}\s\d{1,2},\s\
(?<![a-zA-Z])([0-9]{1,3})([a-zA-Z]?)
(?<![0-9])([0-9]{2}[-/][0-9]{2}[-/][0-9]{4})
\d{4}[a-z]{2}
^51[0-9]{14}$
(.*)
(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])
(^[1-9][0-9]*$)|(^[1-9]$)
(?<=^|[^0-9])(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<=^|\s)(\d{1,2}:\d{2})(?=\s|$)
^[0-9]{1,2}.[0-9]{1,2}.[0-9]{1,2}$
^(?=.*ing)(?!.*ing$)(?=.*[^a-zA-Z])[a-zA-Z0-9-_]{3,}$
(?:\d{1,3}[-\s]\d{1,3}[-\s]\d{1,3}[-\s]\d{1,3}[-\s]\d{1,3})
^[0-9]{5}[- ]?[0-9]{3}[- ]?[0-9]{2}[- ]?[0-9]{2}$
[0-9]{3}[0-9][0-9][0-9][0-9][0-9]
^(?:0[1-9]|1[012])/(?:0[1-9]|[12][0-9]|3[01])/[0-9]{4}$
\d+$
^\+?\d{2}[-\s]?\d{3}[-\s]?\d{4}$
^\d{3}-\d{2}-\d{4}$
(?<![a-zA-Z0-9, ])(?<![a-zA-Z0-9])[a-zA-Z0-9, ]+
This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.Generate a RegEx for this description. Answer: (?<![\d,])(?<![,])(?<![,,])\d{3
^(?!.*\.)(?:[a-z0-9]{1,63}|[a-z0-9]{1,128})$
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
[0-9]{4}
^(?:(?:0?[1-9]|1[012])\/(?:0?[1-9]|[12][0-9]|3[01]))(?:(?:0?[1-9
(0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9)
(00|[1-9][0-9]|1[0-9]{2}|[1-9]{3}|[1-9]{4}|[1-9]{5}|[
/^(0?[1-9])?[0-9]{2}(\/|-)?[0-9]{2}$/
(\d{3})\s(\d{3})\s(\d{4})
^(?=.*[a-z])(?=.*\d)(?=.*[A-Z])(?=.*[a-zA-Z0-9]{6,})[a-zA-Z0-9]{6,}$
[0-9]{1,2}/[0-9]{4}
(0|[1-9][0-9]*[0-9]*|[1-9][0-9]*[1-9]|[1-9][0-9]*[0-9][0-9])
^[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}$
/\s*#.*$/
^[A-Za-z0-9\W]{1,}$
[0-9]+(\.[0-9]+)?$
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[^0-9a-zA-Z])[0-9a-zA-Z0-9]{6}$
(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6,}
"^(9[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]) AA$"
^(0[1-9]|1[012])[0-5][0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9
(\d{4}-\d{2}-\d{2})
/[^\x20-\x7E]+/g
\d{1,3}(,\d{3})*(\.\d{2})?
/^\d{3}$/.
\d{3}(?:\.\d{3})?
(?<![a-zA-Z_0-9])[a-zA-Z_0-9][a-zA-Z_0-9\-_\.\:\]\s]{1,}[a-zA-Z
[A-Za-z0-9.]{0,8}
^\+?[
^\d{1,2}:\d{2}(?:[ap]\.m\.s)?$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[A-Za-z\d]{6,}$
(^[0-9]{1,3}\.){3}[0-9]{1,3}$
string[] data = System.IO.File.ReadAllLines(@"C:\temp\file.txt");Regex regex = new Regex("//(.*?)/*(.*?)*/");
^[-+]?\d+(\.\d+)?$
[N|S|E|W] (\d+|\d+\.\d+|\d+)
^\d{1,3}[ ]*[(\.\-)]?\d{3}[ ]
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$
(\d{1,2}):(\d{2})(am|pm)
(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/([0-9]{4})
^9792[0-9]{15}$
var searchField = "This is a test "var regEx = new RegExp(".*?(?<=\s|\'\s).*?");var split = searchField.split(regEx);
^[a-zA-Z0-9_]*[a-zA-Z0-9_]*$
(\d{1,2}:\d{2}:\d{2})(\s*)(\d{1,2}:\d{2}:\d{2})(\s*)(\d{1,2}:\d{2}:\d{2})
[0-9]{1,2}[-/.][0-9]{1,2}[-/.][0-9]{1,2}[-/.][0-9]{1,2}[-/.][0-9]{1,2}[-/.][0-9]{1,2}[-/.][0-9]{1,2}[-/.][0-9]
(?<![0-9])[0-9]{9}-?[0-9]{9}
[0-9]{3}[\+\-\&]?[0-9]{3}[\+\-\&]?[0-9]{3}[\+\-\&]?[0-9]{4
^(?=.*[A-Za-z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\\|~]).*$
\b\d{2}\/\d{2}\/\d{4}\b
(?<![A-Za-z0-9])[A-Za-z0-9][A-Za-z0-9]{2}[A-Za-z0-9]{3}[A-Za-z0-9]{2}[A-Za-z0-9]{3
[^A-Za-z ]+
^[A-Z][a-z]*[A-Z][a-z]*[A-Z][a-z]*$
[a-zA-Z0-9][a-zA-Z0-9-]*
(?<!\d)(?<!\.)\d{3}(?!\.)\d{3}(?!\.)\d{4}(?!\.)\d{4}(?!\.)\d{4}(?!\.)\d{4}(?!\.)\d{4}(?!\.)\d{3}(?!\.)\d{3}(
/^(?=.{4}\d{3}$)(?=.{4}\d{3}$)(?=.{4}\d{3}$)(?=.{4}\d{3}$)(?=.{4}\d{3}$)(?=.{4}\d{3}$)(?=.{4}\d{3}$)(?=.{4}\d{3
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@$!%*?&])[0-9a-zA-Z@$!%*?&]{10}$
^[a-zA-Z]{4,32}$
[Zip Code]\d{5}[A-Z]{1}[1-9]\d{4}
(Example)^(?P<country_code>\d{1,2})[-.]?(?P<country_name>\w+)\s*(?P<vat_number>\d{2,3})$
(?<year>\d{4})/(?<month>\d{2})/(?<day>\d{2})
^(0|[1-9][0-9]*)(,0|[1-9][0-9]*)?$
^[3-9]\d{4,8}(?:\d{3})?$
#(?=\d+)(?=\w+)(?=\w+)(?=\d+)
^[A-D]\d{2}[A-D]\d{2}$
^(?=.*[0-9])[0-9]+(?:\.[0-9]+)+$
`^(.+?)(?:\.jpg|\.gif|\.png)$`
(\w+ \.\w+)
(\d+\.\d+|\d+)(,|\.)(\d+|\.)(\d+)
/^[0-9]+(?:\.[0-9]+)+$/
\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}
^(?:\s*//|\s*/*|\s*//*|\s*/*/*|\s*//*/*/*|\s*//*/*/*/*|\s*//*/*/*/*|\s*//*/*/*/*|\s*//*/*/*/*|\s*//*/*/*/*|\s*//*/*/*/*|\s*//*
^(?=.{5,10}$)(?=.*[0-9])[0-9]+$
(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w+),(\w
0.00[1-9]|1[0-2]
[0-9]{1,3}(\.\d{1,2})?|(-?\d+(\.\d+)?)([eE][+-]?\d+)
(^[0-9]{4,8}$)([0-9])([a-zA-Z])$
SELECT DISTINCT date(date_string)FROM (    SELECT dateformat(date_string, '%Y-%m-%d %H:%i:%s %p')    FROM (
[0-9]{3}[0-9]{3}[0-9]{3}
(\d+\.\d+|\d+)(?:\s*[+-])?
\d{4}[-\s]?\d{3}[-\s]?\d{2}
(1-12)\\d{1,2}
(\d{1,20})
<img[^>]*>(.*?)</img>
(?<gwv_lt_10k_lbs>\d{1,3})(?<gwv_lt_10k_lbs_lbs>\d{1,3})(?<gwv_lt_10k_lbs_lbs>\d{1,3})(?<gwv_lt_10k_lbs_lbs>\d{1,3})(?<gwv_lt_
^(1\d{0,2}|2[0-4]\d|25[0-5])$
^1\d{1,}0\d{1,}$
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[a-zA-Z\d@$!%*?&]{4,8}$
[0-9]{4}[0-9]{2}[0-9]{2}[0-9]
[0-9]{1,3}\.[0-9]{1,3}\.[0
[1-9]\d{0,2}
[1,234,
^(?P<area>.+?)(?P<zipcode>.+)$
(?<!\d)\d{1,2}\.(?!\d)\d{4}(?!\d{1,2})\d{1,2}\.\d{1,2}\.\d{1,
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:(?<!\d)(?:[$£€]?\d{1,3}(?:,\d{3})*[$£€]?)
^\d{1,3}[ -]?\d{3}[ -]?\d{
(?<!\\w)\\w(?<!\\w)\\w(?<!\\w)\\w(?!\\w)
(\d{3})(\d{2})(\d{4})
(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})|(\d{4}-\d{2}-\d{2} \
(?<=^|[^0-9])[0-9]{3}[0-9]{3}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{1}[0-9]{
[a-zA-Z0-9-\s]{5,20}
(^[a-f0-9]{1,2}$|^[A-F0-9]{1,2}$)
(?<=\d{4})(?=\d{2})(
(?=^[0
XXX-XX-XX-XXX ; XXX-XXX-XX-XX ; XXX XX XX XXX ; XXX XXX XX XX
(\b[A-Za-z0-9]{2}\d{9}\b|\b[A-Za-z0-9]{12}\b)
[a-zA-Z0-9-\s]+
(?=.*[0-9])(?=.*[a-zA-Z])|(?=.*[0-9])(?=.*[A-Z])
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$
^\d{1,3}-\d{1,3}-\d{4}$
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer: ^(25|50|75|0|00)$
\d{1,2}/\d{4}
\d{1,3}[^,]+,\d{1,3}[^,]+,\d{1,3}[^,]+,\d{1,3}[^,]+,\d{1,3}[^,]+,\d{1,3}[^,]+,\d{1,3}[^,]+,\
(?<year>\d{4})/(?<month>\d{2})/(?<day>
Regular expression for US (ZIP and ZIP+4) and Canadian postal codes. It allows 5 digits for the first US postal code and requires that the +4, if it exists, is four digits long. Canadain postal codes can contain a space and take form of A1A 1A1. The letters can be upper or lower case, but the first letter must be one of the standard Canadian zones: A,B,C,E,G,H,J,K,L,M,N,P,R,S,T,V,X,Y.Generate a RegEx for this description.
^(?:\d{3}[-\.\s]??\d{3}[-\.\s]??\d{4}|\d{3}[-\.\s]??\d{3}[-\.\s]??\d{3}[-\.\s]??\d{4}|\d{3}[-\.\s]
/^(?=.{10}$)(?=.*[0-9])(?=.*[8-9])[0-9]{10}$/
^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,20}$
THE Complex Password Filter Matching 3 of 4 Character catagories:1.) at least 1 upper case character2.) at least 1 lower case character3.) at least 1 numerical character4.) at least 1 special characterIt also enforces a min and max length and works for.Net and script Regex implimentations.Generate a RegEx for this description. Answer:^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[a-z
(?:\d{1,3}(?:,\d{3})*|\d{1,3}(?:,\d{3})?)
^(?!.*(xx|yy|...))[a-zA-Z0-9]*$
^[1-9][0-9]{0,3}$
(.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*) (.*)
(?<=^|\s)(?<!\(|\))[a-zA-Z0-9_]+(?=\|\))
(?=\d{3}-\d{2}-\d{4}$)(?=\d{3}-\d{2}-\d{4}$)(?=\d{3}-\d{2}-\d{4}$)(?=\d{3}-\d{2}-\d{4}$)(?=\d{3}
^[A-Z][a-z]{1,2}[0-9]{1,2}$
(\d{1,2})\.(\d{1,2})\.(\d{1,3})
(\d{1,3})(?:-)?(\d{1,3})(?:-)?(\d{1,3})(?:-)?(\d{1,3})(?:-)?(\d{1,3})(?:-)?(\d{1,3})(?:-)?(\d{1,3})
^(?:[A-Fa-f0-9]{1,4}\.){3}[A-Fa-f0-9]{1,4}$
[0-9]{1,
(?<!\\n)(?<!\\r)(?<!\\t)(?<!\\f)(?<!\\v)(?<!\\")(?<!\\\'')(?<!\\\#)(?<!\\\$)(?<!\\\%)(?<!\\\&)(?<!\\\^)(?<!\\\*)(?<!\\\+
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?<=^|\s)(?=\s|$)(?<!\w)(?=\w|$
Regex to validate strong password for.NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.Generate a RegEx for this description. Answer:
(?<=\d{5})(?=\d{2}|\d{3}|\d{4})(?=\d{1}|\d{0}|\d{3}|\d{2}|\d{1})
(\d{1,3}|49[1-9]\d|49[1-9]\d\d|49[1-9]\d\d\d|49[1-9]\d\d\d\d)
Positive decimal values can be represented using the decimal notation, while negative decimal values can be represented using the minus sign (-).
[0-9]{1,3}[,0-9]{1,3}[,0-9]{1,3}[,0-9]{1,3}[,0-9]{1,3}[,0-9]{1,3}[,0-9]{1,3}[,0-9]{1,3}[,0-9]{1,3}[,0-9]{1,
^(?:[1-9][0-9]|1[012])[0-5][0-9]$
/^(www\.)?([a-zA-Z0-9-]+\.){1,3}\w+$/
^(?=.*[0-9])[0-9]{9}(?:-[0-9]{4})?$
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z0-9])[0-9]{4}$
(?<!\d{4}-\d{2}-\d{2})\d{2}/\d{2}/\d{4}|(?<!\d{4}-\d{2}-\d{2})\
^\+?((
^[0-9]+(\.[0-9]+)?$
(A0-A9)A0-A9(A10)A10
(\d{1,2})([\d\-]{1,2})(\d{4})
r'^[0-9]{1,10}(\.\d{3})?$'
\b(?=^[A-Za-z0-9._-]*$)(?![-_.])(?=^[A-Za-z0-9])(?=^[A-Za-z0-9._-]*$)(?=^[A-Za-z0-9._-]*$)(?!
\d
(\d+)(\+|\-)(\d+)
(?<![0-9])(?<![0-9][0-9])([0-9]{2})(?![0-9])
^(?:[0-9]|1[0-9]|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]|2[0-4][
\b(7[0-9]|8[0-9]|9[0-9]|0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[
/\d{1,2}\/\d{2,4}/
^[a-zA-Z0-9_]{8,30}$
^[A-Za-z]{4,15}$
^\d{10}\.\d{2}$
(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
/^(19|20)\d\d\d$|^(19|20)\d\d$|^(19|20)\d\d$/
^(?=.*[1-9])(?=.*[1-9][1-9])(?=.*[1-9][1-9][1-9])(?=.*[1-9][1-9][1-9][1-9])[0-9]{4}$
(?<!\d)\d{9}(?!\d)
\bhttps?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+\.\w{2,3}\b
^.*?\d{4}$
^[a-zA-Z0-9]{6,}$
^[a-zA-Z]{4}[0-9]{4}[a-zA-Z]{2}[0-9]{6}$
(?<![0-9])(?<![1-9][0-9])[0-9]{4}-(0[1-9]|1[012])[0-9]{2}-(0[1-9]
(?<!\d{4}/\d{2}/\d{2})(?!\d{4}/\d{2}/\d{2})(?!\d{4}/\d{2}/\d{2})(?!\d{4}/\d{2}/\d{2})(?!\d{4}/\d{2}
^[0-9]{5}[.][0-9]{2}$
\b(?i)([a-z0-9]+)@(?i)([a-z0-9]+\.)+[a-z]{2,}\b
^(?:[0-9]{1,3}[-/][0-9]{1,3}[-/][0-9]{1,3}[-/][0-9]{1,3}[-/][0-9]{1,3}[-/][0-9]{1,3}[-/][0-9]{1,3}[-/][0-9]{1,3}[-
if (Regex.IsMatch(input, @"^[a-zA-Z0-9_]+$")){    // Valid}else{    // Invalid}
\d{1,2}/\d{1,2}/\d{4}|\d{1,2}:\d{2}:\d{2}|\d{1,2}:\d{2}:\d{2}|\d{1,2}:\d{2}:\d{2
(?<=\s)(?<!\S)([\w\s]+)
^(?=.{10}$)[0-9]{10}$
^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[#][0-9]{1,2})(?=.*[$][0-9]{1,2})(?=.*[#][0-9]{1,2})(?=.*[$][0-9]{1
/\b(?:0[1-9]|1[012])/(?:0[1-9]|[12][0-9]|3[01])/[0-9]{4}\b/
(?<!\d)\d{1,3}\.\d{1,3}\.
"0,000.00%"
(?<![\d\.])(?<![\d\.])(?<![\d\.])(?<![\d
^BG\d{6}$
^\d{3}$|^\d{4}$
^(0|[1-9]\d?){3}$
(0|1|2|3|4|5|6|7|8|9)
#!/usr/bin/env python
/^[A-Z][a-z]*[A-Z][a-z]*[A-Z][a-z]*[A-Z][a-z]*$
^(([1-9]\d|1[2-9]
^\d+\.\d+\.\d+\.\d+
\d{1,2}[0-9]{3}
(^(0|1[0-9]|2[0-9]|3[0-1])[0-9]{2}$|^(0[1-9]|1[012])[0-9]{4}$)
(\d{1,2}[A-D]?)
r'\b[a-zA-Z0-9_]*\b'
(0[1-9]|1[012])[ -]?(0[1-9]|[12][0-9]|3[01])[ :](0[1-9]|1[012])[ -]?(19|20)[0-9]
(\d{4}-\d{2}-\d{2}|\d{4}-\d{2}-\d{2}|\d{4}-\d{2}-\d{2}|\d{4}-\d{2}-\d{2}-\d{2}|\d{4}
[\d+\.\d+-\d+\.\d
^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(19|20)[0-9]{2}$
[1]|
^[^\r\n]*(?:(?:[^\r\n]*\r?\n){2,}|[^\r\n]*$)
\S{5,12}
\d{1,5}\.\d{1,5}\.\d{1,5}\.\d{1,5}\.\d{1,5}\.\d{1,5}\.\d{1,5}\.\d{1,5}\.\d{1,5}\.\d{1,5}\.\d{1,5}\.\d{1,5}\.\d{1
A(?P<prefix>[A-Z])[K-N](?P<zone>\d{1,3})(?P<suffix>\d{1,3})
(\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{4}|\d{3}-\d{3}-\d{4}|\
/^[0-9]*$/
Regex.IsMatch(Text, "[\u0600-\u06FF]");
[0-9]{3}[ -]?[0-9]{4}
^([0-9a-fA-F]{2}[:-]){5}([0-9a-fA-F]{2})$
(\d+)(,\d+)?(\.\d+)?
/^(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])\/(19|20)\d{4}$/
(\d{2}:\d{2}:\d{2})\s*(am|pm)
^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[\W])[a-zA-Z0-9\W]{6,}$
[0-9]{3}[0-9]{3}[0-9
/^[a-zA-Z][a-zA-Z0-9-_]{5}[a-zA-Z0-9-_]{7}[a-zA-Z0-9-_]{8}$/
ATU\d{5}-\d{6}
var regex = /<!--.*?-->[^<]*/g;
<?xml version="1.0" encoding="UTF-8"?><note>    <title>My document</title>    <body>        <h1>This is a heading</h1>        <p>This is a paragraph</p
^(?:[1346]|[1-9]\d|[1-9][0-9]|[1-9][0-9][0-9])$
# This is a test string for versioning in XX.YY.ZZ format
This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.NET :Regex.Replace(Html, "<[^>]*>", string.Empty);Generate a RegEx for this description. Answer:Regex.Replace(Html, "<[^>]*>", string.Empty);
#[0-9A-Fa-f]{1,6}
^(([0-9a-fA-F0-9]{1,4}:){7}[0-9a-fA-F0-9]{1,4}|[0-9a-fA-F0-9]{1,4}:){1,7}[0-9a-fA-F0-9]{1,4}|[0-9a-fA-
[^\d\W]+
^(?=.*[0-9])(?=.*[a-z])[0-9a-z]{1,4}(?=.*[0-9])(?=.*[a-z])(?=.*[!@#$%^&*()_+\-=?{};:,./<>\|~\[\]\
This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answer:
0\.00%|1\.00%|2\.00%|3\.00%|4\.00%|5\.00%|6\.00%|7\.00%|8\.00%|9\.00%|10\.00%
/^[0-9a-zA-Z_\-]*$/
^(?=.*[0-9])(?=.*[1-9])[0-9]{3}(,[0-9]{3})*$
^[a-zA-Z]{4,15}$
^(0[1-9]|1[0-2]):([0-5][0-9]):[0-5][0-9
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:[\d.]+
^<(h1-6)>(.*?)</\1>$
(\d{1,2}|\d{3})\s*-\s*(\d{1,2}|\d{3})\s*-\s*(\d{1,2}|\d{3})
(?=^[a-zA-Z0-9._-]{5,15}$)[a-zA-Z0-9._-]{5,15}$
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer: (\d+\.\d+|\d+)
(?<!\d)(?:[0-9]{3}[-][0-9]{2}[-][0-9]{4}|[0-9]{3}[-][0-9]{2}[0-9]{3}|[0-9]{3}[-][0-9]{4}[0-9]|[
match string between chars'' as in source codeGenerate a RegEx for this description. Answer: \b\w+\b
^(?=.*[A-Z])(?=.*[a-z])[A-Za-z][A-Za-z0-9]{2,}$
^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[@$!%*?&])[A-Za-z0-9@$!%*?&]+$
^(?:[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9])$
(?i)([a-zA-Z][a-zA-Z0-9_]*)([a-zA-Z0-9_]*)([a-zA-Z0-9_]*)([a-zA-Z0-9_]*)
^(?=.*[0-9])(?=.*[A-Z])(?=.*[a-z])(?=.*[@#$%^&+=]).{16,}$
@(?<name>\w+)@
[0-9]{5}\.[0-9]{2}
^[0-9]{1,3}$
(?<!\.)\+?\d*\.?\d*(?!\.)
\b(0[1-9]|1[012])/(0[1-9]|1[012])/\d{4}(0[1-9]|[12][0-9])[0-9]{2}\b
([a-z]|[A-Z])
\b(?:snake|s|n|n|n|n|s|n|n|n|s|n|n|s|n|n|n|s|n|n|n|s|n|n|n|s|n|n|n|s|n|n|n|s|n|n|n|s|n|n|n|
/^(0?[1-9]|1[012])\/(0?[1-9]|[12][0-9]|3[01])\/(0?[1-9]|[12][0-9]|3[01])\/([0-9]{1,2}):([0-
^[A-Z][a-z]{0,2}[0-9]{1,2}[,
^[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}$
[0-9]{1,2}[.][0-9]{1,2}[.][0-9]{1,2}[0-9]
(\d{2}/\d{2}/\d{4})
^(?:\+)?[0-9]{3}[-\s]?[0-9]{3}[-\s]?[0-9]{4}$
^
^[1-9]\d*(\.\d+)?(?:\+|-)?$
[0-9A-Fa-f]{8}
[0-9]{1}[0-9]{0,2}
r'^[a-zA-Z0-9_.-]+\.[a-zA-Z0-9_.-]+$'
[0-9]{1,2}(,[0-9]{1,2})*
/\s*#\s*[^\s\n]*\n/
(\(?\d{3}\)?[ -]?\d{3}[ -]?\d{
^[0-9]*\.[0-9]{1,2}$
^(?=.*[5])(?=.*[0-9])(?=.*[6])(?=.*[7])(?=.*[8])(?=.*[9])(?=.*[1])(?=.*[2])(?=.*[3])(?=.*[4])(?=.*[5])(?=.*[6])(?=.*
\b(?:[0-9]|1[0-9]|2[0-4][0-9]|25[0-5])\b
\d{1,5}(\.\d{1,2})
(?=^[a-zA-Z]{4,15}$)(?=.*[a-z])(?=.*[0-9])(?=.*[_])
[0-9][0-9][0-9][0-9]|[0-9][0-9]
^(?:(?:[0-9]{1,2}(?
(?=^[a-zA-Z])(?=^[a-zA-Z])(?=^[a-zA-Z])(?=^[a-zA-Z])(?=^[a-zA-Z])(?=^[a-zA-Z])(?=^[a-zA-Z])(?=^[
(\d{3}[-\s]?\d{3}[-\s]?\d{4})
[MMM]\d{0,2
\d{3}-\d{3}-\d{4}
(\d{1,2})(\.\d{1,2})?%
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer:^[0-9]*\.[0-9]*(,?\d{1,3})?$
(?i)(?:[a-z]{2,3}|[a-z]{3,})
\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d+|\d+\.\d
[0-9]{2}[-.]?[0-9]{3}[-.]?[0-9]{4}
[^\d]\d{1,3}[^\d]\d{1,3}[^\d]\d{1,3}[^\d]\d{1,3}[^\d]\d{1,3}[^\d]\d{1,3}[^\d]\d{
^[\+\-]?\d{1,3}[\d\s]{3}\d[\d\s]{3}[\+\-]?\d{4}$
\b(?!'.*?'\b)\w+
Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answer:[0-9]{4}[-0-9]{2}[0-9]{2}
^[0-9]{4}-[0-9]{2}-01[0-9]{2}$
^[0-9]{1,4}\.?[0-9]{0,3}$
(\d{2})(h|m|s)
Vat percentage format for Indian and Germany: [0-9]{2}[.][0-9]{2}[.][0-9]{2}
[a-zA-Z][a-zA-Z0-9_\-\.]*
^[0-9]+(,[0-9]+)?[.]([0-9]+)?[,]?([0-9]+(\.[0-9]+)?)?$
(\d{1,2})([%])?
\b[A-Za-z]{3}\d{2}\s\d{2}\b
^1\d{0,2}$
(?<![\s-])[0-9]{1,3}[-\s]?[0-9]{1,3}[-\s]?[0-9]{1
ISBN-10: (?<!\d)\d{9}(?!\d)ISBN-13: (?<!\d)\d{13}(?!\d)
^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[ ])(?=.*[-]).{5}$
[1-9]\d{3}(?:-[1-9]\d{3})?
^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$
(?<![\d\s\(\)])[\d\s\(\) - \d\s\(\) - \d\s\(\) - \d\s\(\) - \d
^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} - \d{2}:\d{2} am/pm$
(222) (555)
^(?=[a-z]*$)(?=[1-9]*$)(?=[0-9]*$)(?=.*[a-z])(?=.*[1-9])(?=.*[0-9])(?=.*[a-zA-Z])[a-zA-Z0-9]{6,20}$
(?=^\d{1,2}:\d{1,2}:\d{1,2}$)(?=^\d{1,2}:\d{1,2}$)(?=^\d{1,2}:\d{1,2}$)(?=^[a-zA-Z]{1,2
/^https?:\/\/[^\s]+\.\.(jpg|jpeg|png|gif)$/
(?=^[a-zA-Z0-9_]{1,20}$)(?=^[a-zA-Z0-9_]{1,20}$)(?=^[a-zA-Z0-9_]{1,20}$)(?=^[a-zA-Z
^(?=.*[13579])(?=.*[24680])(?=.*[1357924680])[02468]$
(\d{1,2})/(\d{2})/(\d{4})
(^[a-zA-Z_]{0,31}$)
^(19|20)\d{2}(-(0[1-9]|1[012])|(1[012]))(-(0[1-9]
^(0[1-9]|1[0-2])[0-9]{2}:[0-5][0-9]$
^[a-zA-Z0-9_]{3}[a-zA-Z0-9_]{3}[a-zA-Z0-9_]{3}$
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer: [0-9]{1,4}[0-9]?.[0-9]?
/(?<=aspalliance.com/)(\d+)/
^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{8,}$
\".*?\"
^\d{1,3}(\.\d{3})?$
feet(?:\s*[0-9]{1,3})(?:[, ]*[0-9]{1,3})? inches(?:\s*[0-9]{1,3})(?:[, ]*[0-9]{1,3})
\b(9792)\b
Matches the UK Drivers License format as laid down by the DVLA / dvla. See http://www.govtalk.gov.uk/gdsc/html/frames/default.htm Matches: 1. Must be 16 characters 2. First 5 characters are alphanumeric. 3. Next 6 characters must be numeric 4. Next 3 characters are alphanumeric 5. Last 2 characters are alpha 6. Second character of numeric section can only be 0, 1, 5 or 6. 7. Fourth and fifth characters of numeric section must be in the range 01 to 31.Generate a RegEx for this description:
^(49)(?=\d{4}$)(?!\d{4}$)(?![A-Z]{2}$)(?!\d{4}$)(?![A-Z]{2}$)(?!\d{4}$)(?!\d{4}$)(?![A-Z
^(?![a-zA-Z0-9\-_\s]{2,}$)(?!.*?[a-zA-Z0-9\-_\s]{3,}$)[a-zA-Z0-9
(^[a-zA-Z0-9_]{5,12}$)
(?<=^|\s)(?=\s|$)([^\s\n]*)(?=\s|$)
^[a-zA-Z][a-zA-Z0-9 ]*$
(?<=^|\s)(?=\s|$)(?<!\s)(?=\s|$)(?<!\s)(?=\s|$)(?<!\s)(?=\s|$)(?<!\s)(?=\s|$)(?<!\s)(?=\s|$)(?<!\s)(?=\s|$)(?<!\s)(?=\s|$)(?<!
[a-zA-Z0-9]{0,8}
(?i)(?<![^0-9])(?<![^0-9][0-9])[0-9]{8}[0-9]{6}[0-9]{4}[0-9]{3}[0-9]{2}[0-9]{1}[0-9]{0}
\b(?<!\d)\d{1,3}\.(?!\d)\d{1,3}\.(?!\d)\d{1,3}\.(?!\d)\d{1,3}\.(?!\d)\d{1,3}\b
(?<![\d\.])(?<![\s,])[\d\.](?![\s,])
^[a-zA-Z]{4}[0-9]{4}[a-zA-Z]{2}[0-9]{2}$
^[0-9]+(\.0+)?$
XXX-XXX-XX-XX-XX ; XXX-XXX-XX-XX-XX ; XXX XX XX XXX ; XXX XXX XX XX XX ; XXX XXX XX XX XX
(\d+(\.\d+)?|\.\d+)
/^(0[1-9]|[1-9][0-9]|[1-9]0[0-9]|[1-9][0-9]0|[1-9][0-9]0|[1-9][0-9]0|[1-9][0-9]0|[1
r'^\d{1,2}(,\d{1,2})?$'
jpeg
\b(?=^[0-9]{7}|[0-9]{8}|[0-9]{9})\b
\b\d{3}[-\s]?\d{3}[-\s]?\d{4}\b
(\d{1,2})/(\w{3})/(\d{4})
^(?:[a-z]{2,3}|[a-z]{3,})$
(0[1-9]|1[012])[0-9]{2}:[0-9]{2}
(?i)([A-Z])(?=\s)?
^1\.(0|1|2|3)\.0\.0$
var regex = new RegExp('^[\s,]+$', 'gi');
^[1-9][0-9]*(?:[,.][1-9][0-9]*)+$
var regex = new Regex(@"^(?P<year>\d{4})(?P<month>\d{2})(?P<day>\d{2})$");
r'<a[^>]*amp[^>]*>'
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer: ^\d+\.\d{1,3}$
(?<=\d)\d
^MIMEMailMessage$|^NonMIMEMailMessage$
(\(.*?\))
(\d{3})(\d{3})(\d{4})(\d{3})
"Q(.*?)R(.*)"
(?<=\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2})\s(?<=\w+\s\w+\s\w+\s\w+\s\w+\s\w+\s\w+\s\w+\s\w+\s
12h(0|1|2|3|4|5|6|7|8|9)m(0|1|2|3|4|5|6|7|8|9)s(0|1|2|3|4|5|6|7|8|9)
[077]\d{8}|[078]\d{8}|[079]\d
^\+?1[0-9]{1,3}[0-9]{2}$
^(?=\d{1,2}[-\s]?\d{1,2}[-\s]?\d{1,2}[-\s]?\d{1,2}[-\s]?\d{1,2}\d{1,2})$
^1(0|1)*$
positive(non-negative) decimal values with 2 floating point values and less than or equal to 24.\d+\.\d{2}\.\d{2}
[0-9]{0,}[1-9]?[0-9]{0,}[0-9]{0,}[0-9]{0,}[0-9]{0,}[0-9]{0,}[0-9]{0,}[0-9]{0,}
(0|[1-9]\d?|1[0-2])[0-9]{3}
[1],[234
[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0
^[0-9]*\.[0-9]{0,2}$
\d\d\d\d\d\d\d\d\d
[0-9]{2}[A-Z]{2}[0-9]{2}[A-Z]{2}[0
(1[0-9]|2[0-3])\.(0[1-9]|1[0-2])\.(0[1-9]|[12][0-9]|3[01])
[a-zA-Z0-9_]{3,30}[a-zA-Z0-9_]{3,30}[a-zA-Z0-9_]{3,30}[a-zA-Z0-9_]{3,30}[a-zA-Z0-9_]{3,30}[a-zA-Z0-9_]{3,
/[a-zA-Z0-9-_]{3,30}/
[a-zA-Z]{8}\d[a-zA-Z]
\$\d+\.\d+
/^(?:0[1-9]|1[012])\/(?:[0-9]{2})?$/
(\d{1,3})(,\d{3})?
(\d{2}:\d{2})|(\d{2}:\d{2})|(\d{2}:\d{2})|(\d{2}:\d{2})/
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer: ^(?![^\W_\d])(?![^\s\w\-\.])(?![^\s\
(?<![^\w\s])(?![^\w\s])(?![^\w\s])(?![^\w\s])
^(1[0-2]|[3][0-9]|[4][0-9]|[5][0-9]|[6][0-9]|[7][0-9]|[8][0-9]|[9][0-9]|[1][0-9]|[2][0-9]|[3][0-9]|[4][0
match string between chars'' as in source codeGenerate a RegEx for this description. Answer: (?<=^|\s)([a-zA-Z])(?=\s|$)
[A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A
\b(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3})\b
^1\.(0\.(0\.)0)$
(?<![a-zA-Z0-9_])([a-zA-Z0-9_]{2,10})(?![a-zA-Z0-9_])
\d*[*][*][*][*]|[*][*][*][*]|[*][*][*]|[*]
(?P<date>\d{1,2}/\d{1,2}/\d{4})
(\w+)\.?\s*(€|EUR|EURO)
\b[1-9]\d*(?:\.\d+)?(?:[eE][+-]?\d+)?\b
^\s*(?:[a-zA-Z][a-zA-Z0-9]*(?: [a-zA-Z0-9]*[a-zA-Z0-9]*)*)\s*#?\s*(
var re = /<!--.*?-->/g;
[^\d\W]
^\d{5}-\d{4}$
^4[1-9]\d{3}[1-9]\d{3}$
[0-9]{2}(\.\d{1,2})?%
(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{6,}
^[a-zA-Z0-9_]{1,50}[a-zA-Z0-9_]@[a-zA-Z0-9_]{1,50}$
\b\d{1,2}\b
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(\d{4}|
hh:mm or hh:mm or hh:mm or hh:mmGenerate a RegEx for this description.
(\d{4}),(?=\d{4}$)
hh:minmin:ss[0-9]{3}
^[0-9]{1,3}(?:[0-9]{3})?[0-9]{1,3}$
^#[A-Fa-f0-9]{6}$
^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6,20}$Exercise 2: Write a Python program that uses the re
^(?=\d{4}$)[A-D]\d{3}$
[0.005]
^(?!0)(?!\.0)(?!\d+\.\d+$)(?!\d+$)^
^(?:(?:(?:[
^[A-Z]{8}\d{2}$
(^[0-9]{2}-([0-9]{2})-([0-9]{4}))|(^[0-9]{2}-([0-9]{2}))|(^[0-9]{4}-([0-9]{2}))|(^[0-9]{4}-[
(?<=\()\d{3}-\d{3}-\d{4}(?=\))|(?<=\d{3}-\d{3}-\d{4})(?=\s+[-\&quot;-\&quot;])|(?<
This will validate a partial postcode beginning with the postal district on up to the whole postcode, returning the two halves in sub-expressions. The main purpose is to return a valid postal district from a partial or whole postcode. The real value in this regex lies in the fact that it will process the postcode correctly regardless of whether or not the space in present after the district. So the accepted formats are A1 1AA, A11 1AA, A1A 1AA, AA1 1AA, AA11 1AA, AA1A 1AA GIR 0AA (and the same 6 formats without the space).
^(0[1-9]|1[012])[0-9]{2}:[0-9]{2}:[0-9]{2}(?::[0-9]{2})?$
^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer: (?i)(?<!https?://)([a-zA-Z0-9\-\.]+\.)+[a-zA-Z0-9\-\.]+(\.[a-zA-Z]{2,4})?(?:/[a-zA-Z0-9\-\.]+\.)+[a-z
^(\d{2}):(\d{2}):(\d{2})([AP]M)$
r'^[0-9a-fA-F]{6}$'
[^a-zA-Z0-9]{2}[^a-zA-Z0-9]{9}[^a-zA-Z0-9]{2}[^a-zA-Z0-9]{2}[
(\d{2}/\d{2}/\d{4})(\d{1,2})(\d{1,2})
\d{3}(?:,\d{3})*
[a-zA-Z0-9]+
^(?:(?:5[1-5][0-9]|2[0-4][0-9]|[01]?[0-9][0-9]?)\s?\d{4})\s?$
\d{1,2}\/\d{2,4}
(?<!\d)\d{3}(?!\d)
^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$
(yyyy-MM-dd HH:mm:ss)
CAS_REGEX = re.compile(r'^\d+$')
[^0-9,.]
^[0-9]{2}[0-9]{3}[0-9]{3}[
(^[A-Z][a-z]*[A-Z][a-z]*$|^[A-Z][a-z]*[A-Z][a-z][A-Z][a-z]*
\d{1,2}\.\d{0,2}
\d{2}\/\d{2}\/\d{4}
[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}
(?<!\d{4})([12]\d{3})(?!\d{2})
/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$/
(?<=Istat Ateco Code )(?<=Istat Declaration Ateco 2004 )
[^a-zA-Z0-9]*[a-zA-Z0-9]{9}[^a-zA-Z0-9]*[a-zA-Z0-9]{2}[^a-zA-
(^[0-9]{0,2}[a-z]{0,2}[0-9]{0,2}$)
^(00)[0-9]{3}[ -]?[0-9]{3}[ -]?[0-9]{3}[ -]?[0-9]{4}$
(^[0-9]{1,3}:[0-9]{2}:[0-9]{2}$)
(?<![\d-])[\d\s\-]{1,}[\d\s\-]{1,}[\d\s\-]{1,}[\d\s\-]{1,}[\d\s\-]{1,}[\d\s\-
[^a-zA-Z0-9]*
(?P<dollars>\$?\d{1,2}(\.\d{1,2})?)
^([0-9]{1,3}|3[0-2])([0-9]{1,2}|50[0-9])$
\w{6}
(0?[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])/([0-9]{4}|[12][0-9]|3[01])/([0-9]{4})
^[A-Z]{1,2}[A-Z]{1,2}[A-Z]{1,2}[A-Z]{1,2}[A-Z]{1,2}$
import redef phone_number_filter(text):    pattern = r'\b(?:\d{3}[-.]\d{3}[-.]\d{4}|\(\d{3}\)\s*\d{3}[-.]\d{4}\)|\(\d{3}\)\s*\d{3}[-.]\d{4}'    return
/^[0-9]{3}$/
/^6[789]\d{7}$/
^[a-z]{1,2}[a-z]{1,2}[a-z]{1,2}[a-z]{1,2}[a-z]{1,
^((19|20)\d\d\d)(-\d\d)(0|1)(-\d\d)(0|1)$
^(49)([0-9]{3})([0-9]{3})([0-9]{3})$
(^[0-9]{1,2}/[0-9]{4}$)(^[0-9]{1,2}$)
(?<![\w\d_])[a-zA-Z0-9_]+(?![\w\d_])
\b(BG\d{1,5})\d{3,9}(?:\d{3,9})?\b
(\d+) (?=\s*[A-Z]\s*$)
[0-9]+(\.[0-9]+)+|[0-9]+,[0-9]+(\.[0-9]+)+|[0-9]+,[0-9]+,[0-9]+
\b(0[1-9]|1[012])[0-9]{2}:[0-5][0-9]{2}[0-9]{2}\b
[A-Z]{3}-\d{3}-\d{4}
[a-zA-Z]{1,4}[.][a-zA-Z]{1,4}[.][a-zA-Z]{1,4}[.][a-zA-Z]{1,4}[.][a-zA-Z]{1,4}[.][a-zA-Z]
1-10
\d{0,9}[\d\.]{0,1}[\d\.]{0,1}[\d\.]{0,1}[\d\.]{0,1}[\d\.]{0,1}[\d\.]{0,1}[\d\.]{0,1}[\d\.]{0,1}[\d\.]{0
^(?P<f>\d+\.\d+)(?P<e>e[+-]\d+)$
(?:\d{1,2}(?:\.\d{1,2})?|\d{1,2}(?:\.\d{1,2})?|\d{1,2}(?:\.\d{1,2})?|\d{1,2}(?:\.\d{1,2})?|\d{1,2}(?:\.\d{
^[0-9A-Za-z]{4}[0-9A-Za-z]$
^[a-zA-Z0-9]{1,4}\s+[a-zA-Z0-9]{1,4}\s+[a-zA-Z0-9]{1,4}\s+[a-zA-
(\d{1,3})([\s-])(\d{1,3})([\s-])(\d{1,3})
\"([^\"]*)\".
^(?:[0-9]|1[0-2]):[0-5][0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[
(?:\+?[1-9]\d{2}[-\.\s]?){3}
(?<=://)[^/]+$
^[0-9]+(.[0-9]+)+$
\b(?:[1-9][0-9]|[0-9]|[1-9][0-9][0-9]|[0-9]{3}[0-9])\b
\b(?=\d{1,3})\d{3}-\d{2}-\d{4}\b
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer: ^[0-9]*(25|50|75|00|0)*$
/^[a-zA-Z0-9 ]+$/
^(?:[01]{1,2}[01]{0,2}[01]{0,2}[01]{0,2}[01]{0,2}[01]{0,2}[01]{0,2}[01]{0,2}[01]{0,2}[01]{0,2}[01]{0,2}[01]{0,2}[01]{0,
^(?:\+[1-9]\d{0,3}|[1-9]\d{0,3}[-\s]?\d{0,3}|\(\d{3}\)\s?\d{3}|\(\d{3}\)\s?\d{3}[-\
Checks for Date in the typical MySQL DB Format. Not mutch but simple to for converting to German date format:$date = &quot;2003-12-03&quot;;if (ereg (&quot;([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})&quot;, $date, $regs)){echo &quot;$regs[3].$regs[2].$regs[1]&quot;; // prints 03.12.2003
^(1[0-9]|2[0-3])\/(0[1-9]|[12][0-9]|3[01
^[0-9a-fA-F]{10}$
^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[0-9]{4}$
^[a-zA-Z0-9_\-\.]{0,31}$
/^(?:\d{3}-)?\d{3}-\d{4}$/
^\+?(([0-9]{2}|[0-9]{3}|[0-9]{4})[0-9]{2}|[0-9]{2}[0-9]{3}|[0-9]{2}[
[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,3}\.?[0-9]{1,
/^[A-Z]{3,4}(?:\s[A-Z]{3,4})?$/
(?:\d{1,2}(?:\.\d{1,2})?|\d{1,2}(?:\.\d{1,2})?|\d{1,2}(?:\.\d{1,2})?|\d{1,2}(?:\.\d{1,2})?|\d{1,2}(?:\.\d{1,2}
(0|[1-9][0-9]{0,2})([0-9]|[1-9][0-9]{1,2})
/^(0?[1-9]|[12][0-9]|3[01])\/(0?[1-9]|1[012])\/(19|20)\d{2}$/
(?<![a-zA-Z0-9])[a-zA-Z0-9]+(?![a-zA-Z0-9])
var amount = new RegExp("^([0-9,]{1,3}[0-9,]{1,3}[0-9,]{1,3}[0-9,]{1,3}[0-9,]{1,3})[0-9,]{1,3}
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer: [0-9]{1,99}\.5
^(0[1-9]|1[0-2])\/(0[1-9]|[12][0-9]|3[01])\/(19[2-
[0-9]{4}[ \t]{0,2}[a-zA-Z]{2}
Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answer: ^[0-9]{9,17}$
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:^(?P<hours>\d\d):(?P<minutes>\d\d):(?P<seconds>\d\d)$
(?<!if)\s*#.*
^6[0-9]{7}$
Allows letters,numbers,hyphens,periods and underscores. Such as : Aa.Aa.Aa,.Aa.Aa., -Aa-Aa-, _Aa_Aa_, Aa_Aa_Aa, Aa-Aa-Aa,., -, _I was asked by my client for this scenario to allow letters,numbers,hyphens,periods and underscores in User ID field in web application.Generate a RegEx for this description. Answer: [a-zA-Z0
(^\d{4}-\d{2}-\d{2}$)
\(?\d{3}\)?[ -]?\d{3}[ -]?\d{4}
-?\d{1,3}(\.\d{1,3})?
^(?P<year>\d{2})(?P<month>\d{1,2})(?P<day>\d
[^\s]{1,2}[\s]{3}[0-9]{4}[\s]{1,2}[0-9]{2}[\s]{1,2}[0-9]{2}
(0[1-9]|1[012])[0-9]{3}
[a-zA-Z0-9, ]+, [a-zA-Z0-9], [a-zA-Z0-9], [a-zA-Z0-9], [a-zA-Z0-9], [a-zA-Z0-9], [a-zA-Z0-9], [a-zA-Z0-9], [
/^\d{4}-\d{2}-\d{2}(?:\.(\d{2}))?$/
(^[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-
\d{1,2}[0-9]|[0-9]{1,2}[0-9]
\b(?:[0-9]{1,2}[-/]?[0-9]{1,2}[-/]?[0-9]{1,2}[-/]?[0-9]{1,2}[-/]?[0-9]{1,2}[-/]?[0-9]{1,2})\b
^(?=.{4,8}$)(?=.*[a-z])(?=.*[A-Z])(?=.*\d).*$
([0-9]{1,2}[\s\-\.]?[0-9]{1,2}[\s\-\.]?[0-9]{1,2}[\s\-\.]?[0-9]{1,2}[\s\-\.]?[0-9]{1,2
[0-9]{1,3}[0-9]{3}[0-9]{3}[0-9]{4}[0-9]{3}[0-9]{4}[0-9]{3}[0-
\d{1,3}(\.\d{3})?(\.\d{3})?(\.\d{3})?(\.\d{4})
(?=^[a-zA-Z0-9._-]+$)(?![a-zA-Z0-9.-]*[a-zA-Z0-9.-]$)(?![a-zA-Z0-9]*[a-zA-Z0-9]$)(?=^[a-zA-
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: strFirstName\s*=\s*(.*)
\b[1-9][0-9]{2}\b
1-20
(?<start>\d{1,2})(?<stop>\d{1,2})(?<extra>.*)
\w+[^\w\s]|[^\w\s]\w+
[A-Za-z0-9]
[a-zA-Z_][a-zA-Z0-9_]*
^\d{4}-\d{1,2}-\d{1,2}T\d{1,2}:\d{1,2}$
^[a-zA-Z0-9]{3,}$
[a-zA-Z0-9_]*
^[1-9][0-9]{0,2}[0-9]{0,1}[0-9]$
(?<![\d\s])(?<![\d\s])(?![\d\s])[\d\s]{1,5}[\d\s]{1,5}[\d\s]{1,5}[\d\s]{1,5}[\d\s]{1,5}[\d\s]
(?<!\d\d:\d\d)
(\d{1,2})-(\d{1,2})-(\d{4})
(?<!\\)\s*(?<!\(|\))[^\(]*(?=\))
^\d{1,3}[,.]\d{3}[,.]\d{3}$
(?=(?:[A-Z]{2}[0-9]{3}[A-Z0-9]{3}[A-Z0-9]{4}[A-Z0-9]{5}[A-Z0-9]{6}[A-Z0-9]{7}[A-Z0-9]{8}[A-Z0-
[0-9]{1}[0-9]{2}[0-9]{
Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answer: (yyyy)mmdd
(?<year>\d{4}[-\s]?\d{2}[-\s]?\d{2})
^[0-9]{3}\-[0-9]{2}\-[0-9]{4}$|^[0-9]{3}\-[0-9]{4}\-[0-9]{6}$
(CCYYMM/YYYYMM)
/[^/]+
This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answer:grep -Eo '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'
[0-9]{2}-[0-9]{4}-[0-9]{4}-99-9999
\d{2}/\d{2}/\d{4}|\d{4}-\d{2}-\d{2}
d{1,2}[0-9]{0,3}(,|\.|\,|\,\,|\,\,\,|\,\,\,\,|\,\,\,\,|\,\,\,\,|\,\,\,\,|\,\,\,\,|\,\
\d{4}[A-Z]{2}
^(?!800|900)(\d{3}-\d{3}-\d{4})(?!\s\d{2}$)
(?<![0-9])[0-9]{10,20}(?![0-9])
/^(0[1-9]|1[0-2])\d{3}$/
^(?:[0-9]{3}[-.]){2}[0-9]{4}$
string input = "1.23,4.56,6.78,9.12,10.11";string pattern = @"([\d,]+\.?[\d]*)(?:\s*,\s*[\d,]+\.?[\d]*)+";
[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{
\b(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[\W]).*\b
[a-zA-Z\s]+
^[A-Z][a-z][A-Za-z0-9]{0,63}$
^(0?[1-9]|1[012])$
\b0-100\b
[a-zA-Z0-9]{2,3}\.
\b(\d{1,3}[-\s]?\d{3}[-\s]?\d{4})\b
[3-9][0-9]{3}[0-9]{2}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}[
rut[0-9]{1,3}-\d{3}-\d{4}
(^[0-2][0-9]|3[0-1])(:[0-5][0-9])?$
(?<!\d)(?<!\d\d\d)(?!\d)
^[A-Z][a-z]{1,2}[A-Za-z0-9]{0,61}[A-Za-z0-9
\d{4}(,\d{4})?
lat/lon must be between -90 and 90
(^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$|^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$|^[0-9]{1,3}\
([0-9]{2}:[0-9]{2}:[0-9]{2})([a-zA-Z]+)
(?<=^[A-Z])(?<=\d)(?<=\w)(?<=\.)(?<=\w)(?<=\.)(?<=\d)(?<=\w)(?<=\.)(?<=\d)(?<=\w)(?<=
^[A-Z][A-Z] [A-Z] [A-Z] [A-Z] [A-Z] [A-Z]$
[^A-D]{0,2}[A-D]{0,2}[A-D]{0,2}[A-D]{0,2}[A-D]{0,2}[A-D]{0,2}[
/\b[A-Z][a-z]{1,2}\s?[A-Z][a-z]{1,2}\s?[A-Z][a-z]{1,2}\s?[A-Z][a-z]{1,2}\b/
^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?\.[a-z]{2,6}(\.|[-\
(0[1-9]|[1-9][0-9])[0-9]
(?<=\s)(<h1-6\s)(.*?)(?=\s)
^[a-zA-Z]{1,20}$
^[0-9]{3}[0-9]{3}[0-9]{1}$
/^\d{1,3}(,\d{3})*$/
(?!xx|yy|...)
(?<=d|dd|m|mm|yy|yyyy)(?=\d|\d|\d|\d|\d)
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer: (\d+(?:\.\d+)?)
[a-zA-Z]{8,25}[0-9]
^(?![0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]
/^[a-zA-Z0-9]{2}[0-9]{3}[0-9]{4}[-][0-9]{4}$/
\d{5}-\d{4}
```pythonname_regex = re.compile(r"(^[a-zA-Z][a-zA-Z0-9]*[a-zA-Z]$)|(^[a-zA-Z][a-zA-Z0-9]*$)")```
[0-9a-fA-F]{2}
^(?:http|https)://[^\s]*?(?:[\w-]+(?:\.[\w-]+)*)?(?:\/[^\s]*?(?:[\w-]+(?:\.[\w-]+)*))?
(4444) (444) (4444) (444) (444) (444) (444) (444) (444) (444) (444) (444) (444) (444) (444) (444) (444) (444) (444) (444) (444) (444) (444
A|B|C
var reg = new RegExp(/^(?:\d{2}(?:\.\d{2})?|\d{2}(?:\.\d{3})?|\d{2}(?:\.\d{4})?|\d{2}(?:\.\d{2})?|\d{2}(?:\.\d{2})?|\d{2}(
\b(?=\d{1,2}[a-z]{1,2}[a-z]{1,2}[a-z]{1,2}[a-z]{1,2}[a-z]{1,2}[a-z]{1,2}[a-z]{1,2}[a-z]{1,2}[a-z]{1,2}[
^([\d#]+)[^\d#]*$
Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the "days part" of a class schedule field. The string should only accept any of the ff set of letters: 'M' 'T' 'W' 'TH' 'F' 'S' 'SU'. Only one instance of these set of letters is accepted.Generate a RegEx for this description. Answer: regex = re.compile(r'^[MTWFTHFSSU]$')
^([1-9]|[1-2][0-9]|3[0-1])[:][0-5]?[0-9]?$
(\d{1,5})(?=\.)
export-export-code-12-digits-2-letters-9-numbers-GB
(?<!\d)\d+(?!\d)
(?<=\s)([0-9a-fA-F]{1,2})(?=\s|$)
[^A-Z]\d[A-Z]\d[A-Z]\d[A-Z]\d[A-Z]\d
^[0-9,.]*$
\d{1,3}(?:,\d{3})*
(\d{5})(?=\D)
^\d{1,3}-\d{3}-\d{4}$
^\+0[1-9]\d{0,3}(\.\d{1,3})?$
(\d{5})\s
(?<!\d)(\d{1,2})(?!\d)
\d{4}/\d{2}/\d{2} \d{2} \d{2} \
/^[a-zA-Z0-9]{6,}$/
YYMMDD-99-9999
This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answer: strFirstName\s*\w+\s*
[{[^-]+-][0-9]{32}-[0-9]{32}-[0-9
(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})
(\w*)(?!\')
(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})
[0-9]*\.[0-9]*
The RegEx would be (1850|1961|1962|1963|1964|1965|1966|1967|1968|1969|1970|1971|1972|1973|1974|1975|1976|1977|1978|1979|1980|1981|1982|1983|1984|1985|1986|1987|1988|1989|1990|1991|1992|1993|1994|1995|1996|1997|1998|1999|2000|2001|2002|2003|2004|2005|2006|
(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\d)(?<!\
(?=^\d+\.?\d*$)(?=^[\+\-]?\d+$)(?=^\d+$)
^[a-zA-Z_][a-zA-Z0-9_]*$
^(?=.*[1-9])(?=.*[0-9])(?=.*[1-9][0-9])(?=.*[1-9][0-9][0-9])(?=.*[1-9][0-9][0-9][0-9])(?=.*[1-9][0-9][0-9][0-9][0-
(?<=\/\/.*)(?<=\/\*\*)(?<=\*\*\/)(?<=\*\/\*)(?<=\/\*\/)(?<=\*\/\*\/)(?<=\*\/\*\/\/)(?<=\/\*\/\/\/)(?<=\/\*\/\/\/)(
^[a-zA-Z0-9_-]{0,255}$
(\d{1,2}\.\d{1,2}|\d{1,2}\.\d{1,2}\.\d{1,2}|\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,2})
^[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}$
&quot;JK&quot; &amp
^[a-zA-Z0-9\*\(\)]+$
[XX]\d{2}[.]\d{2}[.]\d{2}
^[0-9]{1,10}\.?[0-9]{0,2}$
Get the style attribute inner text contained inside " or'caracters with the "style=" prefix.Generate a RegEx for this description. Answer: (?<=style=")[^"]*
(?<=\")[^"]*(?="\")
(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])
^[0-9]{5}(\.\d{2})$
^(?:\d{1,2}(?:\.\d{1,2})?|\d{1,3}(?:\.\d{1,2})?|\d{1,4}(?:\.\d{1,2})?|\d{1,5}(?:\.\d{1,2})?|\d{1,6}(?:\.\d{1
^(0|[1-9][0-9]*)$
(\d{1,3}[a-zA-Z]{1,3}[a-zA-Z0-9]{1,3}[a-zA-Z0-9]{1,3}[a-zA-Z0-9]{1,3}[a-zA-Z0-9]{1,3})
(?=^[^\s]*$)([^\s]*?)(?=\s*$)
(?<![0-9])[0-9]{3}-[0-9]{2}-[0-9]{4}(?![0-9])
^[0-9]{2}[0-9]{2}[0-9]{4}-[0-9]{4}$
(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
^(?=.*[0-9])(?=.*[1-9][0-9])(?=.*[1-9][0-9][0-9])(?=.*[1-9][0-9][0-9][0-9])[0-9]{3}$
^[A-Z]{2}\d{2}[A-Z]{3}$
(?<=\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})(?=\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})
/^(0?[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])/(19|20)\d{2}$/
([A-Z][a-z]|[A-Z][a-z][A-Z][a-z]|[A-Z][a-z][A-Z][a-
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: (?<ipv4>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
(\w{4}\d{1,2})([A-Z]{1})(\d{1,2})
matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answer: (?<!\d)^\d+(?!\d)
(?<!\d)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-)(?<!\d-)(?
^(?P<year>\d{4})(?P<month>\d{2})(?P<day>\d{2})(?P<hour>\d{2})(?P<minute>\d{2})(?P<second>\d{2})(?P<timezone>\w+)?$
(0|[1-9]\d{0,2}|1\d{0,2}[0-9]|2[0-4][0-9]|25[0-5])|(0|[1-9]\d{0,2}|1\d{0,2}[0-9]|2[
^[A-Za-z0-9]{3}[- ]?[A-Za-z0-9]{3}[- ]?[A-Za-z0-9]{3}$
/^(?:\d{4}-\d{2}-\d{2}$|\d{4}-\d{2}-\d{3}$|\d{4}-\d{2}-
(?<![0-9])[0-9]{1,3}(?![0-9])
(\d{4})(\d{2})(\d{2})
^(?:(?:[1-9][0-9]|[1-9]0?[0-9])(?:\.(?:[1-9][0-9]|[1-9]0?[0-9])){0
[0-9]{10}-[0-9]{3}-[0-9]{3}-[0-9]{4}-[0-9]{3}-[0-9]{3}-[0-9]{3}-[0-9]{3}-[0-9]{3}-[0-9]{3}-[0-9]{3}-[0-9]{3}-[0-9]{3}-[0-
\.([a-zA-Z0-9_]+)$
/^[0-9]{2}[-][0-9]{4}[-][0-9]{2}$/
This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:! @ # $ % ^ &amp; * -. _?Generate a RegEx for this description. Answer: ^[A-Za-z0-9!@#$%^&*-.]*$
^\d{5}(?:\d{4})?$
A0-A9, A10
[a-e]
^\+?[0-9]{1,3}\s?[0-9]{1,3}\s?[0-9]{1,3}\s?[0-9]{1,3}\s?[0-9]{1
\b(snake|snakes)\b
[0-9]{1,3}(,[0-9]{1,3}){0,1}
r'^\d{4}-\d{2}-\d{2}$'
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer: ^[^.]*$
^[0-9a-fA-F]{1,32}$
(?P<hours>\d{1,2})(?P<minutes>\d{2})(?P<seconds>\d{2})
[^\[\]]+
^<h1[-5-9]>$
\b(?:\d+,?)*\b
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer: (?<!\\.)[0-9]{2,3}(?!\\.)
[0-9]{1,2}:[0-9]{2}:[0-9]{2}(:[0-9]{2})?(am|pm|AM|PM|AM|PM)
0[1-9]|1[0-2]|2[0-8]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|[1-9]|[1-9]|[1-9]|[1-9
^(?:(?:\s*[Yy]\s*$)|(?:\s*[Nn]\s*$))$
(\d{2}-\d{2}-\d{4})(\d{2})(\d{2})(\d{2})
ftp = 'ftp://'http = 'http://'https = 'https://'
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@.])(?=.*[\w\-._%+!*?&])[a-zA-Z
(\d{2}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3})
^[1-2][0-9]|3[0-1]$|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-
[\d]{3}[\d]{2}[\d]{3}
(\d{1,2})\s(\d{1,2})\s(\d{4})
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer:^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61
/^[A-Z][a-z][a-z0-9]*[A-Z][a-z0-9]*$/
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer: '^(r[0-9]|s[0-9]|s[0-9]|s[0-9]|s[0-9]|s[0-9]|s[0-9]|s[0-9]|s[0-9
^(0|[1-9]\d|1\d\d|2[0-4]\d|25[0-9])/(0?[1-9]|1[012])/([0-9]\d|1[012])$
^\+31(?:\+31(?:\+31(?:\+31(?:\+31(?:\+31(?:\+31(?:\+31(?:\+31(?:\+31(?:\+31(?:\+31(?:\+31(?:\
{{ @Name@@ }}
(\d+)*\*(\d+)*\*(\d+)*
[a-zA-Z0-9,, ]+
\b[A-Za-z0-9_\-\s]+\b
[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0
^(?=\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} \d{2}$)(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2
(?<=\d\d\.\d{2})(?<=\d\d\.\d{2})(?<=\d\d\.\d{2})(?<=\d\d)\s
[0-9]{1,2}:[0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9
(0-9)%
\d{4}-\d{2}-\d{4}
^[0-9a-fA-F]{2}-[0-9a-fA-F]{2}-[0-9a-fA-F]{2}-[0-9a-fA-F]{2}-[0-9a-fA-F]{2}$
^(?=.*[0-9])(?=.*[A-Z])[0-9]{4}[A-Z]{1}[0-9]{2}[A-Z]{2}[0-9]{3}$
^(?:[0-9]{1,2}[0-9]|1[0-2]|[0-9]{2})$
^[0-9]+(\.[0-9]+)?e$
^(1|2|3|4|5|6|7|8|9|10)$
^[a-zA-Z0-9_.-]*$
(0|[1-9][0-9]?[0-9]|1[012])[0-9]{2}|[1-9][0-9]?[0-9]
(?<![0-9])[0-9]{5}(?![0-9])
(\d{2}:\d{2}:\d{2})(\s+)(\d{2}:\d{2}:\d{2})
(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
\d{1,2}(?:\.\d{1,2})
Matches all kind of URIs: mailto's, http(s), (s)ftp(s),..., or just www addresses without protocol prefix.Generate a RegEx for this description. Answer: (s)ftp(s)
/^[0-9]{1,2}[0-9]{3}[0-9]{6}$/
(^[a-zA-Z0-9]*$)(?=^[a-zA-Z0-9]*$)(?=^[a-zA-Z0-9]*$)(?=^[a-zA-Z0-9]*$)(?=^[a-zA-Z0-9]*$)(?=^[a-zA-Z0-9]*$)(?=^[a-zA-
^[a-zA-Z0-9].{0,3}[a-zA-Z0-9]\.{0,3}[a-zA-Z0-9]\.{0,3}[a-zA-Z0-9]$
\d{2}/\w{3}\d{4}
^(?=\d{4}-\d{2}-\d{2})\d{2}-\d{2}-\d{4}$
/^(0[1-9]|1[012])[- /0-9]\d{4}$/
[0-99.99]%
^\s*(?P<poBox>[0-9]\s*\w*)\s*(?P<number>[0-9]\s*\w*)\s*(?P<address>[^\s]*)\s*(?P<
^\/[a-zA-Z0-9_-]*$
<input type="text" name="text" maxlength="100">
/^\d{1,2}:\d{2}$/
[0-9]{1,2}[a-z]{1,2}[0-9]{1,2}
^[1-9]\d*(\.\d+)?(?:\s*[1-9]\d*)?$
Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the "days part" of a class schedule field. The string should only accept any of the ff set of letters: 'M' 'T' 'W' 'TH' 'F' 'S' 'SU'. Only one instance of these set of letters is accepted.Generate a RegEx for this description. Answer:
\d{1,2}(?:[a-z]\d)?(?:[a-z]\d)?(?:[a-z]\d)?(?:[a-z]\d)?(?:[a-z]\d)?(?:[a-z]\d)?(?:[a-z]\d)?(?:[a-z]\d)?(?:[a-z]\d)?(?:[a-
[0-9]{1,2}:[0-9]{2}[A-Za-z ]
[^\d]{3}\d{2}[^\d]{3}[^\d]{3}[^\d]{3}[^\d]{3}[^\d]{3}[^\d]{3}[^\d]{3}[^\d]{3}[^\d]{3}[^\d]{3}[^\d]{3}
[a-zA-Z0-9_\- ]+
-?\d+
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer: (\$\d{1,2}\.\d{2}(,\d{3})*|\d{1,2}(,\d{3
^(0[1-9]|1[012])[0-9]{2}([0-5][0-9]):[0-5][0-9]$
^(?=[^a]*a[^a]*a[^a]*$)(?=.*[^a]*a[^a]*a[^a]*$)(?!.*a[^a]*a[^a]*a[^a]*$).{2,}$
SUPPORTED constructions:[*] - all five commands;[number] - minutes 0...59, hours 0...23, day in month 1...31, months 1...12, day in week 0...7 (0 & 7 is sun);[*/nubmer] - see construction [number];[word] - only months (4th command) and days in week (5th command), warning this regexp is case sensitive (lower letters).NON SUPPORTED constructions:[number-number] and[number,number].Generate a RegEx for this.
Fred Flintstone (male), Barney Rubble (male), Timmy (male), and Dora (female).
(?<!\d)(0?[1-9]|1[012])/(?!\d)
\b\d{4}-\d{2}-\d{2} \d{3}\b
^(6[1-9]|[1-9][1-9]|[1-9]{2}[1-9]|[1-9]{3}[1-9]|[1-9]{4}[1-9]|[1-9]{5}[1-9]|[1-
^(?=.*\d)(?=.*[a-z])[a-z0-9]{6}$
(?<=^|\s)(?=[a
[\s/-]([A-Z][a-z]{3}|0[1-9]|1[012])[\s/-]([0-9]{4}|[0-9]{2})
IP address IPv4 (127.0.0.1). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: \b(?=(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\
^(?:\d{1,2}-\d{1,2}-\d{4}|\d{1,2}-\d{1,
\d{10}\.\d{0,2}
THE Complex Password Filter Matching 3 of 4 Character catagories:1.) at least 1 upper case character2.) at least 1 lower case character3.) at least 1 numerical character4.) at least 1 special characterIt also enforces a min and max length and works for.Net and script Regex implimentations.Generate a RegEx for this description. Answer:^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+-=]).
^\d+\.\d{2}$
[0-9]*\.?[0-9]*
(v4|v6)\.\d{1,3}\.\d{1,3}\.\d{1,3}$
^([0-9a-fA-F]{3}[0-9a-fA-F]{3}[0-9a-fA-F]{3}[0-9a-fA-F]{3}[0-9a
.*[0-9]*(?:\.[0-9]+)?[+-]?
^([0-9]|1[0-9]|2[0-3]):([0-5][0-9])$
^(?:\d{2}(?:-\d{2})?
(\d{3}\.\d{3}\.\d{3})|(\d{3}\.\d{3})|(\d{3}\.\d{3})
^\$[0-9]{1,3}(,\d{3})*(\.\d{2})?$
^(([0-9a-fA-F]{0,4}:){0,7}[0-9a-fA-F]{0,4}|[0-9a-fA-F]{0,4}:){0,7}[0-9a-fA-F]{0,4
Applied to a.RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.Generate a RegEx for this description. Answer:import re
[^0-9]{3}-?[0-9]{3}-?[0-9]{4}
^([0-9]{1,2})([0-9]
^/[A-Za-z0-9_-]+$
^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$
^[0-9]{1,2}[0-9]{1,2}[0-9]{4}$
(?<!\d)(?<![A-Z])[A-Z]{2}[A-Z]{3}[0-9]{2}[A-Z]{3}(?<!\d)
(?i)(\+)?\d{1,3}\s?\d{1,3}\-\d{1,3}\s?\d{1,4}
^(?:[0-9]{1,2}[.])?[a-zA-Z0-9-]{1,}(?:[a-zA-Z0-9-]{1,})?$
\d{5}[-\d]{3}
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\d]{6,}$
^[0-9]{1,2}[0-9]{1,2}$
r'^[A-Z]{1,2}[a-z]{0,2}[A-Z]{0,2}$'
(\b[A-Z]{2}\b)\s\w+
(?<=\s*//.*?)(?<=\s*/*.*?)(?<=\s*#.*?)
Regex to validate strong password for.NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.Generate a RegEx for this description. Answer: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8
^(?=.*[1-9]).*(?=.*[5-9]).*(?=.*[1-9]).*(?=.*[5-9]).*(?=.*[1-9]).*(?=.*[5-9]).*(?=.*[1-9]).*(?=.*[5-9])[1-9]$
^[A-Z].*
(\b(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun)\b)
(?i)([0-9]{1,2})([0-9]{2})([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{
\d{1,3}[\s\S]*?\s\d{1,3}[\s\S]*?\s\d{1,3}[\s\S]*?\s\d{1,3}[\s\S]*?\s\d{1,3}[\s\S]*?\s\d{1
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer:^(?:\d{1,3}(?:\.\d{1,2})?|\d{1,3}(?:\.\d{1,2})?|\d{1,3}(?:\.\d{1,2})?|\d{1,3}(?:\.\d{1,2})?|\d{1,3}(
(^\d{4}-\d{2}-\d{2}$|^\d{4}-\d{3}-\d{2}$|^\d{4}-\d{2}-\d{3}-\d{2}$)
(?P<month>\w{3})(?P<day>\d{1,2})(?P<year>\d{4})
Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answer:    private static readonly Regex CurrencyExpression = new Regex(@"(?<currency>[^$]*)([$]{1})(?<amount>\d+\.
The RegEx for this description is "Bank account number (IBAN) Italian."
^(?P<name>\w+)\s*$
[0-9]{8}-[0-9]{4}-[0-9]{2}-99-9999
(?<=192\.168\.0\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d
(###) ###-####
(?<!\d)(0|[1-9]|[1-9]\d|1[0-2]|2[0-3])[0-5]\d:[0-5]\d(am|pm|am|pm)
(^[a-zA-Z0-9_]{1,32}$)
^(?:[01]{0,1}\d{0,2}\d{0,3}\d{0,4}|[01]{0,1}\d{0,2}\d{0,3}\d{0,4}|[01]{0,1}\d{0,2}\d{0,3}\d{0,4}|[01]{0,1}\d{0,2}\d{0,3}\d
^(0[1-9]|1[012])[0-5][0-9]$
^(19|20)\d{2}-\d{2}-\d{4}$|^\d{4}-\d{1,2}-\d{1
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*
^[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}$
(\d+\.\d+|\d+)
^[a-zA-Z0-9_.-]{3,}$
^(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3})$
\b(?P<month>[A-Z]{3})\s(?P<day>\d{2})\s(?P<year>\d{4})\b
^1-9$
(?<=^|\s)(?:\d{5}-\d{4}|\d{4}-\d{3}-\d{2}|\d{3}
^\$?[0-9]{1,3}(\.\d{0,3})?$
^\(?(\d{3})\)?[ -]?(\d{3})[ -]?(\d{4})$
[^a-zA-Z0-9_]$1 is start;$2 is stop;Generate a RegEx for this description. Answer: [^a-zA-Z0-9_]$1 is start;$2 is stop;Generate a RegEx for this description. Answer: [^a-zA-Z0
[0-9]{1,2}[0-9]{2}:[0-9]{2}[0-9]{2}
^([0-9]{2}:[0-9]{2}:[0-9]{2}):([0-9]{
[a-zA-Z]{3,4}
var regex = new Regex(@"\b(Error|Warning|Exception)\b");
^(?:(?:[0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}$)
^[-+]?[0-9]*\.?[0-9]*e[-+]?[0-9]+$
/^\d{1,2}\/\d{1,2}$/
^\d{5}\.\d{2}$
(0-9)(0-9)(0-9) (0-9)(0-9) (0-9)(0-9) (0-9) (0-9) (0-9) (0-9) (0-9) (0-9) (0-9)
Regular expression to match valid UK postcodes.In the UK postal system not all letters are used in all positions (the same with vehicle registration plates) and there are various rules to govern this. This regex takes into account those rules.Details of the rules:First half of postcodeValid formats[A-Z][A-Z][0-9][A-Z][A-Z][A-Z][0-9][0-9][A-Z][0-9][0-9][A-Z][A-Z][0-9]
\d{4}
function validateDateTime(dateTime) {    var d = dateTime.split(" ")[0];    var m = dateTime.split(" ")[1];
^[a-zA-Z0-9_.-]{0,10}\.[a-zA-Z0-9_.-]{0,10}$
[0-9]{4}[A-Z]{2}
r'^[\d.]+$'
\b[A-Z][a-z]*\b
(?:\d{1,5} ){5}
[0-9]*
^(?:[0-9a-fA-F]{3}){1,3}[0-9a-fA-F]{3}$|^(?:[0-9a-fA-F]{3}){1,3}[0
\d*[*][*][*][*][*][*][*][*][*]\d*
[a-zA-Z0-9_.\-,]
^[-+]?[0-9]*\.?[0-9]*$
^[0-9a-fA-F]{4}(?:-[0-9a-fA-F]{4}){3}$
^(?:[1-9][0-9]{0,2}
[^\s]*\s[^\s]*\s[^\s]*\s[^\s]*\s[^\s]*\s[^\s]*\s[^\s]*\s[^\s]*\s[^\s]*\s[^\s]*\s[^\s]*\s[^\s]*\s[^\s]*\s[^\
(?<!\d)(?<![\.-])(?![0-9])|(?<![\.-])(?<![0-9])-(?<![\.-])(?<![0-9])
^[0-9]{4}[-/](0[1-9]|[12]\d|3[01])$
(^[0-9]{1,2}|[0-9]{1,2}[-/.][0-9]{1,2}|[0-9]{1,2}[-/.][0-9
\d{1,5}(?:\.\d{0,5})?
^[A-Z]\d[A-Z]\d$
\b(0[1-9]|1[012])\/([0-9]{4})\b
[1-2]{3}[0-9]{2}[0-9]{2}[0-9]{7}[1
\d{1,2}-\d{1,3}-\d{1,4}
\d{1,100}
^[0-9]{3}[- ]?[0-9]{2}[- ]?[0-9]{4}$
(\d+)\.(\d+)\.(\d+)\.(\d+)\.(\d+)
(\d{1,2})([A-Za-z]{3})
\d+((?<feet>\d+)[\s\S]*(?<inches>\d+))
\d{5}[0-9]{0,9}
(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=?/\\|}{~\[\
[Zip Code]\d{5}[\d]{4}
[0-9]{1,2}:[0-9]{2}(?:-[0-9]{2})?
\b(?:0|1)\s?\d{2}\s?\d{2}\b
(?<!\d)\d{7,10,11}(?!\d)
\d{5}\-\d{4}
r'^(.+?)(?:\.(jpg|gif|png))$'
import re    from datetime import datetime    from time import time
[0-9a-zA-Z_]+
This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answer: ^\d{5}\,?$
[0-9]{3}[- ]?[0-9]{3}[- ]?[0-9]{4}
^\$?\d+(\.\d{1,2})?(,\d{1,2})?$
[\d]{3}\d{3}\d{3}
[0-9A-Fa-f]{3}[0-9A-Fa-f]{3}[0-9A-Fa-f]{3}[0-9A-Fa-f]{3}[0-9A-Fa-f]
#!/usr/bin/env pythonimport re
[0-9]{1,20}
^(?:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}|\d{4}-\d{2}-\d{2} \d{2}:\d{2}
function date(date_str) {    var date = new Date(date_str);    var day = date.getDate();    var month = date.get
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19[2-9]|20[0-2])$
[0-9]{3}-[0-9]{3}-[0-9]{3}-[0-9]{3}-
[0-9]*\.[0-9]+
^\(?[0-9]{1,3}\)?[0-9]{3}[-\s]?[0-9]{3}$
/^[+-]?(?:[0-9]*\.?[0-9]+|[0-9]+\.?[0-9]+)(?:[eE][+-]?[0-9]+)?$/
(\".*?\"|\".*?\")
^[A-Z]{1}[0-9]{1,2}[A-Z]{1}[0-9]{1,2}$
`^(?P<tag_name>\w+)\s*=\s*"(?P<tag_value>.*)"$`
h:mm or hh:mm or dd.mm or dd.mm
[0-9]{1,2}[a-zA-Z0-9]{1,2}[a-zA-Z0-9]{1,2}[a-zA-Z0-9]{1,2}[a-zA-Z0-9]{1,2}[a-zA-Z0-9]{1
/[^/]*/
^#[0-9a-f]{6}$
^(\d{1,3})([\s\S]*)(\d{3})(\d{4})$
^[A-Z]{3}[0-9]{8}$
^\d+(\.\d+)?(?:[eE][+-]\d+)?$
(?<![A-Z])(?<![0-9])[A-Z0-9]{2}[A-Z0-9]{2}[A-Z0-9]{2}[A-Z0-9]{3}[A-Z0-9]
\b[A-Z][a-z]{2}\d{3}\b
Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answer: /^[a-zA-Z0-9]{2,3}[.][a-zA-Z0-9]{2,3}$/
var regex = /\/([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0
^\$[0-9,]*(?:,\s*[0-9]*)?$
\d{1,2}(?:[-/](\d{1,2}))?[-/](\d{1,2})
(\d+)[\s\d\-\.]*?([\d\-\.]+)
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{4}-\d{1,2}-\d{1,2}$
http://www.cpr.dk/cpr-registry/cpr-registry-cpr-registry/cpr-registry-cpr-registry/cpr-registry-cpr-registry-cpr-registry/cpr-registry-cpr-registry-cpr-registry-cpr-registry-cpr-registry-cpr-registry-c
(^[0-9]{1,2}:[0-9]{2}:[0-9]{2}$|^[0-9]{1,2}:[0-9]{2}:[0-9]{2}:[0-9]{2}$|^[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,
^[a-zA-Z0-9-_]{5}[a-zA-Z0-9]{1}[a-zA-Z0-9-_]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9-_]{1}[a-zA-
[0-9]{10}-[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0
^\s*(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{2}[0-9a-fA-F]{2}|[0-9a-fA-F]{
^[A-Z]
(^[^@]*@[^@]*@[^@]*@[^@]*@[^@]*@[^@]*@[^@]*@[^@]*@[^@]*@[^@]*@[^@]*@[^@]*@[^@]*@[^@]*@[^@]
^[1-5]$
\d{4}/\d{2}/\d{2}
\d+\.\d+|\d+\.\d+e\d+|\d+\.\d+E\d+|\d+\.\d+E\d+
^[0-9a-fA-F]{1,4}$
0-59:seconds 0-59 AM|PM
(\d{4})([a-z]{2})
Google Analytics Segment by source social media. From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer:(?<![\w\s])([a-zA-Z0-9_\-\.]+[a-zA-Z0-9_\-\.]+[a-zA-Z0-9_\-\.]+[a-zA-Z0-9_\-\.]+[a-zA-Z0-9_\-\.]+[a
\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b
^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
^(1[0-2]|0?[1-9])[0-9]{3}[0-9]{2}[0-9]{4}$
(\b[A-Za-z0-9._-]+\b)
A[K-N]\d{1,3}
\d{2}:\d{2}:\d{2}-\d{2}:\d{2}-\d{2}
(?<![\d,\s])\d+(?![\d,])
([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})
[a-zA-Z]+
(\d\d:\d\d)(\s|$)
^[0-9]{2}:[0-9]{2}$|^[0-9]{2}:[0-9]{2}$|^[0-9]{2}:[0-9]{2}$|^[0-9]{2}:[0-9]{2}$|^[0-9]{2}:[0-9]
match string between chars'' as in source codeGenerate a RegEx for this description. Answer: \s*
(?<!\d{4
0[0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][
^[A-F0-9]{2}[A-F0-9]{2}[A-F0-9]{2}[A-F0-9]{2}[A-F0-9]{2}$
\b(?i)([0-9]*[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2
(^[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,2}
This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answer: ^\d{5}(,\d{5})?$
[3-9][0-9]|[4-9][0-9]|[5-9][0-9]|[6-9][0-9]|[7-9][0-9]|[8][0-9]|[9][
[a-zA-Z0-9]{6,}
^(?:[0-9]{3}|[0-9]{10})(?:[0-9]
(?<areaCode>\()(?<number>\d{3})(?<space>\s)(?<dash>\-)+(?<number>\d{3})(?<space>\s)(?<dash>\
^([0-9]{1,2}:[0-9]{2}:[0-9]{2})([A-Z][a-z]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})$
<time>([0-9]{1,2}:[0-9]{2}:[0-9]{2})</time>
\b\$\d+(\.\d+)?\b
^(0[1-9]|1[012])/([0-2][0-9])/([0-9]{4})$
Small
(?<=?=?)([^?\s]+)
(\d{3}-)?(\d{3}-)?(\d{4})
(?<![0-9])(?<![A-Z])[0-9]{4}(0[1-9]|1[012])[0-9]
[\\"/]{1,2}[0-9]{1,3}[0
[0-9]{1,3}(\.\d+)?
^(0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19[01])$
(?<=\b\w+ing\b)(\w+)
^[A-Z0-9][A-Z0-9-]{3}[A-Z0-9]$
^[A-Za-z]{2}[0-9]{3}[A-Z]{1}[0-9]{2}$
^[0-9]{10}[ -]?[0-9]{9}[ -]?[0
^(?:[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1,3}[0-9]{1
^[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{1}[0-
/^(900|901|902|903|904|905|906|907|908|909|910|911|912|913|914|915|916|917|918|919|920|9
```pythonfilename = "file_name_with_special_characters.txt"filename_regex = r"^[a-zA-Z0-9_.-]+$"
This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answer: ^(25|50|75|00|00)$
^(?=.*[A-Z])(?=.*[0
99999999999, 9999 9999, (09)99999999
[0-9]+(?:\.[0-9]{1,2})?
(?<=\$)(?P<dollars>.+?)(?:\.(?P<cents>.+?))?
(?<![0-9])(?<![0-9]/[0-9]/[0-9])[0-9]{2}/[0-9]{2}/[0-9]{4}
Regex to validate strong password for.NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.Generate a RegEx for this description. Answer:[A-Za-z0-9]{7,}|[A-Za-z0-9]{1,}
^(0?[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/(0?[1-9]|[12][0-9
\b[A-Z][a-z]{2}\b
^(0[1-9]|1[0-2])[0-9]{2}:[0-5][0-9]{2}:[0-5][0-9]$
(.*?)"
a-z or A-Z
Domain names:This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in.com,.org,.net,.mil, or.edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.Generate a RegEx for this description. Answer:^(?!-)[A-Z0-9](?:[A-Z0-9-]{0,61}[
[a-zA-Z0-9\s]+
^\d{1,2}[\.\,]?\d{3}$
^(?:0[1-9]|1[012])[0-9]{4}(?:[0-9]{2})?[0-9]{2}$
THE Complex Password Filter Matching 3 of 4 Character catagories:1.) at least 1 upper case character2.) at least 1 lower case character3.) at least 1 numerical character4.) at least 1 special characterIt also enforces a min and max length and works for.Net and script Regex implimentations.Generate a RegEx for this description. Answer:^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[A-Z
/^(0[1-9]|1[012])\d{3}$/
^(?:(?:[0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-
(0\.\d+)
var date = new Date();var regex = new RegExp("^(0?[1-9]|1[0-2])/(0?[1-9]|1[012])/([0-9]{4})$");
Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywords: money dollar currencyGenerate a RegEx for this description. Answer: \b([0-9]{1,2}\.?[0-9]{1,2})\s*[a-zA-Z]\b
This expression validate the YYYYMMDDHHMMSS datetime format but also only the date YYYYMMDD. It does not control month length or leap years. Made for a SAP retail sales tickets interface.For XML pattern facet this would do:([0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])(([01][0-9]|2[0-3])[0-5][0-9][0-5])
(?i)(?<![A-Z])(?<![a-z])[A-Z]{1,}(?![A-Z])
Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out the?: for grouping.I've tested this a bit, yet this is my 1st regex that I've ever written. It's working fine for me.Generate a RegEx for this description. Answer:(?<=\W)(?<!\w)(?<!\d)(?<!\s)(?<!
Time HH:MM (23:30). From http://tools.twainscanning.com/getmyregex.Generate a RegEx for this description. Answer: ^.*\d{1,2}:\d{2}(?:[AP]M)?$
/^[a-zA-Z0-9_-]{1,63}$/
(?<!\d)([1-9]\d{3}|1[012]\d|0[1-9]\d|3[01])/(?<!\d)([1-9]\d{3}|1[012]\d|0[1-9]\d|3[01])/(?<!\d)([1-9
\b(?=\d{1,3}\.)\d{1,3}\b
^(?=.{10}$)(?=.*[8-9])(?=.*[0-9])[0-9]{10}$
(^[a-zA-Z0-9]{4}[a-zA-Z0-9]{3}[a-zA-Z0-9]{2}[0-9]{4}$)
\b[A-Z]{2}[0-9]{5}\b
^(?=.*\d)(?=.*[a-zA
^[a-zA-Z0-9\-_\.]+$
(?i)(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})
(^[0-9]{8}$|^[0-9]{8}$|^[0-9]{8}$|^[0-9]{8}$|^[0-9]{8}$|^[0-9]{8}$|^[0-9]{8}$|^[0-9
[a-zA-Z0-9\.\-,\.\?\!\:\;\,\:\-\(\)]
^(1[0-2]|0?[1-9]
[A-Z][0-9]{1,2}[A-Z]?[0-9]{1,2}[A
^\d{5}$
`^[0-9]*[,.][0-9]*$`
(?i)^(?P<month>\d{1,2})(?P<day>\d{1,2})(?P<year>\d{4})$
^[0-9]{4}-[0-9]{2}-[0-9]{2}[0-9]{2}$
^(?:\d|[*\*\*\*]){0,5}$
[A-Z]{2}\d{2}[A-Z]{2}
(?P<year>\d{4})/(?P<month>\d{2})/(?P<day>\d{2})/(?P<hour>\d{2}):(?P<minute>\d{2}):(?P<second>\d{2})(?
^\d{1,3}-\d{3}\s\d{3}\s\d{4}$
import repattern = r'^[a-zA-Z0-9_\-\.]+$'device = 'eth0'if re.match(pattern, device):    print('Valid Device')else:    print('Invalid Device')
/^(?:(?:\d+\.\d*)|(?:\d+))(?:\.\d+)?$/
[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{4}
^(?:[A-Z][a-z]{1,2}|[A-Z]{1}[a-z]{1,2}|[a-z]{1}[A-Z]{1,2}|[a-z]{1}[a-z]{1}[A-Z
[^0-9]{3}[0-9]{2}[0-9]{1}[0-9]{4}
^\d{4}[a-z]{2}$
package[^\.]*class[^\.]*
[\d]{3}-?[\d]{3}-?[\d]{4}
simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answer:.*[^.].*
Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answer:^[0-9]{1,3}(?:\.[0-9]{1,2})?$
^[0-9]{1,2}[a-zA-Z]{1,2}[0-9]{1,2}[a-zA-Z]{1,2}[0-9]{1,2}[a-zA
(\d{1,2}/\d{1,2}/\d{4}|\d{1,2}/\d{1,2}/\d{4}|\d{1,2}/\d{1,2}/\d{4}|\d{1,2}
[0-9]{1}\.?[0-9]{0,2}
^[1-9][0-9]*[0-9]$|^[1-9][0-9]*[1-9]$|^[1-9][0-9]*[0-9]$
^(\d{1,2})(\d{2})([ap]m)$
lat(?<![\d])[\d]{1,2}(?:\.[\d]{1,2})?
\d{1,2}:\d{2}(AM|PM)
\d{5}(?:\d{4})?
1|2|3|4|5|6|7|8|9|10|11|12
\d{4}-\d{2}-\d{2} \d{2}-\d{2}-\d{4}
^[^*]+$
^[0-9]{8}-[0-9]{4}-99-9999$
\d{4} AA
^(?P<year>\d{4})(?P<month>\d{2})(?P<day>\d{2})(?P<hour>\d{2})(?P<minute>\d{2})(?P<second>\d{2})(?P<timezone>\d{2})$
/^[A-Z][a-z]*( [A-Z][a-z]*)*$/
[aeiou]
For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answer: [0-9]\.[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0
(?<!\')[^']*(?=\')
[0-9]{2}/[0-9]{2}/[0-9]{4} [0-9]{2} (00) [0-9]{2} [0-9]{2}
(?<!\d)\d{1,2}(?:\.\d{1,2})?(?!\d)
^[0-9]{1,5}(?:\.[0-9]{1,2})?$
^[0-9]{1,7}(\.\d{1,9})?$
(?<![\d\.])(?<![\d,])(?<![\d,.])(?<![\d,.])(?<![\d])\d{1,3}(?<![\d,])[\d,.]{0,3}(?<!
(\d{1,3}\.\d{1,3}|\d{1,3})
Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answer: \d+\.\d{0,2}
\d{5}-\d{3}
^\d{1,5}$
This pattern matches italian mobile phone numbers:- Tim (330, 331, 333, 334, 335, 336, 337, 338, 339, 360, 363, 366, 368)- Vodafone Italia (340, 342, 345, 346, 347, 348, 349)- Wind (320, 323, 327, 328, 329, 380, 383, 388, 389)- 3 Italia (390, 391, 392, 393)- RFI (313)- virtual operators (370, 373, 377)Generate a RegEx for this description.
\b(?:(?:0[1-9]|1[012])-(?:[3-9][0-9]|[1-2][0-9]))\b
[0-9]+
[A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z][
^[+-]?[0-9]*\.[0-9]{1,2}$
(?:[a-z]|[A-Z][a-z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+
\b[0-9a-fA-F]{6}\b
^[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}$
\b(?=\d{7,8})(?=\d{8})\d{1,3}\s\d{1,3}\s\d{1,3}\b
[a-zA-Z0-9\s.-]
^(0[1-9][0-9]|1[0-9][
0\.00%|99\.99%
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[a-zA-Z\d@$!%*?&]{8,20}$
[A0-A9]\d*[Aa-z]
(^\+?[0-9]{1,2}\s?[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}\s?[0-9]{1,2}$)
RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answer: r'^[^\d]*(s\d{1,2})(\.part(\d{2}))?$'
(?<=\d{4})(?:\s*[a-z]{3})?[a-z]{3}(?:\s*[a-z]{3})?[a-z]{3}(?:\s*[a-z]{3})?[a-z]{3}(?:\s*[a-z]{3})?[a-z]{3}(?:\s
(^\d{0,3}\.\d{3}-\d{3}\.\d{3}$)
(^\d{1,2}:\d{2}:\d{2}$|^\d{1,2}:\d{2}:\d{2}$|^\d{1,2}:\d{2}:\d{2}$|^\d{1,2}:\d{2}:\d{2}:\d{2}$|^\d{1,2}:\d{2}:\d{2}:\d{2
[A-Za-z]
(\d{1,2})([ap]m)?
Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the. (period) to ensure that no other characters may be used in it's place.Generate a RegEx for this description. Answer: ^-?(?:\d+(,\d+)?|\d+(\.\d+)?)$
string pattern = @"(?<Name>\w+)\s+(?<Age>\d+)\s+(?<Gender>\w+)\s+(?<Height>\d+)\s+(?<Weight>\d+)\s+(?<HeightInches>\d+)\s+(?<WeightInches>\d+)\s+(?<HeightInchesInches>\d+)\s+(?<WeightIn
(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^a-zA-Z\d]).*
Q[0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[
(\d{1,2})(\.\d{1,2})
^[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}$
^([0-9]{1,2})([0-9]{2})([0-9]{4})$
\d{1,2}\s\d{1,2}\s\d{4}
(127.0.0.1|127.0.0.2|127.0.0.3|127.0.0.4|127.0.0.5|127.0.0.6|127.0.0.7|127.0.0.8|127.0.0.9|127.0.0.10|127.0.0.11|
(?<![0-9])([0-9]{2}[-/][0-9]{2}[-/][0-9]{4})(?![0-9])
\d{1,2} \w{3} \d{4}
\d{1,2}[a-zA-Z]{2}\s\d{1,2}\s\d{4}
^(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(?:[0-
This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answer: (?<![0-9])(?:[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[0-9]{2}(?![0-9])
(\d{3})\s?[-\s]?(\d{3})[-\s]?(\d{4})
\d{2}/\d{2}/\d{4} (regex for dd/mm/yyyy)
Fred Flintstone, Barney Rubble, Mr. Flintstone, and Mr. Flintstone's wife.
^(0?[1-9]|1[0-2])\/(0?[1-9]|1[0-2])\/(19|20)\d{2}$
^[a-zA-Z0-9-_]{0,64}$
(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W]).{6,20}
^[aeiou]{1,}$
r'amp([\w\s]+)(?:\s+amp([\w\s]+))*'
(?<!\d)(?<![\d\.])(?<![\d\.]{2})[\d\.]{2}(?!\d)(?![\d\.]{2})
(.*)(?=GB)(?!GB)
[^a-zA-Z0-9\*]
^(4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9])[0-9]{13,16}$
^([0-9]{3})([0-9]{3})([0-9]{3})$
"Q[0-9]*$"
^[A-Z]{1}[0-9]{4}[A-Z]$
^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=]{2,}).{2,}$
This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answer:^[a-zA-Z0-9]{2,3}\.?[a-zA-Z0-9]{2,3}\.?[a-zA-
match string between chars'' as in source codeGenerate a RegEx for this description. Answer: (?<=\s)\d+
^[a-zA-Z][a-zA-Z0-9_]*[a-zA-Z0-9_]$
(?<![\d-])(?<![\d-])([0-9]{4})-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])
r"^(?P<base>\d+)(?:\.(?P<exponent>\d+))?$"
(?<![a-zA-Z])(?<![A-Z])[a-z]{2}(?![A-Z])
^(?=.*[a-f])(?=.*[0-9])(?=.*[A-Fa-f])[a-f0-9]{32}$
(^[A-Z]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0
^[+-]?0*([1-9]\d*[.]\d+)?$
(?<=\#)([0-9A-Fa-f]{3})(?=\#)
"^(?:[0-9]|1[0-9]|2[0-4][0-9]|25[0-5])\.\.(?:[0-9]|1[0-9]|2[0-4][0-9]|25[0-5])\.\.(?:[0-9]|1[0-9]|2[0-4][0-
^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])
^\(?[1-9]\d?\)?[1-9]\d?\)?[1-9]\d?$
^\+[1-9][0-9]{1,2}$
^(?:(?!800|900)(?:\d{3}-){3})?[\+\s]?\d{3}-\d{4}$
